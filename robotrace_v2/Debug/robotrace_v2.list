
robotrace_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001379c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001334  08013970  08013970  00023970  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014ca4  08014ca4  00030240  2**0
                  CONTENTS
  4 .ARM          00000008  08014ca4  08014ca4  00024ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014cac  08014cac  00030240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014cac  08014cac  00024cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014cb0  08014cb0  00024cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  08014cb4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003cf0  20000240  08014ef4  00030240  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003f30  08014ef4  00033f30  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030240  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003026e  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ca92  00000000  00000000  000302b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004dc1  00000000  00000000  0004cd43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001998  00000000  00000000  00051b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013a0  00000000  00000000  000534a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bc16  00000000  00000000  00054840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029c67  00000000  00000000  00080456  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e536f  00000000  00000000  000aa0bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008028  00000000  00000000  0018f42c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  00197454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000240 	.word	0x20000240
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08013954 	.word	0x08013954

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000244 	.word	0x20000244
 800020c:	08013954 	.word	0x08013954

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a6 	b.w	800102c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9e08      	ldr	r6, [sp, #32]
 8000d6a:	460d      	mov	r5, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	460f      	mov	r7, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4694      	mov	ip, r2
 8000d78:	d965      	bls.n	8000e46 <__udivmoddi4+0xe2>
 8000d7a:	fab2 f382 	clz	r3, r2
 8000d7e:	b143      	cbz	r3, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	f1c3 0220 	rsb	r2, r3, #32
 8000d88:	409f      	lsls	r7, r3
 8000d8a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	409c      	lsls	r4, r3
 8000d92:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d96:	fa1f f58c 	uxth.w	r5, ip
 8000d9a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d9e:	0c22      	lsrs	r2, r4, #16
 8000da0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000da4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000da8:	fb01 f005 	mul.w	r0, r1, r5
 8000dac:	4290      	cmp	r0, r2
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db0:	eb1c 0202 	adds.w	r2, ip, r2
 8000db4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000db8:	f080 811c 	bcs.w	8000ff4 <__udivmoddi4+0x290>
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	f240 8119 	bls.w	8000ff4 <__udivmoddi4+0x290>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	4462      	add	r2, ip
 8000dc6:	1a12      	subs	r2, r2, r0
 8000dc8:	b2a4      	uxth	r4, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dd6:	fb00 f505 	mul.w	r5, r0, r5
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	d90a      	bls.n	8000df4 <__udivmoddi4+0x90>
 8000dde:	eb1c 0404 	adds.w	r4, ip, r4
 8000de2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de6:	f080 8107 	bcs.w	8000ff8 <__udivmoddi4+0x294>
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	f240 8104 	bls.w	8000ff8 <__udivmoddi4+0x294>
 8000df0:	4464      	add	r4, ip
 8000df2:	3802      	subs	r0, #2
 8000df4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df8:	1b64      	subs	r4, r4, r5
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11e      	cbz	r6, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40dc      	lsrs	r4, r3
 8000e00:	2300      	movs	r3, #0
 8000e02:	e9c6 4300 	strd	r4, r3, [r6]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0xbc>
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	f000 80ed 	beq.w	8000fee <__udivmoddi4+0x28a>
 8000e14:	2100      	movs	r1, #0
 8000e16:	e9c6 0500 	strd	r0, r5, [r6]
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e20:	fab3 f183 	clz	r1, r3
 8000e24:	2900      	cmp	r1, #0
 8000e26:	d149      	bne.n	8000ebc <__udivmoddi4+0x158>
 8000e28:	42ab      	cmp	r3, r5
 8000e2a:	d302      	bcc.n	8000e32 <__udivmoddi4+0xce>
 8000e2c:	4282      	cmp	r2, r0
 8000e2e:	f200 80f8 	bhi.w	8001022 <__udivmoddi4+0x2be>
 8000e32:	1a84      	subs	r4, r0, r2
 8000e34:	eb65 0203 	sbc.w	r2, r5, r3
 8000e38:	2001      	movs	r0, #1
 8000e3a:	4617      	mov	r7, r2
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d0e2      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	e9c6 4700 	strd	r4, r7, [r6]
 8000e44:	e7df      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e46:	b902      	cbnz	r2, 8000e4a <__udivmoddi4+0xe6>
 8000e48:	deff      	udf	#255	; 0xff
 8000e4a:	fab2 f382 	clz	r3, r2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f040 8090 	bne.w	8000f74 <__udivmoddi4+0x210>
 8000e54:	1a8a      	subs	r2, r1, r2
 8000e56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e5a:	fa1f fe8c 	uxth.w	lr, ip
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e64:	fb07 2015 	mls	r0, r7, r5, r2
 8000e68:	0c22      	lsrs	r2, r4, #16
 8000e6a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e6e:	fb0e f005 	mul.w	r0, lr, r5
 8000e72:	4290      	cmp	r0, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x124>
 8000e76:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x122>
 8000e80:	4290      	cmp	r0, r2
 8000e82:	f200 80cb 	bhi.w	800101c <__udivmoddi4+0x2b8>
 8000e86:	4645      	mov	r5, r8
 8000e88:	1a12      	subs	r2, r2, r0
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e90:	fb07 2210 	mls	r2, r7, r0, r2
 8000e94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e98:	fb0e fe00 	mul.w	lr, lr, r0
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x14e>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ea8:	d202      	bcs.n	8000eb0 <__udivmoddi4+0x14c>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	f200 80bb 	bhi.w	8001026 <__udivmoddi4+0x2c2>
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	eba4 040e 	sub.w	r4, r4, lr
 8000eb6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eba:	e79f      	b.n	8000dfc <__udivmoddi4+0x98>
 8000ebc:	f1c1 0720 	rsb	r7, r1, #32
 8000ec0:	408b      	lsls	r3, r1
 8000ec2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ec6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eca:	fa05 f401 	lsl.w	r4, r5, r1
 8000ece:	fa20 f307 	lsr.w	r3, r0, r7
 8000ed2:	40fd      	lsrs	r5, r7
 8000ed4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed8:	4323      	orrs	r3, r4
 8000eda:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ede:	fa1f fe8c 	uxth.w	lr, ip
 8000ee2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ee6:	0c1c      	lsrs	r4, r3, #16
 8000ee8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eec:	fb08 f50e 	mul.w	r5, r8, lr
 8000ef0:	42a5      	cmp	r5, r4
 8000ef2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef6:	fa00 f001 	lsl.w	r0, r0, r1
 8000efa:	d90b      	bls.n	8000f14 <__udivmoddi4+0x1b0>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f04:	f080 8088 	bcs.w	8001018 <__udivmoddi4+0x2b4>
 8000f08:	42a5      	cmp	r5, r4
 8000f0a:	f240 8085 	bls.w	8001018 <__udivmoddi4+0x2b4>
 8000f0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f12:	4464      	add	r4, ip
 8000f14:	1b64      	subs	r4, r4, r5
 8000f16:	b29d      	uxth	r5, r3
 8000f18:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f1c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f20:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f24:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f28:	45a6      	cmp	lr, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x1da>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f34:	d26c      	bcs.n	8001010 <__udivmoddi4+0x2ac>
 8000f36:	45a6      	cmp	lr, r4
 8000f38:	d96a      	bls.n	8001010 <__udivmoddi4+0x2ac>
 8000f3a:	3b02      	subs	r3, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f42:	fba3 9502 	umull	r9, r5, r3, r2
 8000f46:	eba4 040e 	sub.w	r4, r4, lr
 8000f4a:	42ac      	cmp	r4, r5
 8000f4c:	46c8      	mov	r8, r9
 8000f4e:	46ae      	mov	lr, r5
 8000f50:	d356      	bcc.n	8001000 <__udivmoddi4+0x29c>
 8000f52:	d053      	beq.n	8000ffc <__udivmoddi4+0x298>
 8000f54:	b156      	cbz	r6, 8000f6c <__udivmoddi4+0x208>
 8000f56:	ebb0 0208 	subs.w	r2, r0, r8
 8000f5a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f62:	40ca      	lsrs	r2, r1
 8000f64:	40cc      	lsrs	r4, r1
 8000f66:	4317      	orrs	r7, r2
 8000f68:	e9c6 7400 	strd	r7, r4, [r6]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f74:	f1c3 0120 	rsb	r1, r3, #32
 8000f78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f7c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f80:	fa25 f101 	lsr.w	r1, r5, r1
 8000f84:	409d      	lsls	r5, r3
 8000f86:	432a      	orrs	r2, r5
 8000f88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f8c:	fa1f fe8c 	uxth.w	lr, ip
 8000f90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f94:	fb07 1510 	mls	r5, r7, r0, r1
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f9e:	fb00 f50e 	mul.w	r5, r0, lr
 8000fa2:	428d      	cmp	r5, r1
 8000fa4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x258>
 8000faa:	eb1c 0101 	adds.w	r1, ip, r1
 8000fae:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fb2:	d22f      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fb4:	428d      	cmp	r5, r1
 8000fb6:	d92d      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fb8:	3802      	subs	r0, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	1b49      	subs	r1, r1, r5
 8000fbe:	b292      	uxth	r2, r2
 8000fc0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fc4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fc8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fcc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fd0:	4291      	cmp	r1, r2
 8000fd2:	d908      	bls.n	8000fe6 <__udivmoddi4+0x282>
 8000fd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fd8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fdc:	d216      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000fde:	4291      	cmp	r1, r2
 8000fe0:	d914      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000fe2:	3d02      	subs	r5, #2
 8000fe4:	4462      	add	r2, ip
 8000fe6:	1a52      	subs	r2, r2, r1
 8000fe8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fec:	e738      	b.n	8000e60 <__udivmoddi4+0xfc>
 8000fee:	4631      	mov	r1, r6
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	e708      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000ff4:	4639      	mov	r1, r7
 8000ff6:	e6e6      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	e6fb      	b.n	8000df4 <__udivmoddi4+0x90>
 8000ffc:	4548      	cmp	r0, r9
 8000ffe:	d2a9      	bcs.n	8000f54 <__udivmoddi4+0x1f0>
 8001000:	ebb9 0802 	subs.w	r8, r9, r2
 8001004:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001008:	3b01      	subs	r3, #1
 800100a:	e7a3      	b.n	8000f54 <__udivmoddi4+0x1f0>
 800100c:	4645      	mov	r5, r8
 800100e:	e7ea      	b.n	8000fe6 <__udivmoddi4+0x282>
 8001010:	462b      	mov	r3, r5
 8001012:	e794      	b.n	8000f3e <__udivmoddi4+0x1da>
 8001014:	4640      	mov	r0, r8
 8001016:	e7d1      	b.n	8000fbc <__udivmoddi4+0x258>
 8001018:	46d0      	mov	r8, sl
 800101a:	e77b      	b.n	8000f14 <__udivmoddi4+0x1b0>
 800101c:	3d02      	subs	r5, #2
 800101e:	4462      	add	r2, ip
 8001020:	e732      	b.n	8000e88 <__udivmoddi4+0x124>
 8001022:	4608      	mov	r0, r1
 8001024:	e70a      	b.n	8000e3c <__udivmoddi4+0xd8>
 8001026:	4464      	add	r4, ip
 8001028:	3802      	subs	r0, #2
 800102a:	e742      	b.n	8000eb2 <__udivmoddi4+0x14e>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <BMI088ReadByteByte>:
// モジュール名 BMI088ReadByte
// 処理概要     指定レジスタの値を読み出す
// 引数         reg: レジスタのアドレス
// 戻り値       読み出した値
////////////////////////////////////////////////////////////////////
uint8_t BMI088ReadByteByte( uint8_t reg ) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
	uint8_t txData,rxData;
	uint8_t txNum=1,rxNum=1;
 800103a:	2301      	movs	r3, #1
 800103c:	73fb      	strb	r3, [r7, #15]
 800103e:	2301      	movs	r3, #1
 8001040:	73bb      	strb	r3, [r7, #14]
	
	txData = reg | 0x80;
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001048:	b2db      	uxtb	r3, r3
 800104a:	737b      	strb	r3, [r7, #13]
	CSB2_RESET;
 800104c:	2200      	movs	r2, #0
 800104e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001052:	4810      	ldr	r0, [pc, #64]	; (8001094 <BMI088ReadByteByte+0x64>)
 8001054:	f006 fd74 	bl	8007b40 <HAL_GPIO_WritePin>
	BMI088TRANSFER;
 8001058:	7bfb      	ldrb	r3, [r7, #15]
 800105a:	b29a      	uxth	r2, r3
 800105c:	f107 010d 	add.w	r1, r7, #13
 8001060:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001064:	480c      	ldr	r0, [pc, #48]	; (8001098 <BMI088ReadByteByte+0x68>)
 8001066:	f008 f808 	bl	800907a <HAL_SPI_Transmit>
    BMI088RECEIVE;
 800106a:	7bbb      	ldrb	r3, [r7, #14]
 800106c:	b29a      	uxth	r2, r3
 800106e:	f107 010c 	add.w	r1, r7, #12
 8001072:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001076:	4808      	ldr	r0, [pc, #32]	; (8001098 <BMI088ReadByteByte+0x68>)
 8001078:	f008 f93b 	bl	80092f2 <HAL_SPI_Receive>
	CSB2_SET;
 800107c:	2201      	movs	r2, #1
 800107e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001082:	4804      	ldr	r0, [pc, #16]	; (8001094 <BMI088ReadByteByte+0x64>)
 8001084:	f006 fd5c 	bl	8007b40 <HAL_GPIO_WritePin>
	
	return rxData;
 8001088:	7b3b      	ldrb	r3, [r7, #12]
}
 800108a:	4618      	mov	r0, r3
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40020000 	.word	0x40020000
 8001098:	20003524 	.word	0x20003524

0800109c <BMI088WriteByte>:
// モジュール名 BMI088WriteByte
// 処理概要     指定レジスタに値を書き込む
// 引数         reg: レジスタのアドレス val: 書き込む値
// 戻り値       なし
////////////////////////////////////////////////////////////////////
void BMI088WriteByte( uint8_t reg, uint8_t val )  {
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	460a      	mov	r2, r1
 80010a6:	71fb      	strb	r3, [r7, #7]
 80010a8:	4613      	mov	r3, r2
 80010aa:	71bb      	strb	r3, [r7, #6]
	uint8_t txData[2]={reg & 0x7F,val};
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	733b      	strb	r3, [r7, #12]
 80010b6:	79bb      	ldrb	r3, [r7, #6]
 80010b8:	737b      	strb	r3, [r7, #13]
	uint8_t txNum=2;
 80010ba:	2302      	movs	r3, #2
 80010bc:	73fb      	strb	r3, [r7, #15]
	
	CSB2_RESET;
 80010be:	2200      	movs	r2, #0
 80010c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010c4:	480a      	ldr	r0, [pc, #40]	; (80010f0 <BMI088WriteByte+0x54>)
 80010c6:	f006 fd3b 	bl	8007b40 <HAL_GPIO_WritePin>
	BMI088TRANSFER;
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
 80010cc:	b29a      	uxth	r2, r3
 80010ce:	f107 010c 	add.w	r1, r7, #12
 80010d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d6:	4807      	ldr	r0, [pc, #28]	; (80010f4 <BMI088WriteByte+0x58>)
 80010d8:	f007 ffcf 	bl	800907a <HAL_SPI_Transmit>
	CSB2_SET;
 80010dc:	2201      	movs	r2, #1
 80010de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010e2:	4803      	ldr	r0, [pc, #12]	; (80010f0 <BMI088WriteByte+0x54>)
 80010e4:	f006 fd2c 	bl	8007b40 <HAL_GPIO_WritePin>
}
 80010e8:	bf00      	nop
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40020000 	.word	0x40020000
 80010f4:	20003524 	.word	0x20003524

080010f8 <BMI088ReadAxisData>:
// モジュール名 BMI088ReadAxisData
// 処理概要     指定レジスタの読み出し
// 引数         reg:レジスタアドレス
// 戻り値       読み出したデータ
/////////////////////////////////////////////////////////////////////
void BMI088ReadAxisData(uint8_t reg, uint8_t *rxData ) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	6039      	str	r1, [r7, #0]
 8001102:	71fb      	strb	r3, [r7, #7]
    uint8_t txData;
	uint8_t txNum=1,rxNum=6;
 8001104:	2301      	movs	r3, #1
 8001106:	73fb      	strb	r3, [r7, #15]
 8001108:	2306      	movs	r3, #6
 800110a:	73bb      	strb	r3, [r7, #14]

	txData = reg | 0x80;
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001112:	b2db      	uxtb	r3, r3
 8001114:	737b      	strb	r3, [r7, #13]

    CSB2_RESET;
 8001116:	2200      	movs	r2, #0
 8001118:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800111c:	480e      	ldr	r0, [pc, #56]	; (8001158 <BMI088ReadAxisData+0x60>)
 800111e:	f006 fd0f 	bl	8007b40 <HAL_GPIO_WritePin>
	BMI088TRANSFER;
 8001122:	7bfb      	ldrb	r3, [r7, #15]
 8001124:	b29a      	uxth	r2, r3
 8001126:	f107 010d 	add.w	r1, r7, #13
 800112a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112e:	480b      	ldr	r0, [pc, #44]	; (800115c <BMI088ReadAxisData+0x64>)
 8001130:	f007 ffa3 	bl	800907a <HAL_SPI_Transmit>
    BMI088RECEIVES;
 8001134:	7bbb      	ldrb	r3, [r7, #14]
 8001136:	b29a      	uxth	r2, r3
 8001138:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800113c:	6839      	ldr	r1, [r7, #0]
 800113e:	4807      	ldr	r0, [pc, #28]	; (800115c <BMI088ReadAxisData+0x64>)
 8001140:	f008 f8d7 	bl	80092f2 <HAL_SPI_Receive>
	CSB2_SET;
 8001144:	2201      	movs	r2, #1
 8001146:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800114a:	4803      	ldr	r0, [pc, #12]	; (8001158 <BMI088ReadAxisData+0x60>)
 800114c:	f006 fcf8 	bl	8007b40 <HAL_GPIO_WritePin>
}
 8001150:	bf00      	nop
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40020000 	.word	0x40020000
 800115c:	20003524 	.word	0x20003524

08001160 <initBMI088>:
// モジュール名 initBMI088
// 処理概要     初期設定パラメータの書き込み
// 引数         なし
// 戻り値       なし
/////////////////////////////////////////////////////////////////////
bool initBMI088(void) {
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
    if(BMI088ReadByteByte(0x00) == 0xf) {
 8001164:	2000      	movs	r0, #0
 8001166:	f7ff ff63 	bl	8001030 <BMI088ReadByteByte>
 800116a:	4603      	mov	r3, r0
 800116c:	2b0f      	cmp	r3, #15
 800116e:	d10c      	bne.n	800118a <initBMI088+0x2a>
		BMI088WriteByte(0x14,0xB6);	// ソフトウェアリセット
 8001170:	21b6      	movs	r1, #182	; 0xb6
 8001172:	2014      	movs	r0, #20
 8001174:	f7ff ff92 	bl	800109c <BMI088WriteByte>
		HAL_Delay(40);
 8001178:	2028      	movs	r0, #40	; 0x28
 800117a:	f005 f8d9 	bl	8006330 <HAL_Delay>
        // コンフィグ設定

        // 加速
        
        // ジャイロ
        BMI088WriteByte(0x10,0x84);	// BANDWIDTHを200Hzに設定
 800117e:	2184      	movs	r1, #132	; 0x84
 8001180:	2010      	movs	r0, #16
 8001182:	f7ff ff8b 	bl	800109c <BMI088WriteByte>
        // モード変更
 
        return true;
 8001186:	2301      	movs	r3, #1
 8001188:	e000      	b.n	800118c <initBMI088+0x2c>
    } else {
        return false;
 800118a:	2300      	movs	r3, #0
    }
}
 800118c:	4618      	mov	r0, r3
 800118e:	bd80      	pop	{r7, pc}

08001190 <BMI088getGyro>:
// モジュール名 BMI088getGyro
// 処理概要     角速度の取得
// 引数         なし
// 戻り値       なし
/////////////////////////////////////////////////////////////////////
void BMI088getGyro(void) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
    uint8_t rawData[6];
	int16_t gyroVal[3], i;

	// 角速度の生データを取得
	BMI088ReadAxisData(0x02,rawData);
 8001196:	f107 0308 	add.w	r3, r7, #8
 800119a:	4619      	mov	r1, r3
 800119c:	2002      	movs	r0, #2
 800119e:	f7ff ffab 	bl	80010f8 <BMI088ReadAxisData>
	for(i=0;i<3;i++) {
 80011a2:	2300      	movs	r3, #0
 80011a4:	81fb      	strh	r3, [r7, #14]
 80011a6:	e020      	b.n	80011ea <BMI088getGyro+0x5a>
		gyroVal[i] = (rawData[(i*2)+1] << 8) | rawData[i*2];	// LSBとMSBを結合
 80011a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	3301      	adds	r3, #1
 80011b0:	3310      	adds	r3, #16
 80011b2:	443b      	add	r3, r7
 80011b4:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80011b8:	021b      	lsls	r3, r3, #8
 80011ba:	b219      	sxth	r1, r3
 80011bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	3310      	adds	r3, #16
 80011c4:	443b      	add	r3, r7
 80011c6:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80011ca:	b21a      	sxth	r2, r3
 80011cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011d0:	430a      	orrs	r2, r1
 80011d2:	b212      	sxth	r2, r2
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	3310      	adds	r3, #16
 80011d8:	443b      	add	r3, r7
 80011da:	f823 2c10 	strh.w	r2, [r3, #-16]
	for(i=0;i<3;i++) {
 80011de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	3301      	adds	r3, #1
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	81fb      	strh	r3, [r7, #14]
 80011ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	ddda      	ble.n	80011a8 <BMI088getGyro+0x18>
	}

    BMI088val.gyro.x = (float)gyroVal[0] / GYROLSB;
 80011f2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80011f6:	ee07 3a90 	vmov	s15, r3
 80011fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011fe:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001248 <BMI088getGyro+0xb8>
 8001202:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001206:	4b11      	ldr	r3, [pc, #68]	; (800124c <BMI088getGyro+0xbc>)
 8001208:	edc3 7a03 	vstr	s15, [r3, #12]
    BMI088val.gyro.y = (float)gyroVal[1] / GYROLSB;
 800120c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001210:	ee07 3a90 	vmov	s15, r3
 8001214:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001218:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001248 <BMI088getGyro+0xb8>
 800121c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001220:	4b0a      	ldr	r3, [pc, #40]	; (800124c <BMI088getGyro+0xbc>)
 8001222:	edc3 7a04 	vstr	s15, [r3, #16]
    BMI088val.gyro.z = (float)gyroVal[2] / GYROLSB;
 8001226:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800122a:	ee07 3a90 	vmov	s15, r3
 800122e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001232:	eddf 6a05 	vldr	s13, [pc, #20]	; 8001248 <BMI088getGyro+0xb8>
 8001236:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800123a:	4b04      	ldr	r3, [pc, #16]	; (800124c <BMI088getGyro+0xbc>)
 800123c:	edc3 7a05 	vstr	s15, [r3, #20]

}
 8001240:	bf00      	nop
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	4183126f 	.word	0x4183126f
 800124c:	2000025c 	.word	0x2000025c

08001250 <calcDegrees>:
// モジュール名 calcDegrees
// 処理概要     角度の計算
// 引数         なし
// 戻り値       なし
/////////////////////////////////////////////////////////////////////
void calcDegrees(void) {
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
    BMI088val.angle.x += BMI088val.gyro.x * DEFF_TIME;
 8001254:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <calcDegrees+0x68>)
 8001256:	ed93 7a06 	vldr	s14, [r3, #24]
 800125a:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <calcDegrees+0x68>)
 800125c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001260:	eddf 6a16 	vldr	s13, [pc, #88]	; 80012bc <calcDegrees+0x6c>
 8001264:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001268:	ee77 7a27 	vadd.f32	s15, s14, s15
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <calcDegrees+0x68>)
 800126e:	edc3 7a06 	vstr	s15, [r3, #24]
    BMI088val.angle.y += BMI088val.gyro.y * DEFF_TIME;
 8001272:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <calcDegrees+0x68>)
 8001274:	ed93 7a07 	vldr	s14, [r3, #28]
 8001278:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <calcDegrees+0x68>)
 800127a:	edd3 7a04 	vldr	s15, [r3, #16]
 800127e:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80012bc <calcDegrees+0x6c>
 8001282:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001286:	ee77 7a27 	vadd.f32	s15, s14, s15
 800128a:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <calcDegrees+0x68>)
 800128c:	edc3 7a07 	vstr	s15, [r3, #28]
    BMI088val.angle.z += BMI088val.gyro.z * DEFF_TIME;   
 8001290:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <calcDegrees+0x68>)
 8001292:	ed93 7a08 	vldr	s14, [r3, #32]
 8001296:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <calcDegrees+0x68>)
 8001298:	edd3 7a05 	vldr	s15, [r3, #20]
 800129c:	eddf 6a07 	vldr	s13, [pc, #28]	; 80012bc <calcDegrees+0x6c>
 80012a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80012a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012a8:	4b03      	ldr	r3, [pc, #12]	; (80012b8 <calcDegrees+0x68>)
 80012aa:	edc3 7a08 	vstr	s15, [r3, #32]
}
 80012ae:	bf00      	nop
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	2000025c 	.word	0x2000025c
 80012bc:	3c23d70a 	.word	0x3c23d70a

080012c0 <setTargetSpeed>:
// モジュール名 setTargetSpeed
// 処理概要     目標速度の設定
// 引数         目標速度の整数倍値
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////
void setTargetSpeed (float speed) {
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
	targetSpeed = (int16_t)(speed*PALSE_MILLIMETER);
 80012c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80012cc:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80012f0 <setTargetSpeed+0x30>
 80012d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012d8:	ee17 3a90 	vmov	r3, s15
 80012dc:	b21a      	sxth	r2, r3
 80012de:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <setTargetSpeed+0x34>)
 80012e0:	801a      	strh	r2, [r3, #0]
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	42704bc7 	.word	0x42704bc7
 80012f4:	20000280 	.word	0x20000280

080012f8 <setTargetAngularVelocity>:
// モジュール名 setTargetAngularVelocity
// 処理概要     目標角速度の設定
// 引数         目標角速度[rad/s]
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////
void setTargetAngularVelocity (float angularVelocity) {
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
	targetAngularVelocity = angularVelocity;
 8001300:	4a04      	ldr	r2, [pc, #16]	; (8001314 <setTargetAngularVelocity+0x1c>)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6013      	str	r3, [r2, #0]
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	20000288 	.word	0x20000288

08001318 <motorControlTrace>:
// モジュール名 motorControlTrace
// 処理概要     ライントレース時の制御量の計算
// 引数         なし
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////
void motorControlTrace( void ) {
 8001318:	b5b0      	push	{r4, r5, r7, lr}
 800131a:	b088      	sub	sp, #32
 800131c:	af00      	add	r7, sp, #0
	int32_t 		iP, iD, iI, iRet, Dev, Dif, senL, senR;
	static int32_t 	traceBefore;
	
	//サーボモータ用PWM値計算
	if (lSensorOffset[0] > 0)	{
 800131e:	4bae      	ldr	r3, [pc, #696]	; (80015d8 <motorControlTrace+0x2c0>)
 8001320:	881b      	ldrh	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	f000 80b7 	beq.w	8001496 <motorControlTrace+0x17e>
		senL = (lSensorCari[4]) + (lSensorCari[3]*0.6) + (lSensorCari[2]*0.2) + (lSensorCari[1]*0.2) + (lSensorCari[0]*0.1);
 8001328:	4bac      	ldr	r3, [pc, #688]	; (80015dc <motorControlTrace+0x2c4>)
 800132a:	891b      	ldrh	r3, [r3, #8]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff f919 	bl	8000564 <__aeabi_i2d>
 8001332:	4604      	mov	r4, r0
 8001334:	460d      	mov	r5, r1
 8001336:	4ba9      	ldr	r3, [pc, #676]	; (80015dc <motorControlTrace+0x2c4>)
 8001338:	88db      	ldrh	r3, [r3, #6]
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff f912 	bl	8000564 <__aeabi_i2d>
 8001340:	a39d      	add	r3, pc, #628	; (adr r3, 80015b8 <motorControlTrace+0x2a0>)
 8001342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001346:	f7ff f977 	bl	8000638 <__aeabi_dmul>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	4620      	mov	r0, r4
 8001350:	4629      	mov	r1, r5
 8001352:	f7fe ffbb 	bl	80002cc <__adddf3>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4614      	mov	r4, r2
 800135c:	461d      	mov	r5, r3
 800135e:	4b9f      	ldr	r3, [pc, #636]	; (80015dc <motorControlTrace+0x2c4>)
 8001360:	889b      	ldrh	r3, [r3, #4]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff f8fe 	bl	8000564 <__aeabi_i2d>
 8001368:	a395      	add	r3, pc, #596	; (adr r3, 80015c0 <motorControlTrace+0x2a8>)
 800136a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136e:	f7ff f963 	bl	8000638 <__aeabi_dmul>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	4620      	mov	r0, r4
 8001378:	4629      	mov	r1, r5
 800137a:	f7fe ffa7 	bl	80002cc <__adddf3>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	4614      	mov	r4, r2
 8001384:	461d      	mov	r5, r3
 8001386:	4b95      	ldr	r3, [pc, #596]	; (80015dc <motorControlTrace+0x2c4>)
 8001388:	885b      	ldrh	r3, [r3, #2]
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff f8ea 	bl	8000564 <__aeabi_i2d>
 8001390:	a38b      	add	r3, pc, #556	; (adr r3, 80015c0 <motorControlTrace+0x2a8>)
 8001392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001396:	f7ff f94f 	bl	8000638 <__aeabi_dmul>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	4620      	mov	r0, r4
 80013a0:	4629      	mov	r1, r5
 80013a2:	f7fe ff93 	bl	80002cc <__adddf3>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	4614      	mov	r4, r2
 80013ac:	461d      	mov	r5, r3
 80013ae:	4b8b      	ldr	r3, [pc, #556]	; (80015dc <motorControlTrace+0x2c4>)
 80013b0:	881b      	ldrh	r3, [r3, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff f8d6 	bl	8000564 <__aeabi_i2d>
 80013b8:	a383      	add	r3, pc, #524	; (adr r3, 80015c8 <motorControlTrace+0x2b0>)
 80013ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013be:	f7ff f93b 	bl	8000638 <__aeabi_dmul>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	4620      	mov	r0, r4
 80013c8:	4629      	mov	r1, r5
 80013ca:	f7fe ff7f 	bl	80002cc <__adddf3>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	4610      	mov	r0, r2
 80013d4:	4619      	mov	r1, r3
 80013d6:	f7ff fbdf 	bl	8000b98 <__aeabi_d2iz>
 80013da:	4603      	mov	r3, r0
 80013dc:	61bb      	str	r3, [r7, #24]
		senR = (lSensorCari[5]) + (lSensorCari[6]*0.6) + (lSensorCari[7]*0.2) + (lSensorCari[8]*0.2) + (lSensorCari[9]*0.1);
 80013de:	4b7f      	ldr	r3, [pc, #508]	; (80015dc <motorControlTrace+0x2c4>)
 80013e0:	895b      	ldrh	r3, [r3, #10]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff f8be 	bl	8000564 <__aeabi_i2d>
 80013e8:	4604      	mov	r4, r0
 80013ea:	460d      	mov	r5, r1
 80013ec:	4b7b      	ldr	r3, [pc, #492]	; (80015dc <motorControlTrace+0x2c4>)
 80013ee:	899b      	ldrh	r3, [r3, #12]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff f8b7 	bl	8000564 <__aeabi_i2d>
 80013f6:	a370      	add	r3, pc, #448	; (adr r3, 80015b8 <motorControlTrace+0x2a0>)
 80013f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fc:	f7ff f91c 	bl	8000638 <__aeabi_dmul>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	4620      	mov	r0, r4
 8001406:	4629      	mov	r1, r5
 8001408:	f7fe ff60 	bl	80002cc <__adddf3>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	4614      	mov	r4, r2
 8001412:	461d      	mov	r5, r3
 8001414:	4b71      	ldr	r3, [pc, #452]	; (80015dc <motorControlTrace+0x2c4>)
 8001416:	89db      	ldrh	r3, [r3, #14]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff f8a3 	bl	8000564 <__aeabi_i2d>
 800141e:	a368      	add	r3, pc, #416	; (adr r3, 80015c0 <motorControlTrace+0x2a8>)
 8001420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001424:	f7ff f908 	bl	8000638 <__aeabi_dmul>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4620      	mov	r0, r4
 800142e:	4629      	mov	r1, r5
 8001430:	f7fe ff4c 	bl	80002cc <__adddf3>
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	4614      	mov	r4, r2
 800143a:	461d      	mov	r5, r3
 800143c:	4b67      	ldr	r3, [pc, #412]	; (80015dc <motorControlTrace+0x2c4>)
 800143e:	8a1b      	ldrh	r3, [r3, #16]
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff f88f 	bl	8000564 <__aeabi_i2d>
 8001446:	a35e      	add	r3, pc, #376	; (adr r3, 80015c0 <motorControlTrace+0x2a8>)
 8001448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144c:	f7ff f8f4 	bl	8000638 <__aeabi_dmul>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	4620      	mov	r0, r4
 8001456:	4629      	mov	r1, r5
 8001458:	f7fe ff38 	bl	80002cc <__adddf3>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4614      	mov	r4, r2
 8001462:	461d      	mov	r5, r3
 8001464:	4b5d      	ldr	r3, [pc, #372]	; (80015dc <motorControlTrace+0x2c4>)
 8001466:	8a5b      	ldrh	r3, [r3, #18]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff f87b 	bl	8000564 <__aeabi_i2d>
 800146e:	a356      	add	r3, pc, #344	; (adr r3, 80015c8 <motorControlTrace+0x2b0>)
 8001470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001474:	f7ff f8e0 	bl	8000638 <__aeabi_dmul>
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	4620      	mov	r0, r4
 800147e:	4629      	mov	r1, r5
 8001480:	f7fe ff24 	bl	80002cc <__adddf3>
 8001484:	4602      	mov	r2, r0
 8001486:	460b      	mov	r3, r1
 8001488:	4610      	mov	r0, r2
 800148a:	4619      	mov	r1, r3
 800148c:	f7ff fb84 	bl	8000b98 <__aeabi_d2iz>
 8001490:	4603      	mov	r3, r0
 8001492:	617b      	str	r3, [r7, #20]
 8001494:	e005      	b.n	80014a2 <motorControlTrace+0x18a>
	} else {
		// senL = (lSensor[4]) + (lSensor[3]*0.8) + (lSensor[2]*0.7) + (lSensor[1]*0.5) + (lSensor[0]*0.3);
		// senR = (lSensor[5]) + (lSensor[6]*0.8) + (lSensor[7]*0.7) + (lSensor[8]*0.5) + (lSensor[9]*0.3);
		senL = (lSensor[5]);
 8001496:	4b52      	ldr	r3, [pc, #328]	; (80015e0 <motorControlTrace+0x2c8>)
 8001498:	895b      	ldrh	r3, [r3, #10]
 800149a:	61bb      	str	r3, [r7, #24]
		senR = (lSensor[6]);
 800149c:	4b50      	ldr	r3, [pc, #320]	; (80015e0 <motorControlTrace+0x2c8>)
 800149e:	899b      	ldrh	r3, [r3, #12]
 80014a0:	617b      	str	r3, [r7, #20]
	}
	Dev = senL - senR;
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	613b      	str	r3, [r7, #16]
		
	// I成分積算
	lineTraceCtrl.Int += (float)Dev * 0.001;
 80014aa:	4b4e      	ldr	r3, [pc, #312]	; (80015e4 <motorControlTrace+0x2cc>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff f86a 	bl	8000588 <__aeabi_f2d>
 80014b4:	4604      	mov	r4, r0
 80014b6:	460d      	mov	r5, r1
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	ee07 3a90 	vmov	s15, r3
 80014be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014c2:	ee17 0a90 	vmov	r0, s15
 80014c6:	f7ff f85f 	bl	8000588 <__aeabi_f2d>
 80014ca:	a341      	add	r3, pc, #260	; (adr r3, 80015d0 <motorControlTrace+0x2b8>)
 80014cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d0:	f7ff f8b2 	bl	8000638 <__aeabi_dmul>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	4620      	mov	r0, r4
 80014da:	4629      	mov	r1, r5
 80014dc:	f7fe fef6 	bl	80002cc <__adddf3>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	4610      	mov	r0, r2
 80014e6:	4619      	mov	r1, r3
 80014e8:	f7ff fb9e 	bl	8000c28 <__aeabi_d2f>
 80014ec:	4603      	mov	r3, r0
 80014ee:	4a3d      	ldr	r2, [pc, #244]	; (80015e4 <motorControlTrace+0x2cc>)
 80014f0:	6093      	str	r3, [r2, #8]
	if ( lineTraceCtrl.Int > 10000.0 ) lineTraceCtrl.Int = 10000.0;		// I成分リミット
 80014f2:	4b3c      	ldr	r3, [pc, #240]	; (80015e4 <motorControlTrace+0x2cc>)
 80014f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80014f8:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80015e8 <motorControlTrace+0x2d0>
 80014fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001504:	dd03      	ble.n	800150e <motorControlTrace+0x1f6>
 8001506:	4b37      	ldr	r3, [pc, #220]	; (80015e4 <motorControlTrace+0x2cc>)
 8001508:	4a38      	ldr	r2, [pc, #224]	; (80015ec <motorControlTrace+0x2d4>)
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	e00c      	b.n	8001528 <motorControlTrace+0x210>
	else if ( lineTraceCtrl.Int < -10000.0 ) lineTraceCtrl.Int = -10000.0;
 800150e:	4b35      	ldr	r3, [pc, #212]	; (80015e4 <motorControlTrace+0x2cc>)
 8001510:	edd3 7a02 	vldr	s15, [r3, #8]
 8001514:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80015f0 <motorControlTrace+0x2d8>
 8001518:	eef4 7ac7 	vcmpe.f32	s15, s14
 800151c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001520:	d502      	bpl.n	8001528 <motorControlTrace+0x210>
 8001522:	4b30      	ldr	r3, [pc, #192]	; (80015e4 <motorControlTrace+0x2cc>)
 8001524:	4a33      	ldr	r2, [pc, #204]	; (80015f4 <motorControlTrace+0x2dc>)
 8001526:	609a      	str	r2, [r3, #8]
	Dif = ( Dev - traceBefore ) * 1;	// dゲイン1/1000倍
 8001528:	4b33      	ldr	r3, [pc, #204]	; (80015f8 <motorControlTrace+0x2e0>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	60fb      	str	r3, [r7, #12]

	iP = lineTraceCtrl.kp * Dev;	// 比例
 8001532:	4b2c      	ldr	r3, [pc, #176]	; (80015e4 <motorControlTrace+0x2cc>)
 8001534:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001538:	461a      	mov	r2, r3
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	fb02 f303 	mul.w	r3, r2, r3
 8001540:	60bb      	str	r3, [r7, #8]
	iI = lineTraceCtrl.ki * lineTraceCtrl.Int;	// 積分
 8001542:	4b28      	ldr	r3, [pc, #160]	; (80015e4 <motorControlTrace+0x2cc>)
 8001544:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001548:	ee07 3a90 	vmov	s15, r3
 800154c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001550:	4b24      	ldr	r3, [pc, #144]	; (80015e4 <motorControlTrace+0x2cc>)
 8001552:	edd3 7a02 	vldr	s15, [r3, #8]
 8001556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800155a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800155e:	ee17 3a90 	vmov	r3, s15
 8001562:	607b      	str	r3, [r7, #4]
	iD = lineTraceCtrl.kd * Dif;	// 微分
 8001564:	4b1f      	ldr	r3, [pc, #124]	; (80015e4 <motorControlTrace+0x2cc>)
 8001566:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800156a:	461a      	mov	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	fb02 f303 	mul.w	r3, r2, r3
 8001572:	603b      	str	r3, [r7, #0]
	iRet = iP + iI + iD;
 8001574:	68ba      	ldr	r2, [r7, #8]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4413      	add	r3, r2
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	4413      	add	r3, r2
 800157e:	61fb      	str	r3, [r7, #28]
	iRet = iRet >> 8;				// PWMを0～1000近傍に収める
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	121b      	asrs	r3, r3, #8
 8001584:	61fb      	str	r3, [r7, #28]

	// PWMの上限の設定
	if ( iRet >  900 ) iRet = 900;
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800158c:	dd02      	ble.n	8001594 <motorControlTrace+0x27c>
 800158e:	f44f 7361 	mov.w	r3, #900	; 0x384
 8001592:	61fb      	str	r3, [r7, #28]
	if ( iRet <  -900 ) iRet = -900;
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	f513 7f61 	cmn.w	r3, #900	; 0x384
 800159a:	da01      	bge.n	80015a0 <motorControlTrace+0x288>
 800159c:	4b17      	ldr	r3, [pc, #92]	; (80015fc <motorControlTrace+0x2e4>)
 800159e:	61fb      	str	r3, [r7, #28]
	
	lineTraceCtrl.pwm = iRet;
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	b21a      	sxth	r2, r3
 80015a4:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <motorControlTrace+0x2cc>)
 80015a6:	819a      	strh	r2, [r3, #12]
	traceBefore = Dev;				// 次回はこの値が1ms前の値となる
 80015a8:	4a13      	ldr	r2, [pc, #76]	; (80015f8 <motorControlTrace+0x2e0>)
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	6013      	str	r3, [r2, #0]
}
 80015ae:	bf00      	nop
 80015b0:	3720      	adds	r7, #32
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bdb0      	pop	{r4, r5, r7, pc}
 80015b6:	bf00      	nop
 80015b8:	33333333 	.word	0x33333333
 80015bc:	3fe33333 	.word	0x3fe33333
 80015c0:	9999999a 	.word	0x9999999a
 80015c4:	3fc99999 	.word	0x3fc99999
 80015c8:	9999999a 	.word	0x9999999a
 80015cc:	3fb99999 	.word	0x3fb99999
 80015d0:	d2f1a9fc 	.word	0xd2f1a9fc
 80015d4:	3f50624d 	.word	0x3f50624d
 80015d8:	200033c8 	.word	0x200033c8
 80015dc:	200033b0 	.word	0x200033b0
 80015e0:	2000339c 	.word	0x2000339c
 80015e4:	20000000 	.word	0x20000000
 80015e8:	461c4000 	.word	0x461c4000
 80015ec:	461c4000 	.word	0x461c4000
 80015f0:	c61c4000 	.word	0xc61c4000
 80015f4:	c61c4000 	.word	0xc61c4000
 80015f8:	2000028c 	.word	0x2000028c
 80015fc:	fffffc7c 	.word	0xfffffc7c

08001600 <motorControlSpeed>:
// モジュール名 motorControlSpeed
// 処理概要     モーターの制御量の計算
// 引数         なし
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////
void motorControlSpeed( void ) {
 8001600:	b5b0      	push	{r4, r5, r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
	int32_t 		iP, iI, iD, iRet, Dev, Dif;
	static int16_t 	targetSpeedBefore, encoderBefore;
	
	// 駆動モーター用PWM値計算
	Dev = targetSpeed - encCurrentN;	// 偏差
 8001606:	4b46      	ldr	r3, [pc, #280]	; (8001720 <motorControlSpeed+0x120>)
 8001608:	f9b3 3000 	ldrsh.w	r3, [r3]
 800160c:	461a      	mov	r2, r3
 800160e:	4b45      	ldr	r3, [pc, #276]	; (8001724 <motorControlSpeed+0x124>)
 8001610:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	613b      	str	r3, [r7, #16]
	// 目標値を変更したらI成分リセット
	if ( targetSpeed != targetSpeedBefore ) veloCtrl.Int = 0;
 8001618:	4b41      	ldr	r3, [pc, #260]	; (8001720 <motorControlSpeed+0x120>)
 800161a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800161e:	4b42      	ldr	r3, [pc, #264]	; (8001728 <motorControlSpeed+0x128>)
 8001620:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001624:	429a      	cmp	r2, r3
 8001626:	d003      	beq.n	8001630 <motorControlSpeed+0x30>
 8001628:	4b40      	ldr	r3, [pc, #256]	; (800172c <motorControlSpeed+0x12c>)
 800162a:	f04f 0200 	mov.w	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
	
	veloCtrl.Int += (float)Dev * 0.001;	// 時間積分
 8001630:	4b3e      	ldr	r3, [pc, #248]	; (800172c <motorControlSpeed+0x12c>)
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	4618      	mov	r0, r3
 8001636:	f7fe ffa7 	bl	8000588 <__aeabi_f2d>
 800163a:	4604      	mov	r4, r0
 800163c:	460d      	mov	r5, r1
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	ee07 3a90 	vmov	s15, r3
 8001644:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001648:	ee17 0a90 	vmov	r0, s15
 800164c:	f7fe ff9c 	bl	8000588 <__aeabi_f2d>
 8001650:	a331      	add	r3, pc, #196	; (adr r3, 8001718 <motorControlSpeed+0x118>)
 8001652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001656:	f7fe ffef 	bl	8000638 <__aeabi_dmul>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	4620      	mov	r0, r4
 8001660:	4629      	mov	r1, r5
 8001662:	f7fe fe33 	bl	80002cc <__adddf3>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	4610      	mov	r0, r2
 800166c:	4619      	mov	r1, r3
 800166e:	f7ff fadb 	bl	8000c28 <__aeabi_d2f>
 8001672:	4603      	mov	r3, r0
 8001674:	4a2d      	ldr	r2, [pc, #180]	; (800172c <motorControlSpeed+0x12c>)
 8001676:	6093      	str	r3, [r2, #8]
	Dif = Dev - encoderBefore;		// 微分　dゲイン1/1000倍
 8001678:	4b2d      	ldr	r3, [pc, #180]	; (8001730 <motorControlSpeed+0x130>)
 800167a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800167e:	461a      	mov	r2, r3
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1a9b      	subs	r3, r3, r2
 8001684:	60fb      	str	r3, [r7, #12]
	
	iP = veloCtrl.kp * Dev;		// 比例
 8001686:	4b29      	ldr	r3, [pc, #164]	; (800172c <motorControlSpeed+0x12c>)
 8001688:	f9b3 3000 	ldrsh.w	r3, [r3]
 800168c:	461a      	mov	r2, r3
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	fb02 f303 	mul.w	r3, r2, r3
 8001694:	60bb      	str	r3, [r7, #8]
	iI = veloCtrl.ki * veloCtrl.Int;		// 積分
 8001696:	4b25      	ldr	r3, [pc, #148]	; (800172c <motorControlSpeed+0x12c>)
 8001698:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800169c:	ee07 3a90 	vmov	s15, r3
 80016a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016a4:	4b21      	ldr	r3, [pc, #132]	; (800172c <motorControlSpeed+0x12c>)
 80016a6:	edd3 7a02 	vldr	s15, [r3, #8]
 80016aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016b2:	ee17 3a90 	vmov	r3, s15
 80016b6:	607b      	str	r3, [r7, #4]
	iD = veloCtrl.kd * Dif;		// 微分
 80016b8:	4b1c      	ldr	r3, [pc, #112]	; (800172c <motorControlSpeed+0x12c>)
 80016ba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016be:	461a      	mov	r2, r3
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	fb02 f303 	mul.w	r3, r2, r3
 80016c6:	603b      	str	r3, [r7, #0]
	iRet = iP + iI + iD;
 80016c8:	68ba      	ldr	r2, [r7, #8]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4413      	add	r3, r2
 80016ce:	683a      	ldr	r2, [r7, #0]
 80016d0:	4413      	add	r3, r2
 80016d2:	617b      	str	r3, [r7, #20]
	iRet = iRet >> 1;
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	105b      	asrs	r3, r3, #1
 80016d8:	617b      	str	r3, [r7, #20]
	
	// PWMの上限の設定
	if ( iRet >  900 ) iRet = 900;
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80016e0:	dd02      	ble.n	80016e8 <motorControlSpeed+0xe8>
 80016e2:	f44f 7361 	mov.w	r3, #900	; 0x384
 80016e6:	617b      	str	r3, [r7, #20]
	if ( iRet <  -900 ) iRet = -900;
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	f513 7f61 	cmn.w	r3, #900	; 0x384
 80016ee:	da01      	bge.n	80016f4 <motorControlSpeed+0xf4>
 80016f0:	4b10      	ldr	r3, [pc, #64]	; (8001734 <motorControlSpeed+0x134>)
 80016f2:	617b      	str	r3, [r7, #20]
	
	veloCtrl.pwm = iRet;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	b21a      	sxth	r2, r3
 80016f8:	4b0c      	ldr	r3, [pc, #48]	; (800172c <motorControlSpeed+0x12c>)
 80016fa:	819a      	strh	r2, [r3, #12]
	encoderBefore = Dev;				// 次回はこの値が1ms前の値となる
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	b21a      	sxth	r2, r3
 8001700:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <motorControlSpeed+0x130>)
 8001702:	801a      	strh	r2, [r3, #0]
	targetSpeedBefore = targetSpeed;	// 前回の目標値を記録
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <motorControlSpeed+0x120>)
 8001706:	f9b3 2000 	ldrsh.w	r2, [r3]
 800170a:	4b07      	ldr	r3, [pc, #28]	; (8001728 <motorControlSpeed+0x128>)
 800170c:	801a      	strh	r2, [r3, #0]
}
 800170e:	bf00      	nop
 8001710:	3718      	adds	r7, #24
 8001712:	46bd      	mov	sp, r7
 8001714:	bdb0      	pop	{r4, r5, r7, pc}
 8001716:	bf00      	nop
 8001718:	d2f1a9fc 	.word	0xd2f1a9fc
 800171c:	3f50624d 	.word	0x3f50624d
 8001720:	20000280 	.word	0x20000280
 8001724:	2000334e 	.word	0x2000334e
 8001728:	20000290 	.word	0x20000290
 800172c:	20000010 	.word	0x20000010
 8001730:	20000292 	.word	0x20000292
 8001734:	fffffc7c 	.word	0xfffffc7c

08001738 <motorControlYawRate>:
// モジュール名 motorControlYaw
// 処理概要     角速度制御時の制御量の計算
// 引数         なし
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////
void motorControlYawRate(void) {
 8001738:	b5b0      	push	{r4, r5, r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
	float 			iP, iD, iI, Dev, Dif;
	static float	angularVelocityBefore;
	static float 	targetAngularVelocityBefore;
	int32_t 		iRet;
	
	Dev = (BMI088val.gyro.z - targetAngularVelocity) * 1;	// 目標値-現在値
 800173e:	4b50      	ldr	r3, [pc, #320]	; (8001880 <motorControlYawRate+0x148>)
 8001740:	ed93 7a05 	vldr	s14, [r3, #20]
 8001744:	4b4f      	ldr	r3, [pc, #316]	; (8001884 <motorControlYawRate+0x14c>)
 8001746:	edd3 7a00 	vldr	s15, [r3]
 800174a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800174e:	edc7 7a04 	vstr	s15, [r7, #16]
	// I成分積算
	yawRateCtrl.Int += Dev * 0.005;
 8001752:	4b4d      	ldr	r3, [pc, #308]	; (8001888 <motorControlYawRate+0x150>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	4618      	mov	r0, r3
 8001758:	f7fe ff16 	bl	8000588 <__aeabi_f2d>
 800175c:	4604      	mov	r4, r0
 800175e:	460d      	mov	r5, r1
 8001760:	6938      	ldr	r0, [r7, #16]
 8001762:	f7fe ff11 	bl	8000588 <__aeabi_f2d>
 8001766:	a344      	add	r3, pc, #272	; (adr r3, 8001878 <motorControlYawRate+0x140>)
 8001768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176c:	f7fe ff64 	bl	8000638 <__aeabi_dmul>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	4620      	mov	r0, r4
 8001776:	4629      	mov	r1, r5
 8001778:	f7fe fda8 	bl	80002cc <__adddf3>
 800177c:	4602      	mov	r2, r0
 800177e:	460b      	mov	r3, r1
 8001780:	4610      	mov	r0, r2
 8001782:	4619      	mov	r1, r3
 8001784:	f7ff fa50 	bl	8000c28 <__aeabi_d2f>
 8001788:	4603      	mov	r3, r0
 800178a:	4a3f      	ldr	r2, [pc, #252]	; (8001888 <motorControlYawRate+0x150>)
 800178c:	6093      	str	r3, [r2, #8]
	// 目標値を変更したらI成分リセット
	if ( targetAngularVelocity != targetAngularVelocityBefore ) yawRateCtrl.Int = 0;
 800178e:	4b3d      	ldr	r3, [pc, #244]	; (8001884 <motorControlYawRate+0x14c>)
 8001790:	ed93 7a00 	vldr	s14, [r3]
 8001794:	4b3d      	ldr	r3, [pc, #244]	; (800188c <motorControlYawRate+0x154>)
 8001796:	edd3 7a00 	vldr	s15, [r3]
 800179a:	eeb4 7a67 	vcmp.f32	s14, s15
 800179e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a2:	d003      	beq.n	80017ac <motorControlYawRate+0x74>
 80017a4:	4b38      	ldr	r3, [pc, #224]	; (8001888 <motorControlYawRate+0x150>)
 80017a6:	f04f 0200 	mov.w	r2, #0
 80017aa:	609a      	str	r2, [r3, #8]
	Dif = ( Dev - angularVelocityBefore ) * 2;	// dゲイン1/500倍
 80017ac:	4b38      	ldr	r3, [pc, #224]	; (8001890 <motorControlYawRate+0x158>)
 80017ae:	edd3 7a00 	vldr	s15, [r3]
 80017b2:	ed97 7a04 	vldr	s14, [r7, #16]
 80017b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017ba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80017be:	edc7 7a03 	vstr	s15, [r7, #12]

	iP = yawRateCtrl.kp * Dev;	// 比例
 80017c2:	4b31      	ldr	r3, [pc, #196]	; (8001888 <motorControlYawRate+0x150>)
 80017c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017c8:	ee07 3a90 	vmov	s15, r3
 80017cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017d0:	ed97 7a04 	vldr	s14, [r7, #16]
 80017d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017d8:	edc7 7a02 	vstr	s15, [r7, #8]
	iI = yawRateCtrl.ki * yawRateCtrl.Int;	// 積分
 80017dc:	4b2a      	ldr	r3, [pc, #168]	; (8001888 <motorControlYawRate+0x150>)
 80017de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017e2:	ee07 3a90 	vmov	s15, r3
 80017e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017ea:	4b27      	ldr	r3, [pc, #156]	; (8001888 <motorControlYawRate+0x150>)
 80017ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80017f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017f4:	edc7 7a01 	vstr	s15, [r7, #4]
	iD = yawRateCtrl.kd * Dif;	// 微分
 80017f8:	4b23      	ldr	r3, [pc, #140]	; (8001888 <motorControlYawRate+0x150>)
 80017fa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017fe:	ee07 3a90 	vmov	s15, r3
 8001802:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001806:	ed97 7a03 	vldr	s14, [r7, #12]
 800180a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800180e:	edc7 7a00 	vstr	s15, [r7]
	iRet = (int32_t)iP + iI + iD;
 8001812:	edd7 7a02 	vldr	s15, [r7, #8]
 8001816:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800181a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800181e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001822:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001826:	edd7 7a00 	vldr	s15, [r7]
 800182a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800182e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001832:	ee17 3a90 	vmov	r3, s15
 8001836:	617b      	str	r3, [r7, #20]
	iRet = iRet >> 4;				// PWMを0～1000近傍に収める
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	111b      	asrs	r3, r3, #4
 800183c:	617b      	str	r3, [r7, #20]

	// PWMの上限の設定
	if ( iRet >  900 ) iRet =  900;
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001844:	dd02      	ble.n	800184c <motorControlYawRate+0x114>
 8001846:	f44f 7361 	mov.w	r3, #900	; 0x384
 800184a:	617b      	str	r3, [r7, #20]
	if ( iRet <  -900 ) iRet = -900;
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	f513 7f61 	cmn.w	r3, #900	; 0x384
 8001852:	da01      	bge.n	8001858 <motorControlYawRate+0x120>
 8001854:	4b0f      	ldr	r3, [pc, #60]	; (8001894 <motorControlYawRate+0x15c>)
 8001856:	617b      	str	r3, [r7, #20]
	
	yawRateCtrl.pwm = iRet;
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	b21a      	sxth	r2, r3
 800185c:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <motorControlYawRate+0x150>)
 800185e:	819a      	strh	r2, [r3, #12]
	angularVelocityBefore = Dev;	// 次回はこの値が1ms前の値となる
 8001860:	4a0b      	ldr	r2, [pc, #44]	; (8001890 <motorControlYawRate+0x158>)
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	6013      	str	r3, [r2, #0]
	targetAngularVelocityBefore = targetAngularVelocity;	// 前回の目標値を記録
 8001866:	4b07      	ldr	r3, [pc, #28]	; (8001884 <motorControlYawRate+0x14c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a08      	ldr	r2, [pc, #32]	; (800188c <motorControlYawRate+0x154>)
 800186c:	6013      	str	r3, [r2, #0]
}
 800186e:	bf00      	nop
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bdb0      	pop	{r4, r5, r7, pc}
 8001876:	bf00      	nop
 8001878:	47ae147b 	.word	0x47ae147b
 800187c:	3f747ae1 	.word	0x3f747ae1
 8001880:	2000025c 	.word	0x2000025c
 8001884:	20000288 	.word	0x20000288
 8001888:	20000020 	.word	0x20000020
 800188c:	20000294 	.word	0x20000294
 8001890:	20000298 	.word	0x20000298
 8001894:	fffffc7c 	.word	0xfffffc7c

08001898 <motorControlYaw>:
// モジュール名 motorControlYaw
// 処理概要     角速度制御時の制御量の計算
// 引数         なし
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////
void motorControlYaw(void) {
 8001898:	b5b0      	push	{r4, r5, r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
	float 			iP, iD, iI, Dev, Dif;
	static float 	angleBefore;
	static float 	targetAngleBefore;
	int32_t 		iRet;
	
	Dev = (BMI088val.angle.z - targetAngle) * 20;	// 目標値-現在値
 800189e:	4b52      	ldr	r3, [pc, #328]	; (80019e8 <motorControlYaw+0x150>)
 80018a0:	ed93 7a08 	vldr	s14, [r3, #32]
 80018a4:	4b51      	ldr	r3, [pc, #324]	; (80019ec <motorControlYaw+0x154>)
 80018a6:	edd3 7a00 	vldr	s15, [r3]
 80018aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018ae:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80018b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018b6:	edc7 7a04 	vstr	s15, [r7, #16]
	// I成分積算
	yawCtrl.Int += Dev * 0.005;
 80018ba:	4b4d      	ldr	r3, [pc, #308]	; (80019f0 <motorControlYaw+0x158>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7fe fe62 	bl	8000588 <__aeabi_f2d>
 80018c4:	4604      	mov	r4, r0
 80018c6:	460d      	mov	r5, r1
 80018c8:	6938      	ldr	r0, [r7, #16]
 80018ca:	f7fe fe5d 	bl	8000588 <__aeabi_f2d>
 80018ce:	a344      	add	r3, pc, #272	; (adr r3, 80019e0 <motorControlYaw+0x148>)
 80018d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d4:	f7fe feb0 	bl	8000638 <__aeabi_dmul>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4620      	mov	r0, r4
 80018de:	4629      	mov	r1, r5
 80018e0:	f7fe fcf4 	bl	80002cc <__adddf3>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4610      	mov	r0, r2
 80018ea:	4619      	mov	r1, r3
 80018ec:	f7ff f99c 	bl	8000c28 <__aeabi_d2f>
 80018f0:	4603      	mov	r3, r0
 80018f2:	4a3f      	ldr	r2, [pc, #252]	; (80019f0 <motorControlYaw+0x158>)
 80018f4:	6093      	str	r3, [r2, #8]
	// 目標値を変更したらI成分リセット
	if ( targetAngle != targetAngleBefore ) yawCtrl.Int = 0;
 80018f6:	4b3d      	ldr	r3, [pc, #244]	; (80019ec <motorControlYaw+0x154>)
 80018f8:	ed93 7a00 	vldr	s14, [r3]
 80018fc:	4b3d      	ldr	r3, [pc, #244]	; (80019f4 <motorControlYaw+0x15c>)
 80018fe:	edd3 7a00 	vldr	s15, [r3]
 8001902:	eeb4 7a67 	vcmp.f32	s14, s15
 8001906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800190a:	d003      	beq.n	8001914 <motorControlYaw+0x7c>
 800190c:	4b38      	ldr	r3, [pc, #224]	; (80019f0 <motorControlYaw+0x158>)
 800190e:	f04f 0200 	mov.w	r2, #0
 8001912:	609a      	str	r2, [r3, #8]
	Dif = ( Dev - angleBefore ) * 1;	// dゲイン1/1000倍
 8001914:	4b38      	ldr	r3, [pc, #224]	; (80019f8 <motorControlYaw+0x160>)
 8001916:	edd3 7a00 	vldr	s15, [r3]
 800191a:	ed97 7a04 	vldr	s14, [r7, #16]
 800191e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001922:	edc7 7a03 	vstr	s15, [r7, #12]

	iP = yawCtrl.kp * Dev;	// 比例
 8001926:	4b32      	ldr	r3, [pc, #200]	; (80019f0 <motorControlYaw+0x158>)
 8001928:	f9b3 3000 	ldrsh.w	r3, [r3]
 800192c:	ee07 3a90 	vmov	s15, r3
 8001930:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001934:	ed97 7a04 	vldr	s14, [r7, #16]
 8001938:	ee67 7a27 	vmul.f32	s15, s14, s15
 800193c:	edc7 7a02 	vstr	s15, [r7, #8]
	iI = yawCtrl.ki * yawCtrl.Int;	// 積分
 8001940:	4b2b      	ldr	r3, [pc, #172]	; (80019f0 <motorControlYaw+0x158>)
 8001942:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001946:	ee07 3a90 	vmov	s15, r3
 800194a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800194e:	4b28      	ldr	r3, [pc, #160]	; (80019f0 <motorControlYaw+0x158>)
 8001950:	edd3 7a02 	vldr	s15, [r3, #8]
 8001954:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001958:	edc7 7a01 	vstr	s15, [r7, #4]
	iD = yawCtrl.kd * Dif;	// 微分
 800195c:	4b24      	ldr	r3, [pc, #144]	; (80019f0 <motorControlYaw+0x158>)
 800195e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001962:	ee07 3a90 	vmov	s15, r3
 8001966:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800196a:	ed97 7a03 	vldr	s14, [r7, #12]
 800196e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001972:	edc7 7a00 	vstr	s15, [r7]
	iRet = (int32_t)iP + iI + iD;
 8001976:	edd7 7a02 	vldr	s15, [r7, #8]
 800197a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800197e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001982:	edd7 7a01 	vldr	s15, [r7, #4]
 8001986:	ee37 7a27 	vadd.f32	s14, s14, s15
 800198a:	edd7 7a00 	vldr	s15, [r7]
 800198e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001992:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001996:	ee17 3a90 	vmov	r3, s15
 800199a:	617b      	str	r3, [r7, #20]
	iRet = iRet >> 2;				// PWMを0～1000近傍に収める
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	109b      	asrs	r3, r3, #2
 80019a0:	617b      	str	r3, [r7, #20]

	// PWMの上限の設定
	if ( iRet >  900 ) iRet =  900;
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80019a8:	dd02      	ble.n	80019b0 <motorControlYaw+0x118>
 80019aa:	f44f 7361 	mov.w	r3, #900	; 0x384
 80019ae:	617b      	str	r3, [r7, #20]
	if ( iRet <  -900 ) iRet = -900;
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	f513 7f61 	cmn.w	r3, #900	; 0x384
 80019b6:	da01      	bge.n	80019bc <motorControlYaw+0x124>
 80019b8:	4b10      	ldr	r3, [pc, #64]	; (80019fc <motorControlYaw+0x164>)
 80019ba:	617b      	str	r3, [r7, #20]
	
	yawCtrl.pwm = iRet;
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	b21a      	sxth	r2, r3
 80019c0:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <motorControlYaw+0x158>)
 80019c2:	819a      	strh	r2, [r3, #12]
	angleBefore = Dev;					// 次回はこの値が1ms前の値となる
 80019c4:	4a0c      	ldr	r2, [pc, #48]	; (80019f8 <motorControlYaw+0x160>)
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	6013      	str	r3, [r2, #0]
	targetAngleBefore = targetAngle;	// 前回の目標値を記録
 80019ca:	4b08      	ldr	r3, [pc, #32]	; (80019ec <motorControlYaw+0x154>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a09      	ldr	r2, [pc, #36]	; (80019f4 <motorControlYaw+0x15c>)
 80019d0:	6013      	str	r3, [r2, #0]
}
 80019d2:	bf00      	nop
 80019d4:	3718      	adds	r7, #24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bdb0      	pop	{r4, r5, r7, pc}
 80019da:	bf00      	nop
 80019dc:	f3af 8000 	nop.w
 80019e0:	47ae147b 	.word	0x47ae147b
 80019e4:	3f747ae1 	.word	0x3f747ae1
 80019e8:	2000025c 	.word	0x2000025c
 80019ec:	20000284 	.word	0x20000284
 80019f0:	20000030 	.word	0x20000030
 80019f4:	2000029c 	.word	0x2000029c
 80019f8:	200002a0 	.word	0x200002a0
 80019fc:	fffffc7c 	.word	0xfffffc7c

08001a00 <initMicroSD>:
// モジュール名 initMicroSD
// 処理概要     SDカードの初期化
// 引数         なし
// 戻り値       なし
/////////////////////////////////////////////////////////////////////
bool initMicroSD(void) {
 8001a00:	b580      	push	{r7, lr}
 8001a02:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
  DWORD     fre_clust;
  uint32_t  total, free_space;
  FIL       fil_T;

  // SDcardをマウント
  fresult = f_mount(&fs, "", 0);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	494e      	ldr	r1, [pc, #312]	; (8001b48 <initMicroSD+0x148>)
 8001a0e:	484f      	ldr	r0, [pc, #316]	; (8001b4c <initMicroSD+0x14c>)
 8001a10:	f00b fc60 	bl	800d2d4 <f_mount>
 8001a14:	4603      	mov	r3, r0
 8001a16:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001a1a:	f102 0207 	add.w	r2, r2, #7
 8001a1e:	7013      	strb	r3, [r2, #0]
  if (fresult == FR_OK) {
 8001a20:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001a24:	f103 0307 	add.w	r3, r3, #7
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d17f      	bne.n	8001b2e <initMicroSD+0x12e>
    // マウント成功
    initMSD = true;
 8001a2e:	4b48      	ldr	r3, [pc, #288]	; (8001b50 <initMicroSD+0x150>)
 8001a30:	2201      	movs	r2, #1
 8001a32:	701a      	strb	r2, [r3, #0]
    printf("SD CARD mounted successfully...\r\n");
 8001a34:	4847      	ldr	r0, [pc, #284]	; (8001b54 <initMicroSD+0x154>)
 8001a36:	f00e fb5d 	bl	80100f4 <puts>

    // 空き容量を計算
    f_getfree("", &fre_clust, &pfs); // cluster size
 8001a3a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001a3e:	f102 0218 	add.w	r2, r2, #24
 8001a42:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001a46:	f103 0314 	add.w	r3, r3, #20
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	483e      	ldr	r0, [pc, #248]	; (8001b48 <initMicroSD+0x148>)
 8001a4e:	f00c f88f 	bl	800db70 <f_getfree>
    total = (uint32_t)((pfs -> n_fatent - 2) * pfs -> csize * 0.5); // total capacity
 8001a52:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001a56:	f103 0318 	add.w	r3, r3, #24
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6a1b      	ldr	r3, [r3, #32]
 8001a5e:	3b02      	subs	r3, #2
 8001a60:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001a64:	f102 0218 	add.w	r2, r2, #24
 8001a68:	6812      	ldr	r2, [r2, #0]
 8001a6a:	8952      	ldrh	r2, [r2, #10]
 8001a6c:	fb02 f303 	mul.w	r3, r2, r3
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7fe fd67 	bl	8000544 <__aeabi_ui2d>
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	4b37      	ldr	r3, [pc, #220]	; (8001b58 <initMicroSD+0x158>)
 8001a7c:	f7fe fddc 	bl	8000638 <__aeabi_dmul>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	4610      	mov	r0, r2
 8001a86:	4619      	mov	r1, r3
 8001a88:	f7ff f8ae 	bl	8000be8 <__aeabi_d2uiz>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001a92:	6013      	str	r3, [r2, #0]
    printf("SD_SIZE: \t%lu\r\n", total);
 8001a94:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001a98:	6819      	ldr	r1, [r3, #0]
 8001a9a:	4830      	ldr	r0, [pc, #192]	; (8001b5c <initMicroSD+0x15c>)
 8001a9c:	f00e fac4 	bl	8010028 <iprintf>
    free_space = (uint32_t)(fre_clust * pfs->csize*0.5);  // empty capacity
 8001aa0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001aa4:	f103 0318 	add.w	r3, r3, #24
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	895b      	ldrh	r3, [r3, #10]
 8001aac:	461a      	mov	r2, r3
 8001aae:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001ab2:	f103 0314 	add.w	r3, r3, #20
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	fb02 f303 	mul.w	r3, r2, r3
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7fe fd41 	bl	8000544 <__aeabi_ui2d>
 8001ac2:	f04f 0200 	mov.w	r2, #0
 8001ac6:	4b24      	ldr	r3, [pc, #144]	; (8001b58 <initMicroSD+0x158>)
 8001ac8:	f7fe fdb6 	bl	8000638 <__aeabi_dmul>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4610      	mov	r0, r2
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	f7ff f888 	bl	8000be8 <__aeabi_d2uiz>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001ade:	f102 021c 	add.w	r2, r2, #28
 8001ae2:	6013      	str	r3, [r2, #0]
    printf("SD free space: \t%lu\r\n", free_space);
 8001ae4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001ae8:	f103 031c 	add.w	r3, r3, #28
 8001aec:	6819      	ldr	r1, [r3, #0]
 8001aee:	481c      	ldr	r0, [pc, #112]	; (8001b60 <initMicroSD+0x160>)
 8001af0:	f00e fa9a 	bl	8010028 <iprintf>

    // getFileNumbers();

    fresult = f_open(&fil_T, "test.csv", FA_OPEN_ALWAYS | FA_WRITE);  // create file
 8001af4:	f107 0308 	add.w	r3, r7, #8
 8001af8:	3b04      	subs	r3, #4
 8001afa:	2212      	movs	r2, #18
 8001afc:	4919      	ldr	r1, [pc, #100]	; (8001b64 <initMicroSD+0x164>)
 8001afe:	4618      	mov	r0, r3
 8001b00:	f00b fc2e 	bl	800d360 <f_open>
 8001b04:	4603      	mov	r3, r0
 8001b06:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001b0a:	f102 0207 	add.w	r2, r2, #7
 8001b0e:	7013      	strb	r3, [r2, #0]
    while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY );
 8001b10:	bf00      	nop
 8001b12:	4815      	ldr	r0, [pc, #84]	; (8001b68 <initMicroSD+0x168>)
 8001b14:	f007 fea0 	bl	8009858 <HAL_SPI_GetState>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d1f9      	bne.n	8001b12 <initMicroSD+0x112>
    f_close(&fil_T);
 8001b1e:	f107 0308 	add.w	r3, r7, #8
 8001b22:	3b04      	subs	r3, #4
 8001b24:	4618      	mov	r0, r3
 8001b26:	f00b fff9 	bl	800db1c <f_close>

    return true;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e006      	b.n	8001b3c <initMicroSD+0x13c>
  } else {
    // マウント失敗
    initMSD = false;
 8001b2e:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <initMicroSD+0x150>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	701a      	strb	r2, [r3, #0]
    printf ("error in mounting SD CARD...\r\n");
 8001b34:	480d      	ldr	r0, [pc, #52]	; (8001b6c <initMicroSD+0x16c>)
 8001b36:	f00e fadd 	bl	80100f4 <puts>
    return false;
 8001b3a:	2300      	movs	r3, #0
  }
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	08013970 	.word	0x08013970
 8001b4c:	200002a4 	.word	0x200002a4
 8001b50:	2000332a 	.word	0x2000332a
 8001b54:	08013974 	.word	0x08013974
 8001b58:	3fe00000 	.word	0x3fe00000
 8001b5c:	08013998 	.word	0x08013998
 8001b60:	080139a8 	.word	0x080139a8
 8001b64:	080139c0 	.word	0x080139c0
 8001b68:	20003524 	.word	0x20003524
 8001b6c:	080139cc 	.word	0x080139cc

08001b70 <writeLogPut>:
// モジュール名 writeLogPut
// 処理概要     バッファをSDカードに転送する
// 引数         なし
// 戻り値       なし
/////////////////////////////////////////////////////////////////////
void writeLogPut(void) {
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b088      	sub	sp, #32
 8001b74:	af00      	add	r7, sp, #0
  uint8_t str[32];

  if (sendLogNum < logIndex) {
 8001b76:	4b1b      	ldr	r3, [pc, #108]	; (8001be4 <writeLogPut+0x74>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	4b1b      	ldr	r3, [pc, #108]	; (8001be8 <writeLogPut+0x78>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d22c      	bcs.n	8001bdc <writeLogPut+0x6c>
    if (logBuffer[sendLogNum & BUFFER_SIZW_LOG - 1] == "\n") {
 8001b82:	4b18      	ldr	r3, [pc, #96]	; (8001be4 <writeLogPut+0x74>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b8a:	4a18      	ldr	r2, [pc, #96]	; (8001bec <writeLogPut+0x7c>)
 8001b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b90:	461a      	mov	r2, r3
 8001b92:	4b17      	ldr	r3, [pc, #92]	; (8001bf0 <writeLogPut+0x80>)
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d10b      	bne.n	8001bb0 <writeLogPut+0x40>
      f_puts(logBuffer[sendLogNum & BUFFER_SIZW_LOG - 1], &fil_W);
 8001b98:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <writeLogPut+0x74>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ba0:	4a12      	ldr	r2, [pc, #72]	; (8001bec <writeLogPut+0x7c>)
 8001ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba6:	4913      	ldr	r1, [pc, #76]	; (8001bf4 <writeLogPut+0x84>)
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f00c f90d 	bl	800ddc8 <f_puts>
 8001bae:	e010      	b.n	8001bd2 <writeLogPut+0x62>
    } else {
      sprintf(str,"%d,",logBuffer[sendLogNum & BUFFER_SIZW_LOG - 1]);
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <writeLogPut+0x74>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bb8:	4a0c      	ldr	r2, [pc, #48]	; (8001bec <writeLogPut+0x7c>)
 8001bba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001bbe:	463b      	mov	r3, r7
 8001bc0:	490d      	ldr	r1, [pc, #52]	; (8001bf8 <writeLogPut+0x88>)
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f00e fa9e 	bl	8010104 <siprintf>
      f_puts(str, &fil_W);
 8001bc8:	463b      	mov	r3, r7
 8001bca:	490a      	ldr	r1, [pc, #40]	; (8001bf4 <writeLogPut+0x84>)
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f00c f8fb 	bl	800ddc8 <f_puts>
    }
    sendLogNum++;
 8001bd2:	4b04      	ldr	r3, [pc, #16]	; (8001be4 <writeLogPut+0x74>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	4a02      	ldr	r2, [pc, #8]	; (8001be4 <writeLogPut+0x74>)
 8001bda:	6013      	str	r3, [r2, #0]
  }
}
 8001bdc:	bf00      	nop
 8001bde:	3720      	adds	r7, #32
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	20003314 	.word	0x20003314
 8001be8:	20003310 	.word	0x20003310
 8001bec:	20002310 	.word	0x20002310
 8001bf0:	08013a88 	.word	0x08013a88
 8001bf4:	200012e0 	.word	0x200012e0
 8001bf8:	08013a8c 	.word	0x08013a8c

08001bfc <SDtest>:
// モジュール名 SDtest
// 処理概要     SDカードの読み書きテスト
// 引数         なし
// 戻り値       なし
/////////////////////////////////////////////////////////////////////
void SDtest(void) {
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
  FIL       fil_T;
  FRESULT   fresult;

  fresult = f_open(&fil_T, "test.csv", FA_OPEN_ALWAYS | FA_WRITE);  // create file
 8001c06:	f107 0318 	add.w	r3, r7, #24
 8001c0a:	3b14      	subs	r3, #20
 8001c0c:	2212      	movs	r2, #18
 8001c0e:	490e      	ldr	r1, [pc, #56]	; (8001c48 <SDtest+0x4c>)
 8001c10:	4618      	mov	r0, r3
 8001c12:	f00b fba5 	bl	800d360 <f_open>
 8001c16:	4603      	mov	r3, r0
 8001c18:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001c1c:	f102 0217 	add.w	r2, r2, #23
 8001c20:	7013      	strb	r3, [r2, #0]
  while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY );
 8001c22:	bf00      	nop
 8001c24:	4809      	ldr	r0, [pc, #36]	; (8001c4c <SDtest+0x50>)
 8001c26:	f007 fe17 	bl	8009858 <HAL_SPI_GetState>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d1f9      	bne.n	8001c24 <SDtest+0x28>
  f_close(&fil_T);
 8001c30:	f107 0318 	add.w	r3, r7, #24
 8001c34:	3b14      	subs	r3, #20
 8001c36:	4618      	mov	r0, r3
 8001c38:	f00b ff70 	bl	800db1c <f_close>
 8001c3c:	bf00      	nop
 8001c3e:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 8001c42:	3718      	adds	r7, #24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	080139c0 	.word	0x080139c0
 8001c4c:	20003524 	.word	0x20003524

08001c50 <sendColorData>:
// モジュール名 sendColorData
// 処理概要     WS2812Cへデータ送信 1データあたり900ns(cntState = 3)
// 引数         なし
// 戻り値       なし
/////////////////////////////////////////////////////////////////////
void sendColorData(void) {
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
    int32_t sendBit=0, i;
 8001c56:	2300      	movs	r3, #0
 8001c58:	607b      	str	r3, [r7, #4]
    i = ledBuff;
 8001c5a:	4b41      	ldr	r3, [pc, #260]	; (8001d60 <sendColorData+0x110>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	603b      	str	r3, [r7, #0]
    if (ledsend) {
 8001c60:	4b40      	ldr	r3, [pc, #256]	; (8001d64 <sendColorData+0x114>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d076      	beq.n	8001d56 <sendColorData+0x106>
        sendBit = ledBuff >> cntBit; // 指定bitを最下位bitに移動する
 8001c68:	4b3d      	ldr	r3, [pc, #244]	; (8001d60 <sendColorData+0x110>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a3e      	ldr	r2, [pc, #248]	; (8001d68 <sendColorData+0x118>)
 8001c6e:	f992 2000 	ldrsb.w	r2, [r2]
 8001c72:	4113      	asrs	r3, r2
 8001c74:	607b      	str	r3, [r7, #4]
        sendBit = sendBit & 0x00000001;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	607b      	str	r3, [r7, #4]
        if(sendBit) {
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d023      	beq.n	8001ccc <sendColorData+0x7c>
            // 1 codeを送信するとき
            if (cntState < 2) {
 8001c84:	4b39      	ldr	r3, [pc, #228]	; (8001d6c <sendColorData+0x11c>)
 8001c86:	f993 3000 	ldrsb.w	r3, [r3]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	dc06      	bgt.n	8001c9c <sendColorData+0x4c>
                HAL_GPIO_WritePin(RGBLED_GPIO_Port, RGBLED_Pin, GPIO_PIN_SET);
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c94:	4836      	ldr	r0, [pc, #216]	; (8001d70 <sendColorData+0x120>)
 8001c96:	f005 ff53 	bl	8007b40 <HAL_GPIO_WritePin>
 8001c9a:	e005      	b.n	8001ca8 <sendColorData+0x58>
            } else {
                HAL_GPIO_WritePin(RGBLED_GPIO_Port, RGBLED_Pin, GPIO_PIN_RESET);
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ca2:	4833      	ldr	r0, [pc, #204]	; (8001d70 <sendColorData+0x120>)
 8001ca4:	f005 ff4c 	bl	8007b40 <HAL_GPIO_WritePin>
            }
            if (cntState >= 4) {
 8001ca8:	4b30      	ldr	r3, [pc, #192]	; (8001d6c <sendColorData+0x11c>)
 8001caa:	f993 3000 	ldrsb.w	r3, [r3]
 8001cae:	2b03      	cmp	r3, #3
 8001cb0:	dd2f      	ble.n	8001d12 <sendColorData+0xc2>
                cntState = 0;
 8001cb2:	4b2e      	ldr	r3, [pc, #184]	; (8001d6c <sendColorData+0x11c>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	701a      	strb	r2, [r3, #0]
                cntBit--;
 8001cb8:	4b2b      	ldr	r3, [pc, #172]	; (8001d68 <sendColorData+0x118>)
 8001cba:	f993 3000 	ldrsb.w	r3, [r3]
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	b25a      	sxtb	r2, r3
 8001cc6:	4b28      	ldr	r3, [pc, #160]	; (8001d68 <sendColorData+0x118>)
 8001cc8:	701a      	strb	r2, [r3, #0]
 8001cca:	e022      	b.n	8001d12 <sendColorData+0xc2>
            }
        } else {
            // 0 codeを送信するとき
            if (cntState < 1) {
 8001ccc:	4b27      	ldr	r3, [pc, #156]	; (8001d6c <sendColorData+0x11c>)
 8001cce:	f993 3000 	ldrsb.w	r3, [r3]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	dc06      	bgt.n	8001ce4 <sendColorData+0x94>
                HAL_GPIO_WritePin(RGBLED_GPIO_Port, RGBLED_Pin, GPIO_PIN_SET);
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cdc:	4824      	ldr	r0, [pc, #144]	; (8001d70 <sendColorData+0x120>)
 8001cde:	f005 ff2f 	bl	8007b40 <HAL_GPIO_WritePin>
 8001ce2:	e005      	b.n	8001cf0 <sendColorData+0xa0>
            } else {
                HAL_GPIO_WritePin(RGBLED_GPIO_Port, RGBLED_Pin, GPIO_PIN_RESET);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cea:	4821      	ldr	r0, [pc, #132]	; (8001d70 <sendColorData+0x120>)
 8001cec:	f005 ff28 	bl	8007b40 <HAL_GPIO_WritePin>
            }
            if (cntState >= 3) {
 8001cf0:	4b1e      	ldr	r3, [pc, #120]	; (8001d6c <sendColorData+0x11c>)
 8001cf2:	f993 3000 	ldrsb.w	r3, [r3]
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	dd0b      	ble.n	8001d12 <sendColorData+0xc2>
                cntState = 0;
 8001cfa:	4b1c      	ldr	r3, [pc, #112]	; (8001d6c <sendColorData+0x11c>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	701a      	strb	r2, [r3, #0]
                cntBit--;
 8001d00:	4b19      	ldr	r3, [pc, #100]	; (8001d68 <sendColorData+0x118>)
 8001d02:	f993 3000 	ldrsb.w	r3, [r3]
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	b25a      	sxtb	r2, r3
 8001d0e:	4b16      	ldr	r3, [pc, #88]	; (8001d68 <sendColorData+0x118>)
 8001d10:	701a      	strb	r2, [r3, #0]
            }
        }
        cntState++;
 8001d12:	4b16      	ldr	r3, [pc, #88]	; (8001d6c <sendColorData+0x11c>)
 8001d14:	f993 3000 	ldrsb.w	r3, [r3]
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	b25a      	sxtb	r2, r3
 8001d20:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <sendColorData+0x11c>)
 8001d22:	701a      	strb	r2, [r3, #0]
        
        // 
        if (cntBit < 0) {
 8001d24:	4b10      	ldr	r3, [pc, #64]	; (8001d68 <sendColorData+0x118>)
 8001d26:	f993 3000 	ldrsb.w	r3, [r3]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	da13      	bge.n	8001d56 <sendColorData+0x106>
            HAL_GPIO_WritePin(RGBLED_GPIO_Port, RGBLED_Pin, GPIO_PIN_RESET);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d34:	480e      	ldr	r0, [pc, #56]	; (8001d70 <sendColorData+0x120>)
 8001d36:	f005 ff03 	bl	8007b40 <HAL_GPIO_WritePin>
            ledsend = false;
 8001d3a:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <sendColorData+0x114>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	701a      	strb	r2, [r3, #0]
            cntBit = 23;
 8001d40:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <sendColorData+0x118>)
 8001d42:	2217      	movs	r2, #23
 8001d44:	701a      	strb	r2, [r3, #0]
            ledBrightIndex++;
 8001d46:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <sendColorData+0x124>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	4a09      	ldr	r2, [pc, #36]	; (8001d74 <sendColorData+0x124>)
 8001d4e:	6013      	str	r3, [r2, #0]
            HAL_TIM_Base_Stop_IT(&htim10);
 8001d50:	4809      	ldr	r0, [pc, #36]	; (8001d78 <sendColorData+0x128>)
 8001d52:	f007 ff7f 	bl	8009c54 <HAL_TIM_Base_Stop_IT>
        }
    }
}
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20003318 	.word	0x20003318
 8001d64:	20003320 	.word	0x20003320
 8001d68:	20000040 	.word	0x20000040
 8001d6c:	20003321 	.word	0x20003321
 8001d70:	40020800 	.word	0x40020800
 8001d74:	2000331c 	.word	0x2000331c
 8001d78:	200036e4 	.word	0x200036e4

08001d7c <getADC2>:
// モジュール名 getADC2
// 処理概要     AD値の取得
// 引数         なし
// 戻り値       なし
/////////////////////////////////////////////////////////////////////
void getADC2(void) {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc2);
 8001d80:	481b      	ldr	r0, [pc, #108]	; (8001df0 <getADC2+0x74>)
 8001d82:	f004 fb3d 	bl	8006400 <HAL_ADC_Start>
    if( HAL_ADC_PollForConversion(&hadc2, 1) == HAL_OK ) {
 8001d86:	2101      	movs	r1, #1
 8001d88:	4819      	ldr	r0, [pc, #100]	; (8001df0 <getADC2+0x74>)
 8001d8a:	f004 fc3e 	bl	800660a <HAL_ADC_PollForConversion>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d106      	bne.n	8001da2 <getADC2+0x26>
        motorCurrentL = HAL_ADC_GetValue(&hadc2);
 8001d94:	4816      	ldr	r0, [pc, #88]	; (8001df0 <getADC2+0x74>)
 8001d96:	f004 fdd3 	bl	8006940 <HAL_ADC_GetValue>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	b29a      	uxth	r2, r3
 8001d9e:	4b15      	ldr	r3, [pc, #84]	; (8001df4 <getADC2+0x78>)
 8001da0:	801a      	strh	r2, [r3, #0]
    }

    HAL_ADC_Start(&hadc2);
 8001da2:	4813      	ldr	r0, [pc, #76]	; (8001df0 <getADC2+0x74>)
 8001da4:	f004 fb2c 	bl	8006400 <HAL_ADC_Start>
    if( HAL_ADC_PollForConversion(&hadc2, 1) == HAL_OK ) {
 8001da8:	2101      	movs	r1, #1
 8001daa:	4811      	ldr	r0, [pc, #68]	; (8001df0 <getADC2+0x74>)
 8001dac:	f004 fc2d 	bl	800660a <HAL_ADC_PollForConversion>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d106      	bne.n	8001dc4 <getADC2+0x48>
        motorCurrentR = HAL_ADC_GetValue(&hadc2);
 8001db6:	480e      	ldr	r0, [pc, #56]	; (8001df0 <getADC2+0x74>)
 8001db8:	f004 fdc2 	bl	8006940 <HAL_ADC_GetValue>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	4b0d      	ldr	r3, [pc, #52]	; (8001df8 <getADC2+0x7c>)
 8001dc2:	801a      	strh	r2, [r3, #0]
    }

    HAL_ADC_Start(&hadc2);
 8001dc4:	480a      	ldr	r0, [pc, #40]	; (8001df0 <getADC2+0x74>)
 8001dc6:	f004 fb1b 	bl	8006400 <HAL_ADC_Start>
    if( HAL_ADC_PollForConversion(&hadc2, 1) == HAL_OK ) {
 8001dca:	2101      	movs	r1, #1
 8001dcc:	4808      	ldr	r0, [pc, #32]	; (8001df0 <getADC2+0x74>)
 8001dce:	f004 fc1c 	bl	800660a <HAL_ADC_PollForConversion>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d106      	bne.n	8001de6 <getADC2+0x6a>
        batteryVal = HAL_ADC_GetValue(&hadc2);
 8001dd8:	4805      	ldr	r0, [pc, #20]	; (8001df0 <getADC2+0x74>)
 8001dda:	f004 fdb1 	bl	8006940 <HAL_ADC_GetValue>
 8001dde:	4603      	mov	r3, r0
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <getADC2+0x80>)
 8001de4:	801a      	strh	r2, [r3, #0]
    }
    HAL_ADC_Stop(&hadc2);
 8001de6:	4802      	ldr	r0, [pc, #8]	; (8001df0 <getADC2+0x74>)
 8001de8:	f004 fbdc 	bl	80065a4 <HAL_ADC_Stop>
}
 8001dec:	bf00      	nop
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	20003428 	.word	0x20003428
 8001df4:	20003322 	.word	0x20003322
 8001df8:	20003324 	.word	0x20003324
 8001dfc:	20003326 	.word	0x20003326

08001e00 <showBattery>:
// モジュール名 showBattery
// 処理概要     グラフィック液晶にバッテリ残量を表示する
// 引数         なし
// 戻り値       なし
/////////////////////////////////////////////////////////////////////
void showBattery (void) {
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af02      	add	r7, sp, #8
    if (batteryVal > 2036) {
 8001e06:	4b47      	ldr	r3, [pc, #284]	; (8001f24 <showBattery+0x124>)
 8001e08:	881b      	ldrh	r3, [r3, #0]
 8001e0a:	f240 72f4 	movw	r2, #2036	; 0x7f4
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d918      	bls.n	8001e44 <showBattery+0x44>
        // 8.0V以上のとき
        ssd1306_DrawRectangle(115,4,124,13, Black);
 8001e12:	2300      	movs	r3, #0
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	230d      	movs	r3, #13
 8001e18:	227c      	movs	r2, #124	; 0x7c
 8001e1a:	2104      	movs	r1, #4
 8001e1c:	2073      	movs	r0, #115	; 0x73
 8001e1e:	f003 fbb1 	bl	8005584 <ssd1306_DrawRectangle>
        ssd1306_DrawRectangle(116,5,123,12, Black);
 8001e22:	2300      	movs	r3, #0
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	230c      	movs	r3, #12
 8001e28:	227b      	movs	r2, #123	; 0x7b
 8001e2a:	2105      	movs	r1, #5
 8001e2c:	2074      	movs	r0, #116	; 0x74
 8001e2e:	f003 fba9 	bl	8005584 <ssd1306_DrawRectangle>
        ssd1306_FillRectangle(117,6,121,11, White);
 8001e32:	2301      	movs	r3, #1
 8001e34:	9300      	str	r3, [sp, #0]
 8001e36:	230b      	movs	r3, #11
 8001e38:	2279      	movs	r2, #121	; 0x79
 8001e3a:	2106      	movs	r1, #6
 8001e3c:	2075      	movs	r0, #117	; 0x75
 8001e3e:	f003 fbd8 	bl	80055f2 <ssd1306_FillRectangle>
 8001e42:	e007      	b.n	8001e54 <showBattery+0x54>
    } else {
        ssd1306_FillRectangle(115,4,123,13, Black);
 8001e44:	2300      	movs	r3, #0
 8001e46:	9300      	str	r3, [sp, #0]
 8001e48:	230d      	movs	r3, #13
 8001e4a:	227b      	movs	r2, #123	; 0x7b
 8001e4c:	2104      	movs	r1, #4
 8001e4e:	2073      	movs	r0, #115	; 0x73
 8001e50:	f003 fbcf 	bl	80055f2 <ssd1306_FillRectangle>
    }

    if (batteryVal > 1909) {
 8001e54:	4b33      	ldr	r3, [pc, #204]	; (8001f24 <showBattery+0x124>)
 8001e56:	881b      	ldrh	r3, [r3, #0]
 8001e58:	f240 7275 	movw	r2, #1909	; 0x775
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d918      	bls.n	8001e92 <showBattery+0x92>
        // 7.5V～8.0Vのとき
        ssd1306_DrawRectangle(106,4,115,13, Black);
 8001e60:	2300      	movs	r3, #0
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	230d      	movs	r3, #13
 8001e66:	2273      	movs	r2, #115	; 0x73
 8001e68:	2104      	movs	r1, #4
 8001e6a:	206a      	movs	r0, #106	; 0x6a
 8001e6c:	f003 fb8a 	bl	8005584 <ssd1306_DrawRectangle>
        ssd1306_DrawRectangle(107,5,114,12, Black);
 8001e70:	2300      	movs	r3, #0
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	230c      	movs	r3, #12
 8001e76:	2272      	movs	r2, #114	; 0x72
 8001e78:	2105      	movs	r1, #5
 8001e7a:	206b      	movs	r0, #107	; 0x6b
 8001e7c:	f003 fb82 	bl	8005584 <ssd1306_DrawRectangle>
        ssd1306_FillRectangle(108,6,113,11, White);
 8001e80:	2301      	movs	r3, #1
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	230b      	movs	r3, #11
 8001e86:	2271      	movs	r2, #113	; 0x71
 8001e88:	2106      	movs	r1, #6
 8001e8a:	206c      	movs	r0, #108	; 0x6c
 8001e8c:	f003 fbb1 	bl	80055f2 <ssd1306_FillRectangle>
 8001e90:	e007      	b.n	8001ea2 <showBattery+0xa2>
    } else {
        ssd1306_FillRectangle(106,4,115,13, Black);
 8001e92:	2300      	movs	r3, #0
 8001e94:	9300      	str	r3, [sp, #0]
 8001e96:	230d      	movs	r3, #13
 8001e98:	2273      	movs	r2, #115	; 0x73
 8001e9a:	2104      	movs	r1, #4
 8001e9c:	206a      	movs	r0, #106	; 0x6a
 8001e9e:	f003 fba8 	bl	80055f2 <ssd1306_FillRectangle>
    }

    if (batteryVal > 1720) {
 8001ea2:	4b20      	ldr	r3, [pc, #128]	; (8001f24 <showBattery+0x124>)
 8001ea4:	881b      	ldrh	r3, [r3, #0]
 8001ea6:	f5b3 6fd7 	cmp.w	r3, #1720	; 0x6b8
 8001eaa:	d918      	bls.n	8001ede <showBattery+0xde>
        // 7.5V未満のとき
        ssd1306_DrawRectangle(97,4,106,13, Black);
 8001eac:	2300      	movs	r3, #0
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	230d      	movs	r3, #13
 8001eb2:	226a      	movs	r2, #106	; 0x6a
 8001eb4:	2104      	movs	r1, #4
 8001eb6:	2061      	movs	r0, #97	; 0x61
 8001eb8:	f003 fb64 	bl	8005584 <ssd1306_DrawRectangle>
        ssd1306_DrawRectangle(98,5,105,12, Black);
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	230c      	movs	r3, #12
 8001ec2:	2269      	movs	r2, #105	; 0x69
 8001ec4:	2105      	movs	r1, #5
 8001ec6:	2062      	movs	r0, #98	; 0x62
 8001ec8:	f003 fb5c 	bl	8005584 <ssd1306_DrawRectangle>
        ssd1306_FillRectangle(99,6,104,11, White);
 8001ecc:	2301      	movs	r3, #1
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	230b      	movs	r3, #11
 8001ed2:	2268      	movs	r2, #104	; 0x68
 8001ed4:	2106      	movs	r1, #6
 8001ed6:	2063      	movs	r0, #99	; 0x63
 8001ed8:	f003 fb8b 	bl	80055f2 <ssd1306_FillRectangle>
 8001edc:	e007      	b.n	8001eee <showBattery+0xee>
    } else {
        ssd1306_FillRectangle(97,4,106,13, Black);
 8001ede:	2300      	movs	r3, #0
 8001ee0:	9300      	str	r3, [sp, #0]
 8001ee2:	230d      	movs	r3, #13
 8001ee4:	226a      	movs	r2, #106	; 0x6a
 8001ee6:	2104      	movs	r1, #4
 8001ee8:	2061      	movs	r0, #97	; 0x61
 8001eea:	f003 fb82 	bl	80055f2 <ssd1306_FillRectangle>
    }

    if (batteryVal < 500) {
 8001eee:	4b0d      	ldr	r3, [pc, #52]	; (8001f24 <showBattery+0x124>)
 8001ef0:	881b      	ldrh	r3, [r3, #0]
 8001ef2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001ef6:	d211      	bcs.n	8001f1c <showBattery+0x11c>
        ssd1306_FillRectangle(97,4,124,13, Black);
 8001ef8:	2300      	movs	r3, #0
 8001efa:	9300      	str	r3, [sp, #0]
 8001efc:	230d      	movs	r3, #13
 8001efe:	227c      	movs	r2, #124	; 0x7c
 8001f00:	2104      	movs	r1, #4
 8001f02:	2061      	movs	r0, #97	; 0x61
 8001f04:	f003 fb75 	bl	80055f2 <ssd1306_FillRectangle>
        ssd1306_SetCursor(103,5);
 8001f08:	2105      	movs	r1, #5
 8001f0a:	2067      	movs	r0, #103	; 0x67
 8001f0c:	f003 f952 	bl	80051b4 <ssd1306_SetCursor>
        ssd1306_printf(Font_6x8,"USB");
 8001f10:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <showBattery+0x128>)
 8001f12:	4a06      	ldr	r2, [pc, #24]	; (8001f2c <showBattery+0x12c>)
 8001f14:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f18:	f003 fbea 	bl	80056f0 <ssd1306_printf>
    }
 8001f1c:	bf00      	nop
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	20003326 	.word	0x20003326
 8001f28:	20000050 	.word	0x20000050
 8001f2c:	08013a9c 	.word	0x08013a9c

08001f30 <initSystem>:
// モジュール名 systemInit
// 処理概要     初期化処理
// 引数         なし
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////
void initSystem (void) {
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af02      	add	r7, sp, #8
	uint8_t rawData[6];

	// ADC
	if (HAL_ADC_Start_DMA(&hadc1, analogVal, 10) != HAL_OK)	Error_Handler();
 8001f36:	220a      	movs	r2, #10
 8001f38:	4934      	ldr	r1, [pc, #208]	; (800200c <initSystem+0xdc>)
 8001f3a:	4835      	ldr	r0, [pc, #212]	; (8002010 <initSystem+0xe0>)
 8001f3c:	f004 fbf0 	bl	8006720 <HAL_ADC_Start_DMA>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <initSystem+0x1a>
 8001f46:	f001 fc67 	bl	8003818 <Error_Handler>

	// Encoder count
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8001f4a:	213c      	movs	r1, #60	; 0x3c
 8001f4c:	4831      	ldr	r0, [pc, #196]	; (8002014 <initSystem+0xe4>)
 8001f4e:	f008 f983 	bl	800a258 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8001f52:	213c      	movs	r1, #60	; 0x3c
 8001f54:	4830      	ldr	r0, [pc, #192]	; (8002018 <initSystem+0xe8>)
 8001f56:	f008 f97f 	bl	800a258 <HAL_TIM_Encoder_Start>

	// Motor driver
	if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2) != HAL_OK) Error_Handler();
 8001f5a:	2104      	movs	r1, #4
 8001f5c:	482f      	ldr	r0, [pc, #188]	; (800201c <initSystem+0xec>)
 8001f5e:	f007 fef7 	bl	8009d50 <HAL_TIM_PWM_Start>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <initSystem+0x3c>
 8001f68:	f001 fc56 	bl	8003818 <Error_Handler>
	if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3) != HAL_OK) Error_Handler();
 8001f6c:	2108      	movs	r1, #8
 8001f6e:	482b      	ldr	r0, [pc, #172]	; (800201c <initSystem+0xec>)
 8001f70:	f007 feee 	bl	8009d50 <HAL_TIM_PWM_Start>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <initSystem+0x4e>
 8001f7a:	f001 fc4d 	bl	8003818 <Error_Handler>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8001f7e:	4b27      	ldr	r3, [pc, #156]	; (800201c <initSystem+0xec>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2200      	movs	r2, #0
 8001f84:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8001f86:	4b25      	ldr	r3, [pc, #148]	; (800201c <initSystem+0xec>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	63da      	str	r2, [r3, #60]	; 0x3c
	motorPwmOut(0,0);
 8001f8e:	2100      	movs	r1, #0
 8001f90:	2000      	movs	r0, #0
 8001f92:	f001 fc73 	bl	800387c <motorPwmOut>

	// line sensor PWM
	if (HAL_TIM_PWM_Start_IT(&htim13, TIM_CHANNEL_1) != HAL_OK) Error_Handler();
 8001f96:	2100      	movs	r1, #0
 8001f98:	4821      	ldr	r0, [pc, #132]	; (8002020 <initSystem+0xf0>)
 8001f9a:	f007 ffa1 	bl	8009ee0 <HAL_TIM_PWM_Start_IT>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <initSystem+0x78>
 8001fa4:	f001 fc38 	bl	8003818 <Error_Handler>
	powerLinesensors(0);
 8001fa8:	2000      	movs	r0, #0
 8001faa:	f000 fdd5 	bl	8002b58 <powerLinesensors>

	// IMU
	initIMU = initBMI088();
 8001fae:	f7ff f8d7 	bl	8001160 <initBMI088>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4b1b      	ldr	r3, [pc, #108]	; (8002024 <initSystem+0xf4>)
 8001fb8:	701a      	strb	r2, [r3, #0]
	// microSD
	initMSD = initMicroSD();
 8001fba:	f7ff fd21 	bl	8001a00 <initMicroSD>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	4b19      	ldr	r3, [pc, #100]	; (8002028 <initSystem+0xf8>)
 8001fc4:	701a      	strb	r2, [r3, #0]

	// Display
	ssd1306_Init();
 8001fc6:	f002 ff3d 	bl	8004e44 <ssd1306_Init>
	ssd1306_Fill(Black);
 8001fca:	2000      	movs	r0, #0
 8001fcc:	f002 ffa4 	bl	8004f18 <ssd1306_Fill>
	
	// Timer interrupt
	HAL_TIM_Base_Start_IT(&htim6);
 8001fd0:	4816      	ldr	r0, [pc, #88]	; (800202c <initSystem+0xfc>)
 8001fd2:	f007 fdcf 	bl	8009b74 <HAL_TIM_Base_Start_IT>
	// HAL_TIM_Base_Start_IT(&htim7);

	// トップバー表示
	// 電池マーク
	ssd1306_DrawRectangle(96,3,125,14,White);
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	230e      	movs	r3, #14
 8001fdc:	227d      	movs	r2, #125	; 0x7d
 8001fde:	2103      	movs	r1, #3
 8001fe0:	2060      	movs	r0, #96	; 0x60
 8001fe2:	f003 facf 	bl	8005584 <ssd1306_DrawRectangle>
	ssd1306_DrawRectangle(126,5,127,12,White);
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	230c      	movs	r3, #12
 8001fec:	227f      	movs	r2, #127	; 0x7f
 8001fee:	2105      	movs	r1, #5
 8001ff0:	207e      	movs	r0, #126	; 0x7e
 8001ff2:	f003 fac7 	bl	8005584 <ssd1306_DrawRectangle>
	ssd1306_UpdateScreen();
 8001ff6:	f002 ffb3 	bl	8004f60 <ssd1306_UpdateScreen>
	HAL_Delay(100);
 8001ffa:	2064      	movs	r0, #100	; 0x64
 8001ffc:	f004 f998 	bl	8006330 <HAL_Delay>
	showBattery();	// バッテリ残量
 8002000:	f7ff fefe 	bl	8001e00 <showBattery>

	// printf("boot Klic_RT_v2\n");
}
 8002004:	bf00      	nop
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	20003330 	.word	0x20003330
 8002010:	200033e0 	.word	0x200033e0
 8002014:	200035c4 	.word	0x200035c4
 8002018:	2000369c 	.word	0x2000369c
 800201c:	2000357c 	.word	0x2000357c
 8002020:	2000372c 	.word	0x2000372c
 8002024:	2000332b 	.word	0x2000332b
 8002028:	2000332a 	.word	0x2000332a
 800202c:	2000360c 	.word	0x2000360c

08002030 <loopSystem>:
// モジュール名 systemLoop
// 処理概要     メインループ
// 引数         なし
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////
void loopSystem (void) {
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
	switch (patternTrace) {
 8002034:	4b04      	ldr	r3, [pc, #16]	; (8002048 <loopSystem+0x18>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d102      	bne.n	8002042 <loopSystem+0x12>
      	case 0:
			setup();
 800203c:	f001 fcfa 	bl	8003a34 <setup>
			// 	cntRun = 0;
			// 	countdown = 6000;		// カウントダウンスタート
			// 	powerLinesensors(1);	// ラインセンサ ON
			// 	patternTrace = 1;
			// }
			break;
 8002040:	e000      	b.n	8002044 <loopSystem+0x14>
		// 	lcdRowPrintf(UPPER, "T  %2.2fs",(float)goalTime/1000);
		// 	lcdRowPrintf(LOWER, "M%02d E%d ",cntMarker, emcStop);
		// 	break;
    
      	default:
        	break;
 8002042:	bf00      	nop
    } // switch case
}
 8002044:	bf00      	nop
 8002046:	bd80      	pop	{r7, pc}
 8002048:	20003328 	.word	0x20003328

0800204c <countDown>:
// モジュール名 countDown
// 処理概要     カウントダウン
// 引数         なし
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////
void countDown (void) { 
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
	if (countdown > 0) countdown--;
 8002050:	4b09      	ldr	r3, [pc, #36]	; (8002078 <countDown+0x2c>)
 8002052:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002056:	2b00      	cmp	r3, #0
 8002058:	dd08      	ble.n	800206c <countDown+0x20>
 800205a:	4b07      	ldr	r3, [pc, #28]	; (8002078 <countDown+0x2c>)
 800205c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002060:	b29b      	uxth	r3, r3
 8002062:	3b01      	subs	r3, #1
 8002064:	b29b      	uxth	r3, r3
 8002066:	b21a      	sxth	r2, r3
 8002068:	4b03      	ldr	r3, [pc, #12]	; (8002078 <countDown+0x2c>)
 800206a:	801a      	strh	r2, [r3, #0]
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	20003348 	.word	0x20003348

0800207c <getEncoder>:
// モジュール名 getEncoder
// 処理概要     1ms間のエンコーダカウントを算出する
// 引数         なし
// 戻り値       なし
/////////////////////////////////////////////////////////////////////
void getEncoder(void) {
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
    uint16_t encRawR=0, encRawL=0;
 8002082:	2300      	movs	r3, #0
 8002084:	80fb      	strh	r3, [r7, #6]
 8002086:	2300      	movs	r3, #0
 8002088:	80bb      	strh	r3, [r7, #4]
    static encBufR=0, encBufL=0;

    // エンコーダカウントを取得
    encRawR = TIM8 -> CNT;
 800208a:	4b34      	ldr	r3, [pc, #208]	; (800215c <getEncoder+0xe0>)
 800208c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208e:	80fb      	strh	r3, [r7, #6]
	encRawL = TIM3 -> CNT;
 8002090:	4b33      	ldr	r3, [pc, #204]	; (8002160 <getEncoder+0xe4>)
 8002092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002094:	80bb      	strh	r3, [r7, #4]

    // 1msあたりのカウント
    encCurrentR = encRawR - encBufR;
 8002096:	4b33      	ldr	r3, [pc, #204]	; (8002164 <getEncoder+0xe8>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	b29b      	uxth	r3, r3
 800209c:	88fa      	ldrh	r2, [r7, #6]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	b21a      	sxth	r2, r3
 80020a4:	4b30      	ldr	r3, [pc, #192]	; (8002168 <getEncoder+0xec>)
 80020a6:	801a      	strh	r2, [r3, #0]
    encCurrentL = encBufL - encRawL;
 80020a8:	4b30      	ldr	r3, [pc, #192]	; (800216c <getEncoder+0xf0>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	88bb      	ldrh	r3, [r7, #4]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	b21a      	sxth	r2, r3
 80020b6:	4b2e      	ldr	r3, [pc, #184]	; (8002170 <getEncoder+0xf4>)
 80020b8:	801a      	strh	r2, [r3, #0]
    encCurrentN = (encCurrentR + encCurrentL ) / 2;
 80020ba:	4b2b      	ldr	r3, [pc, #172]	; (8002168 <getEncoder+0xec>)
 80020bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020c0:	461a      	mov	r2, r3
 80020c2:	4b2b      	ldr	r3, [pc, #172]	; (8002170 <getEncoder+0xf4>)
 80020c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020c8:	4413      	add	r3, r2
 80020ca:	0fda      	lsrs	r2, r3, #31
 80020cc:	4413      	add	r3, r2
 80020ce:	105b      	asrs	r3, r3, #1
 80020d0:	b21a      	sxth	r2, r3
 80020d2:	4b28      	ldr	r3, [pc, #160]	; (8002174 <getEncoder+0xf8>)
 80020d4:	801a      	strh	r2, [r3, #0]

    // カウントの積算(回転方向が逆なのでマイナスで積算)
    encTotalR += encCurrentR;
 80020d6:	4b24      	ldr	r3, [pc, #144]	; (8002168 <getEncoder+0xec>)
 80020d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020dc:	461a      	mov	r2, r3
 80020de:	4b26      	ldr	r3, [pc, #152]	; (8002178 <getEncoder+0xfc>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4413      	add	r3, r2
 80020e4:	4a24      	ldr	r2, [pc, #144]	; (8002178 <getEncoder+0xfc>)
 80020e6:	6013      	str	r3, [r2, #0]
    encTotalL += encCurrentL;
 80020e8:	4b21      	ldr	r3, [pc, #132]	; (8002170 <getEncoder+0xf4>)
 80020ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020ee:	461a      	mov	r2, r3
 80020f0:	4b22      	ldr	r3, [pc, #136]	; (800217c <getEncoder+0x100>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4413      	add	r3, r2
 80020f6:	4a21      	ldr	r2, [pc, #132]	; (800217c <getEncoder+0x100>)
 80020f8:	6013      	str	r3, [r2, #0]
    encTotalN += encCurrentN;
 80020fa:	4b1e      	ldr	r3, [pc, #120]	; (8002174 <getEncoder+0xf8>)
 80020fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002100:	461a      	mov	r2, r3
 8002102:	4b1f      	ldr	r3, [pc, #124]	; (8002180 <getEncoder+0x104>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4413      	add	r3, r2
 8002108:	4a1d      	ldr	r2, [pc, #116]	; (8002180 <getEncoder+0x104>)
 800210a:	6013      	str	r3, [r2, #0]

    // 外部変数
    enc1 += encCurrentN;
 800210c:	4b19      	ldr	r3, [pc, #100]	; (8002174 <getEncoder+0xf8>)
 800210e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002112:	461a      	mov	r2, r3
 8002114:	4b1b      	ldr	r3, [pc, #108]	; (8002184 <getEncoder+0x108>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4413      	add	r3, r2
 800211a:	4a1a      	ldr	r2, [pc, #104]	; (8002184 <getEncoder+0x108>)
 800211c:	6013      	str	r3, [r2, #0]
    encRightMarker += encCurrentN;
 800211e:	4b15      	ldr	r3, [pc, #84]	; (8002174 <getEncoder+0xf8>)
 8002120:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002124:	461a      	mov	r2, r3
 8002126:	4b18      	ldr	r3, [pc, #96]	; (8002188 <getEncoder+0x10c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4413      	add	r3, r2
 800212c:	4a16      	ldr	r2, [pc, #88]	; (8002188 <getEncoder+0x10c>)
 800212e:	6013      	str	r3, [r2, #0]
    encCurve += encCurrentN;
 8002130:	4b10      	ldr	r3, [pc, #64]	; (8002174 <getEncoder+0xf8>)
 8002132:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002136:	461a      	mov	r2, r3
 8002138:	4b14      	ldr	r3, [pc, #80]	; (800218c <getEncoder+0x110>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4413      	add	r3, r2
 800213e:	4a13      	ldr	r2, [pc, #76]	; (800218c <getEncoder+0x110>)
 8002140:	6013      	str	r3, [r2, #0]
    // 前回値を更新
    encBufR = encRawR;
 8002142:	88fb      	ldrh	r3, [r7, #6]
 8002144:	4a07      	ldr	r2, [pc, #28]	; (8002164 <getEncoder+0xe8>)
 8002146:	6013      	str	r3, [r2, #0]
    encBufL = encRawL;
 8002148:	88bb      	ldrh	r3, [r7, #4]
 800214a:	4a08      	ldr	r2, [pc, #32]	; (800216c <getEncoder+0xf0>)
 800214c:	6013      	str	r3, [r2, #0]
}
 800214e:	bf00      	nop
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	40010400 	.word	0x40010400
 8002160:	40000400 	.word	0x40000400
 8002164:	20003368 	.word	0x20003368
 8002168:	2000334a 	.word	0x2000334a
 800216c:	2000336c 	.word	0x2000336c
 8002170:	2000334c 	.word	0x2000334c
 8002174:	2000334e 	.word	0x2000334e
 8002178:	20003350 	.word	0x20003350
 800217c:	20003354 	.word	0x20003354
 8002180:	20003358 	.word	0x20003358
 8002184:	2000335c 	.word	0x2000335c
 8002188:	20003360 	.word	0x20003360
 800218c:	20003364 	.word	0x20003364

08002190 <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8002194:	2200      	movs	r2, #0
 8002196:	2104      	movs	r1, #4
 8002198:	4802      	ldr	r0, [pc, #8]	; (80021a4 <SELECT+0x14>)
 800219a:	f005 fcd1 	bl	8007b40 <HAL_GPIO_WritePin>
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40020c00 	.word	0x40020c00

080021a8 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80021ac:	2201      	movs	r2, #1
 80021ae:	2104      	movs	r1, #4
 80021b0:	4802      	ldr	r0, [pc, #8]	; (80021bc <DESELECT+0x14>)
 80021b2:	f005 fcc5 	bl	8007b40 <HAL_GPIO_WritePin>
}
 80021b6:	bf00      	nop
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40020c00 	.word	0x40020c00

080021c0 <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&SPI_Handle) != HAL_SPI_STATE_READY);
 80021ca:	bf00      	nop
 80021cc:	4808      	ldr	r0, [pc, #32]	; (80021f0 <SPI_TxByte+0x30>)
 80021ce:	f007 fb43 	bl	8009858 <HAL_SPI_GetState>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d1f9      	bne.n	80021cc <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&SPI_Handle, &data, 1, SPI_TIMEOUT);
 80021d8:	1df9      	adds	r1, r7, #7
 80021da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021de:	2201      	movs	r2, #1
 80021e0:	4803      	ldr	r0, [pc, #12]	; (80021f0 <SPI_TxByte+0x30>)
 80021e2:	f006 ff4a 	bl	800907a <HAL_SPI_Transmit>
}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20003524 	.word	0x20003524

080021f4 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80021fa:	23ff      	movs	r3, #255	; 0xff
 80021fc:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80021fe:	2300      	movs	r3, #0
 8002200:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&SPI_Handle) != HAL_SPI_STATE_READY));
 8002202:	bf00      	nop
 8002204:	4809      	ldr	r0, [pc, #36]	; (800222c <SPI_RxByte+0x38>)
 8002206:	f007 fb27 	bl	8009858 <HAL_SPI_GetState>
 800220a:	4603      	mov	r3, r0
 800220c:	2b01      	cmp	r3, #1
 800220e:	d1f9      	bne.n	8002204 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&SPI_Handle, &dummy, &data, 1, SPI_TIMEOUT);
 8002210:	1dba      	adds	r2, r7, #6
 8002212:	1df9      	adds	r1, r7, #7
 8002214:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	2301      	movs	r3, #1
 800221c:	4803      	ldr	r0, [pc, #12]	; (800222c <SPI_RxByte+0x38>)
 800221e:	f007 f979 	bl	8009514 <HAL_SPI_TransmitReceive>
  
  return data;
 8002222:	79bb      	ldrb	r3, [r7, #6]
}
 8002224:	4618      	mov	r0, r3
 8002226:	3708      	adds	r7, #8
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	20003524 	.word	0x20003524

08002230 <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8002238:	f7ff ffdc 	bl	80021f4 <SPI_RxByte>
 800223c:	4603      	mov	r3, r0
 800223e:	461a      	mov	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	701a      	strb	r2, [r3, #0]
}
 8002244:	bf00      	nop
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 8002252:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <SD_ReadyWait+0x34>)
 8002254:	2232      	movs	r2, #50	; 0x32
 8002256:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 8002258:	f7ff ffcc 	bl	80021f4 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 800225c:	f7ff ffca 	bl	80021f4 <SPI_RxByte>
 8002260:	4603      	mov	r3, r0
 8002262:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8002264:	79fb      	ldrb	r3, [r7, #7]
 8002266:	2bff      	cmp	r3, #255	; 0xff
 8002268:	d004      	beq.n	8002274 <SD_ReadyWait+0x28>
 800226a:	4b05      	ldr	r3, [pc, #20]	; (8002280 <SD_ReadyWait+0x34>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	b2db      	uxtb	r3, r3
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1f3      	bne.n	800225c <SD_ReadyWait+0x10>
  
  return res;
 8002274:	79fb      	ldrb	r3, [r7, #7]
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	20003b98 	.word	0x20003b98

08002284 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 800228a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800228e:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 8002290:	f7ff ff8a 	bl	80021a8 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8002294:	2300      	movs	r3, #0
 8002296:	613b      	str	r3, [r7, #16]
 8002298:	e005      	b.n	80022a6 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800229a:	20ff      	movs	r0, #255	; 0xff
 800229c:	f7ff ff90 	bl	80021c0 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	3301      	adds	r3, #1
 80022a4:	613b      	str	r3, [r7, #16]
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	2b09      	cmp	r3, #9
 80022aa:	ddf6      	ble.n	800229a <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 80022ac:	f7ff ff70 	bl	8002190 <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 80022b0:	2340      	movs	r3, #64	; 0x40
 80022b2:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 80022b4:	2300      	movs	r3, #0
 80022b6:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 80022b8:	2300      	movs	r3, #0
 80022ba:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 80022bc:	2300      	movs	r3, #0
 80022be:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80022c0:	2300      	movs	r3, #0
 80022c2:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80022c4:	2395      	movs	r3, #149	; 0x95
 80022c6:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 80022c8:	2300      	movs	r3, #0
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	e009      	b.n	80022e2 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80022ce:	1d3a      	adds	r2, r7, #4
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	4413      	add	r3, r2
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff ff72 	bl	80021c0 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	3301      	adds	r3, #1
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2b05      	cmp	r3, #5
 80022e6:	ddf2      	ble.n	80022ce <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 80022e8:	e002      	b.n	80022f0 <SD_PowerOn+0x6c>
  {
    Count--;
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	3b01      	subs	r3, #1
 80022ee:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80022f0:	f7ff ff80 	bl	80021f4 <SPI_RxByte>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d002      	beq.n	8002300 <SD_PowerOn+0x7c>
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1f4      	bne.n	80022ea <SD_PowerOn+0x66>
  }
  
  DESELECT();
 8002300:	f7ff ff52 	bl	80021a8 <DESELECT>
  SPI_TxByte(0XFF);
 8002304:	20ff      	movs	r0, #255	; 0xff
 8002306:	f7ff ff5b 	bl	80021c0 <SPI_TxByte>
  
  PowerFlag = 1;
 800230a:	4b03      	ldr	r3, [pc, #12]	; (8002318 <SD_PowerOn+0x94>)
 800230c:	2201      	movs	r2, #1
 800230e:	701a      	strb	r2, [r3, #0]
}
 8002310:	bf00      	nop
 8002312:	3718      	adds	r7, #24
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	20003371 	.word	0x20003371

0800231c <SD_PowerOff>:

/* 電源を切る */
static void SD_PowerOff(void) 
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8002320:	4b03      	ldr	r3, [pc, #12]	; (8002330 <SD_PowerOff+0x14>)
 8002322:	2200      	movs	r2, #0
 8002324:	701a      	strb	r2, [r3, #0]
}
 8002326:	bf00      	nop
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	20003371 	.word	0x20003371

08002334 <SD_CheckPower>:

/* 電源状態の確認 */
static uint8_t SD_CheckPower(void) 
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8002338:	4b03      	ldr	r3, [pc, #12]	; (8002348 <SD_CheckPower+0x14>)
 800233a:	781b      	ldrb	r3, [r3, #0]
}
 800233c:	4618      	mov	r0, r3
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	20003371 	.word	0x20003371

0800234c <SD_RxDataBlock>:

/* データパケットの受信 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms タイマー */
  Timer1 = 10;
 8002356:	4b17      	ldr	r3, [pc, #92]	; (80023b4 <SD_RxDataBlock+0x68>)
 8002358:	220a      	movs	r2, #10
 800235a:	701a      	strb	r2, [r3, #0]

  /* 応答待ち */		
  do 
  {    
    token = SPI_RxByte();
 800235c:	f7ff ff4a 	bl	80021f4 <SPI_RxByte>
 8002360:	4603      	mov	r3, r0
 8002362:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8002364:	7bfb      	ldrb	r3, [r7, #15]
 8002366:	2bff      	cmp	r3, #255	; 0xff
 8002368:	d104      	bne.n	8002374 <SD_RxDataBlock+0x28>
 800236a:	4b12      	ldr	r3, [pc, #72]	; (80023b4 <SD_RxDataBlock+0x68>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1f3      	bne.n	800235c <SD_RxDataBlock+0x10>
  
  /* 0xFE 以外トークン受信時のエラー処理 */
  if(token != 0xFE)
 8002374:	7bfb      	ldrb	r3, [r7, #15]
 8002376:	2bfe      	cmp	r3, #254	; 0xfe
 8002378:	d001      	beq.n	800237e <SD_RxDataBlock+0x32>
    return FALSE;
 800237a:	2300      	movs	r3, #0
 800237c:	e016      	b.n	80023ac <SD_RxDataBlock+0x60>
  
  /* バッファへのデータの受信 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	1c5a      	adds	r2, r3, #1
 8002382:	607a      	str	r2, [r7, #4]
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff ff53 	bl	8002230 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	1c5a      	adds	r2, r3, #1
 800238e:	607a      	str	r2, [r7, #4]
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff ff4d 	bl	8002230 <SPI_RxBytePtr>
  } while(btr -= 2);
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	3b02      	subs	r3, #2
 800239a:	603b      	str	r3, [r7, #0]
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1ed      	bne.n	800237e <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 無視 */
 80023a2:	f7ff ff27 	bl	80021f4 <SPI_RxByte>
  SPI_RxByte();
 80023a6:	f7ff ff25 	bl	80021f4 <SPI_RxByte>
  
  return TRUE;
 80023aa:	2301      	movs	r3, #1
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	20003b97 	.word	0x20003b97

080023b8 <SD_TxDataBlock>:

/* データ転送パケット */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	460b      	mov	r3, r1
 80023c2:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80023c4:	2300      	movs	r3, #0
 80023c6:	737b      	strb	r3, [r7, #13]
    
  /* SDカード準備待ち */
  if (SD_ReadyWait() != 0xFF)
 80023c8:	f7ff ff40 	bl	800224c <SD_ReadyWait>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2bff      	cmp	r3, #255	; 0xff
 80023d0:	d001      	beq.n	80023d6 <SD_TxDataBlock+0x1e>
    return FALSE;
 80023d2:	2300      	movs	r3, #0
 80023d4:	e040      	b.n	8002458 <SD_TxDataBlock+0xa0>
  
  /* トークン転送 */
  SPI_TxByte(token);      
 80023d6:	78fb      	ldrb	r3, [r7, #3]
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff fef1 	bl	80021c0 <SPI_TxByte>
  
  /* データトークンの場合 */
  if (token != 0xFD) 
 80023de:	78fb      	ldrb	r3, [r7, #3]
 80023e0:	2bfd      	cmp	r3, #253	; 0xfd
 80023e2:	d031      	beq.n	8002448 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 80023e4:	2300      	movs	r3, #0
 80023e6:	73bb      	strb	r3, [r7, #14]
    
    /* 512バイトのデータ転送 */
    do 
    { 
      SPI_TxByte(*buff++);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	1c5a      	adds	r2, r3, #1
 80023ec:	607a      	str	r2, [r7, #4]
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff fee5 	bl	80021c0 <SPI_TxByte>
      SPI_TxByte(*buff++);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	1c5a      	adds	r2, r3, #1
 80023fa:	607a      	str	r2, [r7, #4]
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	4618      	mov	r0, r3
 8002400:	f7ff fede 	bl	80021c0 <SPI_TxByte>
    } while (--wc);
 8002404:	7bbb      	ldrb	r3, [r7, #14]
 8002406:	3b01      	subs	r3, #1
 8002408:	73bb      	strb	r3, [r7, #14]
 800240a:	7bbb      	ldrb	r3, [r7, #14]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d1eb      	bne.n	80023e8 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 無視 */
 8002410:	f7ff fef0 	bl	80021f4 <SPI_RxByte>
    SPI_RxByte();
 8002414:	f7ff feee 	bl	80021f4 <SPI_RxByte>
    
    /* デートレスポンスの受信 */        
    while (i <= 64) 
 8002418:	e00b      	b.n	8002432 <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 800241a:	f7ff feeb 	bl	80021f4 <SPI_RxByte>
 800241e:	4603      	mov	r3, r0
 8002420:	73fb      	strb	r3, [r7, #15]
      
      /* エラー応答処理 */
      if ((resp & 0x1F) == 0x05) 
 8002422:	7bfb      	ldrb	r3, [r7, #15]
 8002424:	f003 031f 	and.w	r3, r3, #31
 8002428:	2b05      	cmp	r3, #5
 800242a:	d006      	beq.n	800243a <SD_TxDataBlock+0x82>
        break;
      
      i++;
 800242c:	7b7b      	ldrb	r3, [r7, #13]
 800242e:	3301      	adds	r3, #1
 8002430:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 8002432:	7b7b      	ldrb	r3, [r7, #13]
 8002434:	2b40      	cmp	r3, #64	; 0x40
 8002436:	d9f0      	bls.n	800241a <SD_TxDataBlock+0x62>
 8002438:	e000      	b.n	800243c <SD_TxDataBlock+0x84>
        break;
 800243a:	bf00      	nop
    }
    
    /* SPI 受信バッファ Clear*/
    while (SPI_RxByte() == 0);
 800243c:	bf00      	nop
 800243e:	f7ff fed9 	bl	80021f4 <SPI_RxByte>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0fa      	beq.n	800243e <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8002448:	7bfb      	ldrb	r3, [r7, #15]
 800244a:	f003 031f 	and.w	r3, r3, #31
 800244e:	2b05      	cmp	r3, #5
 8002450:	d101      	bne.n	8002456 <SD_TxDataBlock+0x9e>
    return TRUE;
 8002452:	2301      	movs	r3, #1
 8002454:	e000      	b.n	8002458 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD パケット転送 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	6039      	str	r1, [r7, #0]
 800246a:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SDカード待ち */
  if (SD_ReadyWait() != 0xFF)
 800246c:	f7ff feee 	bl	800224c <SD_ReadyWait>
 8002470:	4603      	mov	r3, r0
 8002472:	2bff      	cmp	r3, #255	; 0xff
 8002474:	d001      	beq.n	800247a <SD_SendCmd+0x1a>
    return 0xFF;
 8002476:	23ff      	movs	r3, #255	; 0xff
 8002478:	e040      	b.n	80024fc <SD_SendCmd+0x9c>
  
  /* コマンドパケット転送 */
  SPI_TxByte(cmd); 			/* Command */
 800247a:	79fb      	ldrb	r3, [r7, #7]
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff fe9f 	bl	80021c0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	0e1b      	lsrs	r3, r3, #24
 8002486:	b2db      	uxtb	r3, r3
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff fe99 	bl	80021c0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	0c1b      	lsrs	r3, r3, #16
 8002492:	b2db      	uxtb	r3, r3
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff fe93 	bl	80021c0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	0a1b      	lsrs	r3, r3, #8
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff fe8d 	bl	80021c0 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff fe88 	bl	80021c0 <SPI_TxByte>
  
  /* コマンドによるCRCの準備 */
  crc = 0;  
 80024b0:	2300      	movs	r3, #0
 80024b2:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 80024b4:	79fb      	ldrb	r3, [r7, #7]
 80024b6:	2b40      	cmp	r3, #64	; 0x40
 80024b8:	d101      	bne.n	80024be <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 80024ba:	2395      	movs	r3, #149	; 0x95
 80024bc:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 80024be:	79fb      	ldrb	r3, [r7, #7]
 80024c0:	2b48      	cmp	r3, #72	; 0x48
 80024c2:	d101      	bne.n	80024c8 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80024c4:	2387      	movs	r3, #135	; 0x87
 80024c6:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 転送 */
  SPI_TxByte(crc);
 80024c8:	7bfb      	ldrb	r3, [r7, #15]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff fe78 	bl	80021c0 <SPI_TxByte>
  
  /* CMD12 Stop Readingコマンドの場合は、応答バイトを1つ捨てる */
  if (cmd == CMD12)
 80024d0:	79fb      	ldrb	r3, [r7, #7]
 80024d2:	2b4c      	cmp	r3, #76	; 0x4c
 80024d4:	d101      	bne.n	80024da <SD_SendCmd+0x7a>
    SPI_RxByte();
 80024d6:	f7ff fe8d 	bl	80021f4 <SPI_RxByte>
  
  /* 10回以内に正常データを受信する. */
  uint8_t n = 10; 
 80024da:	230a      	movs	r3, #10
 80024dc:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80024de:	f7ff fe89 	bl	80021f4 <SPI_RxByte>
 80024e2:	4603      	mov	r3, r0
 80024e4:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80024e6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	da05      	bge.n	80024fa <SD_SendCmd+0x9a>
 80024ee:	7bbb      	ldrb	r3, [r7, #14]
 80024f0:	3b01      	subs	r3, #1
 80024f2:	73bb      	strb	r3, [r7, #14]
 80024f4:	7bbb      	ldrb	r3, [r7, #14]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1f1      	bne.n	80024de <SD_SendCmd+0x7e>

  return res;
 80024fa:	7b7b      	ldrb	r3, [r7, #13]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <SD_disk_initialize>:
  user_diskio.cファイルで使用される.
-----------------------------------------------------------------------*/

/* SDカードの初期化 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8002504:	b590      	push	{r4, r7, lr}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	4603      	mov	r3, r0
 800250c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 一種類のドライブのみサポート */
  if(drv)
 800250e:	79fb      	ldrb	r3, [r7, #7]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8002514:	2301      	movs	r3, #1
 8002516:	e0d5      	b.n	80026c4 <SD_disk_initialize+0x1c0>
  
  /* SDカード未挿入 */
  if(Stat & STA_NODISK)
 8002518:	4b6c      	ldr	r3, [pc, #432]	; (80026cc <SD_disk_initialize+0x1c8>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	b2db      	uxtb	r3, r3
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <SD_disk_initialize+0x2a>
    return Stat;        
 8002526:	4b69      	ldr	r3, [pc, #420]	; (80026cc <SD_disk_initialize+0x1c8>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	b2db      	uxtb	r3, r3
 800252c:	e0ca      	b.n	80026c4 <SD_disk_initialize+0x1c0>
  
  /* SDカード Power On */
  SD_PowerOn();         
 800252e:	f7ff fea9 	bl	8002284 <SD_PowerOn>
  
  /* SPI 通信のために Chip Select */
  SELECT();             
 8002532:	f7ff fe2d 	bl	8002190 <SELECT>
  
  /* SDカードタイプ変数の初期化 */
  type = 0;
 8002536:	2300      	movs	r3, #0
 8002538:	73bb      	strb	r3, [r7, #14]
  
  /* Idle ステータスエントリー */
  if (SD_SendCmd(CMD0, 0) == 1) 
 800253a:	2100      	movs	r1, #0
 800253c:	2040      	movs	r0, #64	; 0x40
 800253e:	f7ff ff8f 	bl	8002460 <SD_SendCmd>
 8002542:	4603      	mov	r3, r0
 8002544:	2b01      	cmp	r3, #1
 8002546:	f040 80a5 	bne.w	8002694 <SD_disk_initialize+0x190>
  { 
    /* タイマー1秒設定 */
    Timer1 = 100;
 800254a:	4b61      	ldr	r3, [pc, #388]	; (80026d0 <SD_disk_initialize+0x1cc>)
 800254c:	2264      	movs	r2, #100	; 0x64
 800254e:	701a      	strb	r2, [r3, #0]
    
    /* SD インタフェース動作条件の確認 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8002550:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002554:	2048      	movs	r0, #72	; 0x48
 8002556:	f7ff ff83 	bl	8002460 <SD_SendCmd>
 800255a:	4603      	mov	r3, r0
 800255c:	2b01      	cmp	r3, #1
 800255e:	d158      	bne.n	8002612 <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8002560:	2300      	movs	r3, #0
 8002562:	73fb      	strb	r3, [r7, #15]
 8002564:	e00c      	b.n	8002580 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8002566:	7bfc      	ldrb	r4, [r7, #15]
 8002568:	f7ff fe44 	bl	80021f4 <SPI_RxByte>
 800256c:	4603      	mov	r3, r0
 800256e:	461a      	mov	r2, r3
 8002570:	f104 0310 	add.w	r3, r4, #16
 8002574:	443b      	add	r3, r7
 8002576:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 800257a:	7bfb      	ldrb	r3, [r7, #15]
 800257c:	3301      	adds	r3, #1
 800257e:	73fb      	strb	r3, [r7, #15]
 8002580:	7bfb      	ldrb	r3, [r7, #15]
 8002582:	2b03      	cmp	r3, #3
 8002584:	d9ef      	bls.n	8002566 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8002586:	7abb      	ldrb	r3, [r7, #10]
 8002588:	2b01      	cmp	r3, #1
 800258a:	f040 8083 	bne.w	8002694 <SD_disk_initialize+0x190>
 800258e:	7afb      	ldrb	r3, [r7, #11]
 8002590:	2baa      	cmp	r3, #170	; 0xaa
 8002592:	d17f      	bne.n	8002694 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 電圧範囲動作 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8002594:	2100      	movs	r1, #0
 8002596:	2077      	movs	r0, #119	; 0x77
 8002598:	f7ff ff62 	bl	8002460 <SD_SendCmd>
 800259c:	4603      	mov	r3, r0
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d807      	bhi.n	80025b2 <SD_disk_initialize+0xae>
 80025a2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80025a6:	2069      	movs	r0, #105	; 0x69
 80025a8:	f7ff ff5a 	bl	8002460 <SD_SendCmd>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d005      	beq.n	80025be <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 80025b2:	4b47      	ldr	r3, [pc, #284]	; (80026d0 <SD_disk_initialize+0x1cc>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1eb      	bne.n	8002594 <SD_disk_initialize+0x90>
 80025bc:	e000      	b.n	80025c0 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 80025be:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 80025c0:	4b43      	ldr	r3, [pc, #268]	; (80026d0 <SD_disk_initialize+0x1cc>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d064      	beq.n	8002694 <SD_disk_initialize+0x190>
 80025ca:	2100      	movs	r1, #0
 80025cc:	207a      	movs	r0, #122	; 0x7a
 80025ce:	f7ff ff47 	bl	8002460 <SD_SendCmd>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d15d      	bne.n	8002694 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80025d8:	2300      	movs	r3, #0
 80025da:	73fb      	strb	r3, [r7, #15]
 80025dc:	e00c      	b.n	80025f8 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80025de:	7bfc      	ldrb	r4, [r7, #15]
 80025e0:	f7ff fe08 	bl	80021f4 <SPI_RxByte>
 80025e4:	4603      	mov	r3, r0
 80025e6:	461a      	mov	r2, r3
 80025e8:	f104 0310 	add.w	r3, r4, #16
 80025ec:	443b      	add	r3, r7
 80025ee:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80025f2:	7bfb      	ldrb	r3, [r7, #15]
 80025f4:	3301      	adds	r3, #1
 80025f6:	73fb      	strb	r3, [r7, #15]
 80025f8:	7bfb      	ldrb	r3, [r7, #15]
 80025fa:	2b03      	cmp	r3, #3
 80025fc:	d9ef      	bls.n	80025de <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 80025fe:	7a3b      	ldrb	r3, [r7, #8]
 8002600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <SD_disk_initialize+0x108>
 8002608:	2306      	movs	r3, #6
 800260a:	e000      	b.n	800260e <SD_disk_initialize+0x10a>
 800260c:	2302      	movs	r3, #2
 800260e:	73bb      	strb	r3, [r7, #14]
 8002610:	e040      	b.n	8002694 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8002612:	2100      	movs	r1, #0
 8002614:	2077      	movs	r0, #119	; 0x77
 8002616:	f7ff ff23 	bl	8002460 <SD_SendCmd>
 800261a:	4603      	mov	r3, r0
 800261c:	2b01      	cmp	r3, #1
 800261e:	d808      	bhi.n	8002632 <SD_disk_initialize+0x12e>
 8002620:	2100      	movs	r1, #0
 8002622:	2069      	movs	r0, #105	; 0x69
 8002624:	f7ff ff1c 	bl	8002460 <SD_SendCmd>
 8002628:	4603      	mov	r3, r0
 800262a:	2b01      	cmp	r3, #1
 800262c:	d801      	bhi.n	8002632 <SD_disk_initialize+0x12e>
 800262e:	2302      	movs	r3, #2
 8002630:	e000      	b.n	8002634 <SD_disk_initialize+0x130>
 8002632:	2301      	movs	r3, #1
 8002634:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8002636:	7bbb      	ldrb	r3, [r7, #14]
 8002638:	2b02      	cmp	r3, #2
 800263a:	d10e      	bne.n	800265a <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 800263c:	2100      	movs	r1, #0
 800263e:	2077      	movs	r0, #119	; 0x77
 8002640:	f7ff ff0e 	bl	8002460 <SD_SendCmd>
 8002644:	4603      	mov	r3, r0
 8002646:	2b01      	cmp	r3, #1
 8002648:	d80e      	bhi.n	8002668 <SD_disk_initialize+0x164>
 800264a:	2100      	movs	r1, #0
 800264c:	2069      	movs	r0, #105	; 0x69
 800264e:	f7ff ff07 	bl	8002460 <SD_SendCmd>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d107      	bne.n	8002668 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8002658:	e00d      	b.n	8002676 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 800265a:	2100      	movs	r1, #0
 800265c:	2041      	movs	r0, #65	; 0x41
 800265e:	f7ff feff 	bl	8002460 <SD_SendCmd>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d005      	beq.n	8002674 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8002668:	4b19      	ldr	r3, [pc, #100]	; (80026d0 <SD_disk_initialize+0x1cc>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1e1      	bne.n	8002636 <SD_disk_initialize+0x132>
 8002672:	e000      	b.n	8002676 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8002674:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8002676:	4b16      	ldr	r3, [pc, #88]	; (80026d0 <SD_disk_initialize+0x1cc>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	d007      	beq.n	8002690 <SD_disk_initialize+0x18c>
 8002680:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002684:	2050      	movs	r0, #80	; 0x50
 8002686:	f7ff feeb 	bl	8002460 <SD_SendCmd>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <SD_disk_initialize+0x190>
      {
        /* ブロック長の選択 */
        type = 0;
 8002690:	2300      	movs	r3, #0
 8002692:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 8002694:	4a0f      	ldr	r2, [pc, #60]	; (80026d4 <SD_disk_initialize+0x1d0>)
 8002696:	7bbb      	ldrb	r3, [r7, #14]
 8002698:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 800269a:	f7ff fd85 	bl	80021a8 <DESELECT>
  
  SPI_RxByte(); /* Idle 状態遷移 (Release DO) */
 800269e:	f7ff fda9 	bl	80021f4 <SPI_RxByte>
  
  if (type) 
 80026a2:	7bbb      	ldrb	r3, [r7, #14]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d008      	beq.n	80026ba <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 80026a8:	4b08      	ldr	r3, [pc, #32]	; (80026cc <SD_disk_initialize+0x1c8>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	f023 0301 	bic.w	r3, r3, #1
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	4b05      	ldr	r3, [pc, #20]	; (80026cc <SD_disk_initialize+0x1c8>)
 80026b6:	701a      	strb	r2, [r3, #0]
 80026b8:	e001      	b.n	80026be <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80026ba:	f7ff fe2f 	bl	800231c <SD_PowerOff>
  }
  
  return Stat;
 80026be:	4b03      	ldr	r3, [pc, #12]	; (80026cc <SD_disk_initialize+0x1c8>)
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	b2db      	uxtb	r3, r3
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd90      	pop	{r4, r7, pc}
 80026cc:	20000041 	.word	0x20000041
 80026d0:	20003b97 	.word	0x20003b97
 80026d4:	20003370 	.word	0x20003370

080026d8 <SD_disk_status>:

/* ディスクの状態の確認 */
DSTATUS SD_disk_status(BYTE drv) 
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80026e2:	79fb      	ldrb	r3, [r7, #7]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <SD_disk_status+0x14>
    return STA_NOINIT; 
 80026e8:	2301      	movs	r3, #1
 80026ea:	e002      	b.n	80026f2 <SD_disk_status+0x1a>
  
  return Stat;
 80026ec:	4b04      	ldr	r3, [pc, #16]	; (8002700 <SD_disk_status+0x28>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	b2db      	uxtb	r3, r3
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	20000041 	.word	0x20000041

08002704 <SD_disk_read>:

/* セクターを読む */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	60b9      	str	r1, [r7, #8]
 800270c:	607a      	str	r2, [r7, #4]
 800270e:	603b      	str	r3, [r7, #0]
 8002710:	4603      	mov	r3, r0
 8002712:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8002714:	7bfb      	ldrb	r3, [r7, #15]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d102      	bne.n	8002720 <SD_disk_read+0x1c>
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d101      	bne.n	8002724 <SD_disk_read+0x20>
    return RES_PARERR;
 8002720:	2304      	movs	r3, #4
 8002722:	e054      	b.n	80027ce <SD_disk_read+0xca>
  
  if (Stat & STA_NOINIT)
 8002724:	4b2c      	ldr	r3, [pc, #176]	; (80027d8 <SD_disk_read+0xd4>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	b2db      	uxtb	r3, r3
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8002732:	2303      	movs	r3, #3
 8002734:	e04b      	b.n	80027ce <SD_disk_read+0xca>
  
  if (!(CardType & 4))
 8002736:	4b29      	ldr	r3, [pc, #164]	; (80027dc <SD_disk_read+0xd8>)
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	f003 0304 	and.w	r3, r3, #4
 800273e:	2b00      	cmp	r3, #0
 8002740:	d102      	bne.n	8002748 <SD_disk_read+0x44>
    sector *= 512;      /* 指定 sector を Byte addressing 単位に変更 */
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	025b      	lsls	r3, r3, #9
 8002746:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8002748:	f7ff fd22 	bl	8002190 <SELECT>
  
  if (count == 1) 
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d111      	bne.n	8002776 <SD_disk_read+0x72>
  { 
    /* シングルブロックを読む */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	2051      	movs	r0, #81	; 0x51
 8002756:	f7ff fe83 	bl	8002460 <SD_SendCmd>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d12c      	bne.n	80027ba <SD_disk_read+0xb6>
 8002760:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002764:	68b8      	ldr	r0, [r7, #8]
 8002766:	f7ff fdf1 	bl	800234c <SD_RxDataBlock>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d024      	beq.n	80027ba <SD_disk_read+0xb6>
      count = 0;
 8002770:	2300      	movs	r3, #0
 8002772:	603b      	str	r3, [r7, #0]
 8002774:	e021      	b.n	80027ba <SD_disk_read+0xb6>
  } 
  else 
  { 
    /* マルチブロック読み取り */
    if (SD_SendCmd(CMD18, sector) == 0) 
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	2052      	movs	r0, #82	; 0x52
 800277a:	f7ff fe71 	bl	8002460 <SD_SendCmd>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d11a      	bne.n	80027ba <SD_disk_read+0xb6>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8002784:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002788:	68b8      	ldr	r0, [r7, #8]
 800278a:	f7ff fddf 	bl	800234c <SD_RxDataBlock>
 800278e:	4603      	mov	r3, r0
 8002790:	f083 0301 	eor.w	r3, r3, #1
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10a      	bne.n	80027b0 <SD_disk_read+0xac>
          break;
        
        buff += 512;
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80027a0:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	3b01      	subs	r3, #1
 80027a6:	603b      	str	r3, [r7, #0]
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1ea      	bne.n	8002784 <SD_disk_read+0x80>
 80027ae:	e000      	b.n	80027b2 <SD_disk_read+0xae>
          break;
 80027b0:	bf00      	nop
      
      /* STOP_TRANSMISSION, すべてのブロックをすべて読んだ後、転送停止要求 */
      SD_SendCmd(CMD12, 0); 
 80027b2:	2100      	movs	r1, #0
 80027b4:	204c      	movs	r0, #76	; 0x4c
 80027b6:	f7ff fe53 	bl	8002460 <SD_SendCmd>
    }
  }
  
  DESELECT();
 80027ba:	f7ff fcf5 	bl	80021a8 <DESELECT>
  SPI_RxByte(); /* Idle 状態(Release DO) */
 80027be:	f7ff fd19 	bl	80021f4 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	bf14      	ite	ne
 80027c8:	2301      	movne	r3, #1
 80027ca:	2300      	moveq	r3, #0
 80027cc:	b2db      	uxtb	r3, r3
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	20000041 	.word	0x20000041
 80027dc:	20003370 	.word	0x20003370

080027e0 <SD_disk_write>:

/* セクターを書く */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60b9      	str	r1, [r7, #8]
 80027e8:	607a      	str	r2, [r7, #4]
 80027ea:	603b      	str	r3, [r7, #0]
 80027ec:	4603      	mov	r3, r0
 80027ee:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80027f0:	7bfb      	ldrb	r3, [r7, #15]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d102      	bne.n	80027fc <SD_disk_write+0x1c>
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <SD_disk_write+0x20>
    return RES_PARERR;
 80027fc:	2304      	movs	r3, #4
 80027fe:	e071      	b.n	80028e4 <SD_disk_write+0x104>
  
  if (Stat & STA_NOINIT)
 8002800:	4b3a      	ldr	r3, [pc, #232]	; (80028ec <SD_disk_write+0x10c>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	b2db      	uxtb	r3, r3
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <SD_disk_write+0x32>
    return RES_NOTRDY;
 800280e:	2303      	movs	r3, #3
 8002810:	e068      	b.n	80028e4 <SD_disk_write+0x104>
  
  if (Stat & STA_PROTECT)
 8002812:	4b36      	ldr	r3, [pc, #216]	; (80028ec <SD_disk_write+0x10c>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	b2db      	uxtb	r3, r3
 8002818:	f003 0304 	and.w	r3, r3, #4
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <SD_disk_write+0x44>
    return RES_WRPRT;
 8002820:	2302      	movs	r3, #2
 8002822:	e05f      	b.n	80028e4 <SD_disk_write+0x104>
  
  if (!(CardType & 4))
 8002824:	4b32      	ldr	r3, [pc, #200]	; (80028f0 <SD_disk_write+0x110>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	2b00      	cmp	r3, #0
 800282e:	d102      	bne.n	8002836 <SD_disk_write+0x56>
    sector *= 512; /* 指定 sector を Byte addressing 単位に変更 */
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	025b      	lsls	r3, r3, #9
 8002834:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8002836:	f7ff fcab 	bl	8002190 <SELECT>
  
  if (count == 1) 
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d110      	bne.n	8002862 <SD_disk_write+0x82>
  { 
    /* シングルブロック書き込み */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8002840:	6879      	ldr	r1, [r7, #4]
 8002842:	2058      	movs	r0, #88	; 0x58
 8002844:	f7ff fe0c 	bl	8002460 <SD_SendCmd>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d140      	bne.n	80028d0 <SD_disk_write+0xf0>
 800284e:	21fe      	movs	r1, #254	; 0xfe
 8002850:	68b8      	ldr	r0, [r7, #8]
 8002852:	f7ff fdb1 	bl	80023b8 <SD_TxDataBlock>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d039      	beq.n	80028d0 <SD_disk_write+0xf0>
      count = 0;
 800285c:	2300      	movs	r3, #0
 800285e:	603b      	str	r3, [r7, #0]
 8002860:	e036      	b.n	80028d0 <SD_disk_write+0xf0>
  } 
  else 
  { 
    /* マルチブロック書き込み */
    if (CardType & 2) 
 8002862:	4b23      	ldr	r3, [pc, #140]	; (80028f0 <SD_disk_write+0x110>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d007      	beq.n	800287e <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800286e:	2100      	movs	r1, #0
 8002870:	2077      	movs	r0, #119	; 0x77
 8002872:	f7ff fdf5 	bl	8002460 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8002876:	6839      	ldr	r1, [r7, #0]
 8002878:	2057      	movs	r0, #87	; 0x57
 800287a:	f7ff fdf1 	bl	8002460 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 800287e:	6879      	ldr	r1, [r7, #4]
 8002880:	2059      	movs	r0, #89	; 0x59
 8002882:	f7ff fded 	bl	8002460 <SD_SendCmd>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d121      	bne.n	80028d0 <SD_disk_write+0xf0>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 800288c:	21fc      	movs	r1, #252	; 0xfc
 800288e:	68b8      	ldr	r0, [r7, #8]
 8002890:	f7ff fd92 	bl	80023b8 <SD_TxDataBlock>
 8002894:	4603      	mov	r3, r0
 8002896:	f083 0301 	eor.w	r3, r3, #1
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10a      	bne.n	80028b6 <SD_disk_write+0xd6>
          break;
        
        buff += 512;
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80028a6:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	3b01      	subs	r3, #1
 80028ac:	603b      	str	r3, [r7, #0]
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1eb      	bne.n	800288c <SD_disk_write+0xac>
 80028b4:	e000      	b.n	80028b8 <SD_disk_write+0xd8>
          break;
 80028b6:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 80028b8:	21fd      	movs	r1, #253	; 0xfd
 80028ba:	2000      	movs	r0, #0
 80028bc:	f7ff fd7c 	bl	80023b8 <SD_TxDataBlock>
 80028c0:	4603      	mov	r3, r0
 80028c2:	f083 0301 	eor.w	r3, r3, #1
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <SD_disk_write+0xf0>
      {        
        count = 1;
 80028cc:	2301      	movs	r3, #1
 80028ce:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 80028d0:	f7ff fc6a 	bl	80021a8 <DESELECT>
  SPI_RxByte();
 80028d4:	f7ff fc8e 	bl	80021f4 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	bf14      	ite	ne
 80028de:	2301      	movne	r3, #1
 80028e0:	2300      	moveq	r3, #0
 80028e2:	b2db      	uxtb	r3, r3
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	20000041 	.word	0x20000041
 80028f0:	20003370 	.word	0x20003370

080028f4 <SD_disk_ioctl>:
#endif /* _READONLY */

/* その他の機能 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80028f4:	b590      	push	{r4, r7, lr}
 80028f6:	b08b      	sub	sp, #44	; 0x2c
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	603a      	str	r2, [r7, #0]
 80028fe:	71fb      	strb	r3, [r7, #7]
 8002900:	460b      	mov	r3, r1
 8002902:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8002908:	79fb      	ldrb	r3, [r7, #7]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 800290e:	2304      	movs	r3, #4
 8002910:	e11b      	b.n	8002b4a <SD_disk_ioctl+0x256>
  
  res = RES_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 8002918:	79bb      	ldrb	r3, [r7, #6]
 800291a:	2b05      	cmp	r3, #5
 800291c:	d129      	bne.n	8002972 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 800291e:	6a3b      	ldr	r3, [r7, #32]
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	2b02      	cmp	r3, #2
 8002924:	d017      	beq.n	8002956 <SD_disk_ioctl+0x62>
 8002926:	2b02      	cmp	r3, #2
 8002928:	dc1f      	bgt.n	800296a <SD_disk_ioctl+0x76>
 800292a:	2b00      	cmp	r3, #0
 800292c:	d002      	beq.n	8002934 <SD_disk_ioctl+0x40>
 800292e:	2b01      	cmp	r3, #1
 8002930:	d00b      	beq.n	800294a <SD_disk_ioctl+0x56>
 8002932:	e01a      	b.n	800296a <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8002934:	f7ff fcfe 	bl	8002334 <SD_CheckPower>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 800293e:	f7ff fced 	bl	800231c <SD_PowerOff>
      res = RES_OK;
 8002942:	2300      	movs	r3, #0
 8002944:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002948:	e0fd      	b.n	8002b46 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 800294a:	f7ff fc9b 	bl	8002284 <SD_PowerOn>
      res = RES_OK;
 800294e:	2300      	movs	r3, #0
 8002950:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002954:	e0f7      	b.n	8002b46 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8002956:	6a3b      	ldr	r3, [r7, #32]
 8002958:	1c5c      	adds	r4, r3, #1
 800295a:	f7ff fceb 	bl	8002334 <SD_CheckPower>
 800295e:	4603      	mov	r3, r0
 8002960:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8002962:	2300      	movs	r3, #0
 8002964:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002968:	e0ed      	b.n	8002b46 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 800296a:	2304      	movs	r3, #4
 800296c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002970:	e0e9      	b.n	8002b46 <SD_disk_ioctl+0x252>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 8002972:	4b78      	ldr	r3, [pc, #480]	; (8002b54 <SD_disk_ioctl+0x260>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	b2db      	uxtb	r3, r3
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8002980:	2303      	movs	r3, #3
 8002982:	e0e2      	b.n	8002b4a <SD_disk_ioctl+0x256>
    
    SELECT();
 8002984:	f7ff fc04 	bl	8002190 <SELECT>
    
    switch (ctrl) 
 8002988:	79bb      	ldrb	r3, [r7, #6]
 800298a:	2b0d      	cmp	r3, #13
 800298c:	f200 80cc 	bhi.w	8002b28 <SD_disk_ioctl+0x234>
 8002990:	a201      	add	r2, pc, #4	; (adr r2, 8002998 <SD_disk_ioctl+0xa4>)
 8002992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002996:	bf00      	nop
 8002998:	08002a93 	.word	0x08002a93
 800299c:	080029d1 	.word	0x080029d1
 80029a0:	08002a83 	.word	0x08002a83
 80029a4:	08002b29 	.word	0x08002b29
 80029a8:	08002b29 	.word	0x08002b29
 80029ac:	08002b29 	.word	0x08002b29
 80029b0:	08002b29 	.word	0x08002b29
 80029b4:	08002b29 	.word	0x08002b29
 80029b8:	08002b29 	.word	0x08002b29
 80029bc:	08002b29 	.word	0x08002b29
 80029c0:	08002b29 	.word	0x08002b29
 80029c4:	08002aa5 	.word	0x08002aa5
 80029c8:	08002ac9 	.word	0x08002ac9
 80029cc:	08002aed 	.word	0x08002aed
    {
    case GET_SECTOR_COUNT: 
      /* SDカード内のSectorの数 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 80029d0:	2100      	movs	r1, #0
 80029d2:	2049      	movs	r0, #73	; 0x49
 80029d4:	f7ff fd44 	bl	8002460 <SD_SendCmd>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f040 80a8 	bne.w	8002b30 <SD_disk_ioctl+0x23c>
 80029e0:	f107 030c 	add.w	r3, r7, #12
 80029e4:	2110      	movs	r1, #16
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff fcb0 	bl	800234c <SD_RxDataBlock>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f000 809e 	beq.w	8002b30 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1) 
 80029f4:	7b3b      	ldrb	r3, [r7, #12]
 80029f6:	099b      	lsrs	r3, r3, #6
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d10e      	bne.n	8002a1c <SD_disk_ioctl+0x128>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80029fe:	7d7b      	ldrb	r3, [r7, #21]
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	7d3b      	ldrb	r3, [r7, #20]
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	021b      	lsls	r3, r3, #8
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	4413      	add	r3, r2
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	3301      	adds	r3, #1
 8002a10:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8002a12:	8bfb      	ldrh	r3, [r7, #30]
 8002a14:	029a      	lsls	r2, r3, #10
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	601a      	str	r2, [r3, #0]
 8002a1a:	e02e      	b.n	8002a7a <SD_disk_ioctl+0x186>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002a1c:	7c7b      	ldrb	r3, [r7, #17]
 8002a1e:	f003 030f 	and.w	r3, r3, #15
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	7dbb      	ldrb	r3, [r7, #22]
 8002a26:	09db      	lsrs	r3, r3, #7
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	4413      	add	r3, r2
 8002a2c:	b2da      	uxtb	r2, r3
 8002a2e:	7d7b      	ldrb	r3, [r7, #21]
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	f003 0306 	and.w	r3, r3, #6
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	4413      	add	r3, r2
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	3302      	adds	r3, #2
 8002a40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002a44:	7d3b      	ldrb	r3, [r7, #20]
 8002a46:	099b      	lsrs	r3, r3, #6
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	7cfb      	ldrb	r3, [r7, #19]
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	4413      	add	r3, r2
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	7cbb      	ldrb	r3, [r7, #18]
 8002a5a:	029b      	lsls	r3, r3, #10
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	4413      	add	r3, r2
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	3301      	adds	r3, #1
 8002a6a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8002a6c:	8bfa      	ldrh	r2, [r7, #30]
 8002a6e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002a72:	3b09      	subs	r3, #9
 8002a74:	409a      	lsls	r2, r3
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8002a80:	e056      	b.n	8002b30 <SD_disk_ioctl+0x23c>
      
    case GET_SECTOR_SIZE: 
      /* セクタの単位サイズ (WORD) */
      *(WORD*) buff = 512;
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a88:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002a90:	e055      	b.n	8002b3e <SD_disk_ioctl+0x24a>
      
    case CTRL_SYNC: 
      /* 書き込み同期 */
      if (SD_ReadyWait() == 0xFF)
 8002a92:	f7ff fbdb 	bl	800224c <SD_ReadyWait>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2bff      	cmp	r3, #255	; 0xff
 8002a9a:	d14b      	bne.n	8002b34 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002aa2:	e047      	b.n	8002b34 <SD_disk_ioctl+0x240>
      
    case MMC_GET_CSD: 
      /* CSD情報の受信 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	2049      	movs	r0, #73	; 0x49
 8002aa8:	f7ff fcda 	bl	8002460 <SD_SendCmd>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d142      	bne.n	8002b38 <SD_disk_ioctl+0x244>
 8002ab2:	2110      	movs	r1, #16
 8002ab4:	6a38      	ldr	r0, [r7, #32]
 8002ab6:	f7ff fc49 	bl	800234c <SD_RxDataBlock>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d03b      	beq.n	8002b38 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002ac6:	e037      	b.n	8002b38 <SD_disk_ioctl+0x244>
      
    case MMC_GET_CID: 
      /* CID情報の受信 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002ac8:	2100      	movs	r1, #0
 8002aca:	204a      	movs	r0, #74	; 0x4a
 8002acc:	f7ff fcc8 	bl	8002460 <SD_SendCmd>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d132      	bne.n	8002b3c <SD_disk_ioctl+0x248>
 8002ad6:	2110      	movs	r1, #16
 8002ad8:	6a38      	ldr	r0, [r7, #32]
 8002ada:	f7ff fc37 	bl	800234c <SD_RxDataBlock>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d02b      	beq.n	8002b3c <SD_disk_ioctl+0x248>
        res = RES_OK;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002aea:	e027      	b.n	8002b3c <SD_disk_ioctl+0x248>
      
    case MMC_GET_OCR: 
      /* OCR情報の受信 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 8002aec:	2100      	movs	r1, #0
 8002aee:	207a      	movs	r0, #122	; 0x7a
 8002af0:	f7ff fcb6 	bl	8002460 <SD_SendCmd>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d116      	bne.n	8002b28 <SD_disk_ioctl+0x234>
      {         
        for (n = 0; n < 4; n++)
 8002afa:	2300      	movs	r3, #0
 8002afc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002b00:	e00b      	b.n	8002b1a <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8002b02:	6a3c      	ldr	r4, [r7, #32]
 8002b04:	1c63      	adds	r3, r4, #1
 8002b06:	623b      	str	r3, [r7, #32]
 8002b08:	f7ff fb74 	bl	80021f4 <SPI_RxByte>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8002b10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002b14:	3301      	adds	r3, #1
 8002b16:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002b1a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002b1e:	2b03      	cmp	r3, #3
 8002b20:	d9ef      	bls.n	8002b02 <SD_disk_ioctl+0x20e>
        }
        
        res = RES_OK;
 8002b22:	2300      	movs	r3, #0
 8002b24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 8002b28:	2304      	movs	r3, #4
 8002b2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002b2e:	e006      	b.n	8002b3e <SD_disk_ioctl+0x24a>
      break;
 8002b30:	bf00      	nop
 8002b32:	e004      	b.n	8002b3e <SD_disk_ioctl+0x24a>
      break;
 8002b34:	bf00      	nop
 8002b36:	e002      	b.n	8002b3e <SD_disk_ioctl+0x24a>
      break;
 8002b38:	bf00      	nop
 8002b3a:	e000      	b.n	8002b3e <SD_disk_ioctl+0x24a>
      break;
 8002b3c:	bf00      	nop
    }
    
    DESELECT();
 8002b3e:	f7ff fb33 	bl	80021a8 <DESELECT>
    SPI_RxByte();
 8002b42:	f7ff fb57 	bl	80021f4 <SPI_RxByte>
  }
  
  return res;
 8002b46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	372c      	adds	r7, #44	; 0x2c
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd90      	pop	{r4, r7, pc}
 8002b52:	bf00      	nop
 8002b54:	20000041 	.word	0x20000041

08002b58 <powerLinesensors>:
// モジュール名 powerLinesensors
// 処理概要  	ラインセンサのON/OFF処理
// 引数     	0:OFF 1:ON
// 戻り値    	なし
/////////////////////////////////////////////////////////////////////
void powerLinesensors(uint8_t onoff) {
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	71fb      	strb	r3, [r7, #7]
	if (onoff == 0) {
 8002b62:	79fb      	ldrb	r3, [r7, #7]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d107      	bne.n	8002b78 <powerLinesensors+0x20>
		lineSensorState = false;
 8002b68:	4b0c      	ldr	r3, [pc, #48]	; (8002b9c <powerLinesensors+0x44>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&LS_TIMER, TIM_CHANNEL_1, 0);
 8002b6e:	4b0c      	ldr	r3, [pc, #48]	; (8002ba0 <powerLinesensors+0x48>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2200      	movs	r2, #0
 8002b74:	635a      	str	r2, [r3, #52]	; 0x34
	} else if ( onoff == 1 ) {
		lineSensorState = true;
		__HAL_TIM_SET_COMPARE(&LS_TIMER, TIM_CHANNEL_1, LS_COUNTERPERIOD);
	}
}
 8002b76:	e00a      	b.n	8002b8e <powerLinesensors+0x36>
	} else if ( onoff == 1 ) {
 8002b78:	79fb      	ldrb	r3, [r7, #7]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d107      	bne.n	8002b8e <powerLinesensors+0x36>
		lineSensorState = true;
 8002b7e:	4b07      	ldr	r3, [pc, #28]	; (8002b9c <powerLinesensors+0x44>)
 8002b80:	2201      	movs	r2, #1
 8002b82:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&LS_TIMER, TIM_CHANNEL_1, LS_COUNTERPERIOD);
 8002b84:	4b06      	ldr	r3, [pc, #24]	; (8002ba0 <powerLinesensors+0x48>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a05      	ldr	r2, [pc, #20]	; (8002ba0 <powerLinesensors+0x48>)
 8002b8a:	68d2      	ldr	r2, [r2, #12]
 8002b8c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	200033c4 	.word	0x200033c4
 8002ba0:	2000372c 	.word	0x2000372c

08002ba4 <getLineSensor>:
// モジュール名 getLineSensor
// 処理概要  	ラインセンサのAD値を取得し、平均値を計算する
// 引数     	なし
// 戻り値    	なし
/////////////////////////////////////////////////////////////////////
void getLineSensor(void) {
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
	uint8_t i;
	uint16_t s;
	uint32_t ii;
	static uint16_t	cntls = 0;		// ラインセンサの立ち上がりエッジ積算回数カウント用
	
	cntls++;
 8002baa:	4b40      	ldr	r3, [pc, #256]	; (8002cac <getLineSensor+0x108>)
 8002bac:	881b      	ldrh	r3, [r3, #0]
 8002bae:	3301      	adds	r3, #1
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	4b3e      	ldr	r3, [pc, #248]	; (8002cac <getLineSensor+0x108>)
 8002bb4:	801a      	strh	r2, [r3, #0]
	for ( i=0;i<NUM_SENSORS;i++) {
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	71fb      	strb	r3, [r7, #7]
 8002bba:	e066      	b.n	8002c8a <getLineSensor+0xe6>
		lSensorInt[i] += analogVal[i];
 8002bbc:	79fb      	ldrb	r3, [r7, #7]
 8002bbe:	4a3c      	ldr	r2, [pc, #240]	; (8002cb0 <getLineSensor+0x10c>)
 8002bc0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002bc4:	79fb      	ldrb	r3, [r7, #7]
 8002bc6:	493b      	ldr	r1, [pc, #236]	; (8002cb4 <getLineSensor+0x110>)
 8002bc8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002bcc:	4619      	mov	r1, r3
 8002bce:	79fb      	ldrb	r3, [r7, #7]
 8002bd0:	440a      	add	r2, r1
 8002bd2:	4937      	ldr	r1, [pc, #220]	; (8002cb0 <getLineSensor+0x10c>)
 8002bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (cntls > 16) {
 8002bd8:	4b34      	ldr	r3, [pc, #208]	; (8002cac <getLineSensor+0x108>)
 8002bda:	881b      	ldrh	r3, [r3, #0]
 8002bdc:	2b10      	cmp	r3, #16
 8002bde:	d951      	bls.n	8002c84 <getLineSensor+0xe0>
			lSensor[i] = lSensorInt[i] >> 4;	// 平均値算出
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	4a33      	ldr	r2, [pc, #204]	; (8002cb0 <getLineSensor+0x10c>)
 8002be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be8:	091a      	lsrs	r2, r3, #4
 8002bea:	79fb      	ldrb	r3, [r7, #7]
 8002bec:	b291      	uxth	r1, r2
 8002bee:	4a32      	ldr	r2, [pc, #200]	; (8002cb8 <getLineSensor+0x114>)
 8002bf0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			lSensorInt[i] = 0;					// 積算値リセット
 8002bf4:	79fb      	ldrb	r3, [r7, #7]
 8002bf6:	4a2e      	ldr	r2, [pc, #184]	; (8002cb0 <getLineSensor+0x10c>)
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			
			// キャリブレーション済みの場合
			if (lSensorOffset[i] > 0 && modeCalLinesensors == 0) {
 8002bfe:	79fb      	ldrb	r3, [r7, #7]
 8002c00:	4a2e      	ldr	r2, [pc, #184]	; (8002cbc <getLineSensor+0x118>)
 8002c02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d022      	beq.n	8002c50 <getLineSensor+0xac>
 8002c0a:	4b2d      	ldr	r3, [pc, #180]	; (8002cc0 <getLineSensor+0x11c>)
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d11e      	bne.n	8002c50 <getLineSensor+0xac>
				lSensorCari[i] = (uint16_t)(BASEVAL * (float)lSensor[i] / (float)lSensorOffset[i]);
 8002c12:	79fb      	ldrb	r3, [r7, #7]
 8002c14:	4a28      	ldr	r2, [pc, #160]	; (8002cb8 <getLineSensor+0x114>)
 8002c16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c1a:	ee07 3a90 	vmov	s15, r3
 8002c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c22:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002cc4 <getLineSensor+0x120>
 8002c26:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002c2a:	79fb      	ldrb	r3, [r7, #7]
 8002c2c:	4a23      	ldr	r2, [pc, #140]	; (8002cbc <getLineSensor+0x118>)
 8002c2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c32:	ee07 3a90 	vmov	s15, r3
 8002c36:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c3e:	79fb      	ldrb	r3, [r7, #7]
 8002c40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c44:	ee17 2a90 	vmov	r2, s15
 8002c48:	b291      	uxth	r1, r2
 8002c4a:	4a1f      	ldr	r2, [pc, #124]	; (8002cc8 <getLineSensor+0x124>)
 8002c4c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
			// キャリブレーション中
			if(lineSensorState && modeCalLinesensors == 1) {
 8002c50:	4b1e      	ldr	r3, [pc, #120]	; (8002ccc <getLineSensor+0x128>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d015      	beq.n	8002c84 <getLineSensor+0xe0>
 8002c58:	4b19      	ldr	r3, [pc, #100]	; (8002cc0 <getLineSensor+0x11c>)
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d111      	bne.n	8002c84 <getLineSensor+0xe0>
				if (lSensor[i] > lSensorOffset[i]) {
 8002c60:	79fb      	ldrb	r3, [r7, #7]
 8002c62:	4a15      	ldr	r2, [pc, #84]	; (8002cb8 <getLineSensor+0x114>)
 8002c64:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002c68:	79fb      	ldrb	r3, [r7, #7]
 8002c6a:	4914      	ldr	r1, [pc, #80]	; (8002cbc <getLineSensor+0x118>)
 8002c6c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d907      	bls.n	8002c84 <getLineSensor+0xe0>
					lSensorOffset[i] = lSensor[i];
 8002c74:	79fa      	ldrb	r2, [r7, #7]
 8002c76:	79fb      	ldrb	r3, [r7, #7]
 8002c78:	490f      	ldr	r1, [pc, #60]	; (8002cb8 <getLineSensor+0x114>)
 8002c7a:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8002c7e:	4a0f      	ldr	r2, [pc, #60]	; (8002cbc <getLineSensor+0x118>)
 8002c80:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for ( i=0;i<NUM_SENSORS;i++) {
 8002c84:	79fb      	ldrb	r3, [r7, #7]
 8002c86:	3301      	adds	r3, #1
 8002c88:	71fb      	strb	r3, [r7, #7]
 8002c8a:	79fb      	ldrb	r3, [r7, #7]
 8002c8c:	2b09      	cmp	r3, #9
 8002c8e:	d995      	bls.n	8002bbc <getLineSensor+0x18>
				}
			}
		}
	}
	if (cntls > 16) cntls = 0;
 8002c90:	4b06      	ldr	r3, [pc, #24]	; (8002cac <getLineSensor+0x108>)
 8002c92:	881b      	ldrh	r3, [r3, #0]
 8002c94:	2b10      	cmp	r3, #16
 8002c96:	d902      	bls.n	8002c9e <getLineSensor+0xfa>
 8002c98:	4b04      	ldr	r3, [pc, #16]	; (8002cac <getLineSensor+0x108>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	801a      	strh	r2, [r3, #0]
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	200033de 	.word	0x200033de
 8002cb0:	20003374 	.word	0x20003374
 8002cb4:	20003330 	.word	0x20003330
 8002cb8:	2000339c 	.word	0x2000339c
 8002cbc:	200033c8 	.word	0x200033c8
 8002cc0:	200033dc 	.word	0x200033dc
 8002cc4:	457ff000 	.word	0x457ff000
 8002cc8:	200033b0 	.word	0x200033b0
 8002ccc:	200033c4 	.word	0x200033c4

08002cd0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002cd8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002cdc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d013      	beq.n	8002d10 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002ce8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002cec:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002cf0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00b      	beq.n	8002d10 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002cf8:	e000      	b.n	8002cfc <ITM_SendChar+0x2c>
    {
      __NOP();
 8002cfa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002cfc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d0f9      	beq.n	8002cfa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002d06:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	b2d2      	uxtb	r2, r2
 8002d0e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002d10:	687b      	ldr	r3, [r7, #4]
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d22:	f003 fa93 	bl	800624c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d26:	f000 f821 	bl	8002d6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d2a:	f000 fc41 	bl	80035b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002d2e:	f000 fc1f 	bl	8003570 <MX_DMA_Init>
  MX_ADC1_Init();
 8002d32:	f000 f88d 	bl	8002e50 <MX_ADC1_Init>
  MX_TIM6_Init();
 8002d36:	f000 fae7 	bl	8003308 <MX_TIM6_Init>
  MX_SPI3_Init();
 8002d3a:	f000 f9f7 	bl	800312c <MX_SPI3_Init>
  MX_TIM3_Init();
 8002d3e:	f000 fa8f 	bl	8003260 <MX_TIM3_Init>
  MX_TIM2_Init();
 8002d42:	f000 fa29 	bl	8003198 <MX_TIM2_Init>
  MX_TIM8_Init();
 8002d46:	f000 fb4b 	bl	80033e0 <MX_TIM8_Init>
  MX_TIM13_Init();
 8002d4a:	f000 fbc3 	bl	80034d4 <MX_TIM13_Init>
  MX_TIM7_Init();
 8002d4e:	f000 fb11 	bl	8003374 <MX_TIM7_Init>
  MX_TIM10_Init();
 8002d52:	f000 fb9d 	bl	8003490 <MX_TIM10_Init>
  MX_I2C1_Init();
 8002d56:	f000 f9bb 	bl	80030d0 <MX_I2C1_Init>
  MX_ADC2_Init();
 8002d5a:	f000 f949 	bl	8002ff0 <MX_ADC2_Init>
  MX_FATFS_Init();
 8002d5e:	f008 f801 	bl	800ad64 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  initSystem();
 8002d62:	f7ff f8e5 	bl	8001f30 <initSystem>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    loopSystem();
 8002d66:	f7ff f963 	bl	8002030 <loopSystem>
 8002d6a:	e7fc      	b.n	8002d66 <main+0x48>

08002d6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b094      	sub	sp, #80	; 0x50
 8002d70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d72:	f107 031c 	add.w	r3, r7, #28
 8002d76:	2234      	movs	r2, #52	; 0x34
 8002d78:	2100      	movs	r1, #0
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f00d fadc 	bl	8010338 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d80:	f107 0308 	add.w	r3, r7, #8
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	605a      	str	r2, [r3, #4]
 8002d8a:	609a      	str	r2, [r3, #8]
 8002d8c:	60da      	str	r2, [r3, #12]
 8002d8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d90:	2300      	movs	r3, #0
 8002d92:	607b      	str	r3, [r7, #4]
 8002d94:	4b2c      	ldr	r3, [pc, #176]	; (8002e48 <SystemClock_Config+0xdc>)
 8002d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d98:	4a2b      	ldr	r2, [pc, #172]	; (8002e48 <SystemClock_Config+0xdc>)
 8002d9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d9e:	6413      	str	r3, [r2, #64]	; 0x40
 8002da0:	4b29      	ldr	r3, [pc, #164]	; (8002e48 <SystemClock_Config+0xdc>)
 8002da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da8:	607b      	str	r3, [r7, #4]
 8002daa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002dac:	2300      	movs	r3, #0
 8002dae:	603b      	str	r3, [r7, #0]
 8002db0:	4b26      	ldr	r3, [pc, #152]	; (8002e4c <SystemClock_Config+0xe0>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a25      	ldr	r2, [pc, #148]	; (8002e4c <SystemClock_Config+0xe0>)
 8002db6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dba:	6013      	str	r3, [r2, #0]
 8002dbc:	4b23      	ldr	r3, [pc, #140]	; (8002e4c <SystemClock_Config+0xe0>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002dc4:	603b      	str	r3, [r7, #0]
 8002dc6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002dcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002dd0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002dd6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002dda:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 6;
 8002ddc:	2306      	movs	r3, #6
 8002dde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002de0:	23b4      	movs	r3, #180	; 0xb4
 8002de2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002de4:	2302      	movs	r3, #2
 8002de6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002de8:	2302      	movs	r3, #2
 8002dea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002dec:	2302      	movs	r3, #2
 8002dee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002df0:	f107 031c 	add.w	r3, r7, #28
 8002df4:	4618      	mov	r0, r3
 8002df6:	f005 fe19 	bl	8008a2c <HAL_RCC_OscConfig>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002e00:	f000 fd0a 	bl	8003818 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002e04:	f005 fb12 	bl	800842c <HAL_PWREx_EnableOverDrive>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002e0e:	f000 fd03 	bl	8003818 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e12:	230f      	movs	r3, #15
 8002e14:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e16:	2302      	movs	r3, #2
 8002e18:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002e1e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002e22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002e24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e28:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002e2a:	f107 0308 	add.w	r3, r7, #8
 8002e2e:	2105      	movs	r1, #5
 8002e30:	4618      	mov	r0, r3
 8002e32:	f005 fb4b 	bl	80084cc <HAL_RCC_ClockConfig>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002e3c:	f000 fcec 	bl	8003818 <Error_Handler>
  }
}
 8002e40:	bf00      	nop
 8002e42:	3750      	adds	r7, #80	; 0x50
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	40007000 	.word	0x40007000

08002e50 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002e56:	463b      	mov	r3, r7
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	605a      	str	r2, [r3, #4]
 8002e5e:	609a      	str	r2, [r3, #8]
 8002e60:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002e62:	4b60      	ldr	r3, [pc, #384]	; (8002fe4 <MX_ADC1_Init+0x194>)
 8002e64:	4a60      	ldr	r2, [pc, #384]	; (8002fe8 <MX_ADC1_Init+0x198>)
 8002e66:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002e68:	4b5e      	ldr	r3, [pc, #376]	; (8002fe4 <MX_ADC1_Init+0x194>)
 8002e6a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e6e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002e70:	4b5c      	ldr	r3, [pc, #368]	; (8002fe4 <MX_ADC1_Init+0x194>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002e76:	4b5b      	ldr	r3, [pc, #364]	; (8002fe4 <MX_ADC1_Init+0x194>)
 8002e78:	2201      	movs	r2, #1
 8002e7a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002e7c:	4b59      	ldr	r3, [pc, #356]	; (8002fe4 <MX_ADC1_Init+0x194>)
 8002e7e:	2201      	movs	r2, #1
 8002e80:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002e82:	4b58      	ldr	r3, [pc, #352]	; (8002fe4 <MX_ADC1_Init+0x194>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002e8a:	4b56      	ldr	r3, [pc, #344]	; (8002fe4 <MX_ADC1_Init+0x194>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002e90:	4b54      	ldr	r3, [pc, #336]	; (8002fe4 <MX_ADC1_Init+0x194>)
 8002e92:	4a56      	ldr	r2, [pc, #344]	; (8002fec <MX_ADC1_Init+0x19c>)
 8002e94:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e96:	4b53      	ldr	r3, [pc, #332]	; (8002fe4 <MX_ADC1_Init+0x194>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 10;
 8002e9c:	4b51      	ldr	r3, [pc, #324]	; (8002fe4 <MX_ADC1_Init+0x194>)
 8002e9e:	220a      	movs	r2, #10
 8002ea0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002ea2:	4b50      	ldr	r3, [pc, #320]	; (8002fe4 <MX_ADC1_Init+0x194>)
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002eaa:	4b4e      	ldr	r3, [pc, #312]	; (8002fe4 <MX_ADC1_Init+0x194>)
 8002eac:	2201      	movs	r2, #1
 8002eae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002eb0:	484c      	ldr	r0, [pc, #304]	; (8002fe4 <MX_ADC1_Init+0x194>)
 8002eb2:	f003 fa61 	bl	8006378 <HAL_ADC_Init>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002ebc:	f000 fcac 	bl	8003818 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8002ec8:	2304      	movs	r3, #4
 8002eca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ecc:	463b      	mov	r3, r7
 8002ece:	4619      	mov	r1, r3
 8002ed0:	4844      	ldr	r0, [pc, #272]	; (8002fe4 <MX_ADC1_Init+0x194>)
 8002ed2:	f003 fd57 	bl	8006984 <HAL_ADC_ConfigChannel>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002edc:	f000 fc9c 	bl	8003818 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ee8:	463b      	mov	r3, r7
 8002eea:	4619      	mov	r1, r3
 8002eec:	483d      	ldr	r0, [pc, #244]	; (8002fe4 <MX_ADC1_Init+0x194>)
 8002eee:	f003 fd49 	bl	8006984 <HAL_ADC_ConfigChannel>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002ef8:	f000 fc8e 	bl	8003818 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002efc:	230d      	movs	r3, #13
 8002efe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002f00:	2303      	movs	r3, #3
 8002f02:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f04:	463b      	mov	r3, r7
 8002f06:	4619      	mov	r1, r3
 8002f08:	4836      	ldr	r0, [pc, #216]	; (8002fe4 <MX_ADC1_Init+0x194>)
 8002f0a:	f003 fd3b 	bl	8006984 <HAL_ADC_ConfigChannel>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002f14:	f000 fc80 	bl	8003818 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002f18:	230c      	movs	r3, #12
 8002f1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002f1c:	2304      	movs	r3, #4
 8002f1e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f20:	463b      	mov	r3, r7
 8002f22:	4619      	mov	r1, r3
 8002f24:	482f      	ldr	r0, [pc, #188]	; (8002fe4 <MX_ADC1_Init+0x194>)
 8002f26:	f003 fd2d 	bl	8006984 <HAL_ADC_ConfigChannel>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002f30:	f000 fc72 	bl	8003818 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002f34:	230b      	movs	r3, #11
 8002f36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8002f38:	2305      	movs	r3, #5
 8002f3a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f3c:	463b      	mov	r3, r7
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4828      	ldr	r0, [pc, #160]	; (8002fe4 <MX_ADC1_Init+0x194>)
 8002f42:	f003 fd1f 	bl	8006984 <HAL_ADC_ConfigChannel>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8002f4c:	f000 fc64 	bl	8003818 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002f50:	2307      	movs	r3, #7
 8002f52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8002f54:	2306      	movs	r3, #6
 8002f56:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f58:	463b      	mov	r3, r7
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	4821      	ldr	r0, [pc, #132]	; (8002fe4 <MX_ADC1_Init+0x194>)
 8002f5e:	f003 fd11 	bl	8006984 <HAL_ADC_ConfigChannel>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8002f68:	f000 fc56 	bl	8003818 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002f6c:	2305      	movs	r3, #5
 8002f6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8002f70:	2307      	movs	r3, #7
 8002f72:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f74:	463b      	mov	r3, r7
 8002f76:	4619      	mov	r1, r3
 8002f78:	481a      	ldr	r0, [pc, #104]	; (8002fe4 <MX_ADC1_Init+0x194>)
 8002f7a:	f003 fd03 	bl	8006984 <HAL_ADC_ConfigChannel>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8002f84:	f000 fc48 	bl	8003818 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002f88:	2304      	movs	r3, #4
 8002f8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8002f8c:	2308      	movs	r3, #8
 8002f8e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f90:	463b      	mov	r3, r7
 8002f92:	4619      	mov	r1, r3
 8002f94:	4813      	ldr	r0, [pc, #76]	; (8002fe4 <MX_ADC1_Init+0x194>)
 8002f96:	f003 fcf5 	bl	8006984 <HAL_ADC_ConfigChannel>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8002fa0:	f000 fc3a 	bl	8003818 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8002fa8:	2309      	movs	r3, #9
 8002faa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002fac:	463b      	mov	r3, r7
 8002fae:	4619      	mov	r1, r3
 8002fb0:	480c      	ldr	r0, [pc, #48]	; (8002fe4 <MX_ADC1_Init+0x194>)
 8002fb2:	f003 fce7 	bl	8006984 <HAL_ADC_ConfigChannel>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8002fbc:	f000 fc2c 	bl	8003818 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8002fc4:	230a      	movs	r3, #10
 8002fc6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002fc8:	463b      	mov	r3, r7
 8002fca:	4619      	mov	r1, r3
 8002fcc:	4805      	ldr	r0, [pc, #20]	; (8002fe4 <MX_ADC1_Init+0x194>)
 8002fce:	f003 fcd9 	bl	8006984 <HAL_ADC_ConfigChannel>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8002fd8:	f000 fc1e 	bl	8003818 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002fdc:	bf00      	nop
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	200033e0 	.word	0x200033e0
 8002fe8:	40012000 	.word	0x40012000
 8002fec:	0f000001 	.word	0x0f000001

08002ff0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002ff6:	463b      	mov	r3, r7
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	605a      	str	r2, [r3, #4]
 8002ffe:	609a      	str	r2, [r3, #8]
 8003000:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8003002:	4b30      	ldr	r3, [pc, #192]	; (80030c4 <MX_ADC2_Init+0xd4>)
 8003004:	4a30      	ldr	r2, [pc, #192]	; (80030c8 <MX_ADC2_Init+0xd8>)
 8003006:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003008:	4b2e      	ldr	r3, [pc, #184]	; (80030c4 <MX_ADC2_Init+0xd4>)
 800300a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800300e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003010:	4b2c      	ldr	r3, [pc, #176]	; (80030c4 <MX_ADC2_Init+0xd4>)
 8003012:	2200      	movs	r2, #0
 8003014:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8003016:	4b2b      	ldr	r3, [pc, #172]	; (80030c4 <MX_ADC2_Init+0xd4>)
 8003018:	2201      	movs	r2, #1
 800301a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800301c:	4b29      	ldr	r3, [pc, #164]	; (80030c4 <MX_ADC2_Init+0xd4>)
 800301e:	2201      	movs	r2, #1
 8003020:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003022:	4b28      	ldr	r3, [pc, #160]	; (80030c4 <MX_ADC2_Init+0xd4>)
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800302a:	4b26      	ldr	r3, [pc, #152]	; (80030c4 <MX_ADC2_Init+0xd4>)
 800302c:	2200      	movs	r2, #0
 800302e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003030:	4b24      	ldr	r3, [pc, #144]	; (80030c4 <MX_ADC2_Init+0xd4>)
 8003032:	4a26      	ldr	r2, [pc, #152]	; (80030cc <MX_ADC2_Init+0xdc>)
 8003034:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003036:	4b23      	ldr	r3, [pc, #140]	; (80030c4 <MX_ADC2_Init+0xd4>)
 8003038:	2200      	movs	r2, #0
 800303a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 3;
 800303c:	4b21      	ldr	r3, [pc, #132]	; (80030c4 <MX_ADC2_Init+0xd4>)
 800303e:	2203      	movs	r2, #3
 8003040:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8003042:	4b20      	ldr	r3, [pc, #128]	; (80030c4 <MX_ADC2_Init+0xd4>)
 8003044:	2200      	movs	r2, #0
 8003046:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800304a:	4b1e      	ldr	r3, [pc, #120]	; (80030c4 <MX_ADC2_Init+0xd4>)
 800304c:	2201      	movs	r2, #1
 800304e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003050:	481c      	ldr	r0, [pc, #112]	; (80030c4 <MX_ADC2_Init+0xd4>)
 8003052:	f003 f991 	bl	8006378 <HAL_ADC_Init>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800305c:	f000 fbdc 	bl	8003818 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8003060:	230a      	movs	r3, #10
 8003062:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003064:	2301      	movs	r3, #1
 8003066:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8003068:	2305      	movs	r3, #5
 800306a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800306c:	463b      	mov	r3, r7
 800306e:	4619      	mov	r1, r3
 8003070:	4814      	ldr	r0, [pc, #80]	; (80030c4 <MX_ADC2_Init+0xd4>)
 8003072:	f003 fc87 	bl	8006984 <HAL_ADC_ConfigChannel>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800307c:	f000 fbcc 	bl	8003818 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8003080:	230f      	movs	r3, #15
 8003082:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003084:	2302      	movs	r3, #2
 8003086:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003088:	463b      	mov	r3, r7
 800308a:	4619      	mov	r1, r3
 800308c:	480d      	ldr	r0, [pc, #52]	; (80030c4 <MX_ADC2_Init+0xd4>)
 800308e:	f003 fc79 	bl	8006984 <HAL_ADC_ConfigChannel>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8003098:	f000 fbbe 	bl	8003818 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800309c:	230e      	movs	r3, #14
 800309e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80030a0:	2303      	movs	r3, #3
 80030a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80030a4:	2307      	movs	r3, #7
 80030a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80030a8:	463b      	mov	r3, r7
 80030aa:	4619      	mov	r1, r3
 80030ac:	4805      	ldr	r0, [pc, #20]	; (80030c4 <MX_ADC2_Init+0xd4>)
 80030ae:	f003 fc69 	bl	8006984 <HAL_ADC_ConfigChannel>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <MX_ADC2_Init+0xcc>
  {
    Error_Handler();
 80030b8:	f000 fbae 	bl	8003818 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80030bc:	bf00      	nop
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	20003428 	.word	0x20003428
 80030c8:	40012100 	.word	0x40012100
 80030cc:	0f000001 	.word	0x0f000001

080030d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80030d4:	4b12      	ldr	r3, [pc, #72]	; (8003120 <MX_I2C1_Init+0x50>)
 80030d6:	4a13      	ldr	r2, [pc, #76]	; (8003124 <MX_I2C1_Init+0x54>)
 80030d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80030da:	4b11      	ldr	r3, [pc, #68]	; (8003120 <MX_I2C1_Init+0x50>)
 80030dc:	4a12      	ldr	r2, [pc, #72]	; (8003128 <MX_I2C1_Init+0x58>)
 80030de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80030e0:	4b0f      	ldr	r3, [pc, #60]	; (8003120 <MX_I2C1_Init+0x50>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80030e6:	4b0e      	ldr	r3, [pc, #56]	; (8003120 <MX_I2C1_Init+0x50>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80030ec:	4b0c      	ldr	r3, [pc, #48]	; (8003120 <MX_I2C1_Init+0x50>)
 80030ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80030f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80030f4:	4b0a      	ldr	r3, [pc, #40]	; (8003120 <MX_I2C1_Init+0x50>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80030fa:	4b09      	ldr	r3, [pc, #36]	; (8003120 <MX_I2C1_Init+0x50>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003100:	4b07      	ldr	r3, [pc, #28]	; (8003120 <MX_I2C1_Init+0x50>)
 8003102:	2200      	movs	r2, #0
 8003104:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003106:	4b06      	ldr	r3, [pc, #24]	; (8003120 <MX_I2C1_Init+0x50>)
 8003108:	2200      	movs	r2, #0
 800310a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800310c:	4804      	ldr	r0, [pc, #16]	; (8003120 <MX_I2C1_Init+0x50>)
 800310e:	f004 fd31 	bl	8007b74 <HAL_I2C_Init>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003118:	f000 fb7e 	bl	8003818 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800311c:	bf00      	nop
 800311e:	bd80      	pop	{r7, pc}
 8003120:	200034d0 	.word	0x200034d0
 8003124:	40005400 	.word	0x40005400
 8003128:	000186a0 	.word	0x000186a0

0800312c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8003130:	4b17      	ldr	r3, [pc, #92]	; (8003190 <MX_SPI3_Init+0x64>)
 8003132:	4a18      	ldr	r2, [pc, #96]	; (8003194 <MX_SPI3_Init+0x68>)
 8003134:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003136:	4b16      	ldr	r3, [pc, #88]	; (8003190 <MX_SPI3_Init+0x64>)
 8003138:	f44f 7282 	mov.w	r2, #260	; 0x104
 800313c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800313e:	4b14      	ldr	r3, [pc, #80]	; (8003190 <MX_SPI3_Init+0x64>)
 8003140:	2200      	movs	r2, #0
 8003142:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003144:	4b12      	ldr	r3, [pc, #72]	; (8003190 <MX_SPI3_Init+0x64>)
 8003146:	2200      	movs	r2, #0
 8003148:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800314a:	4b11      	ldr	r3, [pc, #68]	; (8003190 <MX_SPI3_Init+0x64>)
 800314c:	2202      	movs	r2, #2
 800314e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003150:	4b0f      	ldr	r3, [pc, #60]	; (8003190 <MX_SPI3_Init+0x64>)
 8003152:	2201      	movs	r2, #1
 8003154:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003156:	4b0e      	ldr	r3, [pc, #56]	; (8003190 <MX_SPI3_Init+0x64>)
 8003158:	f44f 7200 	mov.w	r2, #512	; 0x200
 800315c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800315e:	4b0c      	ldr	r3, [pc, #48]	; (8003190 <MX_SPI3_Init+0x64>)
 8003160:	2200      	movs	r2, #0
 8003162:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003164:	4b0a      	ldr	r3, [pc, #40]	; (8003190 <MX_SPI3_Init+0x64>)
 8003166:	2200      	movs	r2, #0
 8003168:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800316a:	4b09      	ldr	r3, [pc, #36]	; (8003190 <MX_SPI3_Init+0x64>)
 800316c:	2200      	movs	r2, #0
 800316e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003170:	4b07      	ldr	r3, [pc, #28]	; (8003190 <MX_SPI3_Init+0x64>)
 8003172:	2200      	movs	r2, #0
 8003174:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8003176:	4b06      	ldr	r3, [pc, #24]	; (8003190 <MX_SPI3_Init+0x64>)
 8003178:	220a      	movs	r2, #10
 800317a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800317c:	4804      	ldr	r0, [pc, #16]	; (8003190 <MX_SPI3_Init+0x64>)
 800317e:	f005 fef3 	bl	8008f68 <HAL_SPI_Init>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8003188:	f000 fb46 	bl	8003818 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800318c:	bf00      	nop
 800318e:	bd80      	pop	{r7, pc}
 8003190:	20003524 	.word	0x20003524
 8003194:	40003c00 	.word	0x40003c00

08003198 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b08a      	sub	sp, #40	; 0x28
 800319c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800319e:	f107 0320 	add.w	r3, r7, #32
 80031a2:	2200      	movs	r2, #0
 80031a4:	601a      	str	r2, [r3, #0]
 80031a6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031a8:	1d3b      	adds	r3, r7, #4
 80031aa:	2200      	movs	r2, #0
 80031ac:	601a      	str	r2, [r3, #0]
 80031ae:	605a      	str	r2, [r3, #4]
 80031b0:	609a      	str	r2, [r3, #8]
 80031b2:	60da      	str	r2, [r3, #12]
 80031b4:	611a      	str	r2, [r3, #16]
 80031b6:	615a      	str	r2, [r3, #20]
 80031b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80031ba:	4b28      	ldr	r3, [pc, #160]	; (800325c <MX_TIM2_Init+0xc4>)
 80031bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80031c0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 11;
 80031c2:	4b26      	ldr	r3, [pc, #152]	; (800325c <MX_TIM2_Init+0xc4>)
 80031c4:	220b      	movs	r2, #11
 80031c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031c8:	4b24      	ldr	r3, [pc, #144]	; (800325c <MX_TIM2_Init+0xc4>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 374;
 80031ce:	4b23      	ldr	r3, [pc, #140]	; (800325c <MX_TIM2_Init+0xc4>)
 80031d0:	f44f 72bb 	mov.w	r2, #374	; 0x176
 80031d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031d6:	4b21      	ldr	r3, [pc, #132]	; (800325c <MX_TIM2_Init+0xc4>)
 80031d8:	2200      	movs	r2, #0
 80031da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031dc:	4b1f      	ldr	r3, [pc, #124]	; (800325c <MX_TIM2_Init+0xc4>)
 80031de:	2200      	movs	r2, #0
 80031e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80031e2:	481e      	ldr	r0, [pc, #120]	; (800325c <MX_TIM2_Init+0xc4>)
 80031e4:	f006 fd65 	bl	8009cb2 <HAL_TIM_PWM_Init>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80031ee:	f000 fb13 	bl	8003818 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031f2:	2300      	movs	r3, #0
 80031f4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031f6:	2300      	movs	r3, #0
 80031f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80031fa:	f107 0320 	add.w	r3, r7, #32
 80031fe:	4619      	mov	r1, r3
 8003200:	4816      	ldr	r0, [pc, #88]	; (800325c <MX_TIM2_Init+0xc4>)
 8003202:	f007 fd1f 	bl	800ac44 <HAL_TIMEx_MasterConfigSynchronization>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800320c:	f000 fb04 	bl	8003818 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003210:	2360      	movs	r3, #96	; 0x60
 8003212:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003214:	2300      	movs	r3, #0
 8003216:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003218:	2300      	movs	r3, #0
 800321a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800321c:	2300      	movs	r3, #0
 800321e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003220:	1d3b      	adds	r3, r7, #4
 8003222:	2204      	movs	r2, #4
 8003224:	4619      	mov	r1, r3
 8003226:	480d      	ldr	r0, [pc, #52]	; (800325c <MX_TIM2_Init+0xc4>)
 8003228:	f007 f9ac 	bl	800a584 <HAL_TIM_PWM_ConfigChannel>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8003232:	f000 faf1 	bl	8003818 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003236:	1d3b      	adds	r3, r7, #4
 8003238:	2208      	movs	r2, #8
 800323a:	4619      	mov	r1, r3
 800323c:	4807      	ldr	r0, [pc, #28]	; (800325c <MX_TIM2_Init+0xc4>)
 800323e:	f007 f9a1 	bl	800a584 <HAL_TIM_PWM_ConfigChannel>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003248:	f000 fae6 	bl	8003818 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800324c:	4803      	ldr	r0, [pc, #12]	; (800325c <MX_TIM2_Init+0xc4>)
 800324e:	f002 fd03 	bl	8005c58 <HAL_TIM_MspPostInit>

}
 8003252:	bf00      	nop
 8003254:	3728      	adds	r7, #40	; 0x28
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	2000357c 	.word	0x2000357c

08003260 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b08c      	sub	sp, #48	; 0x30
 8003264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003266:	f107 030c 	add.w	r3, r7, #12
 800326a:	2224      	movs	r2, #36	; 0x24
 800326c:	2100      	movs	r1, #0
 800326e:	4618      	mov	r0, r3
 8003270:	f00d f862 	bl	8010338 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003274:	1d3b      	adds	r3, r7, #4
 8003276:	2200      	movs	r2, #0
 8003278:	601a      	str	r2, [r3, #0]
 800327a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800327c:	4b20      	ldr	r3, [pc, #128]	; (8003300 <MX_TIM3_Init+0xa0>)
 800327e:	4a21      	ldr	r2, [pc, #132]	; (8003304 <MX_TIM3_Init+0xa4>)
 8003280:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003282:	4b1f      	ldr	r3, [pc, #124]	; (8003300 <MX_TIM3_Init+0xa0>)
 8003284:	2200      	movs	r2, #0
 8003286:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003288:	4b1d      	ldr	r3, [pc, #116]	; (8003300 <MX_TIM3_Init+0xa0>)
 800328a:	2200      	movs	r2, #0
 800328c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800328e:	4b1c      	ldr	r3, [pc, #112]	; (8003300 <MX_TIM3_Init+0xa0>)
 8003290:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003294:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003296:	4b1a      	ldr	r3, [pc, #104]	; (8003300 <MX_TIM3_Init+0xa0>)
 8003298:	2200      	movs	r2, #0
 800329a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800329c:	4b18      	ldr	r3, [pc, #96]	; (8003300 <MX_TIM3_Init+0xa0>)
 800329e:	2200      	movs	r2, #0
 80032a0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80032a2:	2303      	movs	r3, #3
 80032a4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80032a6:	2300      	movs	r3, #0
 80032a8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80032aa:	2301      	movs	r3, #1
 80032ac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80032ae:	2300      	movs	r3, #0
 80032b0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80032b2:	2300      	movs	r3, #0
 80032b4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80032b6:	2300      	movs	r3, #0
 80032b8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80032ba:	2301      	movs	r3, #1
 80032bc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80032be:	2300      	movs	r3, #0
 80032c0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80032c2:	2300      	movs	r3, #0
 80032c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80032c6:	f107 030c 	add.w	r3, r7, #12
 80032ca:	4619      	mov	r1, r3
 80032cc:	480c      	ldr	r0, [pc, #48]	; (8003300 <MX_TIM3_Init+0xa0>)
 80032ce:	f006 ff1d 	bl	800a10c <HAL_TIM_Encoder_Init>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80032d8:	f000 fa9e 	bl	8003818 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032dc:	2300      	movs	r3, #0
 80032de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032e0:	2300      	movs	r3, #0
 80032e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80032e4:	1d3b      	adds	r3, r7, #4
 80032e6:	4619      	mov	r1, r3
 80032e8:	4805      	ldr	r0, [pc, #20]	; (8003300 <MX_TIM3_Init+0xa0>)
 80032ea:	f007 fcab 	bl	800ac44 <HAL_TIMEx_MasterConfigSynchronization>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80032f4:	f000 fa90 	bl	8003818 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80032f8:	bf00      	nop
 80032fa:	3730      	adds	r7, #48	; 0x30
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	200035c4 	.word	0x200035c4
 8003304:	40000400 	.word	0x40000400

08003308 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800330e:	463b      	mov	r3, r7
 8003310:	2200      	movs	r2, #0
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003316:	4b15      	ldr	r3, [pc, #84]	; (800336c <MX_TIM6_Init+0x64>)
 8003318:	4a15      	ldr	r2, [pc, #84]	; (8003370 <MX_TIM6_Init+0x68>)
 800331a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 11;
 800331c:	4b13      	ldr	r3, [pc, #76]	; (800336c <MX_TIM6_Init+0x64>)
 800331e:	220b      	movs	r2, #11
 8003320:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003322:	4b12      	ldr	r3, [pc, #72]	; (800336c <MX_TIM6_Init+0x64>)
 8003324:	2200      	movs	r2, #0
 8003326:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 7499;
 8003328:	4b10      	ldr	r3, [pc, #64]	; (800336c <MX_TIM6_Init+0x64>)
 800332a:	f641 524b 	movw	r2, #7499	; 0x1d4b
 800332e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003330:	4b0e      	ldr	r3, [pc, #56]	; (800336c <MX_TIM6_Init+0x64>)
 8003332:	2200      	movs	r2, #0
 8003334:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003336:	480d      	ldr	r0, [pc, #52]	; (800336c <MX_TIM6_Init+0x64>)
 8003338:	f006 fbcc 	bl	8009ad4 <HAL_TIM_Base_Init>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003342:	f000 fa69 	bl	8003818 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003346:	2300      	movs	r3, #0
 8003348:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800334a:	2300      	movs	r3, #0
 800334c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800334e:	463b      	mov	r3, r7
 8003350:	4619      	mov	r1, r3
 8003352:	4806      	ldr	r0, [pc, #24]	; (800336c <MX_TIM6_Init+0x64>)
 8003354:	f007 fc76 	bl	800ac44 <HAL_TIMEx_MasterConfigSynchronization>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800335e:	f000 fa5b 	bl	8003818 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003362:	bf00      	nop
 8003364:	3708      	adds	r7, #8
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	2000360c 	.word	0x2000360c
 8003370:	40001000 	.word	0x40001000

08003374 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800337a:	463b      	mov	r3, r7
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]
 8003380:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003382:	4b15      	ldr	r3, [pc, #84]	; (80033d8 <MX_TIM7_Init+0x64>)
 8003384:	4a15      	ldr	r2, [pc, #84]	; (80033dc <MX_TIM7_Init+0x68>)
 8003386:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 11;
 8003388:	4b13      	ldr	r3, [pc, #76]	; (80033d8 <MX_TIM7_Init+0x64>)
 800338a:	220b      	movs	r2, #11
 800338c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800338e:	4b12      	ldr	r3, [pc, #72]	; (80033d8 <MX_TIM7_Init+0x64>)
 8003390:	2200      	movs	r2, #0
 8003392:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 749;
 8003394:	4b10      	ldr	r3, [pc, #64]	; (80033d8 <MX_TIM7_Init+0x64>)
 8003396:	f240 22ed 	movw	r2, #749	; 0x2ed
 800339a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800339c:	4b0e      	ldr	r3, [pc, #56]	; (80033d8 <MX_TIM7_Init+0x64>)
 800339e:	2200      	movs	r2, #0
 80033a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80033a2:	480d      	ldr	r0, [pc, #52]	; (80033d8 <MX_TIM7_Init+0x64>)
 80033a4:	f006 fb96 	bl	8009ad4 <HAL_TIM_Base_Init>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80033ae:	f000 fa33 	bl	8003818 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033b2:	2300      	movs	r3, #0
 80033b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033b6:	2300      	movs	r3, #0
 80033b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80033ba:	463b      	mov	r3, r7
 80033bc:	4619      	mov	r1, r3
 80033be:	4806      	ldr	r0, [pc, #24]	; (80033d8 <MX_TIM7_Init+0x64>)
 80033c0:	f007 fc40 	bl	800ac44 <HAL_TIMEx_MasterConfigSynchronization>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80033ca:	f000 fa25 	bl	8003818 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80033ce:	bf00      	nop
 80033d0:	3708      	adds	r7, #8
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	20003654 	.word	0x20003654
 80033dc:	40001400 	.word	0x40001400

080033e0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b08c      	sub	sp, #48	; 0x30
 80033e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80033e6:	f107 030c 	add.w	r3, r7, #12
 80033ea:	2224      	movs	r2, #36	; 0x24
 80033ec:	2100      	movs	r1, #0
 80033ee:	4618      	mov	r0, r3
 80033f0:	f00c ffa2 	bl	8010338 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033f4:	1d3b      	adds	r3, r7, #4
 80033f6:	2200      	movs	r2, #0
 80033f8:	601a      	str	r2, [r3, #0]
 80033fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80033fc:	4b22      	ldr	r3, [pc, #136]	; (8003488 <MX_TIM8_Init+0xa8>)
 80033fe:	4a23      	ldr	r2, [pc, #140]	; (800348c <MX_TIM8_Init+0xac>)
 8003400:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003402:	4b21      	ldr	r3, [pc, #132]	; (8003488 <MX_TIM8_Init+0xa8>)
 8003404:	2200      	movs	r2, #0
 8003406:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003408:	4b1f      	ldr	r3, [pc, #124]	; (8003488 <MX_TIM8_Init+0xa8>)
 800340a:	2200      	movs	r2, #0
 800340c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800340e:	4b1e      	ldr	r3, [pc, #120]	; (8003488 <MX_TIM8_Init+0xa8>)
 8003410:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003414:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003416:	4b1c      	ldr	r3, [pc, #112]	; (8003488 <MX_TIM8_Init+0xa8>)
 8003418:	2200      	movs	r2, #0
 800341a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800341c:	4b1a      	ldr	r3, [pc, #104]	; (8003488 <MX_TIM8_Init+0xa8>)
 800341e:	2200      	movs	r2, #0
 8003420:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003422:	4b19      	ldr	r3, [pc, #100]	; (8003488 <MX_TIM8_Init+0xa8>)
 8003424:	2200      	movs	r2, #0
 8003426:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003428:	2303      	movs	r3, #3
 800342a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800342c:	2300      	movs	r3, #0
 800342e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003430:	2301      	movs	r3, #1
 8003432:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003434:	2300      	movs	r3, #0
 8003436:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003438:	2300      	movs	r3, #0
 800343a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800343c:	2300      	movs	r3, #0
 800343e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003440:	2301      	movs	r3, #1
 8003442:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003444:	2300      	movs	r3, #0
 8003446:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003448:	2300      	movs	r3, #0
 800344a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800344c:	f107 030c 	add.w	r3, r7, #12
 8003450:	4619      	mov	r1, r3
 8003452:	480d      	ldr	r0, [pc, #52]	; (8003488 <MX_TIM8_Init+0xa8>)
 8003454:	f006 fe5a 	bl	800a10c <HAL_TIM_Encoder_Init>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800345e:	f000 f9db 	bl	8003818 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003462:	2300      	movs	r3, #0
 8003464:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003466:	2300      	movs	r3, #0
 8003468:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800346a:	1d3b      	adds	r3, r7, #4
 800346c:	4619      	mov	r1, r3
 800346e:	4806      	ldr	r0, [pc, #24]	; (8003488 <MX_TIM8_Init+0xa8>)
 8003470:	f007 fbe8 	bl	800ac44 <HAL_TIMEx_MasterConfigSynchronization>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800347a:	f000 f9cd 	bl	8003818 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800347e:	bf00      	nop
 8003480:	3730      	adds	r7, #48	; 0x30
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	2000369c 	.word	0x2000369c
 800348c:	40010400 	.word	0x40010400

08003490 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003494:	4b0d      	ldr	r3, [pc, #52]	; (80034cc <MX_TIM10_Init+0x3c>)
 8003496:	4a0e      	ldr	r2, [pc, #56]	; (80034d0 <MX_TIM10_Init+0x40>)
 8003498:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 800349a:	4b0c      	ldr	r3, [pc, #48]	; (80034cc <MX_TIM10_Init+0x3c>)
 800349c:	2200      	movs	r2, #0
 800349e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034a0:	4b0a      	ldr	r3, [pc, #40]	; (80034cc <MX_TIM10_Init+0x3c>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 53;
 80034a6:	4b09      	ldr	r3, [pc, #36]	; (80034cc <MX_TIM10_Init+0x3c>)
 80034a8:	2235      	movs	r2, #53	; 0x35
 80034aa:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034ac:	4b07      	ldr	r3, [pc, #28]	; (80034cc <MX_TIM10_Init+0x3c>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034b2:	4b06      	ldr	r3, [pc, #24]	; (80034cc <MX_TIM10_Init+0x3c>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80034b8:	4804      	ldr	r0, [pc, #16]	; (80034cc <MX_TIM10_Init+0x3c>)
 80034ba:	f006 fb0b 	bl	8009ad4 <HAL_TIM_Base_Init>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <MX_TIM10_Init+0x38>
  {
    Error_Handler();
 80034c4:	f000 f9a8 	bl	8003818 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80034c8:	bf00      	nop
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	200036e4 	.word	0x200036e4
 80034d0:	40014400 	.word	0x40014400

080034d4 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b088      	sub	sp, #32
 80034d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80034da:	1d3b      	adds	r3, r7, #4
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	605a      	str	r2, [r3, #4]
 80034e2:	609a      	str	r2, [r3, #8]
 80034e4:	60da      	str	r2, [r3, #12]
 80034e6:	611a      	str	r2, [r3, #16]
 80034e8:	615a      	str	r2, [r3, #20]
 80034ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80034ec:	4b1e      	ldr	r3, [pc, #120]	; (8003568 <MX_TIM13_Init+0x94>)
 80034ee:	4a1f      	ldr	r2, [pc, #124]	; (800356c <MX_TIM13_Init+0x98>)
 80034f0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 11;
 80034f2:	4b1d      	ldr	r3, [pc, #116]	; (8003568 <MX_TIM13_Init+0x94>)
 80034f4:	220b      	movs	r2, #11
 80034f6:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034f8:	4b1b      	ldr	r3, [pc, #108]	; (8003568 <MX_TIM13_Init+0x94>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1124;
 80034fe:	4b1a      	ldr	r3, [pc, #104]	; (8003568 <MX_TIM13_Init+0x94>)
 8003500:	f240 4264 	movw	r2, #1124	; 0x464
 8003504:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003506:	4b18      	ldr	r3, [pc, #96]	; (8003568 <MX_TIM13_Init+0x94>)
 8003508:	2200      	movs	r2, #0
 800350a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800350c:	4b16      	ldr	r3, [pc, #88]	; (8003568 <MX_TIM13_Init+0x94>)
 800350e:	2200      	movs	r2, #0
 8003510:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8003512:	4815      	ldr	r0, [pc, #84]	; (8003568 <MX_TIM13_Init+0x94>)
 8003514:	f006 fade 	bl	8009ad4 <HAL_TIM_Base_Init>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800351e:	f000 f97b 	bl	8003818 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8003522:	4811      	ldr	r0, [pc, #68]	; (8003568 <MX_TIM13_Init+0x94>)
 8003524:	f006 fbc5 	bl	8009cb2 <HAL_TIM_PWM_Init>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800352e:	f000 f973 	bl	8003818 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003532:	2360      	movs	r3, #96	; 0x60
 8003534:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003536:	2300      	movs	r3, #0
 8003538:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800353a:	2300      	movs	r3, #0
 800353c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800353e:	2300      	movs	r3, #0
 8003540:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003542:	1d3b      	adds	r3, r7, #4
 8003544:	2200      	movs	r2, #0
 8003546:	4619      	mov	r1, r3
 8003548:	4807      	ldr	r0, [pc, #28]	; (8003568 <MX_TIM13_Init+0x94>)
 800354a:	f007 f81b 	bl	800a584 <HAL_TIM_PWM_ConfigChannel>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8003554:	f000 f960 	bl	8003818 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8003558:	4803      	ldr	r0, [pc, #12]	; (8003568 <MX_TIM13_Init+0x94>)
 800355a:	f002 fb7d 	bl	8005c58 <HAL_TIM_MspPostInit>

}
 800355e:	bf00      	nop
 8003560:	3720      	adds	r7, #32
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	2000372c 	.word	0x2000372c
 800356c:	40001c00 	.word	0x40001c00

08003570 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003576:	2300      	movs	r3, #0
 8003578:	607b      	str	r3, [r7, #4]
 800357a:	4b0c      	ldr	r3, [pc, #48]	; (80035ac <MX_DMA_Init+0x3c>)
 800357c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357e:	4a0b      	ldr	r2, [pc, #44]	; (80035ac <MX_DMA_Init+0x3c>)
 8003580:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003584:	6313      	str	r3, [r2, #48]	; 0x30
 8003586:	4b09      	ldr	r3, [pc, #36]	; (80035ac <MX_DMA_Init+0x3c>)
 8003588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800358e:	607b      	str	r3, [r7, #4]
 8003590:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003592:	2200      	movs	r2, #0
 8003594:	2100      	movs	r1, #0
 8003596:	2038      	movs	r0, #56	; 0x38
 8003598:	f003 fd7f 	bl	800709a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800359c:	2038      	movs	r0, #56	; 0x38
 800359e:	f003 fd98 	bl	80070d2 <HAL_NVIC_EnableIRQ>

}
 80035a2:	bf00      	nop
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	40023800 	.word	0x40023800

080035b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b08a      	sub	sp, #40	; 0x28
 80035b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035b6:	f107 0314 	add.w	r3, r7, #20
 80035ba:	2200      	movs	r2, #0
 80035bc:	601a      	str	r2, [r3, #0]
 80035be:	605a      	str	r2, [r3, #4]
 80035c0:	609a      	str	r2, [r3, #8]
 80035c2:	60da      	str	r2, [r3, #12]
 80035c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035c6:	2300      	movs	r3, #0
 80035c8:	613b      	str	r3, [r7, #16]
 80035ca:	4b69      	ldr	r3, [pc, #420]	; (8003770 <MX_GPIO_Init+0x1c0>)
 80035cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ce:	4a68      	ldr	r2, [pc, #416]	; (8003770 <MX_GPIO_Init+0x1c0>)
 80035d0:	f043 0304 	orr.w	r3, r3, #4
 80035d4:	6313      	str	r3, [r2, #48]	; 0x30
 80035d6:	4b66      	ldr	r3, [pc, #408]	; (8003770 <MX_GPIO_Init+0x1c0>)
 80035d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035da:	f003 0304 	and.w	r3, r3, #4
 80035de:	613b      	str	r3, [r7, #16]
 80035e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80035e2:	2300      	movs	r3, #0
 80035e4:	60fb      	str	r3, [r7, #12]
 80035e6:	4b62      	ldr	r3, [pc, #392]	; (8003770 <MX_GPIO_Init+0x1c0>)
 80035e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ea:	4a61      	ldr	r2, [pc, #388]	; (8003770 <MX_GPIO_Init+0x1c0>)
 80035ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035f0:	6313      	str	r3, [r2, #48]	; 0x30
 80035f2:	4b5f      	ldr	r3, [pc, #380]	; (8003770 <MX_GPIO_Init+0x1c0>)
 80035f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035fa:	60fb      	str	r3, [r7, #12]
 80035fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035fe:	2300      	movs	r3, #0
 8003600:	60bb      	str	r3, [r7, #8]
 8003602:	4b5b      	ldr	r3, [pc, #364]	; (8003770 <MX_GPIO_Init+0x1c0>)
 8003604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003606:	4a5a      	ldr	r2, [pc, #360]	; (8003770 <MX_GPIO_Init+0x1c0>)
 8003608:	f043 0301 	orr.w	r3, r3, #1
 800360c:	6313      	str	r3, [r2, #48]	; 0x30
 800360e:	4b58      	ldr	r3, [pc, #352]	; (8003770 <MX_GPIO_Init+0x1c0>)
 8003610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	60bb      	str	r3, [r7, #8]
 8003618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800361a:	2300      	movs	r3, #0
 800361c:	607b      	str	r3, [r7, #4]
 800361e:	4b54      	ldr	r3, [pc, #336]	; (8003770 <MX_GPIO_Init+0x1c0>)
 8003620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003622:	4a53      	ldr	r2, [pc, #332]	; (8003770 <MX_GPIO_Init+0x1c0>)
 8003624:	f043 0302 	orr.w	r3, r3, #2
 8003628:	6313      	str	r3, [r2, #48]	; 0x30
 800362a:	4b51      	ldr	r3, [pc, #324]	; (8003770 <MX_GPIO_Init+0x1c0>)
 800362c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	607b      	str	r3, [r7, #4]
 8003634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003636:	2300      	movs	r3, #0
 8003638:	603b      	str	r3, [r7, #0]
 800363a:	4b4d      	ldr	r3, [pc, #308]	; (8003770 <MX_GPIO_Init+0x1c0>)
 800363c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363e:	4a4c      	ldr	r2, [pc, #304]	; (8003770 <MX_GPIO_Init+0x1c0>)
 8003640:	f043 0308 	orr.w	r3, r3, #8
 8003644:	6313      	str	r3, [r2, #48]	; 0x30
 8003646:	4b4a      	ldr	r3, [pc, #296]	; (8003770 <MX_GPIO_Init+0x1c0>)
 8003648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364a:	f003 0308 	and.w	r3, r3, #8
 800364e:	603b      	str	r3, [r7, #0]
 8003650:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RGBLED_Pin|MOTOR_DIR_L_Pin, GPIO_PIN_RESET);
 8003652:	2200      	movs	r2, #0
 8003654:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8003658:	4846      	ldr	r0, [pc, #280]	; (8003774 <MX_GPIO_Init+0x1c4>)
 800365a:	f004 fa71 	bl	8007b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_DIR_R_GPIO_Port, MOTOR_DIR_R_Pin, GPIO_PIN_RESET);
 800365e:	2200      	movs	r2, #0
 8003660:	2104      	movs	r1, #4
 8003662:	4845      	ldr	r0, [pc, #276]	; (8003778 <MX_GPIO_Init+0x1c8>)
 8003664:	f004 fa6c 	bl	8007b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CSB2_GPIO_Port, IMU_CSB2_Pin, GPIO_PIN_SET);
 8003668:	2201      	movs	r2, #1
 800366a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800366e:	4843      	ldr	r0, [pc, #268]	; (800377c <MX_GPIO_Init+0x1cc>)
 8003670:	f004 fa66 	bl	8007b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CSB1_GPIO_Port, IMU_CSB1_Pin, GPIO_PIN_RESET);
 8003674:	2200      	movs	r2, #0
 8003676:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800367a:	4840      	ldr	r0, [pc, #256]	; (800377c <MX_GPIO_Init+0x1cc>)
 800367c:	f004 fa60 	bl	8007b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_MSD_GPIO_Port, CS_MSD_Pin, GPIO_PIN_SET);
 8003680:	2201      	movs	r2, #1
 8003682:	2104      	movs	r1, #4
 8003684:	483e      	ldr	r0, [pc, #248]	; (8003780 <MX_GPIO_Init+0x1d0>)
 8003686:	f004 fa5b 	bl	8007b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SIDEMARKER_L_Pin PC8 PC9 */
  GPIO_InitStruct.Pin = SIDEMARKER_L_Pin|GPIO_PIN_8|GPIO_PIN_9;
 800368a:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 800368e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003690:	2300      	movs	r3, #0
 8003692:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003694:	2300      	movs	r3, #0
 8003696:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003698:	f107 0314 	add.w	r3, r7, #20
 800369c:	4619      	mov	r1, r3
 800369e:	4835      	ldr	r0, [pc, #212]	; (8003774 <MX_GPIO_Init+0x1c4>)
 80036a0:	f004 f8a2 	bl	80077e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RGBLED_Pin MOTOR_DIR_L_Pin */
  GPIO_InitStruct.Pin = RGBLED_Pin|MOTOR_DIR_L_Pin;
 80036a4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80036a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036aa:	2301      	movs	r3, #1
 80036ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ae:	2300      	movs	r3, #0
 80036b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036b2:	2300      	movs	r3, #0
 80036b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036b6:	f107 0314 	add.w	r3, r7, #20
 80036ba:	4619      	mov	r1, r3
 80036bc:	482d      	ldr	r0, [pc, #180]	; (8003774 <MX_GPIO_Init+0x1c4>)
 80036be:	f004 f893 	bl	80077e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 SIDEMARKER_R_Pin PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|SIDEMARKER_R_Pin|GPIO_PIN_13
 80036c2:	f24f 0303 	movw	r3, #61443	; 0xf003
 80036c6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036c8:	2300      	movs	r3, #0
 80036ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036cc:	2300      	movs	r3, #0
 80036ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036d0:	f107 0314 	add.w	r3, r7, #20
 80036d4:	4619      	mov	r1, r3
 80036d6:	4828      	ldr	r0, [pc, #160]	; (8003778 <MX_GPIO_Init+0x1c8>)
 80036d8:	f004 f886 	bl	80077e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_DIR_R_Pin */
  GPIO_InitStruct.Pin = MOTOR_DIR_R_Pin;
 80036dc:	2304      	movs	r3, #4
 80036de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036e0:	2301      	movs	r3, #1
 80036e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e4:	2300      	movs	r3, #0
 80036e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036e8:	2300      	movs	r3, #0
 80036ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOTOR_DIR_R_GPIO_Port, &GPIO_InitStruct);
 80036ec:	f107 0314 	add.w	r3, r7, #20
 80036f0:	4619      	mov	r1, r3
 80036f2:	4821      	ldr	r0, [pc, #132]	; (8003778 <MX_GPIO_Init+0x1c8>)
 80036f4:	f004 f878 	bl	80077e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80036f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80036fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036fe:	2300      	movs	r3, #0
 8003700:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003702:	2300      	movs	r3, #0
 8003704:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003706:	f107 0314 	add.w	r3, r7, #20
 800370a:	4619      	mov	r1, r3
 800370c:	481b      	ldr	r0, [pc, #108]	; (800377c <MX_GPIO_Init+0x1cc>)
 800370e:	f004 f86b 	bl	80077e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ButtonR_Pin ButtonL_Pin */
  GPIO_InitStruct.Pin = ButtonR_Pin|ButtonL_Pin;
 8003712:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003716:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003718:	2300      	movs	r3, #0
 800371a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800371c:	2301      	movs	r3, #1
 800371e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003720:	f107 0314 	add.w	r3, r7, #20
 8003724:	4619      	mov	r1, r3
 8003726:	4815      	ldr	r0, [pc, #84]	; (800377c <MX_GPIO_Init+0x1cc>)
 8003728:	f004 f85e 	bl	80077e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_CSB2_Pin IMU_CSB1_Pin */
  GPIO_InitStruct.Pin = IMU_CSB2_Pin|IMU_CSB1_Pin;
 800372c:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8003730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003732:	2301      	movs	r3, #1
 8003734:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003736:	2300      	movs	r3, #0
 8003738:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800373a:	2300      	movs	r3, #0
 800373c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800373e:	f107 0314 	add.w	r3, r7, #20
 8003742:	4619      	mov	r1, r3
 8003744:	480d      	ldr	r0, [pc, #52]	; (800377c <MX_GPIO_Init+0x1cc>)
 8003746:	f004 f84f 	bl	80077e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_MSD_Pin */
  GPIO_InitStruct.Pin = CS_MSD_Pin;
 800374a:	2304      	movs	r3, #4
 800374c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800374e:	2301      	movs	r3, #1
 8003750:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003752:	2300      	movs	r3, #0
 8003754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003756:	2300      	movs	r3, #0
 8003758:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_MSD_GPIO_Port, &GPIO_InitStruct);
 800375a:	f107 0314 	add.w	r3, r7, #20
 800375e:	4619      	mov	r1, r3
 8003760:	4807      	ldr	r0, [pc, #28]	; (8003780 <MX_GPIO_Init+0x1d0>)
 8003762:	f004 f841 	bl	80077e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003766:	bf00      	nop
 8003768:	3728      	adds	r7, #40	; 0x28
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	40023800 	.word	0x40023800
 8003774:	40020800 	.word	0x40020800
 8003778:	40020400 	.word	0x40020400
 800377c:	40020000 	.word	0x40020000
 8003780:	40020c00 	.word	0x40020c00

08003784 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* AdcHandle) {
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  getLineSensor();
 800378c:	f7ff fa0a 	bl	8002ba4 <getLineSensor>
}
 8003790:	bf00      	nop
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM6){
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a0b      	ldr	r2, [pc, #44]	; (80037d4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d101      	bne.n	80037ae <HAL_TIM_PeriodElapsedCallback+0x16>
      Interrupt1ms();
 80037aa:	f002 fcb5 	bl	8006118 <Interrupt1ms>
    }
    if(htim->Instance == TIM7){
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a09      	ldr	r2, [pc, #36]	; (80037d8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d101      	bne.n	80037bc <HAL_TIM_PeriodElapsedCallback+0x24>
      Interrupt100us();
 80037b8:	f002 fd0c 	bl	80061d4 <Interrupt100us>
    }
    if(htim->Instance == TIM10){
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a06      	ldr	r2, [pc, #24]	; (80037dc <HAL_TIM_PeriodElapsedCallback+0x44>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d101      	bne.n	80037ca <HAL_TIM_PeriodElapsedCallback+0x32>
      Interrupt300ns();
 80037c6:	f002 fd11 	bl	80061ec <Interrupt300ns>
    }
}
 80037ca:	bf00      	nop
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	40001000 	.word	0x40001000
 80037d8:	40001400 	.word	0x40001400
 80037dc:	40014400 	.word	0x40014400

080037e0 <_write>:

int _write(int file, char *ptr, int len)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 80037ec:	2300      	movs	r3, #0
 80037ee:	617b      	str	r3, [r7, #20]
 80037f0:	e009      	b.n	8003806 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	1c5a      	adds	r2, r3, #1
 80037f6:	60ba      	str	r2, [r7, #8]
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff fa68 	bl	8002cd0 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	3301      	adds	r3, #1
 8003804:	617b      	str	r3, [r7, #20]
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	429a      	cmp	r2, r3
 800380c:	dbf1      	blt.n	80037f2 <_write+0x12>
  }
  return len;
 800380e:	687b      	ldr	r3, [r7, #4]
}
 8003810:	4618      	mov	r0, r3
 8003812:	3718      	adds	r7, #24
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800381c:	b672      	cpsid	i
}
 800381e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003820:	e7fe      	b.n	8003820 <Error_Handler+0x8>
	...

08003824 <getMarkerSensor>:
// モジュール名 getMarksensor
// 処理概要     マーカーセンサの値を取得
// 引数         なし
// 戻り値       0x1:右センサ反応 0x2:左センサ反応
/////////////////////////////////////////////////////////////////////
uint8_t getMarkerSensor ( void ) {
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
	uint8_t r=1, l=1, ret=0;
 800382a:	2301      	movs	r3, #1
 800382c:	71bb      	strb	r3, [r7, #6]
 800382e:	2301      	movs	r3, #1
 8003830:	717b      	strb	r3, [r7, #5]
 8003832:	2300      	movs	r3, #0
 8003834:	71fb      	strb	r3, [r7, #7]

	l = HAL_GPIO_ReadPin(SidesensorL_GPIO_Port,SidesensorL_Pin);
 8003836:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800383a:	480e      	ldr	r0, [pc, #56]	; (8003874 <getMarkerSensor+0x50>)
 800383c:	f004 f968 	bl	8007b10 <HAL_GPIO_ReadPin>
 8003840:	4603      	mov	r3, r0
 8003842:	717b      	strb	r3, [r7, #5]
	r = HAL_GPIO_ReadPin(SidesensorR_GPIO_Port,SidesensorR_Pin);
 8003844:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003848:	480b      	ldr	r0, [pc, #44]	; (8003878 <getMarkerSensor+0x54>)
 800384a:	f004 f961 	bl	8007b10 <HAL_GPIO_ReadPin>
 800384e:	4603      	mov	r3, r0
 8003850:	71bb      	strb	r3, [r7, #6]

	if (r == 0) ret += RIGHTMARKER;
 8003852:	79bb      	ldrb	r3, [r7, #6]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d102      	bne.n	800385e <getMarkerSensor+0x3a>
 8003858:	79fb      	ldrb	r3, [r7, #7]
 800385a:	3301      	adds	r3, #1
 800385c:	71fb      	strb	r3, [r7, #7]
	if (l == 0) ret += LEFTMARKER;
 800385e:	797b      	ldrb	r3, [r7, #5]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d102      	bne.n	800386a <getMarkerSensor+0x46>
 8003864:	79fb      	ldrb	r3, [r7, #7]
 8003866:	3302      	adds	r3, #2
 8003868:	71fb      	strb	r3, [r7, #7]

	return ret;
 800386a:	79fb      	ldrb	r3, [r7, #7]
}
 800386c:	4618      	mov	r0, r3
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40020800 	.word	0x40020800
 8003878:	40020400 	.word	0x40020400

0800387c <motorPwmOut>:
// モジュール名 motorPwmOut
// 処理概要     左右のモータにPWMを出力する
// 引数         pwmL: 左モータへの出力(1~1000) pwmR: 右モータへの出力(1~1000)
// 戻り値       なし
/////////////////////////////////////////////////////////////////////
void motorPwmOut(int16_t pwmL, int16_t pwmR) {
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	4603      	mov	r3, r0
 8003884:	460a      	mov	r2, r1
 8003886:	80fb      	strh	r3, [r7, #6]
 8003888:	4613      	mov	r3, r2
 800388a:	80bb      	strh	r3, [r7, #4]

    // 0除算回避
    if (pwmL == 0) pwmL = 1;
 800388c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d101      	bne.n	8003898 <motorPwmOut+0x1c>
 8003894:	2301      	movs	r3, #1
 8003896:	80fb      	strh	r3, [r7, #6]
    if (pwmR == 0) pwmR = 1;
 8003898:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d101      	bne.n	80038a4 <motorPwmOut+0x28>
 80038a0:	2301      	movs	r3, #1
 80038a2:	80bb      	strh	r3, [r7, #4]

    if (pwmL != 0) {
 80038a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d031      	beq.n	8003910 <motorPwmOut+0x94>
        if (pwmL > 0) {
 80038ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	dd06      	ble.n	80038c2 <motorPwmOut+0x46>
            FOWARD_L;
 80038b4:	2201      	movs	r2, #1
 80038b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038ba:	4831      	ldr	r0, [pc, #196]	; (8003980 <motorPwmOut+0x104>)
 80038bc:	f004 f940 	bl	8007b40 <HAL_GPIO_WritePin>
 80038c0:	e005      	b.n	80038ce <motorPwmOut+0x52>
        } else {
            REVERSE_L;
 80038c2:	2200      	movs	r2, #0
 80038c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038c8:	482d      	ldr	r0, [pc, #180]	; (8003980 <motorPwmOut+0x104>)
 80038ca:	f004 f939 	bl	8007b40 <HAL_GPIO_WritePin>
        }
        pwmL = abs(pwmL);
 80038ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	bfb8      	it	lt
 80038d6:	425b      	neglt	r3, r3
 80038d8:	b29b      	uxth	r3, r3
 80038da:	80fb      	strh	r3, [r7, #6]
        PWMOUT_L;
 80038dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038e0:	ee07 3a90 	vmov	s15, r3
 80038e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038e8:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003984 <motorPwmOut+0x108>
 80038ec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80038f0:	4b25      	ldr	r3, [pc, #148]	; (8003988 <motorPwmOut+0x10c>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	ee07 3a90 	vmov	s15, r3
 80038f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003900:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003904:	ee17 3a90 	vmov	r3, s15
 8003908:	b21a      	sxth	r2, r3
 800390a:	4b1f      	ldr	r3, [pc, #124]	; (8003988 <motorPwmOut+0x10c>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	639a      	str	r2, [r3, #56]	; 0x38
    }

    if (pwmR != 0) {
 8003910:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d02f      	beq.n	8003978 <motorPwmOut+0xfc>
        if (pwmR > 0) {
 8003918:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	dd05      	ble.n	800392c <motorPwmOut+0xb0>
            FOWARD_R;
 8003920:	2200      	movs	r2, #0
 8003922:	2104      	movs	r1, #4
 8003924:	4819      	ldr	r0, [pc, #100]	; (800398c <motorPwmOut+0x110>)
 8003926:	f004 f90b 	bl	8007b40 <HAL_GPIO_WritePin>
 800392a:	e004      	b.n	8003936 <motorPwmOut+0xba>
        } else {
            REVERSE_R;
 800392c:	2201      	movs	r2, #1
 800392e:	2104      	movs	r1, #4
 8003930:	4816      	ldr	r0, [pc, #88]	; (800398c <motorPwmOut+0x110>)
 8003932:	f004 f905 	bl	8007b40 <HAL_GPIO_WritePin>
        }
        pwmR = abs(pwmR);
 8003936:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	bfb8      	it	lt
 800393e:	425b      	neglt	r3, r3
 8003940:	b29b      	uxth	r3, r3
 8003942:	80bb      	strh	r3, [r7, #4]
        PWMOUT_R;
 8003944:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003948:	ee07 3a90 	vmov	s15, r3
 800394c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003950:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8003984 <motorPwmOut+0x108>
 8003954:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003958:	4b0b      	ldr	r3, [pc, #44]	; (8003988 <motorPwmOut+0x10c>)
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	ee07 3a90 	vmov	s15, r3
 8003960:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003964:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003968:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800396c:	ee17 3a90 	vmov	r3, s15
 8003970:	b21a      	sxth	r2, r3
 8003972:	4b05      	ldr	r3, [pc, #20]	; (8003988 <motorPwmOut+0x10c>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	63da      	str	r2, [r3, #60]	; 0x3c
    }

}
 8003978:	bf00      	nop
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	40020800 	.word	0x40020800
 8003984:	447a0000 	.word	0x447a0000
 8003988:	2000357c 	.word	0x2000357c
 800398c:	40020400 	.word	0x40020400

08003990 <motorPwmOutSynth>:
// モジュール名 motorPwmOutSynth
// 処理概要     トレースと速度制御のPID制御量をPWMとしてモータに出力する
// 引数         tPwm: トレースのPID制御量 sPwm: 速度のPID制御量
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////
void motorPwmOutSynth(int16_t tPwm, int16_t sPwm, int16_t yrPwm, int16_t yPwm) {
 8003990:	b590      	push	{r4, r7, lr}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	4604      	mov	r4, r0
 8003998:	4608      	mov	r0, r1
 800399a:	4611      	mov	r1, r2
 800399c:	461a      	mov	r2, r3
 800399e:	4623      	mov	r3, r4
 80039a0:	80fb      	strh	r3, [r7, #6]
 80039a2:	4603      	mov	r3, r0
 80039a4:	80bb      	strh	r3, [r7, #4]
 80039a6:	460b      	mov	r3, r1
 80039a8:	807b      	strh	r3, [r7, #2]
 80039aa:	4613      	mov	r3, r2
 80039ac:	803b      	strh	r3, [r7, #0]
	int16_t overpwm;

    if (abs(sPwm + tPwm) > 1000 || abs(sPwm - tPwm) > 1000) {
 80039ae:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80039b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039b6:	4413      	add	r3, r2
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	bfb8      	it	lt
 80039bc:	425b      	neglt	r3, r3
 80039be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039c2:	dc24      	bgt.n	8003a0e <motorPwmOutSynth+0x7e>
 80039c4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80039c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	bfb8      	it	lt
 80039d2:	425b      	neglt	r3, r3
 80039d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039d8:	dc19      	bgt.n	8003a0e <motorPwmOutSynth+0x7e>
        //         motorpwmL = -1000;
        //     }
            
        // }
    } else {
        motorpwmR = sPwm - tPwm - yrPwm - yPwm;
 80039da:	88ba      	ldrh	r2, [r7, #4]
 80039dc:	88fb      	ldrh	r3, [r7, #6]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	887b      	ldrh	r3, [r7, #2]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	883b      	ldrh	r3, [r7, #0]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	b21a      	sxth	r2, r3
 80039f0:	4b0e      	ldr	r3, [pc, #56]	; (8003a2c <motorPwmOutSynth+0x9c>)
 80039f2:	801a      	strh	r2, [r3, #0]
	    motorpwmL = sPwm + tPwm + yrPwm + yPwm;
 80039f4:	88ba      	ldrh	r2, [r7, #4]
 80039f6:	88fb      	ldrh	r3, [r7, #6]
 80039f8:	4413      	add	r3, r2
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	887b      	ldrh	r3, [r7, #2]
 80039fe:	4413      	add	r3, r2
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	883b      	ldrh	r3, [r7, #0]
 8003a04:	4413      	add	r3, r2
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	b21a      	sxth	r2, r3
 8003a0a:	4b09      	ldr	r3, [pc, #36]	; (8003a30 <motorPwmOutSynth+0xa0>)
 8003a0c:	801a      	strh	r2, [r3, #0]
    }
    
	motorPwmOut(motorpwmL, motorpwmR);
 8003a0e:	4b08      	ldr	r3, [pc, #32]	; (8003a30 <motorPwmOutSynth+0xa0>)
 8003a10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a14:	4a05      	ldr	r2, [pc, #20]	; (8003a2c <motorPwmOutSynth+0x9c>)
 8003a16:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003a1a:	4611      	mov	r1, r2
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7ff ff2d 	bl	800387c <motorPwmOut>
 8003a22:	bf00      	nop
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd90      	pop	{r4, r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	20003776 	.word	0x20003776
 8003a30:	20003774 	.word	0x20003774

08003a34 <setup>:
// 処理概要     走行前設定
// 引数         なし
// 戻り値       なし
///////////////////////////////////////////////////////////////
void setup( void )
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af02      	add	r7, sp, #8
	uint8_t cntLed;

	
	ssd1306_SetCursor(0,5);
 8003a3a:	2105      	movs	r1, #5
 8003a3c:	2000      	movs	r0, #0
 8003a3e:	f001 fbb9 	bl	80051b4 <ssd1306_SetCursor>
	ssd1306_printf(Font_6x8,"No.%x",swValRotary);
 8003a42:	4b71      	ldr	r3, [pc, #452]	; (8003c08 <setup+0x1d4>)
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	4971      	ldr	r1, [pc, #452]	; (8003c0c <setup+0x1d8>)
 8003a48:	4a71      	ldr	r2, [pc, #452]	; (8003c10 <setup+0x1dc>)
 8003a4a:	c903      	ldmia	r1, {r0, r1}
 8003a4c:	f001 fe50 	bl	80056f0 <ssd1306_printf>
	// ディップスイッチで項目選択
	switch ( swValRotary ) {
 8003a50:	4b6d      	ldr	r3, [pc, #436]	; (8003c08 <setup+0x1d4>)
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	3b02      	subs	r3, #2
 8003a56:	2b05      	cmp	r3, #5
 8003a58:	f200 87f1 	bhi.w	8004a3e <setup+0x100a>
 8003a5c:	a201      	add	r2, pc, #4	; (adr r2, 8003a64 <setup+0x30>)
 8003a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a62:	bf00      	nop
 8003a64:	080040af 	.word	0x080040af
 8003a68:	0800414d 	.word	0x0800414d
 8003a6c:	08003a7d 	.word	0x08003a7d
 8003a70:	080043cf 	.word	0x080043cf
 8003a74:	0800460f 	.word	0x0800460f
 8003a78:	0800484b 	.word	0x0800484b
		// 	break;
		//------------------------------------------------------------------
		// Sensors test
		//------------------------------------------------------------------
		case HEX_SENSORS:
			if (swValRotary != beforeHEX) 	{
 8003a7c:	4b62      	ldr	r3, [pc, #392]	; (8003c08 <setup+0x1d4>)
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	461a      	mov	r2, r3
 8003a82:	4b64      	ldr	r3, [pc, #400]	; (8003c14 <setup+0x1e0>)
 8003a84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d013      	beq.n	8003ab4 <setup+0x80>
				// 切替時に実行
				showBattery();	// バッテリ残量
 8003a8c:	f7fe f9b8 	bl	8001e00 <showBattery>
				// ロータリスイッチ値を表示
				ssd1306_SetCursor(30,5);
 8003a90:	2105      	movs	r1, #5
 8003a92:	201e      	movs	r0, #30
 8003a94:	f001 fb8e 	bl	80051b4 <ssd1306_SetCursor>
				ssd1306_printf(Font_6x8,"SENSORS  ");
 8003a98:	4b5c      	ldr	r3, [pc, #368]	; (8003c0c <setup+0x1d8>)
 8003a9a:	4a5f      	ldr	r2, [pc, #380]	; (8003c18 <setup+0x1e4>)
 8003a9c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003aa0:	f001 fe26 	bl	80056f0 <ssd1306_printf>
				ssd1306_FillRectangle(0,16,127,63, Black);
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	9300      	str	r3, [sp, #0]
 8003aa8:	233f      	movs	r3, #63	; 0x3f
 8003aaa:	227f      	movs	r2, #127	; 0x7f
 8003aac:	2110      	movs	r1, #16
 8003aae:	2000      	movs	r0, #0
 8003ab0:	f001 fd9f 	bl	80055f2 <ssd1306_FillRectangle>
			}

			dataTuningLR( &patternSensors, 1, 1, 4 );
 8003ab4:	2304      	movs	r3, #4
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	2101      	movs	r1, #1
 8003aba:	4858      	ldr	r0, [pc, #352]	; (8003c1c <setup+0x1e8>)
 8003abc:	f001 f8ee 	bl	8004c9c <dataTuningLR>
			switch( patternSensors ) {
 8003ac0:	4b56      	ldr	r3, [pc, #344]	; (8003c1c <setup+0x1e8>)
 8003ac2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	2b03      	cmp	r3, #3
 8003aca:	f200 82e9 	bhi.w	80040a0 <setup+0x66c>
 8003ace:	a201      	add	r2, pc, #4	; (adr r2, 8003ad4 <setup+0xa0>)
 8003ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad4:	08003ae5 	.word	0x08003ae5
 8003ad8:	08003c55 	.word	0x08003c55
 8003adc:	08003d85 	.word	0x08003d85
 8003ae0:	08003e49 	.word	0x08003e49
				case 1:
					if (patternSensors != beforeSensors) 	{
 8003ae4:	4b4d      	ldr	r3, [pc, #308]	; (8003c1c <setup+0x1e8>)
 8003ae6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003aea:	4b4d      	ldr	r3, [pc, #308]	; (8003c20 <setup+0x1ec>)
 8003aec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d011      	beq.n	8003b18 <setup+0xe4>
						// 切替時に実行
						ssd1306_FillRectangle(0,16,127,63, Black); // 黒塗り
 8003af4:	2300      	movs	r3, #0
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	233f      	movs	r3, #63	; 0x3f
 8003afa:	227f      	movs	r2, #127	; 0x7f
 8003afc:	2110      	movs	r1, #16
 8003afe:	2000      	movs	r0, #0
 8003b00:	f001 fd77 	bl	80055f2 <ssd1306_FillRectangle>
						ssd1306_SetCursor(47,16);
 8003b04:	2110      	movs	r1, #16
 8003b06:	202f      	movs	r0, #47	; 0x2f
 8003b08:	f001 fb54 	bl	80051b4 <ssd1306_SetCursor>
						ssd1306_printf(Font_6x8,"Motor");
 8003b0c:	4b3f      	ldr	r3, [pc, #252]	; (8003c0c <setup+0x1d8>)
 8003b0e:	4a45      	ldr	r2, [pc, #276]	; (8003c24 <setup+0x1f0>)
 8003b10:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003b14:	f001 fdec 	bl	80056f0 <ssd1306_printf>
					}
					// Duty
					ssd1306_SetCursor(35,24);
 8003b18:	2118      	movs	r1, #24
 8003b1a:	2023      	movs	r0, #35	; 0x23
 8003b1c:	f001 fb4a 	bl	80051b4 <ssd1306_SetCursor>
					ssd1306_printf(Font_6x8,"PWM:%4d",motorTestPwm);
 8003b20:	4b41      	ldr	r3, [pc, #260]	; (8003c28 <setup+0x1f4>)
 8003b22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b26:	4939      	ldr	r1, [pc, #228]	; (8003c0c <setup+0x1d8>)
 8003b28:	4a40      	ldr	r2, [pc, #256]	; (8003c2c <setup+0x1f8>)
 8003b2a:	c903      	ldmia	r1, {r0, r1}
 8003b2c:	f001 fde0 	bl	80056f0 <ssd1306_printf>

					// Left
					ssd1306_SetCursor(0,38);
 8003b30:	2126      	movs	r1, #38	; 0x26
 8003b32:	2000      	movs	r0, #0
 8003b34:	f001 fb3e 	bl	80051b4 <ssd1306_SetCursor>
					ssd1306_printf(Font_6x8,"enc:%5.0f",encTotalL/PALSE_MILLIMETER);	// Encoder
 8003b38:	4b3d      	ldr	r3, [pc, #244]	; (8003c30 <setup+0x1fc>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	ee07 3a90 	vmov	s15, r3
 8003b40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b44:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8003c34 <setup+0x200>
 8003b48:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003b4c:	ee16 0a90 	vmov	r0, s13
 8003b50:	f7fc fd1a 	bl	8000588 <__aeabi_f2d>
 8003b54:	4602      	mov	r2, r0
 8003b56:	460b      	mov	r3, r1
 8003b58:	492c      	ldr	r1, [pc, #176]	; (8003c0c <setup+0x1d8>)
 8003b5a:	e9cd 2300 	strd	r2, r3, [sp]
 8003b5e:	4a36      	ldr	r2, [pc, #216]	; (8003c38 <setup+0x204>)
 8003b60:	c903      	ldmia	r1, {r0, r1}
 8003b62:	f001 fdc5 	bl	80056f0 <ssd1306_printf>
					ssd1306_SetCursor(0,48);
 8003b66:	2130      	movs	r1, #48	; 0x30
 8003b68:	2000      	movs	r0, #0
 8003b6a:	f001 fb23 	bl	80051b4 <ssd1306_SetCursor>
					ssd1306_printf(Font_6x8,"Cur:%5d",motorCurrentL); // Current
 8003b6e:	4b33      	ldr	r3, [pc, #204]	; (8003c3c <setup+0x208>)
 8003b70:	881b      	ldrh	r3, [r3, #0]
 8003b72:	4926      	ldr	r1, [pc, #152]	; (8003c0c <setup+0x1d8>)
 8003b74:	4a32      	ldr	r2, [pc, #200]	; (8003c40 <setup+0x20c>)
 8003b76:	c903      	ldmia	r1, {r0, r1}
 8003b78:	f001 fdba 	bl	80056f0 <ssd1306_printf>

					// Right
					ssd1306_SetCursor(70,38);
 8003b7c:	2126      	movs	r1, #38	; 0x26
 8003b7e:	2046      	movs	r0, #70	; 0x46
 8003b80:	f001 fb18 	bl	80051b4 <ssd1306_SetCursor>
					ssd1306_printf(Font_6x8,"enc:%5.0f",encTotalR/PALSE_MILLIMETER); 	// Encoder
 8003b84:	4b2f      	ldr	r3, [pc, #188]	; (8003c44 <setup+0x210>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	ee07 3a90 	vmov	s15, r3
 8003b8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b90:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8003c34 <setup+0x200>
 8003b94:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003b98:	ee16 0a90 	vmov	r0, s13
 8003b9c:	f7fc fcf4 	bl	8000588 <__aeabi_f2d>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	4919      	ldr	r1, [pc, #100]	; (8003c0c <setup+0x1d8>)
 8003ba6:	e9cd 2300 	strd	r2, r3, [sp]
 8003baa:	4a23      	ldr	r2, [pc, #140]	; (8003c38 <setup+0x204>)
 8003bac:	c903      	ldmia	r1, {r0, r1}
 8003bae:	f001 fd9f 	bl	80056f0 <ssd1306_printf>
					ssd1306_SetCursor(70,48);
 8003bb2:	2130      	movs	r1, #48	; 0x30
 8003bb4:	2046      	movs	r0, #70	; 0x46
 8003bb6:	f001 fafd 	bl	80051b4 <ssd1306_SetCursor>
					ssd1306_printf(Font_6x8,"Cur:%5d",motorCurrentR); // Current
 8003bba:	4b23      	ldr	r3, [pc, #140]	; (8003c48 <setup+0x214>)
 8003bbc:	881b      	ldrh	r3, [r3, #0]
 8003bbe:	4913      	ldr	r1, [pc, #76]	; (8003c0c <setup+0x1d8>)
 8003bc0:	4a1f      	ldr	r2, [pc, #124]	; (8003c40 <setup+0x20c>)
 8003bc2:	c903      	ldmia	r1, {r0, r1}
 8003bc4:	f001 fd94 	bl	80056f0 <ssd1306_printf>

					dataTuningUD ( &motorTestPwm, 100, -500, 500 );
 8003bc8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003bcc:	4a1f      	ldr	r2, [pc, #124]	; (8003c4c <setup+0x218>)
 8003bce:	2164      	movs	r1, #100	; 0x64
 8003bd0:	4815      	ldr	r0, [pc, #84]	; (8003c28 <setup+0x1f4>)
 8003bd2:	f000 ffc9 	bl	8004b68 <dataTuningUD>
					data_select( &motor_test, SW_PUSH );
 8003bd6:	2102      	movs	r1, #2
 8003bd8:	481d      	ldr	r0, [pc, #116]	; (8003c50 <setup+0x21c>)
 8003bda:	f000 ff8f 	bl	8004afc <data_select>
					if ( motor_test == 1 ) {
 8003bde:	4b1c      	ldr	r3, [pc, #112]	; (8003c50 <setup+0x21c>)
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d10a      	bne.n	8003bfc <setup+0x1c8>
						motorPwmOut(motorTestPwm,motorTestPwm);
 8003be6:	4b10      	ldr	r3, [pc, #64]	; (8003c28 <setup+0x1f4>)
 8003be8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bec:	4a0e      	ldr	r2, [pc, #56]	; (8003c28 <setup+0x1f4>)
 8003bee:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003bf2:	4611      	mov	r1, r2
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7ff fe41 	bl	800387c <motorPwmOut>
					} else {
						motorPwmOut(0, 0);
					}
					break;
 8003bfa:	e251      	b.n	80040a0 <setup+0x66c>
						motorPwmOut(0, 0);
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	2000      	movs	r0, #0
 8003c00:	f7ff fe3c 	bl	800387c <motorPwmOut>
					break;
 8003c04:	e24c      	b.n	80040a0 <setup+0x66c>
 8003c06:	bf00      	nop
 8003c08:	20003b9a 	.word	0x20003b9a
 8003c0c:	20000050 	.word	0x20000050
 8003c10:	08013aa0 	.word	0x08013aa0
 8003c14:	20000042 	.word	0x20000042
 8003c18:	08013aa8 	.word	0x08013aa8
 8003c1c:	20000044 	.word	0x20000044
 8003c20:	20003786 	.word	0x20003786
 8003c24:	08013ab4 	.word	0x08013ab4
 8003c28:	2000004e 	.word	0x2000004e
 8003c2c:	08013abc 	.word	0x08013abc
 8003c30:	20003354 	.word	0x20003354
 8003c34:	42704bc7 	.word	0x42704bc7
 8003c38:	08013ac4 	.word	0x08013ac4
 8003c3c:	20003322 	.word	0x20003322
 8003c40:	08013ad0 	.word	0x08013ad0
 8003c44:	20003350 	.word	0x20003350
 8003c48:	20003324 	.word	0x20003324
 8003c4c:	fffffe0c 	.word	0xfffffe0c
 8003c50:	20003788 	.word	0x20003788

				case 2:
					if (patternSensors != beforeSensors) 	{
 8003c54:	4b6a      	ldr	r3, [pc, #424]	; (8003e00 <setup+0x3cc>)
 8003c56:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003c5a:	4b6a      	ldr	r3, [pc, #424]	; (8003e04 <setup+0x3d0>)
 8003c5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d011      	beq.n	8003c88 <setup+0x254>
						// 切替時に実行
						ssd1306_FillRectangle(0,16,127,63, Black); // 黒塗り
 8003c64:	2300      	movs	r3, #0
 8003c66:	9300      	str	r3, [sp, #0]
 8003c68:	233f      	movs	r3, #63	; 0x3f
 8003c6a:	227f      	movs	r2, #127	; 0x7f
 8003c6c:	2110      	movs	r1, #16
 8003c6e:	2000      	movs	r0, #0
 8003c70:	f001 fcbf 	bl	80055f2 <ssd1306_FillRectangle>
						ssd1306_SetCursor(32,16);
 8003c74:	2110      	movs	r1, #16
 8003c76:	2020      	movs	r0, #32
 8003c78:	f001 fa9c 	bl	80051b4 <ssd1306_SetCursor>
						ssd1306_printf(Font_6x8,"IMU BMI088");
 8003c7c:	4b62      	ldr	r3, [pc, #392]	; (8003e08 <setup+0x3d4>)
 8003c7e:	4a63      	ldr	r2, [pc, #396]	; (8003e0c <setup+0x3d8>)
 8003c80:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003c84:	f001 fd34 	bl	80056f0 <ssd1306_printf>
					}
					

					ssd1306_SetCursor(0,24);
 8003c88:	2118      	movs	r1, #24
 8003c8a:	2000      	movs	r0, #0
 8003c8c:	f001 fa92 	bl	80051b4 <ssd1306_SetCursor>
					ssd1306_printf(Font_6x8,"xg:%3.1f",BMI088val.gyro.x);
 8003c90:	4b5f      	ldr	r3, [pc, #380]	; (8003e10 <setup+0x3dc>)
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7fc fc77 	bl	8000588 <__aeabi_f2d>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	495a      	ldr	r1, [pc, #360]	; (8003e08 <setup+0x3d4>)
 8003ca0:	e9cd 2300 	strd	r2, r3, [sp]
 8003ca4:	4a5b      	ldr	r2, [pc, #364]	; (8003e14 <setup+0x3e0>)
 8003ca6:	c903      	ldmia	r1, {r0, r1}
 8003ca8:	f001 fd22 	bl	80056f0 <ssd1306_printf>
					ssd1306_SetCursor(0,34);
 8003cac:	2122      	movs	r1, #34	; 0x22
 8003cae:	2000      	movs	r0, #0
 8003cb0:	f001 fa80 	bl	80051b4 <ssd1306_SetCursor>
					ssd1306_printf(Font_6x8,"yg:%3.1f",BMI088val.gyro.y);
 8003cb4:	4b56      	ldr	r3, [pc, #344]	; (8003e10 <setup+0x3dc>)
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7fc fc65 	bl	8000588 <__aeabi_f2d>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	4951      	ldr	r1, [pc, #324]	; (8003e08 <setup+0x3d4>)
 8003cc4:	e9cd 2300 	strd	r2, r3, [sp]
 8003cc8:	4a53      	ldr	r2, [pc, #332]	; (8003e18 <setup+0x3e4>)
 8003cca:	c903      	ldmia	r1, {r0, r1}
 8003ccc:	f001 fd10 	bl	80056f0 <ssd1306_printf>
					ssd1306_SetCursor(0,44);
 8003cd0:	212c      	movs	r1, #44	; 0x2c
 8003cd2:	2000      	movs	r0, #0
 8003cd4:	f001 fa6e 	bl	80051b4 <ssd1306_SetCursor>
					ssd1306_printf(Font_6x8,"zg:%3.1f",BMI088val.gyro.z);
 8003cd8:	4b4d      	ldr	r3, [pc, #308]	; (8003e10 <setup+0x3dc>)
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7fc fc53 	bl	8000588 <__aeabi_f2d>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	4948      	ldr	r1, [pc, #288]	; (8003e08 <setup+0x3d4>)
 8003ce8:	e9cd 2300 	strd	r2, r3, [sp]
 8003cec:	4a4b      	ldr	r2, [pc, #300]	; (8003e1c <setup+0x3e8>)
 8003cee:	c903      	ldmia	r1, {r0, r1}
 8003cf0:	f001 fcfe 	bl	80056f0 <ssd1306_printf>

					ssd1306_SetCursor(70,24);
 8003cf4:	2118      	movs	r1, #24
 8003cf6:	2046      	movs	r0, #70	; 0x46
 8003cf8:	f001 fa5c 	bl	80051b4 <ssd1306_SetCursor>
					ssd1306_printf(Font_6x8,"xangle:%3.1f",BMI088val.angle.x);
 8003cfc:	4b44      	ldr	r3, [pc, #272]	; (8003e10 <setup+0x3dc>)
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7fc fc41 	bl	8000588 <__aeabi_f2d>
 8003d06:	4602      	mov	r2, r0
 8003d08:	460b      	mov	r3, r1
 8003d0a:	493f      	ldr	r1, [pc, #252]	; (8003e08 <setup+0x3d4>)
 8003d0c:	e9cd 2300 	strd	r2, r3, [sp]
 8003d10:	4a43      	ldr	r2, [pc, #268]	; (8003e20 <setup+0x3ec>)
 8003d12:	c903      	ldmia	r1, {r0, r1}
 8003d14:	f001 fcec 	bl	80056f0 <ssd1306_printf>
					ssd1306_SetCursor(70,34);
 8003d18:	2122      	movs	r1, #34	; 0x22
 8003d1a:	2046      	movs	r0, #70	; 0x46
 8003d1c:	f001 fa4a 	bl	80051b4 <ssd1306_SetCursor>
					ssd1306_printf(Font_6x8,"yangle:%3.1f",BMI088val.angle.y);
 8003d20:	4b3b      	ldr	r3, [pc, #236]	; (8003e10 <setup+0x3dc>)
 8003d22:	69db      	ldr	r3, [r3, #28]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7fc fc2f 	bl	8000588 <__aeabi_f2d>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	4936      	ldr	r1, [pc, #216]	; (8003e08 <setup+0x3d4>)
 8003d30:	e9cd 2300 	strd	r2, r3, [sp]
 8003d34:	4a3b      	ldr	r2, [pc, #236]	; (8003e24 <setup+0x3f0>)
 8003d36:	c903      	ldmia	r1, {r0, r1}
 8003d38:	f001 fcda 	bl	80056f0 <ssd1306_printf>
					ssd1306_SetCursor(70,44);
 8003d3c:	212c      	movs	r1, #44	; 0x2c
 8003d3e:	2046      	movs	r0, #70	; 0x46
 8003d40:	f001 fa38 	bl	80051b4 <ssd1306_SetCursor>
					ssd1306_printf(Font_6x8,"zangle:%3.1f",BMI088val.angle.z);
 8003d44:	4b32      	ldr	r3, [pc, #200]	; (8003e10 <setup+0x3dc>)
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7fc fc1d 	bl	8000588 <__aeabi_f2d>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	460b      	mov	r3, r1
 8003d52:	492d      	ldr	r1, [pc, #180]	; (8003e08 <setup+0x3d4>)
 8003d54:	e9cd 2300 	strd	r2, r3, [sp]
 8003d58:	4a33      	ldr	r2, [pc, #204]	; (8003e28 <setup+0x3f4>)
 8003d5a:	c903      	ldmia	r1, {r0, r1}
 8003d5c:	f001 fcc8 	bl	80056f0 <ssd1306_printf>

					if (swValTact == SW_PUSH) {
 8003d60:	4b32      	ldr	r3, [pc, #200]	; (8003e2c <setup+0x3f8>)
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	f040 819a 	bne.w	800409e <setup+0x66a>
						BMI088val.angle.x = 0;
 8003d6a:	4b29      	ldr	r3, [pc, #164]	; (8003e10 <setup+0x3dc>)
 8003d6c:	f04f 0200 	mov.w	r2, #0
 8003d70:	619a      	str	r2, [r3, #24]
						BMI088val.angle.y = 0;
 8003d72:	4b27      	ldr	r3, [pc, #156]	; (8003e10 <setup+0x3dc>)
 8003d74:	f04f 0200 	mov.w	r2, #0
 8003d78:	61da      	str	r2, [r3, #28]
						BMI088val.angle.z = 0;
 8003d7a:	4b25      	ldr	r3, [pc, #148]	; (8003e10 <setup+0x3dc>)
 8003d7c:	f04f 0200 	mov.w	r2, #0
 8003d80:	621a      	str	r2, [r3, #32]
					}
					break;
 8003d82:	e18c      	b.n	800409e <setup+0x66a>
				case 3:
					if (patternSensors != beforeSensors) 	{
 8003d84:	4b1e      	ldr	r3, [pc, #120]	; (8003e00 <setup+0x3cc>)
 8003d86:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003d8a:	4b1e      	ldr	r3, [pc, #120]	; (8003e04 <setup+0x3d0>)
 8003d8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d011      	beq.n	8003db8 <setup+0x384>
						// 切替時に実行
						ssd1306_FillRectangle(0,16,127,63, Black); // 黒塗り
 8003d94:	2300      	movs	r3, #0
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	233f      	movs	r3, #63	; 0x3f
 8003d9a:	227f      	movs	r2, #127	; 0x7f
 8003d9c:	2110      	movs	r1, #16
 8003d9e:	2000      	movs	r0, #0
 8003da0:	f001 fc27 	bl	80055f2 <ssd1306_FillRectangle>
						ssd1306_SetCursor(32,16);
 8003da4:	2110      	movs	r1, #16
 8003da6:	2020      	movs	r0, #32
 8003da8:	f001 fa04 	bl	80051b4 <ssd1306_SetCursor>
						ssd1306_printf(Font_6x8,"Side sensors");
 8003dac:	4b16      	ldr	r3, [pc, #88]	; (8003e08 <setup+0x3d4>)
 8003dae:	4a20      	ldr	r2, [pc, #128]	; (8003e30 <setup+0x3fc>)
 8003db0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003db4:	f001 fc9c 	bl	80056f0 <ssd1306_printf>
					}
					

					ssd1306_SetCursor(0,24);
 8003db8:	2118      	movs	r1, #24
 8003dba:	2000      	movs	r0, #0
 8003dbc:	f001 f9fa 	bl	80051b4 <ssd1306_SetCursor>
					ssd1306_printf(Font_6x8,"Marker sensors:%d",getMarkerSensor());
 8003dc0:	f7ff fd30 	bl	8003824 <getMarkerSensor>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	4910      	ldr	r1, [pc, #64]	; (8003e08 <setup+0x3d4>)
 8003dc8:	4a1a      	ldr	r2, [pc, #104]	; (8003e34 <setup+0x400>)
 8003dca:	c903      	ldmia	r1, {r0, r1}
 8003dcc:	f001 fc90 	bl	80056f0 <ssd1306_printf>

					ssd1306_SetCursor(0,34);
 8003dd0:	2122      	movs	r1, #34	; 0x22
 8003dd2:	2000      	movs	r0, #0
 8003dd4:	f001 f9ee 	bl	80051b4 <ssd1306_SetCursor>
					ssd1306_printf(Font_6x8,"Board SW:%d",swValMainTact);
 8003dd8:	4b17      	ldr	r3, [pc, #92]	; (8003e38 <setup+0x404>)
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	490a      	ldr	r1, [pc, #40]	; (8003e08 <setup+0x3d4>)
 8003dde:	4a17      	ldr	r2, [pc, #92]	; (8003e3c <setup+0x408>)
 8003de0:	c903      	ldmia	r1, {r0, r1}
 8003de2:	f001 fc85 	bl	80056f0 <ssd1306_printf>

					ssd1306_SetCursor(0,44);
 8003de6:	212c      	movs	r1, #44	; 0x2c
 8003de8:	2000      	movs	r0, #0
 8003dea:	f001 f9e3 	bl	80051b4 <ssd1306_SetCursor>
					ssd1306_printf(Font_6x8,"Battery :%d",batteryVal);
 8003dee:	4b14      	ldr	r3, [pc, #80]	; (8003e40 <setup+0x40c>)
 8003df0:	881b      	ldrh	r3, [r3, #0]
 8003df2:	4905      	ldr	r1, [pc, #20]	; (8003e08 <setup+0x3d4>)
 8003df4:	4a13      	ldr	r2, [pc, #76]	; (8003e44 <setup+0x410>)
 8003df6:	c903      	ldmia	r1, {r0, r1}
 8003df8:	f001 fc7a 	bl	80056f0 <ssd1306_printf>

					break;
 8003dfc:	e150      	b.n	80040a0 <setup+0x66c>
 8003dfe:	bf00      	nop
 8003e00:	20000044 	.word	0x20000044
 8003e04:	20003786 	.word	0x20003786
 8003e08:	20000050 	.word	0x20000050
 8003e0c:	08013ad8 	.word	0x08013ad8
 8003e10:	2000025c 	.word	0x2000025c
 8003e14:	08013ae4 	.word	0x08013ae4
 8003e18:	08013af0 	.word	0x08013af0
 8003e1c:	08013afc 	.word	0x08013afc
 8003e20:	08013b08 	.word	0x08013b08
 8003e24:	08013b18 	.word	0x08013b18
 8003e28:	08013b28 	.word	0x08013b28
 8003e2c:	20003b99 	.word	0x20003b99
 8003e30:	08013b38 	.word	0x08013b38
 8003e34:	08013b48 	.word	0x08013b48
 8003e38:	20003b9b 	.word	0x20003b9b
 8003e3c:	08013b5c 	.word	0x08013b5c
 8003e40:	20003326 	.word	0x20003326
 8003e44:	08013b68 	.word	0x08013b68
				case 4:
					if (patternSensors != beforeSensors) 	{
 8003e48:	4bb1      	ldr	r3, [pc, #708]	; (8004110 <setup+0x6dc>)
 8003e4a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003e4e:	4bb1      	ldr	r3, [pc, #708]	; (8004114 <setup+0x6e0>)
 8003e50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d02d      	beq.n	8003eb4 <setup+0x480>
						// 切替時に実行
						ssd1306_FillRectangle(0,16,127,63, Black); // 黒塗り
 8003e58:	2300      	movs	r3, #0
 8003e5a:	9300      	str	r3, [sp, #0]
 8003e5c:	233f      	movs	r3, #63	; 0x3f
 8003e5e:	227f      	movs	r2, #127	; 0x7f
 8003e60:	2110      	movs	r1, #16
 8003e62:	2000      	movs	r0, #0
 8003e64:	f001 fbc5 	bl	80055f2 <ssd1306_FillRectangle>
						// センサ基板形状
						ssd1306_DrawArc(64,81,66,90,270,White);
 8003e68:	2301      	movs	r3, #1
 8003e6a:	9301      	str	r3, [sp, #4]
 8003e6c:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8003e70:	9300      	str	r3, [sp, #0]
 8003e72:	235a      	movs	r3, #90	; 0x5a
 8003e74:	2242      	movs	r2, #66	; 0x42
 8003e76:	2151      	movs	r1, #81	; 0x51
 8003e78:	2040      	movs	r0, #64	; 0x40
 8003e7a:	f001 fa71 	bl	8005360 <ssd1306_DrawArc>
						ssd1306_DrawArc(64,81,35,90,270,White);
 8003e7e:	2301      	movs	r3, #1
 8003e80:	9301      	str	r3, [sp, #4]
 8003e82:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8003e86:	9300      	str	r3, [sp, #0]
 8003e88:	235a      	movs	r3, #90	; 0x5a
 8003e8a:	2223      	movs	r2, #35	; 0x23
 8003e8c:	2151      	movs	r1, #81	; 0x51
 8003e8e:	2040      	movs	r0, #64	; 0x40
 8003e90:	f001 fa66 	bl	8005360 <ssd1306_DrawArc>
						ssd1306_Line(2,63,34,63,White);
 8003e94:	2301      	movs	r3, #1
 8003e96:	9300      	str	r3, [sp, #0]
 8003e98:	233f      	movs	r3, #63	; 0x3f
 8003e9a:	2222      	movs	r2, #34	; 0x22
 8003e9c:	213f      	movs	r1, #63	; 0x3f
 8003e9e:	2002      	movs	r0, #2
 8003ea0:	f001 f9a0 	bl	80051e4 <ssd1306_Line>
						ssd1306_Line(93,63,126,63,White);
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	9300      	str	r3, [sp, #0]
 8003ea8:	233f      	movs	r3, #63	; 0x3f
 8003eaa:	227e      	movs	r2, #126	; 0x7e
 8003eac:	213f      	movs	r1, #63	; 0x3f
 8003eae:	205d      	movs	r0, #93	; 0x5d
 8003eb0:	f001 f998 	bl	80051e4 <ssd1306_Line>
					}

					if (lSensorOffset[0] > 0 && modeCalLinesensors == 0) {
 8003eb4:	4b98      	ldr	r3, [pc, #608]	; (8004118 <setup+0x6e4>)
 8003eb6:	881b      	ldrh	r3, [r3, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d072      	beq.n	8003fa2 <setup+0x56e>
 8003ebc:	4b97      	ldr	r3, [pc, #604]	; (800411c <setup+0x6e8>)
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d16e      	bne.n	8003fa2 <setup+0x56e>
						ssd1306_SetCursor(37,22);
 8003ec4:	2116      	movs	r1, #22
 8003ec6:	2025      	movs	r0, #37	; 0x25
 8003ec8:	f001 f974 	bl	80051b4 <ssd1306_SetCursor>
						ssd1306_printf(Font_6x8,"%4d",lSensorCari[4]);
 8003ecc:	4b94      	ldr	r3, [pc, #592]	; (8004120 <setup+0x6ec>)
 8003ece:	891b      	ldrh	r3, [r3, #8]
 8003ed0:	4994      	ldr	r1, [pc, #592]	; (8004124 <setup+0x6f0>)
 8003ed2:	4a95      	ldr	r2, [pc, #596]	; (8004128 <setup+0x6f4>)
 8003ed4:	c903      	ldmia	r1, {r0, r1}
 8003ed6:	f001 fc0b 	bl	80056f0 <ssd1306_printf>
						ssd1306_SetCursor(31,30);
 8003eda:	211e      	movs	r1, #30
 8003edc:	201f      	movs	r0, #31
 8003ede:	f001 f969 	bl	80051b4 <ssd1306_SetCursor>
						ssd1306_printf(Font_6x8,"%4d",lSensorCari[3]);
 8003ee2:	4b8f      	ldr	r3, [pc, #572]	; (8004120 <setup+0x6ec>)
 8003ee4:	88db      	ldrh	r3, [r3, #6]
 8003ee6:	498f      	ldr	r1, [pc, #572]	; (8004124 <setup+0x6f0>)
 8003ee8:	4a8f      	ldr	r2, [pc, #572]	; (8004128 <setup+0x6f4>)
 8003eea:	c903      	ldmia	r1, {r0, r1}
 8003eec:	f001 fc00 	bl	80056f0 <ssd1306_printf>
						ssd1306_SetCursor(22,38);
 8003ef0:	2126      	movs	r1, #38	; 0x26
 8003ef2:	2016      	movs	r0, #22
 8003ef4:	f001 f95e 	bl	80051b4 <ssd1306_SetCursor>
						ssd1306_printf(Font_6x8,"%4d",lSensorCari[2]);
 8003ef8:	4b89      	ldr	r3, [pc, #548]	; (8004120 <setup+0x6ec>)
 8003efa:	889b      	ldrh	r3, [r3, #4]
 8003efc:	4989      	ldr	r1, [pc, #548]	; (8004124 <setup+0x6f0>)
 8003efe:	4a8a      	ldr	r2, [pc, #552]	; (8004128 <setup+0x6f4>)
 8003f00:	c903      	ldmia	r1, {r0, r1}
 8003f02:	f001 fbf5 	bl	80056f0 <ssd1306_printf>
						ssd1306_SetCursor(13,46);
 8003f06:	212e      	movs	r1, #46	; 0x2e
 8003f08:	200d      	movs	r0, #13
 8003f0a:	f001 f953 	bl	80051b4 <ssd1306_SetCursor>
						ssd1306_printf(Font_6x8,"%4d",lSensorCari[1]);
 8003f0e:	4b84      	ldr	r3, [pc, #528]	; (8004120 <setup+0x6ec>)
 8003f10:	885b      	ldrh	r3, [r3, #2]
 8003f12:	4984      	ldr	r1, [pc, #528]	; (8004124 <setup+0x6f0>)
 8003f14:	4a84      	ldr	r2, [pc, #528]	; (8004128 <setup+0x6f4>)
 8003f16:	c903      	ldmia	r1, {r0, r1}
 8003f18:	f001 fbea 	bl	80056f0 <ssd1306_printf>
						ssd1306_SetCursor(6,54);
 8003f1c:	2136      	movs	r1, #54	; 0x36
 8003f1e:	2006      	movs	r0, #6
 8003f20:	f001 f948 	bl	80051b4 <ssd1306_SetCursor>
						ssd1306_printf(Font_6x8,"%4d",lSensorCari[0]);
 8003f24:	4b7e      	ldr	r3, [pc, #504]	; (8004120 <setup+0x6ec>)
 8003f26:	881b      	ldrh	r3, [r3, #0]
 8003f28:	497e      	ldr	r1, [pc, #504]	; (8004124 <setup+0x6f0>)
 8003f2a:	4a7f      	ldr	r2, [pc, #508]	; (8004128 <setup+0x6f4>)
 8003f2c:	c903      	ldmia	r1, {r0, r1}
 8003f2e:	f001 fbdf 	bl	80056f0 <ssd1306_printf>

						ssd1306_SetCursor(65,22);
 8003f32:	2116      	movs	r1, #22
 8003f34:	2041      	movs	r0, #65	; 0x41
 8003f36:	f001 f93d 	bl	80051b4 <ssd1306_SetCursor>
						ssd1306_printf(Font_6x8,"%4d",lSensorCari[5]);
 8003f3a:	4b79      	ldr	r3, [pc, #484]	; (8004120 <setup+0x6ec>)
 8003f3c:	895b      	ldrh	r3, [r3, #10]
 8003f3e:	4979      	ldr	r1, [pc, #484]	; (8004124 <setup+0x6f0>)
 8003f40:	4a79      	ldr	r2, [pc, #484]	; (8004128 <setup+0x6f4>)
 8003f42:	c903      	ldmia	r1, {r0, r1}
 8003f44:	f001 fbd4 	bl	80056f0 <ssd1306_printf>
						ssd1306_SetCursor(71,30);
 8003f48:	211e      	movs	r1, #30
 8003f4a:	2047      	movs	r0, #71	; 0x47
 8003f4c:	f001 f932 	bl	80051b4 <ssd1306_SetCursor>
						ssd1306_printf(Font_6x8,"%4d",lSensorCari[6]);
 8003f50:	4b73      	ldr	r3, [pc, #460]	; (8004120 <setup+0x6ec>)
 8003f52:	899b      	ldrh	r3, [r3, #12]
 8003f54:	4973      	ldr	r1, [pc, #460]	; (8004124 <setup+0x6f0>)
 8003f56:	4a74      	ldr	r2, [pc, #464]	; (8004128 <setup+0x6f4>)
 8003f58:	c903      	ldmia	r1, {r0, r1}
 8003f5a:	f001 fbc9 	bl	80056f0 <ssd1306_printf>
						ssd1306_SetCursor(80,38);
 8003f5e:	2126      	movs	r1, #38	; 0x26
 8003f60:	2050      	movs	r0, #80	; 0x50
 8003f62:	f001 f927 	bl	80051b4 <ssd1306_SetCursor>
						ssd1306_printf(Font_6x8,"%4d",lSensorCari[7]);
 8003f66:	4b6e      	ldr	r3, [pc, #440]	; (8004120 <setup+0x6ec>)
 8003f68:	89db      	ldrh	r3, [r3, #14]
 8003f6a:	496e      	ldr	r1, [pc, #440]	; (8004124 <setup+0x6f0>)
 8003f6c:	4a6e      	ldr	r2, [pc, #440]	; (8004128 <setup+0x6f4>)
 8003f6e:	c903      	ldmia	r1, {r0, r1}
 8003f70:	f001 fbbe 	bl	80056f0 <ssd1306_printf>
						ssd1306_SetCursor(89,46);
 8003f74:	212e      	movs	r1, #46	; 0x2e
 8003f76:	2059      	movs	r0, #89	; 0x59
 8003f78:	f001 f91c 	bl	80051b4 <ssd1306_SetCursor>
						ssd1306_printf(Font_6x8,"%4d",lSensorCari[8]);
 8003f7c:	4b68      	ldr	r3, [pc, #416]	; (8004120 <setup+0x6ec>)
 8003f7e:	8a1b      	ldrh	r3, [r3, #16]
 8003f80:	4968      	ldr	r1, [pc, #416]	; (8004124 <setup+0x6f0>)
 8003f82:	4a69      	ldr	r2, [pc, #420]	; (8004128 <setup+0x6f4>)
 8003f84:	c903      	ldmia	r1, {r0, r1}
 8003f86:	f001 fbb3 	bl	80056f0 <ssd1306_printf>
						ssd1306_SetCursor(95,54);
 8003f8a:	2136      	movs	r1, #54	; 0x36
 8003f8c:	205f      	movs	r0, #95	; 0x5f
 8003f8e:	f001 f911 	bl	80051b4 <ssd1306_SetCursor>
						ssd1306_printf(Font_6x8,"%4d",lSensorCari[9]);
 8003f92:	4b63      	ldr	r3, [pc, #396]	; (8004120 <setup+0x6ec>)
 8003f94:	8a5b      	ldrh	r3, [r3, #18]
 8003f96:	4963      	ldr	r1, [pc, #396]	; (8004124 <setup+0x6f0>)
 8003f98:	4a63      	ldr	r2, [pc, #396]	; (8004128 <setup+0x6f4>)
 8003f9a:	c903      	ldmia	r1, {r0, r1}
 8003f9c:	f001 fba8 	bl	80056f0 <ssd1306_printf>
 8003fa0:	e06d      	b.n	800407e <setup+0x64a>
					} else {
						ssd1306_SetCursor(37,22);
 8003fa2:	2116      	movs	r1, #22
 8003fa4:	2025      	movs	r0, #37	; 0x25
 8003fa6:	f001 f905 	bl	80051b4 <ssd1306_SetCursor>
						ssd1306_printf(Font_6x8,"%4d",lSensor[4]);
 8003faa:	4b60      	ldr	r3, [pc, #384]	; (800412c <setup+0x6f8>)
 8003fac:	891b      	ldrh	r3, [r3, #8]
 8003fae:	495d      	ldr	r1, [pc, #372]	; (8004124 <setup+0x6f0>)
 8003fb0:	4a5d      	ldr	r2, [pc, #372]	; (8004128 <setup+0x6f4>)
 8003fb2:	c903      	ldmia	r1, {r0, r1}
 8003fb4:	f001 fb9c 	bl	80056f0 <ssd1306_printf>
						ssd1306_SetCursor(31,30);
 8003fb8:	211e      	movs	r1, #30
 8003fba:	201f      	movs	r0, #31
 8003fbc:	f001 f8fa 	bl	80051b4 <ssd1306_SetCursor>
						ssd1306_printf(Font_6x8,"%4d",lSensor[3]);
 8003fc0:	4b5a      	ldr	r3, [pc, #360]	; (800412c <setup+0x6f8>)
 8003fc2:	88db      	ldrh	r3, [r3, #6]
 8003fc4:	4957      	ldr	r1, [pc, #348]	; (8004124 <setup+0x6f0>)
 8003fc6:	4a58      	ldr	r2, [pc, #352]	; (8004128 <setup+0x6f4>)
 8003fc8:	c903      	ldmia	r1, {r0, r1}
 8003fca:	f001 fb91 	bl	80056f0 <ssd1306_printf>
						ssd1306_SetCursor(22,38);
 8003fce:	2126      	movs	r1, #38	; 0x26
 8003fd0:	2016      	movs	r0, #22
 8003fd2:	f001 f8ef 	bl	80051b4 <ssd1306_SetCursor>
						ssd1306_printf(Font_6x8,"%4d",lSensor[2]);
 8003fd6:	4b55      	ldr	r3, [pc, #340]	; (800412c <setup+0x6f8>)
 8003fd8:	889b      	ldrh	r3, [r3, #4]
 8003fda:	4952      	ldr	r1, [pc, #328]	; (8004124 <setup+0x6f0>)
 8003fdc:	4a52      	ldr	r2, [pc, #328]	; (8004128 <setup+0x6f4>)
 8003fde:	c903      	ldmia	r1, {r0, r1}
 8003fe0:	f001 fb86 	bl	80056f0 <ssd1306_printf>
						ssd1306_SetCursor(13,46);
 8003fe4:	212e      	movs	r1, #46	; 0x2e
 8003fe6:	200d      	movs	r0, #13
 8003fe8:	f001 f8e4 	bl	80051b4 <ssd1306_SetCursor>
						ssd1306_printf(Font_6x8,"%4d",lSensor[1]);
 8003fec:	4b4f      	ldr	r3, [pc, #316]	; (800412c <setup+0x6f8>)
 8003fee:	885b      	ldrh	r3, [r3, #2]
 8003ff0:	494c      	ldr	r1, [pc, #304]	; (8004124 <setup+0x6f0>)
 8003ff2:	4a4d      	ldr	r2, [pc, #308]	; (8004128 <setup+0x6f4>)
 8003ff4:	c903      	ldmia	r1, {r0, r1}
 8003ff6:	f001 fb7b 	bl	80056f0 <ssd1306_printf>
						ssd1306_SetCursor(6,54);
 8003ffa:	2136      	movs	r1, #54	; 0x36
 8003ffc:	2006      	movs	r0, #6
 8003ffe:	f001 f8d9 	bl	80051b4 <ssd1306_SetCursor>
						ssd1306_printf(Font_6x8,"%4d",lSensor[0]);
 8004002:	4b4a      	ldr	r3, [pc, #296]	; (800412c <setup+0x6f8>)
 8004004:	881b      	ldrh	r3, [r3, #0]
 8004006:	4947      	ldr	r1, [pc, #284]	; (8004124 <setup+0x6f0>)
 8004008:	4a47      	ldr	r2, [pc, #284]	; (8004128 <setup+0x6f4>)
 800400a:	c903      	ldmia	r1, {r0, r1}
 800400c:	f001 fb70 	bl	80056f0 <ssd1306_printf>

						ssd1306_SetCursor(65,22);
 8004010:	2116      	movs	r1, #22
 8004012:	2041      	movs	r0, #65	; 0x41
 8004014:	f001 f8ce 	bl	80051b4 <ssd1306_SetCursor>
						ssd1306_printf(Font_6x8,"%4d",lSensor[5]);
 8004018:	4b44      	ldr	r3, [pc, #272]	; (800412c <setup+0x6f8>)
 800401a:	895b      	ldrh	r3, [r3, #10]
 800401c:	4941      	ldr	r1, [pc, #260]	; (8004124 <setup+0x6f0>)
 800401e:	4a42      	ldr	r2, [pc, #264]	; (8004128 <setup+0x6f4>)
 8004020:	c903      	ldmia	r1, {r0, r1}
 8004022:	f001 fb65 	bl	80056f0 <ssd1306_printf>
						ssd1306_SetCursor(71,30);
 8004026:	211e      	movs	r1, #30
 8004028:	2047      	movs	r0, #71	; 0x47
 800402a:	f001 f8c3 	bl	80051b4 <ssd1306_SetCursor>
						ssd1306_printf(Font_6x8,"%4d",lSensor[6]);
 800402e:	4b3f      	ldr	r3, [pc, #252]	; (800412c <setup+0x6f8>)
 8004030:	899b      	ldrh	r3, [r3, #12]
 8004032:	493c      	ldr	r1, [pc, #240]	; (8004124 <setup+0x6f0>)
 8004034:	4a3c      	ldr	r2, [pc, #240]	; (8004128 <setup+0x6f4>)
 8004036:	c903      	ldmia	r1, {r0, r1}
 8004038:	f001 fb5a 	bl	80056f0 <ssd1306_printf>
						ssd1306_SetCursor(80,38);
 800403c:	2126      	movs	r1, #38	; 0x26
 800403e:	2050      	movs	r0, #80	; 0x50
 8004040:	f001 f8b8 	bl	80051b4 <ssd1306_SetCursor>
						ssd1306_printf(Font_6x8,"%4d",lSensor[7]);
 8004044:	4b39      	ldr	r3, [pc, #228]	; (800412c <setup+0x6f8>)
 8004046:	89db      	ldrh	r3, [r3, #14]
 8004048:	4936      	ldr	r1, [pc, #216]	; (8004124 <setup+0x6f0>)
 800404a:	4a37      	ldr	r2, [pc, #220]	; (8004128 <setup+0x6f4>)
 800404c:	c903      	ldmia	r1, {r0, r1}
 800404e:	f001 fb4f 	bl	80056f0 <ssd1306_printf>
						ssd1306_SetCursor(89,46);
 8004052:	212e      	movs	r1, #46	; 0x2e
 8004054:	2059      	movs	r0, #89	; 0x59
 8004056:	f001 f8ad 	bl	80051b4 <ssd1306_SetCursor>
						ssd1306_printf(Font_6x8,"%4d",lSensor[8]);
 800405a:	4b34      	ldr	r3, [pc, #208]	; (800412c <setup+0x6f8>)
 800405c:	8a1b      	ldrh	r3, [r3, #16]
 800405e:	4931      	ldr	r1, [pc, #196]	; (8004124 <setup+0x6f0>)
 8004060:	4a31      	ldr	r2, [pc, #196]	; (8004128 <setup+0x6f4>)
 8004062:	c903      	ldmia	r1, {r0, r1}
 8004064:	f001 fb44 	bl	80056f0 <ssd1306_printf>
						ssd1306_SetCursor(95,54);
 8004068:	2136      	movs	r1, #54	; 0x36
 800406a:	205f      	movs	r0, #95	; 0x5f
 800406c:	f001 f8a2 	bl	80051b4 <ssd1306_SetCursor>
						ssd1306_printf(Font_6x8,"%4d",lSensor[9]);
 8004070:	4b2e      	ldr	r3, [pc, #184]	; (800412c <setup+0x6f8>)
 8004072:	8a5b      	ldrh	r3, [r3, #18]
 8004074:	492b      	ldr	r1, [pc, #172]	; (8004124 <setup+0x6f0>)
 8004076:	4a2c      	ldr	r2, [pc, #176]	; (8004128 <setup+0x6f4>)
 8004078:	c903      	ldmia	r1, {r0, r1}
 800407a:	f001 fb39 	bl	80056f0 <ssd1306_printf>
					}

					data_select( &trace_test, SW_PUSH );
 800407e:	2102      	movs	r1, #2
 8004080:	482b      	ldr	r0, [pc, #172]	; (8004130 <setup+0x6fc>)
 8004082:	f000 fd3b 	bl	8004afc <data_select>
					if ( trace_test == 1 ) {
 8004086:	4b2a      	ldr	r3, [pc, #168]	; (8004130 <setup+0x6fc>)
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d103      	bne.n	8004096 <setup+0x662>
						powerLinesensors(1);
 800408e:	2001      	movs	r0, #1
 8004090:	f7fe fd62 	bl	8002b58 <powerLinesensors>
					} else {
						powerLinesensors(0);
					}

					break;
 8004094:	e004      	b.n	80040a0 <setup+0x66c>
						powerLinesensors(0);
 8004096:	2000      	movs	r0, #0
 8004098:	f7fe fd5e 	bl	8002b58 <powerLinesensors>
					break;
 800409c:	e000      	b.n	80040a0 <setup+0x66c>
					break;
 800409e:	bf00      	nop
			}
			beforeSensors = patternSensors;
 80040a0:	4b1b      	ldr	r3, [pc, #108]	; (8004110 <setup+0x6dc>)
 80040a2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80040a6:	4b1b      	ldr	r3, [pc, #108]	; (8004114 <setup+0x6e0>)
 80040a8:	801a      	strh	r2, [r3, #0]
			break;
 80040aa:	f000 bd12 	b.w	8004ad2 <setup+0x109e>
		// //------------------------------------------------------------------
		// // Log
		// //------------------------------------------------------------------
		case HEX_LOG:
			if (swValRotary != beforeHEX) 	{
 80040ae:	4b21      	ldr	r3, [pc, #132]	; (8004134 <setup+0x700>)
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	461a      	mov	r2, r3
 80040b4:	4b20      	ldr	r3, [pc, #128]	; (8004138 <setup+0x704>)
 80040b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d013      	beq.n	80040e6 <setup+0x6b2>
				// 切替時に実行
				showBattery();	// バッテリ残量
 80040be:	f7fd fe9f 	bl	8001e00 <showBattery>
				// ロータリスイッチ値を表示
				ssd1306_SetCursor(30,5);
 80040c2:	2105      	movs	r1, #5
 80040c4:	201e      	movs	r0, #30
 80040c6:	f001 f875 	bl	80051b4 <ssd1306_SetCursor>
				ssd1306_printf(Font_6x8,"microSD  ");
 80040ca:	4b16      	ldr	r3, [pc, #88]	; (8004124 <setup+0x6f0>)
 80040cc:	4a1b      	ldr	r2, [pc, #108]	; (800413c <setup+0x708>)
 80040ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 80040d2:	f001 fb0d 	bl	80056f0 <ssd1306_printf>
				ssd1306_FillRectangle(0,16,127,63, Black);
 80040d6:	2300      	movs	r3, #0
 80040d8:	9300      	str	r3, [sp, #0]
 80040da:	233f      	movs	r3, #63	; 0x3f
 80040dc:	227f      	movs	r2, #127	; 0x7f
 80040de:	2110      	movs	r1, #16
 80040e0:	2000      	movs	r0, #0
 80040e2:	f001 fa86 	bl	80055f2 <ssd1306_FillRectangle>
			}

			ssd1306_SetCursor(35,24);
 80040e6:	2118      	movs	r1, #24
 80040e8:	2023      	movs	r0, #35	; 0x23
 80040ea:	f001 f863 	bl	80051b4 <ssd1306_SetCursor>
			ssd1306_printf(Font_6x8,"init:%d",initMSD);
 80040ee:	4b14      	ldr	r3, [pc, #80]	; (8004140 <setup+0x70c>)
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	490c      	ldr	r1, [pc, #48]	; (8004124 <setup+0x6f0>)
 80040f4:	4a13      	ldr	r2, [pc, #76]	; (8004144 <setup+0x710>)
 80040f6:	c903      	ldmia	r1, {r0, r1}
 80040f8:	f001 fafa 	bl	80056f0 <ssd1306_printf>

			if (swValTact == SW_PUSH) {
 80040fc:	4b12      	ldr	r3, [pc, #72]	; (8004148 <setup+0x714>)
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	2b02      	cmp	r3, #2
 8004102:	f040 84af 	bne.w	8004a64 <setup+0x1030>
				SDtest();
 8004106:	f7fd fd79 	bl	8001bfc <SDtest>
			}
			break;
 800410a:	f000 bcab 	b.w	8004a64 <setup+0x1030>
 800410e:	bf00      	nop
 8004110:	20000044 	.word	0x20000044
 8004114:	20003786 	.word	0x20003786
 8004118:	200033c8 	.word	0x200033c8
 800411c:	200033dc 	.word	0x200033dc
 8004120:	200033b0 	.word	0x200033b0
 8004124:	20000050 	.word	0x20000050
 8004128:	08013b74 	.word	0x08013b74
 800412c:	2000339c 	.word	0x2000339c
 8004130:	20003789 	.word	0x20003789
 8004134:	20003b9a 	.word	0x20003b9a
 8004138:	20000042 	.word	0x20000042
 800413c:	08013b78 	.word	0x08013b78
 8004140:	2000332a 	.word	0x2000332a
 8004144:	08013b84 	.word	0x08013b84
 8004148:	20003b99 	.word	0x20003b99
		// //------------------------------------------------------------------
		// // キャリブレーション(ラインセンサ) 
		// //------------------------------------------------------------------
		case HEX_CALIBRATION:
			if (swValRotary != beforeHEX) 	{
 800414c:	4bb9      	ldr	r3, [pc, #740]	; (8004434 <setup+0xa00>)
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	461a      	mov	r2, r3
 8004152:	4bb9      	ldr	r3, [pc, #740]	; (8004438 <setup+0xa04>)
 8004154:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004158:	429a      	cmp	r2, r3
 800415a:	d016      	beq.n	800418a <setup+0x756>
				// 切替時に実行
				showBattery();	// バッテリ残量
 800415c:	f7fd fe50 	bl	8001e00 <showBattery>
				// ロータリスイッチ値を表示
				ssd1306_SetCursor(30,5);
 8004160:	2105      	movs	r1, #5
 8004162:	201e      	movs	r0, #30
 8004164:	f001 f826 	bl	80051b4 <ssd1306_SetCursor>
				ssd1306_printf(Font_6x8,"Calibrate");
 8004168:	4bb4      	ldr	r3, [pc, #720]	; (800443c <setup+0xa08>)
 800416a:	4ab5      	ldr	r2, [pc, #724]	; (8004440 <setup+0xa0c>)
 800416c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004170:	f001 fabe 	bl	80056f0 <ssd1306_printf>
				ssd1306_FillRectangle(0,16,127,63, Black);
 8004174:	2300      	movs	r3, #0
 8004176:	9300      	str	r3, [sp, #0]
 8004178:	233f      	movs	r3, #63	; 0x3f
 800417a:	227f      	movs	r2, #127	; 0x7f
 800417c:	2110      	movs	r1, #16
 800417e:	2000      	movs	r0, #0
 8004180:	f001 fa37 	bl	80055f2 <ssd1306_FillRectangle>

				patternCalibration = 1;
 8004184:	4baf      	ldr	r3, [pc, #700]	; (8004444 <setup+0xa10>)
 8004186:	2201      	movs	r2, #1
 8004188:	801a      	strh	r2, [r3, #0]

			// ssd1306_SetCursor(0,24);
			// ssd1306_printf(Font_6x8,"flag:%d",modeCalLinesensors);
			// break;

			switch (patternCalibration) {
 800418a:	4bae      	ldr	r3, [pc, #696]	; (8004444 <setup+0xa10>)
 800418c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004190:	3b01      	subs	r3, #1
 8004192:	2b07      	cmp	r3, #7
 8004194:	f200 810f 	bhi.w	80043b6 <setup+0x982>
 8004198:	a201      	add	r2, pc, #4	; (adr r2, 80041a0 <setup+0x76c>)
 800419a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800419e:	bf00      	nop
 80041a0:	080041c1 	.word	0x080041c1
 80041a4:	08004209 	.word	0x08004209
 80041a8:	08004247 	.word	0x08004247
 80041ac:	0800427f 	.word	0x0800427f
 80041b0:	080042b3 	.word	0x080042b3
 80041b4:	080042eb 	.word	0x080042eb
 80041b8:	0800431d 	.word	0x0800431d
 80041bc:	08004357 	.word	0x08004357
				case 1:
					// スイッチ入力待ち
					dataTuningUD( &calTimes, 1, 1, 9);
 80041c0:	2309      	movs	r3, #9
 80041c2:	2201      	movs	r2, #1
 80041c4:	2101      	movs	r1, #1
 80041c6:	48a0      	ldr	r0, [pc, #640]	; (8004448 <setup+0xa14>)
 80041c8:	f000 fcce 	bl	8004b68 <dataTuningUD>

					setTargetSpeed(0);
 80041cc:	f04f 0000 	mov.w	r0, #0
 80041d0:	f7fd f876 	bl	80012c0 <setTargetSpeed>
					motorPwmOutSynth( 0, veloCtrl.pwm, 0, 0);
 80041d4:	4b9d      	ldr	r3, [pc, #628]	; (800444c <setup+0xa18>)
 80041d6:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 80041da:	2300      	movs	r3, #0
 80041dc:	2200      	movs	r2, #0
 80041de:	2000      	movs	r0, #0
 80041e0:	f7ff fbd6 	bl	8003990 <motorPwmOutSynth>
					if (swValTact == SW_PUSH) {
 80041e4:	4b9a      	ldr	r3, [pc, #616]	; (8004450 <setup+0xa1c>)
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	f040 80e6 	bne.w	80043ba <setup+0x986>
						cntSetup1 = 0;
 80041ee:	4b99      	ldr	r3, [pc, #612]	; (8004454 <setup+0xa20>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	801a      	strh	r2, [r3, #0]
						enc1 = 0;
 80041f4:	4b98      	ldr	r3, [pc, #608]	; (8004458 <setup+0xa24>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	601a      	str	r2, [r3, #0]
						powerLinesensors(1);	// 先に点灯させて安定させる
 80041fa:	2001      	movs	r0, #1
 80041fc:	f7fe fcac 	bl	8002b58 <powerLinesensors>
						patternCalibration = 2;
 8004200:	4b90      	ldr	r3, [pc, #576]	; (8004444 <setup+0xa10>)
 8004202:	2202      	movs	r2, #2
 8004204:	801a      	strh	r2, [r3, #0]
					}
					break;
 8004206:	e0d8      	b.n	80043ba <setup+0x986>

				case 2:
					// 開始準備
					if (cntSetup1 > 1000) {
 8004208:	4b92      	ldr	r3, [pc, #584]	; (8004454 <setup+0xa20>)
 800420a:	881b      	ldrh	r3, [r3, #0]
 800420c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004210:	f240 80d5 	bls.w	80043be <setup+0x98a>
						BMI088val.angle.z = 0.0;	// 角度リセット
 8004214:	4b91      	ldr	r3, [pc, #580]	; (800445c <setup+0xa28>)
 8004216:	f04f 0200 	mov.w	r2, #0
 800421a:	621a      	str	r2, [r3, #32]
						yawRateCtrl.Int = 0.0;		// I成分リセット
 800421c:	4b90      	ldr	r3, [pc, #576]	; (8004460 <setup+0xa2c>)
 800421e:	f04f 0200 	mov.w	r2, #0
 8004222:	609a      	str	r2, [r3, #8]
						useIMU = true;
 8004224:	4b8f      	ldr	r3, [pc, #572]	; (8004464 <setup+0xa30>)
 8004226:	2201      	movs	r2, #1
 8004228:	701a      	strb	r2, [r3, #0]
						setTargetSpeed(0);			// 目標速度0[m/s]
 800422a:	f04f 0000 	mov.w	r0, #0
 800422e:	f7fd f847 	bl	80012c0 <setTargetSpeed>
						enc1 = 0;
 8004232:	4b89      	ldr	r3, [pc, #548]	; (8004458 <setup+0xa24>)
 8004234:	2200      	movs	r2, #0
 8004236:	601a      	str	r2, [r3, #0]
						modeCalLinesensors = 1; 	// キャリブレーション開始
 8004238:	4b8b      	ldr	r3, [pc, #556]	; (8004468 <setup+0xa34>)
 800423a:	2201      	movs	r2, #1
 800423c:	701a      	strb	r2, [r3, #0]
						patternCalibration = 3;
 800423e:	4b81      	ldr	r3, [pc, #516]	; (8004444 <setup+0xa10>)
 8004240:	2203      	movs	r2, #3
 8004242:	801a      	strh	r2, [r3, #0]
					}
					break;
 8004244:	e0bb      	b.n	80043be <setup+0x98a>

				case 3:
					// 左旋回
					setTargetAngularVelocity(CALIBRATIONSPEED);
 8004246:	4889      	ldr	r0, [pc, #548]	; (800446c <setup+0xa38>)
 8004248:	f7fd f856 	bl	80012f8 <setTargetAngularVelocity>
					motorPwmOutSynth(0, veloCtrl.pwm, yawRateCtrl.pwm, 0);
 800424c:	4b7f      	ldr	r3, [pc, #508]	; (800444c <setup+0xa18>)
 800424e:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 8004252:	4b83      	ldr	r3, [pc, #524]	; (8004460 <setup+0xa2c>)
 8004254:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8004258:	2300      	movs	r3, #0
 800425a:	2000      	movs	r0, #0
 800425c:	f7ff fb98 	bl	8003990 <motorPwmOutSynth>
					if (BMI088val.angle.z > 45.0) {
 8004260:	4b7e      	ldr	r3, [pc, #504]	; (800445c <setup+0xa28>)
 8004262:	edd3 7a08 	vldr	s15, [r3, #32]
 8004266:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8004470 <setup+0xa3c>
 800426a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800426e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004272:	dc00      	bgt.n	8004276 <setup+0x842>
						patternCalibration = 4;
					}
					break;
 8004274:	e0aa      	b.n	80043cc <setup+0x998>
						patternCalibration = 4;
 8004276:	4b73      	ldr	r3, [pc, #460]	; (8004444 <setup+0xa10>)
 8004278:	2204      	movs	r2, #4
 800427a:	801a      	strh	r2, [r3, #0]
					break;
 800427c:	e0a6      	b.n	80043cc <setup+0x998>

				case 4:
					// 停止
					setTargetSpeed(0);
 800427e:	f04f 0000 	mov.w	r0, #0
 8004282:	f7fd f81d 	bl	80012c0 <setTargetSpeed>
					motorPwmOutSynth(0, veloCtrl.pwm, 0, 0);
 8004286:	4b71      	ldr	r3, [pc, #452]	; (800444c <setup+0xa18>)
 8004288:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 800428c:	2300      	movs	r3, #0
 800428e:	2200      	movs	r2, #0
 8004290:	2000      	movs	r0, #0
 8004292:	f7ff fb7d 	bl	8003990 <motorPwmOutSynth>
					if (abs(encCurrentN) == 0) {
 8004296:	4b77      	ldr	r3, [pc, #476]	; (8004474 <setup+0xa40>)
 8004298:	f9b3 3000 	ldrsh.w	r3, [r3]
 800429c:	2b00      	cmp	r3, #0
 800429e:	bfb8      	it	lt
 80042a0:	425b      	neglt	r3, r3
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	f040 808c 	bne.w	80043c2 <setup+0x98e>
						patternCalibration = 5;
 80042aa:	4b66      	ldr	r3, [pc, #408]	; (8004444 <setup+0xa10>)
 80042ac:	2205      	movs	r2, #5
 80042ae:	801a      	strh	r2, [r3, #0]
					}
					break;
 80042b0:	e087      	b.n	80043c2 <setup+0x98e>

				case 5:
					// 右旋回
					setTargetAngularVelocity(-CALIBRATIONSPEED);
 80042b2:	4871      	ldr	r0, [pc, #452]	; (8004478 <setup+0xa44>)
 80042b4:	f7fd f820 	bl	80012f8 <setTargetAngularVelocity>
					motorPwmOutSynth(0, veloCtrl.pwm, yawRateCtrl.pwm, 0);
 80042b8:	4b64      	ldr	r3, [pc, #400]	; (800444c <setup+0xa18>)
 80042ba:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 80042be:	4b68      	ldr	r3, [pc, #416]	; (8004460 <setup+0xa2c>)
 80042c0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80042c4:	2300      	movs	r3, #0
 80042c6:	2000      	movs	r0, #0
 80042c8:	f7ff fb62 	bl	8003990 <motorPwmOutSynth>
					if (BMI088val.angle.z < -45) {
 80042cc:	4b63      	ldr	r3, [pc, #396]	; (800445c <setup+0xa28>)
 80042ce:	edd3 7a08 	vldr	s15, [r3, #32]
 80042d2:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800447c <setup+0xa48>
 80042d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042de:	d400      	bmi.n	80042e2 <setup+0x8ae>
						patternCalibration = 6;
					}
					break;
 80042e0:	e074      	b.n	80043cc <setup+0x998>
						patternCalibration = 6;
 80042e2:	4b58      	ldr	r3, [pc, #352]	; (8004444 <setup+0xa10>)
 80042e4:	2206      	movs	r2, #6
 80042e6:	801a      	strh	r2, [r3, #0]
					break;
 80042e8:	e070      	b.n	80043cc <setup+0x998>

				case 6:
					// 停止
					setTargetSpeed(0);
 80042ea:	f04f 0000 	mov.w	r0, #0
 80042ee:	f7fc ffe7 	bl	80012c0 <setTargetSpeed>
					motorPwmOutSynth(0, veloCtrl.pwm, 0, 0);
 80042f2:	4b56      	ldr	r3, [pc, #344]	; (800444c <setup+0xa18>)
 80042f4:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 80042f8:	2300      	movs	r3, #0
 80042fa:	2200      	movs	r2, #0
 80042fc:	2000      	movs	r0, #0
 80042fe:	f7ff fb47 	bl	8003990 <motorPwmOutSynth>
					if (abs(encCurrentN) == 0) {
 8004302:	4b5c      	ldr	r3, [pc, #368]	; (8004474 <setup+0xa40>)
 8004304:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004308:	2b00      	cmp	r3, #0
 800430a:	bfb8      	it	lt
 800430c:	425b      	neglt	r3, r3
 800430e:	b29b      	uxth	r3, r3
 8004310:	2b00      	cmp	r3, #0
 8004312:	d158      	bne.n	80043c6 <setup+0x992>
						patternCalibration = 7;
 8004314:	4b4b      	ldr	r3, [pc, #300]	; (8004444 <setup+0xa10>)
 8004316:	2207      	movs	r2, #7
 8004318:	801a      	strh	r2, [r3, #0]
					}
					break;
 800431a:	e054      	b.n	80043c6 <setup+0x992>

				case 7:
					// 初期位置に戻る
					setTargetAngularVelocity(CALIBRATIONSPEED);
 800431c:	4853      	ldr	r0, [pc, #332]	; (800446c <setup+0xa38>)
 800431e:	f7fc ffeb 	bl	80012f8 <setTargetAngularVelocity>
					motorPwmOutSynth(0, veloCtrl.pwm, yawRateCtrl.pwm, 0);
 8004322:	4b4a      	ldr	r3, [pc, #296]	; (800444c <setup+0xa18>)
 8004324:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 8004328:	4b4d      	ldr	r3, [pc, #308]	; (8004460 <setup+0xa2c>)
 800432a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800432e:	2300      	movs	r3, #0
 8004330:	2000      	movs	r0, #0
 8004332:	f7ff fb2d 	bl	8003990 <motorPwmOutSynth>
					if (BMI088val.angle.z > 0) {
 8004336:	4b49      	ldr	r3, [pc, #292]	; (800445c <setup+0xa28>)
 8004338:	edd3 7a08 	vldr	s15, [r3, #32]
 800433c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004344:	dc00      	bgt.n	8004348 <setup+0x914>
						modeCalLinesensors = 0;
						patternCalibration = 8;
					}
					break;
 8004346:	e041      	b.n	80043cc <setup+0x998>
						modeCalLinesensors = 0;
 8004348:	4b47      	ldr	r3, [pc, #284]	; (8004468 <setup+0xa34>)
 800434a:	2200      	movs	r2, #0
 800434c:	701a      	strb	r2, [r3, #0]
						patternCalibration = 8;
 800434e:	4b3d      	ldr	r3, [pc, #244]	; (8004444 <setup+0xa10>)
 8004350:	2208      	movs	r2, #8
 8004352:	801a      	strh	r2, [r3, #0]
					break;
 8004354:	e03a      	b.n	80043cc <setup+0x998>

				case 8:
					// 停止
					motorPwmOutSynth( 0, veloCtrl.pwm, 0, 0);
 8004356:	4b3d      	ldr	r3, [pc, #244]	; (800444c <setup+0xa18>)
 8004358:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 800435c:	2300      	movs	r3, #0
 800435e:	2200      	movs	r2, #0
 8004360:	2000      	movs	r0, #0
 8004362:	f7ff fb15 	bl	8003990 <motorPwmOutSynth>
					if (abs(encCurrentN) == 0) {
 8004366:	4b43      	ldr	r3, [pc, #268]	; (8004474 <setup+0xa40>)
 8004368:	f9b3 3000 	ldrsh.w	r3, [r3]
 800436c:	2b00      	cmp	r3, #0
 800436e:	bfb8      	it	lt
 8004370:	425b      	neglt	r3, r3
 8004372:	b29b      	uxth	r3, r3
 8004374:	2b00      	cmp	r3, #0
 8004376:	d128      	bne.n	80043ca <setup+0x996>
						calTimesNow++;
 8004378:	4b41      	ldr	r3, [pc, #260]	; (8004480 <setup+0xa4c>)
 800437a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800437e:	b29b      	uxth	r3, r3
 8004380:	3301      	adds	r3, #1
 8004382:	b29b      	uxth	r3, r3
 8004384:	b21a      	sxth	r2, r3
 8004386:	4b3e      	ldr	r3, [pc, #248]	; (8004480 <setup+0xa4c>)
 8004388:	801a      	strh	r2, [r3, #0]
						if (calTimesNow >= calTimes) {
 800438a:	4b3d      	ldr	r3, [pc, #244]	; (8004480 <setup+0xa4c>)
 800438c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004390:	4b2d      	ldr	r3, [pc, #180]	; (8004448 <setup+0xa14>)
 8004392:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004396:	429a      	cmp	r2, r3
 8004398:	db09      	blt.n	80043ae <setup+0x97a>
							calTimesNow = 0;
 800439a:	4b39      	ldr	r3, [pc, #228]	; (8004480 <setup+0xa4c>)
 800439c:	2200      	movs	r2, #0
 800439e:	801a      	strh	r2, [r3, #0]
							useIMU = false;
 80043a0:	4b30      	ldr	r3, [pc, #192]	; (8004464 <setup+0xa30>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	701a      	strb	r2, [r3, #0]
							patternCalibration = 1;
 80043a6:	4b27      	ldr	r3, [pc, #156]	; (8004444 <setup+0xa10>)
 80043a8:	2201      	movs	r2, #1
 80043aa:	801a      	strh	r2, [r3, #0]
						} else {
							patternCalibration = 3;
						}
					}
					break;
 80043ac:	e00d      	b.n	80043ca <setup+0x996>
							patternCalibration = 3;
 80043ae:	4b25      	ldr	r3, [pc, #148]	; (8004444 <setup+0xa10>)
 80043b0:	2203      	movs	r2, #3
 80043b2:	801a      	strh	r2, [r3, #0]
					break;
 80043b4:	e009      	b.n	80043ca <setup+0x996>
			
				default:
					break;
 80043b6:	bf00      	nop
 80043b8:	e38b      	b.n	8004ad2 <setup+0x109e>
					break;
 80043ba:	bf00      	nop
 80043bc:	e389      	b.n	8004ad2 <setup+0x109e>
					break;
 80043be:	bf00      	nop
 80043c0:	e387      	b.n	8004ad2 <setup+0x109e>
					break;
 80043c2:	bf00      	nop
 80043c4:	e385      	b.n	8004ad2 <setup+0x109e>
					break;
 80043c6:	bf00      	nop
 80043c8:	e383      	b.n	8004ad2 <setup+0x109e>
					break;
 80043ca:	bf00      	nop
				}
			break;
 80043cc:	e381      	b.n	8004ad2 <setup+0x109e>
		// //------------------------------------------------------------------
		// // ゲイン調整(直線トレース)
		// //------------------------------------------------------------------
		case HEX_PID_TRACE:
			if (swValRotary != beforeHEX) 	{
 80043ce:	4b19      	ldr	r3, [pc, #100]	; (8004434 <setup+0xa00>)
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	461a      	mov	r2, r3
 80043d4:	4b18      	ldr	r3, [pc, #96]	; (8004438 <setup+0xa04>)
 80043d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d013      	beq.n	8004406 <setup+0x9d2>
				// 切替時に実行
				showBattery();	// バッテリ残量
 80043de:	f7fd fd0f 	bl	8001e00 <showBattery>
				// ロータリスイッチ値を表示
				ssd1306_SetCursor(30,5);
 80043e2:	2105      	movs	r1, #5
 80043e4:	201e      	movs	r0, #30
 80043e6:	f000 fee5 	bl	80051b4 <ssd1306_SetCursor>
				ssd1306_printf(Font_6x8,"Trace PID");
 80043ea:	4b14      	ldr	r3, [pc, #80]	; (800443c <setup+0xa08>)
 80043ec:	4a25      	ldr	r2, [pc, #148]	; (8004484 <setup+0xa50>)
 80043ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80043f2:	f001 f97d 	bl	80056f0 <ssd1306_printf>
				ssd1306_FillRectangle(0,16,127,63, Black);
 80043f6:	2300      	movs	r3, #0
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	233f      	movs	r3, #63	; 0x3f
 80043fc:	227f      	movs	r2, #127	; 0x7f
 80043fe:	2110      	movs	r1, #16
 8004400:	2000      	movs	r0, #0
 8004402:	f001 f8f6 	bl	80055f2 <ssd1306_FillRectangle>
			}

			
			data_select( &trace_test, SW_PUSH );
 8004406:	2102      	movs	r1, #2
 8004408:	481f      	ldr	r0, [pc, #124]	; (8004488 <setup+0xa54>)
 800440a:	f000 fb77 	bl	8004afc <data_select>
			// PUSHでトレースON/OFF
			if ( trace_test == 1 ) {
 800440e:	4b1e      	ldr	r3, [pc, #120]	; (8004488 <setup+0xa54>)
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d13e      	bne.n	8004494 <setup+0xa60>
				showDisplay = 0;
 8004416:	4b1d      	ldr	r3, [pc, #116]	; (800448c <setup+0xa58>)
 8004418:	2200      	movs	r2, #0
 800441a:	701a      	strb	r2, [r3, #0]
				motorPwmOutSynth( lineTraceCtrl.pwm, 0, 0, 0);
 800441c:	4b1c      	ldr	r3, [pc, #112]	; (8004490 <setup+0xa5c>)
 800441e:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 8004422:	2300      	movs	r3, #0
 8004424:	2200      	movs	r2, #0
 8004426:	2100      	movs	r1, #0
 8004428:	f7ff fab2 	bl	8003990 <motorPwmOutSynth>
				powerLinesensors(1);
 800442c:	2001      	movs	r0, #1
 800442e:	f7fe fb93 	bl	8002b58 <powerLinesensors>
 8004432:	e03b      	b.n	80044ac <setup+0xa78>
 8004434:	20003b9a 	.word	0x20003b9a
 8004438:	20000042 	.word	0x20000042
 800443c:	20000050 	.word	0x20000050
 8004440:	08013b8c 	.word	0x08013b8c
 8004444:	20000048 	.word	0x20000048
 8004448:	2000004a 	.word	0x2000004a
 800444c:	20000010 	.word	0x20000010
 8004450:	20003b99 	.word	0x20003b99
 8004454:	20003778 	.word	0x20003778
 8004458:	2000335c 	.word	0x2000335c
 800445c:	2000025c 	.word	0x2000025c
 8004460:	20000020 	.word	0x20000020
 8004464:	2000332c 	.word	0x2000332c
 8004468:	200033dc 	.word	0x200033dc
 800446c:	42c80000 	.word	0x42c80000
 8004470:	42340000 	.word	0x42340000
 8004474:	2000334e 	.word	0x2000334e
 8004478:	c2c80000 	.word	0xc2c80000
 800447c:	c2340000 	.word	0xc2340000
 8004480:	2000378a 	.word	0x2000378a
 8004484:	08013b98 	.word	0x08013b98
 8004488:	20003789 	.word	0x20003789
 800448c:	2000004c 	.word	0x2000004c
 8004490:	20000000 	.word	0x20000000
			} else {
				showDisplay = 1;
 8004494:	4baa      	ldr	r3, [pc, #680]	; (8004740 <setup+0xd0c>)
 8004496:	2201      	movs	r2, #1
 8004498:	701a      	strb	r2, [r3, #0]
				motorPwmOutSynth( 0, 0, 0, 0);
 800449a:	2300      	movs	r3, #0
 800449c:	2200      	movs	r2, #0
 800449e:	2100      	movs	r1, #0
 80044a0:	2000      	movs	r0, #0
 80044a2:	f7ff fa75 	bl	8003990 <motorPwmOutSynth>
				powerLinesensors(0);
 80044a6:	2000      	movs	r0, #0
 80044a8:	f7fe fb56 	bl	8002b58 <powerLinesensors>
			}
			
			dataTuningLR( &patternGain, 1, 1, 3);
 80044ac:	2303      	movs	r3, #3
 80044ae:	2201      	movs	r2, #1
 80044b0:	2101      	movs	r1, #1
 80044b2:	48a4      	ldr	r0, [pc, #656]	; (8004744 <setup+0xd10>)
 80044b4:	f000 fbf2 	bl	8004c9c <dataTuningLR>

			if (trace_test == 0) {
 80044b8:	4ba3      	ldr	r3, [pc, #652]	; (8004748 <setup+0xd14>)
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f040 82d3 	bne.w	8004a68 <setup+0x1034>
				if ( (cntSetup1 / 250) % 2 != 0) {
 80044c2:	4ba2      	ldr	r3, [pc, #648]	; (800474c <setup+0xd18>)
 80044c4:	881b      	ldrh	r3, [r3, #0]
 80044c6:	4aa2      	ldr	r2, [pc, #648]	; (8004750 <setup+0xd1c>)
 80044c8:	fba2 2303 	umull	r2, r3, r2, r3
 80044cc:	091b      	lsrs	r3, r3, #4
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d02f      	beq.n	800453a <setup+0xb06>
					ssd1306_SetCursor(0,24);
 80044da:	2118      	movs	r1, #24
 80044dc:	2000      	movs	r0, #0
 80044de:	f000 fe69 	bl	80051b4 <ssd1306_SetCursor>
					ssd1306_printf(Font_6x8,"kp:%3d",lineTraceCtrl.kp);
 80044e2:	4b9c      	ldr	r3, [pc, #624]	; (8004754 <setup+0xd20>)
 80044e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044e8:	499b      	ldr	r1, [pc, #620]	; (8004758 <setup+0xd24>)
 80044ea:	4a9c      	ldr	r2, [pc, #624]	; (800475c <setup+0xd28>)
 80044ec:	c903      	ldmia	r1, {r0, r1}
 80044ee:	f001 f8ff 	bl	80056f0 <ssd1306_printf>
					ssd1306_SetCursor(0,34);
 80044f2:	2122      	movs	r1, #34	; 0x22
 80044f4:	2000      	movs	r0, #0
 80044f6:	f000 fe5d 	bl	80051b4 <ssd1306_SetCursor>
					ssd1306_printf(Font_6x8,"ki:%3d",lineTraceCtrl.ki);
 80044fa:	4b96      	ldr	r3, [pc, #600]	; (8004754 <setup+0xd20>)
 80044fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004500:	4995      	ldr	r1, [pc, #596]	; (8004758 <setup+0xd24>)
 8004502:	4a97      	ldr	r2, [pc, #604]	; (8004760 <setup+0xd2c>)
 8004504:	c903      	ldmia	r1, {r0, r1}
 8004506:	f001 f8f3 	bl	80056f0 <ssd1306_printf>
					ssd1306_SetCursor(0,44);
 800450a:	212c      	movs	r1, #44	; 0x2c
 800450c:	2000      	movs	r0, #0
 800450e:	f000 fe51 	bl	80051b4 <ssd1306_SetCursor>
					ssd1306_printf(Font_6x8,"kd:%3d",lineTraceCtrl.kd);
 8004512:	4b90      	ldr	r3, [pc, #576]	; (8004754 <setup+0xd20>)
 8004514:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004518:	498f      	ldr	r1, [pc, #572]	; (8004758 <setup+0xd24>)
 800451a:	4a92      	ldr	r2, [pc, #584]	; (8004764 <setup+0xd30>)
 800451c:	c903      	ldmia	r1, {r0, r1}
 800451e:	f001 f8e7 	bl	80056f0 <ssd1306_printf>

					ssd1306_SetCursor(70,34);
 8004522:	2122      	movs	r1, #34	; 0x22
 8004524:	2046      	movs	r0, #70	; 0x46
 8004526:	f000 fe45 	bl	80051b4 <ssd1306_SetCursor>
					ssd1306_printf(Font_6x8,"pwm:%5d",lineTraceCtrl.pwm);
 800452a:	4b8a      	ldr	r3, [pc, #552]	; (8004754 <setup+0xd20>)
 800452c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004530:	4989      	ldr	r1, [pc, #548]	; (8004758 <setup+0xd24>)
 8004532:	4a8d      	ldr	r2, [pc, #564]	; (8004768 <setup+0xd34>)
 8004534:	c903      	ldmia	r1, {r0, r1}
 8004536:	f001 f8db 	bl	80056f0 <ssd1306_printf>
				}
			
				switch( patternGain ) {
 800453a:	4b82      	ldr	r3, [pc, #520]	; (8004744 <setup+0xd10>)
 800453c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004540:	2b03      	cmp	r3, #3
 8004542:	d041      	beq.n	80045c8 <setup+0xb94>
 8004544:	2b03      	cmp	r3, #3
 8004546:	f300 828f 	bgt.w	8004a68 <setup+0x1034>
 800454a:	2b01      	cmp	r3, #1
 800454c:	d002      	beq.n	8004554 <setup+0xb20>
 800454e:	2b02      	cmp	r3, #2
 8004550:	d01d      	beq.n	800458e <setup+0xb5a>
						}
						break;
				}
			}
			
			break;
 8004552:	e289      	b.n	8004a68 <setup+0x1034>
						dataTuningUD ( &lineTraceCtrl.kp, 1, 0, 255 );
 8004554:	23ff      	movs	r3, #255	; 0xff
 8004556:	2200      	movs	r2, #0
 8004558:	2101      	movs	r1, #1
 800455a:	487e      	ldr	r0, [pc, #504]	; (8004754 <setup+0xd20>)
 800455c:	f000 fb04 	bl	8004b68 <dataTuningUD>
						if ( (cntSetup1 / 250) % 2 == 0 ) {
 8004560:	4b7a      	ldr	r3, [pc, #488]	; (800474c <setup+0xd18>)
 8004562:	881b      	ldrh	r3, [r3, #0]
 8004564:	4a7a      	ldr	r2, [pc, #488]	; (8004750 <setup+0xd1c>)
 8004566:	fba2 2303 	umull	r2, r3, r2, r3
 800456a:	091b      	lsrs	r3, r3, #4
 800456c:	b29b      	uxth	r3, r3
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	b29b      	uxth	r3, r3
 8004574:	2b00      	cmp	r3, #0
 8004576:	d144      	bne.n	8004602 <setup+0xbce>
							ssd1306_SetCursor(0,24);
 8004578:	2118      	movs	r1, #24
 800457a:	2000      	movs	r0, #0
 800457c:	f000 fe1a 	bl	80051b4 <ssd1306_SetCursor>
							ssd1306_printf(Font_6x8,"kp:   ");
 8004580:	4b75      	ldr	r3, [pc, #468]	; (8004758 <setup+0xd24>)
 8004582:	4a7a      	ldr	r2, [pc, #488]	; (800476c <setup+0xd38>)
 8004584:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004588:	f001 f8b2 	bl	80056f0 <ssd1306_printf>
						break;
 800458c:	e039      	b.n	8004602 <setup+0xbce>
						dataTuningUD ( &lineTraceCtrl.ki, 1, 0, 255 );
 800458e:	23ff      	movs	r3, #255	; 0xff
 8004590:	2200      	movs	r2, #0
 8004592:	2101      	movs	r1, #1
 8004594:	4876      	ldr	r0, [pc, #472]	; (8004770 <setup+0xd3c>)
 8004596:	f000 fae7 	bl	8004b68 <dataTuningUD>
						if ( (cntSetup1 / 250) % 2 == 0 ) {
 800459a:	4b6c      	ldr	r3, [pc, #432]	; (800474c <setup+0xd18>)
 800459c:	881b      	ldrh	r3, [r3, #0]
 800459e:	4a6c      	ldr	r2, [pc, #432]	; (8004750 <setup+0xd1c>)
 80045a0:	fba2 2303 	umull	r2, r3, r2, r3
 80045a4:	091b      	lsrs	r3, r3, #4
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	f003 0301 	and.w	r3, r3, #1
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d129      	bne.n	8004606 <setup+0xbd2>
							ssd1306_SetCursor(0,34);
 80045b2:	2122      	movs	r1, #34	; 0x22
 80045b4:	2000      	movs	r0, #0
 80045b6:	f000 fdfd 	bl	80051b4 <ssd1306_SetCursor>
							ssd1306_printf(Font_6x8,"ki:   ");
 80045ba:	4b67      	ldr	r3, [pc, #412]	; (8004758 <setup+0xd24>)
 80045bc:	4a6d      	ldr	r2, [pc, #436]	; (8004774 <setup+0xd40>)
 80045be:	e893 0003 	ldmia.w	r3, {r0, r1}
 80045c2:	f001 f895 	bl	80056f0 <ssd1306_printf>
						break;
 80045c6:	e01e      	b.n	8004606 <setup+0xbd2>
						dataTuningUD ( &lineTraceCtrl.kd, 1, 0, 255 );
 80045c8:	23ff      	movs	r3, #255	; 0xff
 80045ca:	2200      	movs	r2, #0
 80045cc:	2101      	movs	r1, #1
 80045ce:	486a      	ldr	r0, [pc, #424]	; (8004778 <setup+0xd44>)
 80045d0:	f000 faca 	bl	8004b68 <dataTuningUD>
						if ( (cntSetup1 / 250) % 2 == 0 ) {
 80045d4:	4b5d      	ldr	r3, [pc, #372]	; (800474c <setup+0xd18>)
 80045d6:	881b      	ldrh	r3, [r3, #0]
 80045d8:	4a5d      	ldr	r2, [pc, #372]	; (8004750 <setup+0xd1c>)
 80045da:	fba2 2303 	umull	r2, r3, r2, r3
 80045de:	091b      	lsrs	r3, r3, #4
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	f003 0301 	and.w	r3, r3, #1
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d10e      	bne.n	800460a <setup+0xbd6>
							ssd1306_SetCursor(0,44);
 80045ec:	212c      	movs	r1, #44	; 0x2c
 80045ee:	2000      	movs	r0, #0
 80045f0:	f000 fde0 	bl	80051b4 <ssd1306_SetCursor>
							ssd1306_printf(Font_6x8,"kd:   ");
 80045f4:	4b58      	ldr	r3, [pc, #352]	; (8004758 <setup+0xd24>)
 80045f6:	4a61      	ldr	r2, [pc, #388]	; (800477c <setup+0xd48>)
 80045f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80045fc:	f001 f878 	bl	80056f0 <ssd1306_printf>
						break;
 8004600:	e003      	b.n	800460a <setup+0xbd6>
						break;
 8004602:	bf00      	nop
 8004604:	e230      	b.n	8004a68 <setup+0x1034>
						break;
 8004606:	bf00      	nop
 8004608:	e22e      	b.n	8004a68 <setup+0x1034>
						break;
 800460a:	bf00      	nop
			break;
 800460c:	e22c      	b.n	8004a68 <setup+0x1034>
		// //------------------------------------------------------------------
		// // ゲイン調整(速度)
		// //------------------------------------------------------------------
		case HEX_PID_SPEED:
			if (swValRotary != beforeHEX) 	{
 800460e:	4b5c      	ldr	r3, [pc, #368]	; (8004780 <setup+0xd4c>)
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	461a      	mov	r2, r3
 8004614:	4b5b      	ldr	r3, [pc, #364]	; (8004784 <setup+0xd50>)
 8004616:	f9b3 3000 	ldrsh.w	r3, [r3]
 800461a:	429a      	cmp	r2, r3
 800461c:	d013      	beq.n	8004646 <setup+0xc12>
				// 切替時に実行
				showBattery();	// バッテリ残量
 800461e:	f7fd fbef 	bl	8001e00 <showBattery>
				// ロータリスイッチ値を表示
				ssd1306_SetCursor(30,5);
 8004622:	2105      	movs	r1, #5
 8004624:	201e      	movs	r0, #30
 8004626:	f000 fdc5 	bl	80051b4 <ssd1306_SetCursor>
				ssd1306_printf(Font_6x8,"Speed PID");
 800462a:	4b4b      	ldr	r3, [pc, #300]	; (8004758 <setup+0xd24>)
 800462c:	4a56      	ldr	r2, [pc, #344]	; (8004788 <setup+0xd54>)
 800462e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004632:	f001 f85d 	bl	80056f0 <ssd1306_printf>
				ssd1306_FillRectangle(0,16,127,63, Black);
 8004636:	2300      	movs	r3, #0
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	233f      	movs	r3, #63	; 0x3f
 800463c:	227f      	movs	r2, #127	; 0x7f
 800463e:	2110      	movs	r1, #16
 8004640:	2000      	movs	r0, #0
 8004642:	f000 ffd6 	bl	80055f2 <ssd1306_FillRectangle>
			}

			data_select( &trace_test, SW_PUSH );
 8004646:	2102      	movs	r1, #2
 8004648:	483f      	ldr	r0, [pc, #252]	; (8004748 <setup+0xd14>)
 800464a:	f000 fa57 	bl	8004afc <data_select>
			// PUSHでトレースON/OFF
			if ( trace_test == 1 ) {
 800464e:	4b3e      	ldr	r3, [pc, #248]	; (8004748 <setup+0xd14>)
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d114      	bne.n	8004680 <setup+0xc4c>
				showDisplay = 0;
 8004656:	4b3a      	ldr	r3, [pc, #232]	; (8004740 <setup+0xd0c>)
 8004658:	2200      	movs	r2, #0
 800465a:	701a      	strb	r2, [r3, #0]
				powerLinesensors(1);
 800465c:	2001      	movs	r0, #1
 800465e:	f7fe fa7b 	bl	8002b58 <powerLinesensors>
				setTargetSpeed(0.0);
 8004662:	f04f 0000 	mov.w	r0, #0
 8004666:	f7fc fe2b 	bl	80012c0 <setTargetSpeed>
				motorPwmOutSynth( lineTraceCtrl.pwm, veloCtrl.kp, 0, 0);
 800466a:	4b3a      	ldr	r3, [pc, #232]	; (8004754 <setup+0xd20>)
 800466c:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 8004670:	4b46      	ldr	r3, [pc, #280]	; (800478c <setup+0xd58>)
 8004672:	f9b3 1000 	ldrsh.w	r1, [r3]
 8004676:	2300      	movs	r3, #0
 8004678:	2200      	movs	r2, #0
 800467a:	f7ff f989 	bl	8003990 <motorPwmOutSynth>
 800467e:	e00b      	b.n	8004698 <setup+0xc64>
			} else {
				showDisplay = 1;
 8004680:	4b2f      	ldr	r3, [pc, #188]	; (8004740 <setup+0xd0c>)
 8004682:	2201      	movs	r2, #1
 8004684:	701a      	strb	r2, [r3, #0]
				motorPwmOutSynth( 0, 0, 0, 0);
 8004686:	2300      	movs	r3, #0
 8004688:	2200      	movs	r2, #0
 800468a:	2100      	movs	r1, #0
 800468c:	2000      	movs	r0, #0
 800468e:	f7ff f97f 	bl	8003990 <motorPwmOutSynth>
				powerLinesensors(0);
 8004692:	2000      	movs	r0, #0
 8004694:	f7fe fa60 	bl	8002b58 <powerLinesensors>
			}

			dataTuningLR( &patternGain, 1, 1, 3);
 8004698:	2303      	movs	r3, #3
 800469a:	2201      	movs	r2, #1
 800469c:	2101      	movs	r1, #1
 800469e:	4829      	ldr	r0, [pc, #164]	; (8004744 <setup+0xd10>)
 80046a0:	f000 fafc 	bl	8004c9c <dataTuningLR>
			
			if (trace_test == 0) {
 80046a4:	4b28      	ldr	r3, [pc, #160]	; (8004748 <setup+0xd14>)
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f040 81df 	bne.w	8004a6c <setup+0x1038>
				if ( (cntSetup1 / 250) % 2 != 0) {
 80046ae:	4b27      	ldr	r3, [pc, #156]	; (800474c <setup+0xd18>)
 80046b0:	881b      	ldrh	r3, [r3, #0]
 80046b2:	4a27      	ldr	r2, [pc, #156]	; (8004750 <setup+0xd1c>)
 80046b4:	fba2 2303 	umull	r2, r3, r2, r3
 80046b8:	091b      	lsrs	r3, r3, #4
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	f003 0301 	and.w	r3, r3, #1
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d02f      	beq.n	8004726 <setup+0xcf2>
					ssd1306_SetCursor(0,24);
 80046c6:	2118      	movs	r1, #24
 80046c8:	2000      	movs	r0, #0
 80046ca:	f000 fd73 	bl	80051b4 <ssd1306_SetCursor>
					ssd1306_printf(Font_6x8,"kp:%3d",veloCtrl.kp);
 80046ce:	4b2f      	ldr	r3, [pc, #188]	; (800478c <setup+0xd58>)
 80046d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046d4:	4920      	ldr	r1, [pc, #128]	; (8004758 <setup+0xd24>)
 80046d6:	4a21      	ldr	r2, [pc, #132]	; (800475c <setup+0xd28>)
 80046d8:	c903      	ldmia	r1, {r0, r1}
 80046da:	f001 f809 	bl	80056f0 <ssd1306_printf>
					ssd1306_SetCursor(0,34);
 80046de:	2122      	movs	r1, #34	; 0x22
 80046e0:	2000      	movs	r0, #0
 80046e2:	f000 fd67 	bl	80051b4 <ssd1306_SetCursor>
					ssd1306_printf(Font_6x8,"ki:%3d",veloCtrl.ki);
 80046e6:	4b29      	ldr	r3, [pc, #164]	; (800478c <setup+0xd58>)
 80046e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80046ec:	491a      	ldr	r1, [pc, #104]	; (8004758 <setup+0xd24>)
 80046ee:	4a1c      	ldr	r2, [pc, #112]	; (8004760 <setup+0xd2c>)
 80046f0:	c903      	ldmia	r1, {r0, r1}
 80046f2:	f000 fffd 	bl	80056f0 <ssd1306_printf>
					ssd1306_SetCursor(0,44);
 80046f6:	212c      	movs	r1, #44	; 0x2c
 80046f8:	2000      	movs	r0, #0
 80046fa:	f000 fd5b 	bl	80051b4 <ssd1306_SetCursor>
					ssd1306_printf(Font_6x8,"kd:%3d",veloCtrl.kd);
 80046fe:	4b23      	ldr	r3, [pc, #140]	; (800478c <setup+0xd58>)
 8004700:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004704:	4914      	ldr	r1, [pc, #80]	; (8004758 <setup+0xd24>)
 8004706:	4a17      	ldr	r2, [pc, #92]	; (8004764 <setup+0xd30>)
 8004708:	c903      	ldmia	r1, {r0, r1}
 800470a:	f000 fff1 	bl	80056f0 <ssd1306_printf>

					ssd1306_SetCursor(70,34);
 800470e:	2122      	movs	r1, #34	; 0x22
 8004710:	2046      	movs	r0, #70	; 0x46
 8004712:	f000 fd4f 	bl	80051b4 <ssd1306_SetCursor>
					ssd1306_printf(Font_6x8,"pwm:%5d",veloCtrl.pwm);
 8004716:	4b1d      	ldr	r3, [pc, #116]	; (800478c <setup+0xd58>)
 8004718:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800471c:	490e      	ldr	r1, [pc, #56]	; (8004758 <setup+0xd24>)
 800471e:	4a12      	ldr	r2, [pc, #72]	; (8004768 <setup+0xd34>)
 8004720:	c903      	ldmia	r1, {r0, r1}
 8004722:	f000 ffe5 	bl	80056f0 <ssd1306_printf>
				}
			
				switch( patternGain ) {
 8004726:	4b07      	ldr	r3, [pc, #28]	; (8004744 <setup+0xd10>)
 8004728:	f9b3 3000 	ldrsh.w	r3, [r3]
 800472c:	2b03      	cmp	r3, #3
 800472e:	d069      	beq.n	8004804 <setup+0xdd0>
 8004730:	2b03      	cmp	r3, #3
 8004732:	f300 819b 	bgt.w	8004a6c <setup+0x1038>
 8004736:	2b01      	cmp	r3, #1
 8004738:	d02a      	beq.n	8004790 <setup+0xd5c>
 800473a:	2b02      	cmp	r3, #2
 800473c:	d045      	beq.n	80047ca <setup+0xd96>
							ssd1306_printf(Font_6x8,"kd:   ");
						}
						break;
				}
			}
		break;
 800473e:	e195      	b.n	8004a6c <setup+0x1038>
 8004740:	2000004c 	.word	0x2000004c
 8004744:	20000046 	.word	0x20000046
 8004748:	20003789 	.word	0x20003789
 800474c:	20003778 	.word	0x20003778
 8004750:	10624dd3 	.word	0x10624dd3
 8004754:	20000000 	.word	0x20000000
 8004758:	20000050 	.word	0x20000050
 800475c:	08013ba4 	.word	0x08013ba4
 8004760:	08013bac 	.word	0x08013bac
 8004764:	08013bb4 	.word	0x08013bb4
 8004768:	08013bbc 	.word	0x08013bbc
 800476c:	08013bc4 	.word	0x08013bc4
 8004770:	20000002 	.word	0x20000002
 8004774:	08013bcc 	.word	0x08013bcc
 8004778:	20000004 	.word	0x20000004
 800477c:	08013bd4 	.word	0x08013bd4
 8004780:	20003b9a 	.word	0x20003b9a
 8004784:	20000042 	.word	0x20000042
 8004788:	08013bdc 	.word	0x08013bdc
 800478c:	20000010 	.word	0x20000010
						dataTuningUD ( &veloCtrl.kp, 1, 0, 255 );
 8004790:	23ff      	movs	r3, #255	; 0xff
 8004792:	2200      	movs	r2, #0
 8004794:	2101      	movs	r1, #1
 8004796:	48b6      	ldr	r0, [pc, #728]	; (8004a70 <setup+0x103c>)
 8004798:	f000 f9e6 	bl	8004b68 <dataTuningUD>
						if ( (cntSetup1 / 250) % 2 == 0 ) {
 800479c:	4bb5      	ldr	r3, [pc, #724]	; (8004a74 <setup+0x1040>)
 800479e:	881b      	ldrh	r3, [r3, #0]
 80047a0:	4ab5      	ldr	r2, [pc, #724]	; (8004a78 <setup+0x1044>)
 80047a2:	fba2 2303 	umull	r2, r3, r2, r3
 80047a6:	091b      	lsrs	r3, r3, #4
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d144      	bne.n	800483e <setup+0xe0a>
							ssd1306_SetCursor(0,24);
 80047b4:	2118      	movs	r1, #24
 80047b6:	2000      	movs	r0, #0
 80047b8:	f000 fcfc 	bl	80051b4 <ssd1306_SetCursor>
							ssd1306_printf(Font_6x8,"kp:   ");
 80047bc:	4baf      	ldr	r3, [pc, #700]	; (8004a7c <setup+0x1048>)
 80047be:	4ab0      	ldr	r2, [pc, #704]	; (8004a80 <setup+0x104c>)
 80047c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80047c4:	f000 ff94 	bl	80056f0 <ssd1306_printf>
						break;
 80047c8:	e039      	b.n	800483e <setup+0xe0a>
						dataTuningUD ( &veloCtrl.ki, 1, 0, 255 );
 80047ca:	23ff      	movs	r3, #255	; 0xff
 80047cc:	2200      	movs	r2, #0
 80047ce:	2101      	movs	r1, #1
 80047d0:	48ac      	ldr	r0, [pc, #688]	; (8004a84 <setup+0x1050>)
 80047d2:	f000 f9c9 	bl	8004b68 <dataTuningUD>
						if ( (cntSetup1 / 250) % 2 == 0 ) {
 80047d6:	4ba7      	ldr	r3, [pc, #668]	; (8004a74 <setup+0x1040>)
 80047d8:	881b      	ldrh	r3, [r3, #0]
 80047da:	4aa7      	ldr	r2, [pc, #668]	; (8004a78 <setup+0x1044>)
 80047dc:	fba2 2303 	umull	r2, r3, r2, r3
 80047e0:	091b      	lsrs	r3, r3, #4
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	f003 0301 	and.w	r3, r3, #1
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d129      	bne.n	8004842 <setup+0xe0e>
							ssd1306_SetCursor(0,34);
 80047ee:	2122      	movs	r1, #34	; 0x22
 80047f0:	2000      	movs	r0, #0
 80047f2:	f000 fcdf 	bl	80051b4 <ssd1306_SetCursor>
							ssd1306_printf(Font_6x8,"ki:   ");
 80047f6:	4ba1      	ldr	r3, [pc, #644]	; (8004a7c <setup+0x1048>)
 80047f8:	4aa3      	ldr	r2, [pc, #652]	; (8004a88 <setup+0x1054>)
 80047fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80047fe:	f000 ff77 	bl	80056f0 <ssd1306_printf>
						break;
 8004802:	e01e      	b.n	8004842 <setup+0xe0e>
						dataTuningUD ( &veloCtrl.kd, 1, 0, 255 );
 8004804:	23ff      	movs	r3, #255	; 0xff
 8004806:	2200      	movs	r2, #0
 8004808:	2101      	movs	r1, #1
 800480a:	48a0      	ldr	r0, [pc, #640]	; (8004a8c <setup+0x1058>)
 800480c:	f000 f9ac 	bl	8004b68 <dataTuningUD>
						if ( (cntSetup1 / 250) % 2 == 0 ) {
 8004810:	4b98      	ldr	r3, [pc, #608]	; (8004a74 <setup+0x1040>)
 8004812:	881b      	ldrh	r3, [r3, #0]
 8004814:	4a98      	ldr	r2, [pc, #608]	; (8004a78 <setup+0x1044>)
 8004816:	fba2 2303 	umull	r2, r3, r2, r3
 800481a:	091b      	lsrs	r3, r3, #4
 800481c:	b29b      	uxth	r3, r3
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	b29b      	uxth	r3, r3
 8004824:	2b00      	cmp	r3, #0
 8004826:	d10e      	bne.n	8004846 <setup+0xe12>
							ssd1306_SetCursor(0,44);
 8004828:	212c      	movs	r1, #44	; 0x2c
 800482a:	2000      	movs	r0, #0
 800482c:	f000 fcc2 	bl	80051b4 <ssd1306_SetCursor>
							ssd1306_printf(Font_6x8,"kd:   ");
 8004830:	4b92      	ldr	r3, [pc, #584]	; (8004a7c <setup+0x1048>)
 8004832:	4a97      	ldr	r2, [pc, #604]	; (8004a90 <setup+0x105c>)
 8004834:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004838:	f000 ff5a 	bl	80056f0 <ssd1306_printf>
						break;
 800483c:	e003      	b.n	8004846 <setup+0xe12>
						break;
 800483e:	bf00      	nop
 8004840:	e114      	b.n	8004a6c <setup+0x1038>
						break;
 8004842:	bf00      	nop
 8004844:	e112      	b.n	8004a6c <setup+0x1038>
						break;
 8004846:	bf00      	nop
		break;
 8004848:	e110      	b.n	8004a6c <setup+0x1038>
		// //------------------------------------------------------------------
		// // ゲイン調整(角速度)
		// //------------------------------------------------------------------
		case HEX_PID_ANGULAR:
			if (swValRotary != beforeHEX) 	{
 800484a:	4b92      	ldr	r3, [pc, #584]	; (8004a94 <setup+0x1060>)
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	461a      	mov	r2, r3
 8004850:	4b91      	ldr	r3, [pc, #580]	; (8004a98 <setup+0x1064>)
 8004852:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004856:	429a      	cmp	r2, r3
 8004858:	d013      	beq.n	8004882 <setup+0xe4e>
				// 切替時に実行
				showBattery();	// バッテリ残量
 800485a:	f7fd fad1 	bl	8001e00 <showBattery>
				// ロータリスイッチ値を表示
				ssd1306_SetCursor(30,5);
 800485e:	2105      	movs	r1, #5
 8004860:	201e      	movs	r0, #30
 8004862:	f000 fca7 	bl	80051b4 <ssd1306_SetCursor>
				ssd1306_printf(Font_6x8,"Angular PID");
 8004866:	4b85      	ldr	r3, [pc, #532]	; (8004a7c <setup+0x1048>)
 8004868:	4a8c      	ldr	r2, [pc, #560]	; (8004a9c <setup+0x1068>)
 800486a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800486e:	f000 ff3f 	bl	80056f0 <ssd1306_printf>
				ssd1306_FillRectangle(0,16,127,63, Black);
 8004872:	2300      	movs	r3, #0
 8004874:	9300      	str	r3, [sp, #0]
 8004876:	233f      	movs	r3, #63	; 0x3f
 8004878:	227f      	movs	r2, #127	; 0x7f
 800487a:	2110      	movs	r1, #16
 800487c:	2000      	movs	r0, #0
 800487e:	f000 feb8 	bl	80055f2 <ssd1306_FillRectangle>
			}
			
			setTargetAngularVelocity(0);
 8004882:	f04f 0000 	mov.w	r0, #0
 8004886:	f7fc fd37 	bl	80012f8 <setTargetAngularVelocity>
			setTargetSpeed(0);
 800488a:	f04f 0000 	mov.w	r0, #0
 800488e:	f7fc fd17 	bl	80012c0 <setTargetSpeed>

			data_select( &trace_test, SW_PUSH );
 8004892:	2102      	movs	r1, #2
 8004894:	4882      	ldr	r0, [pc, #520]	; (8004aa0 <setup+0x106c>)
 8004896:	f000 f931 	bl	8004afc <data_select>
			// PUSHでトレースON/OFF
			if ( trace_test == 1 ) {
 800489a:	4b81      	ldr	r3, [pc, #516]	; (8004aa0 <setup+0x106c>)
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d110      	bne.n	80048c4 <setup+0xe90>
				showDisplay = 0;
 80048a2:	4b80      	ldr	r3, [pc, #512]	; (8004aa4 <setup+0x1070>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	701a      	strb	r2, [r3, #0]
				useIMU = true;
 80048a8:	4b7f      	ldr	r3, [pc, #508]	; (8004aa8 <setup+0x1074>)
 80048aa:	2201      	movs	r2, #1
 80048ac:	701a      	strb	r2, [r3, #0]
				motorPwmOutSynth( 0, veloCtrl.pwm, yawRateCtrl.pwm, 0 );
 80048ae:	4b70      	ldr	r3, [pc, #448]	; (8004a70 <setup+0x103c>)
 80048b0:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 80048b4:	4b7d      	ldr	r3, [pc, #500]	; (8004aac <setup+0x1078>)
 80048b6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80048ba:	2300      	movs	r3, #0
 80048bc:	2000      	movs	r0, #0
 80048be:	f7ff f867 	bl	8003990 <motorPwmOutSynth>
 80048c2:	e00b      	b.n	80048dc <setup+0xea8>
			} else {
				showDisplay = 1;
 80048c4:	4b77      	ldr	r3, [pc, #476]	; (8004aa4 <setup+0x1070>)
 80048c6:	2201      	movs	r2, #1
 80048c8:	701a      	strb	r2, [r3, #0]
				useIMU = false;
 80048ca:	4b77      	ldr	r3, [pc, #476]	; (8004aa8 <setup+0x1074>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	701a      	strb	r2, [r3, #0]
				motorPwmOutSynth( 0, 0, 0, 0 );
 80048d0:	2300      	movs	r3, #0
 80048d2:	2200      	movs	r2, #0
 80048d4:	2100      	movs	r1, #0
 80048d6:	2000      	movs	r0, #0
 80048d8:	f7ff f85a 	bl	8003990 <motorPwmOutSynth>
			}

			dataTuningLR( &patternGain, 1, 1, 3);
 80048dc:	2303      	movs	r3, #3
 80048de:	2201      	movs	r2, #1
 80048e0:	2101      	movs	r1, #1
 80048e2:	4873      	ldr	r0, [pc, #460]	; (8004ab0 <setup+0x107c>)
 80048e4:	f000 f9da 	bl	8004c9c <dataTuningLR>
			
			if (trace_test == 0) {
 80048e8:	4b6d      	ldr	r3, [pc, #436]	; (8004aa0 <setup+0x106c>)
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f040 80ef 	bne.w	8004ad0 <setup+0x109c>
				if ( (cntSetup1 / 250) % 2 != 0) {
 80048f2:	4b60      	ldr	r3, [pc, #384]	; (8004a74 <setup+0x1040>)
 80048f4:	881b      	ldrh	r3, [r3, #0]
 80048f6:	4a60      	ldr	r2, [pc, #384]	; (8004a78 <setup+0x1044>)
 80048f8:	fba2 2303 	umull	r2, r3, r2, r3
 80048fc:	091b      	lsrs	r3, r3, #4
 80048fe:	b29b      	uxth	r3, r3
 8004900:	f003 0301 	and.w	r3, r3, #1
 8004904:	b29b      	uxth	r3, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	d02f      	beq.n	800496a <setup+0xf36>
					ssd1306_SetCursor(0,24);
 800490a:	2118      	movs	r1, #24
 800490c:	2000      	movs	r0, #0
 800490e:	f000 fc51 	bl	80051b4 <ssd1306_SetCursor>
					ssd1306_printf(Font_6x8,"kp:%3d",yawRateCtrl.kp);
 8004912:	4b66      	ldr	r3, [pc, #408]	; (8004aac <setup+0x1078>)
 8004914:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004918:	4958      	ldr	r1, [pc, #352]	; (8004a7c <setup+0x1048>)
 800491a:	4a66      	ldr	r2, [pc, #408]	; (8004ab4 <setup+0x1080>)
 800491c:	c903      	ldmia	r1, {r0, r1}
 800491e:	f000 fee7 	bl	80056f0 <ssd1306_printf>
					ssd1306_SetCursor(0,34);
 8004922:	2122      	movs	r1, #34	; 0x22
 8004924:	2000      	movs	r0, #0
 8004926:	f000 fc45 	bl	80051b4 <ssd1306_SetCursor>
					ssd1306_printf(Font_6x8,"ki:%3d",yawRateCtrl.ki);
 800492a:	4b60      	ldr	r3, [pc, #384]	; (8004aac <setup+0x1078>)
 800492c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004930:	4952      	ldr	r1, [pc, #328]	; (8004a7c <setup+0x1048>)
 8004932:	4a61      	ldr	r2, [pc, #388]	; (8004ab8 <setup+0x1084>)
 8004934:	c903      	ldmia	r1, {r0, r1}
 8004936:	f000 fedb 	bl	80056f0 <ssd1306_printf>
					ssd1306_SetCursor(0,44);
 800493a:	212c      	movs	r1, #44	; 0x2c
 800493c:	2000      	movs	r0, #0
 800493e:	f000 fc39 	bl	80051b4 <ssd1306_SetCursor>
					ssd1306_printf(Font_6x8,"kd:%3d",yawRateCtrl.kd);
 8004942:	4b5a      	ldr	r3, [pc, #360]	; (8004aac <setup+0x1078>)
 8004944:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004948:	494c      	ldr	r1, [pc, #304]	; (8004a7c <setup+0x1048>)
 800494a:	4a5c      	ldr	r2, [pc, #368]	; (8004abc <setup+0x1088>)
 800494c:	c903      	ldmia	r1, {r0, r1}
 800494e:	f000 fecf 	bl	80056f0 <ssd1306_printf>

					ssd1306_SetCursor(70,34);
 8004952:	2122      	movs	r1, #34	; 0x22
 8004954:	2046      	movs	r0, #70	; 0x46
 8004956:	f000 fc2d 	bl	80051b4 <ssd1306_SetCursor>
					ssd1306_printf(Font_6x8,"pwm:%5d",yawRateCtrl.pwm);
 800495a:	4b54      	ldr	r3, [pc, #336]	; (8004aac <setup+0x1078>)
 800495c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004960:	4946      	ldr	r1, [pc, #280]	; (8004a7c <setup+0x1048>)
 8004962:	4a57      	ldr	r2, [pc, #348]	; (8004ac0 <setup+0x108c>)
 8004964:	c903      	ldmia	r1, {r0, r1}
 8004966:	f000 fec3 	bl	80056f0 <ssd1306_printf>
				}
			
				switch( patternGain ) {
 800496a:	4b51      	ldr	r3, [pc, #324]	; (8004ab0 <setup+0x107c>)
 800496c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004970:	2b03      	cmp	r3, #3
 8004972:	d041      	beq.n	80049f8 <setup+0xfc4>
 8004974:	2b03      	cmp	r3, #3
 8004976:	f300 80ab 	bgt.w	8004ad0 <setup+0x109c>
 800497a:	2b01      	cmp	r3, #1
 800497c:	d002      	beq.n	8004984 <setup+0xf50>
 800497e:	2b02      	cmp	r3, #2
 8004980:	d01d      	beq.n	80049be <setup+0xf8a>
							ssd1306_printf(Font_6x8,"kd:   ");
						}
						break;
				}
			}
			break;
 8004982:	e0a5      	b.n	8004ad0 <setup+0x109c>
						dataTuningUD ( &yawRateCtrl.kp, 1, 0, 255 );
 8004984:	23ff      	movs	r3, #255	; 0xff
 8004986:	2200      	movs	r2, #0
 8004988:	2101      	movs	r1, #1
 800498a:	4848      	ldr	r0, [pc, #288]	; (8004aac <setup+0x1078>)
 800498c:	f000 f8ec 	bl	8004b68 <dataTuningUD>
						if ( (cntSetup1 / 250) % 2 == 0 ) {
 8004990:	4b38      	ldr	r3, [pc, #224]	; (8004a74 <setup+0x1040>)
 8004992:	881b      	ldrh	r3, [r3, #0]
 8004994:	4a38      	ldr	r2, [pc, #224]	; (8004a78 <setup+0x1044>)
 8004996:	fba2 2303 	umull	r2, r3, r2, r3
 800499a:	091b      	lsrs	r3, r3, #4
 800499c:	b29b      	uxth	r3, r3
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d144      	bne.n	8004a32 <setup+0xffe>
							ssd1306_SetCursor(0,24);
 80049a8:	2118      	movs	r1, #24
 80049aa:	2000      	movs	r0, #0
 80049ac:	f000 fc02 	bl	80051b4 <ssd1306_SetCursor>
							ssd1306_printf(Font_6x8,"kp:   ");
 80049b0:	4b32      	ldr	r3, [pc, #200]	; (8004a7c <setup+0x1048>)
 80049b2:	4a33      	ldr	r2, [pc, #204]	; (8004a80 <setup+0x104c>)
 80049b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80049b8:	f000 fe9a 	bl	80056f0 <ssd1306_printf>
						break;
 80049bc:	e039      	b.n	8004a32 <setup+0xffe>
						dataTuningUD ( &yawRateCtrl.ki, 1, 0, 255 );
 80049be:	23ff      	movs	r3, #255	; 0xff
 80049c0:	2200      	movs	r2, #0
 80049c2:	2101      	movs	r1, #1
 80049c4:	483f      	ldr	r0, [pc, #252]	; (8004ac4 <setup+0x1090>)
 80049c6:	f000 f8cf 	bl	8004b68 <dataTuningUD>
						if ( (cntSetup1 / 250) % 2 == 0 ) {
 80049ca:	4b2a      	ldr	r3, [pc, #168]	; (8004a74 <setup+0x1040>)
 80049cc:	881b      	ldrh	r3, [r3, #0]
 80049ce:	4a2a      	ldr	r2, [pc, #168]	; (8004a78 <setup+0x1044>)
 80049d0:	fba2 2303 	umull	r2, r3, r2, r3
 80049d4:	091b      	lsrs	r3, r3, #4
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	f003 0301 	and.w	r3, r3, #1
 80049dc:	b29b      	uxth	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d129      	bne.n	8004a36 <setup+0x1002>
							ssd1306_SetCursor(0,34);
 80049e2:	2122      	movs	r1, #34	; 0x22
 80049e4:	2000      	movs	r0, #0
 80049e6:	f000 fbe5 	bl	80051b4 <ssd1306_SetCursor>
							ssd1306_printf(Font_6x8,"ki:   ");
 80049ea:	4b24      	ldr	r3, [pc, #144]	; (8004a7c <setup+0x1048>)
 80049ec:	4a26      	ldr	r2, [pc, #152]	; (8004a88 <setup+0x1054>)
 80049ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80049f2:	f000 fe7d 	bl	80056f0 <ssd1306_printf>
						break;
 80049f6:	e01e      	b.n	8004a36 <setup+0x1002>
						dataTuningUD ( &yawRateCtrl.kd, 1, 0, 255 );
 80049f8:	23ff      	movs	r3, #255	; 0xff
 80049fa:	2200      	movs	r2, #0
 80049fc:	2101      	movs	r1, #1
 80049fe:	4832      	ldr	r0, [pc, #200]	; (8004ac8 <setup+0x1094>)
 8004a00:	f000 f8b2 	bl	8004b68 <dataTuningUD>
						if ( (cntSetup1 / 250) % 2 == 0 ) {
 8004a04:	4b1b      	ldr	r3, [pc, #108]	; (8004a74 <setup+0x1040>)
 8004a06:	881b      	ldrh	r3, [r3, #0]
 8004a08:	4a1b      	ldr	r2, [pc, #108]	; (8004a78 <setup+0x1044>)
 8004a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0e:	091b      	lsrs	r3, r3, #4
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d10e      	bne.n	8004a3a <setup+0x1006>
							ssd1306_SetCursor(0,44);
 8004a1c:	212c      	movs	r1, #44	; 0x2c
 8004a1e:	2000      	movs	r0, #0
 8004a20:	f000 fbc8 	bl	80051b4 <ssd1306_SetCursor>
							ssd1306_printf(Font_6x8,"kd:   ");
 8004a24:	4b15      	ldr	r3, [pc, #84]	; (8004a7c <setup+0x1048>)
 8004a26:	4a1a      	ldr	r2, [pc, #104]	; (8004a90 <setup+0x105c>)
 8004a28:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004a2c:	f000 fe60 	bl	80056f0 <ssd1306_printf>
						break;
 8004a30:	e003      	b.n	8004a3a <setup+0x1006>
						break;
 8004a32:	bf00      	nop
 8004a34:	e04c      	b.n	8004ad0 <setup+0x109c>
						break;
 8004a36:	bf00      	nop
 8004a38:	e04a      	b.n	8004ad0 <setup+0x109c>
						break;
 8004a3a:	bf00      	nop
			break;
 8004a3c:	e048      	b.n	8004ad0 <setup+0x109c>
		// case HEX_PID_ANGLE:
			
		// 	break;

	default:
		ssd1306_SetCursor(30,5);
 8004a3e:	2105      	movs	r1, #5
 8004a40:	201e      	movs	r0, #30
 8004a42:	f000 fbb7 	bl	80051b4 <ssd1306_SetCursor>
		ssd1306_printf(Font_6x8,"None      ");
 8004a46:	4b0d      	ldr	r3, [pc, #52]	; (8004a7c <setup+0x1048>)
 8004a48:	4a20      	ldr	r2, [pc, #128]	; (8004acc <setup+0x1098>)
 8004a4a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004a4e:	f000 fe4f 	bl	80056f0 <ssd1306_printf>
		ssd1306_FillRectangle(0,16,127,63, Black);
 8004a52:	2300      	movs	r3, #0
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	233f      	movs	r3, #63	; 0x3f
 8004a58:	227f      	movs	r2, #127	; 0x7f
 8004a5a:	2110      	movs	r1, #16
 8004a5c:	2000      	movs	r0, #0
 8004a5e:	f000 fdc8 	bl	80055f2 <ssd1306_FillRectangle>

		break;
 8004a62:	e036      	b.n	8004ad2 <setup+0x109e>
			break;
 8004a64:	bf00      	nop
 8004a66:	e034      	b.n	8004ad2 <setup+0x109e>
			break;
 8004a68:	bf00      	nop
 8004a6a:	e032      	b.n	8004ad2 <setup+0x109e>
		break;
 8004a6c:	bf00      	nop
 8004a6e:	e030      	b.n	8004ad2 <setup+0x109e>
 8004a70:	20000010 	.word	0x20000010
 8004a74:	20003778 	.word	0x20003778
 8004a78:	10624dd3 	.word	0x10624dd3
 8004a7c:	20000050 	.word	0x20000050
 8004a80:	08013bc4 	.word	0x08013bc4
 8004a84:	20000012 	.word	0x20000012
 8004a88:	08013bcc 	.word	0x08013bcc
 8004a8c:	20000014 	.word	0x20000014
 8004a90:	08013bd4 	.word	0x08013bd4
 8004a94:	20003b9a 	.word	0x20003b9a
 8004a98:	20000042 	.word	0x20000042
 8004a9c:	08013be8 	.word	0x08013be8
 8004aa0:	20003789 	.word	0x20003789
 8004aa4:	2000004c 	.word	0x2000004c
 8004aa8:	2000332c 	.word	0x2000332c
 8004aac:	20000020 	.word	0x20000020
 8004ab0:	20000046 	.word	0x20000046
 8004ab4:	08013ba4 	.word	0x08013ba4
 8004ab8:	08013bac 	.word	0x08013bac
 8004abc:	08013bb4 	.word	0x08013bb4
 8004ac0:	08013bbc 	.word	0x08013bbc
 8004ac4:	20000022 	.word	0x20000022
 8004ac8:	20000024 	.word	0x20000024
 8004acc:	08013bf4 	.word	0x08013bf4
			break;
 8004ad0:	bf00      	nop
	} // switch
	beforeHEX = swValRotary;
 8004ad2:	4b07      	ldr	r3, [pc, #28]	; (8004af0 <setup+0x10bc>)
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	b21a      	sxth	r2, r3
 8004ad8:	4b06      	ldr	r3, [pc, #24]	; (8004af4 <setup+0x10c0>)
 8004ada:	801a      	strh	r2, [r3, #0]

	if (showDisplay) {
 8004adc:	4b06      	ldr	r3, [pc, #24]	; (8004af8 <setup+0x10c4>)
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d001      	beq.n	8004ae8 <setup+0x10b4>
		ssd1306_UpdateScreen();  // グラフィック液晶更新
 8004ae4:	f000 fa3c 	bl	8004f60 <ssd1306_UpdateScreen>
	}
}
 8004ae8:	bf00      	nop
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	20003b9a 	.word	0x20003b9a
 8004af4:	20000042 	.word	0x20000042
 8004af8:	2000004c 	.word	0x2000004c

08004afc <data_select>:
// モジュール名 data_select
// 処理概要     タクトスイッチで0,1に変化させる
// 引数         data: 変化させる変数 button: どのスイッチで変化させるか
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////////////////
void data_select ( uint8_t *data , uint8_t button ) {
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	460b      	mov	r3, r1
 8004b06:	70fb      	strb	r3, [r7, #3]
	static uint8_t push = 0;

	if ( swValTact == button ) {
 8004b08:	4b15      	ldr	r3, [pc, #84]	; (8004b60 <data_select+0x64>)
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	78fa      	ldrb	r2, [r7, #3]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d11d      	bne.n	8004b4e <data_select+0x52>
		if ( *data == 1 && push == 0) {
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d10a      	bne.n	8004b30 <data_select+0x34>
 8004b1a:	4b12      	ldr	r3, [pc, #72]	; (8004b64 <data_select+0x68>)
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d106      	bne.n	8004b30 <data_select+0x34>
			push = 1;
 8004b22:	4b10      	ldr	r3, [pc, #64]	; (8004b64 <data_select+0x68>)
 8004b24:	2201      	movs	r2, #1
 8004b26:	701a      	strb	r2, [r3, #0]
			*data = 0;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	701a      	strb	r2, [r3, #0]
			*data = 1;
		}
	} else {
		push = 0;
	}
}
 8004b2e:	e011      	b.n	8004b54 <data_select+0x58>
		} else if ( *data == 0 && push == 0) {
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d10d      	bne.n	8004b54 <data_select+0x58>
 8004b38:	4b0a      	ldr	r3, [pc, #40]	; (8004b64 <data_select+0x68>)
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d109      	bne.n	8004b54 <data_select+0x58>
			push = 1;
 8004b40:	4b08      	ldr	r3, [pc, #32]	; (8004b64 <data_select+0x68>)
 8004b42:	2201      	movs	r2, #1
 8004b44:	701a      	strb	r2, [r3, #0]
			*data = 1;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	701a      	strb	r2, [r3, #0]
}
 8004b4c:	e002      	b.n	8004b54 <data_select+0x58>
		push = 0;
 8004b4e:	4b05      	ldr	r3, [pc, #20]	; (8004b64 <data_select+0x68>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	701a      	strb	r2, [r3, #0]
}
 8004b54:	bf00      	nop
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr
 8004b60:	20003b99 	.word	0x20003b99
 8004b64:	2000378c 	.word	0x2000378c

08004b68 <dataTuningUD>:
// モジュール名 dataTuningUD
// 処理概要     タクトスイッチで整数型dataを加減する
// 引数         data: 加減させる変数 add: 0: 変化量 dir: 0:上下 1:左右
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////////////////
void dataTuningUD ( int16_t *data, int16_t add, int16_t min, int16_t max) {
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	4608      	mov	r0, r1
 8004b72:	4611      	mov	r1, r2
 8004b74:	461a      	mov	r2, r3
 8004b76:	4603      	mov	r3, r0
 8004b78:	817b      	strh	r3, [r7, #10]
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	813b      	strh	r3, [r7, #8]
 8004b7e:	4613      	mov	r3, r2
 8004b80:	80fb      	strh	r3, [r7, #6]
	if ( cntSwitchUD >= 50 ) {
 8004b82:	4b42      	ldr	r3, [pc, #264]	; (8004c8c <dataTuningUD+0x124>)
 8004b84:	881b      	ldrh	r3, [r3, #0]
 8004b86:	2b31      	cmp	r3, #49	; 0x31
 8004b88:	d979      	bls.n	8004c7e <dataTuningUD+0x116>
		if ( swValTact == SW_UP || swValTact == SW_DOWN ) {
 8004b8a:	4b41      	ldr	r3, [pc, #260]	; (8004c90 <dataTuningUD+0x128>)
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d003      	beq.n	8004b9a <dataTuningUD+0x32>
 8004b92:	4b3f      	ldr	r3, [pc, #252]	; (8004c90 <dataTuningUD+0x128>)
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	2b05      	cmp	r3, #5
 8004b98:	d151      	bne.n	8004c3e <dataTuningUD+0xd6>
			cntSwitchUDLong++; // 長押し時間計測
 8004b9a:	4b3e      	ldr	r3, [pc, #248]	; (8004c94 <dataTuningUD+0x12c>)
 8004b9c:	881b      	ldrh	r3, [r3, #0]
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	4b3c      	ldr	r3, [pc, #240]	; (8004c94 <dataTuningUD+0x12c>)
 8004ba4:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_UP  ) {
 8004ba6:	4b3a      	ldr	r3, [pc, #232]	; (8004c90 <dataTuningUD+0x128>)
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d121      	bne.n	8004bf2 <dataTuningUD+0x8a>
				// インクリメント
				if ( cntSwitchUDLong >= 20 ) {	// 長押し処理
 8004bae:	4b39      	ldr	r3, [pc, #228]	; (8004c94 <dataTuningUD+0x12c>)
 8004bb0:	881b      	ldrh	r3, [r3, #0]
 8004bb2:	2b13      	cmp	r3, #19
 8004bb4:	d90a      	bls.n	8004bcc <dataTuningUD+0x64>
					*data += add;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	897b      	ldrh	r3, [r7, #10]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	b21a      	sxth	r2, r3
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_UP  ) {
 8004bca:	e03f      	b.n	8004c4c <dataTuningUD+0xe4>
				} else if (pushUD == 0) {	// 1回押し処理
 8004bcc:	4b32      	ldr	r3, [pc, #200]	; (8004c98 <dataTuningUD+0x130>)
 8004bce:	f993 3000 	ldrsb.w	r3, [r3]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d13a      	bne.n	8004c4c <dataTuningUD+0xe4>
					pushUD = 1;
 8004bd6:	4b30      	ldr	r3, [pc, #192]	; (8004c98 <dataTuningUD+0x130>)
 8004bd8:	2201      	movs	r2, #1
 8004bda:	701a      	strb	r2, [r3, #0]
					*data += add;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	897b      	ldrh	r3, [r7, #10]
 8004be6:	4413      	add	r3, r2
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	b21a      	sxth	r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_UP  ) {
 8004bf0:	e02c      	b.n	8004c4c <dataTuningUD+0xe4>
				}
			} else if ( swValTact == SW_DOWN  ) {
 8004bf2:	4b27      	ldr	r3, [pc, #156]	; (8004c90 <dataTuningUD+0x128>)
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	2b05      	cmp	r3, #5
 8004bf8:	d128      	bne.n	8004c4c <dataTuningUD+0xe4>
				// デクリメント
				if ( cntSwitchUDLong >= 20 ) {	// 長押し処理
 8004bfa:	4b26      	ldr	r3, [pc, #152]	; (8004c94 <dataTuningUD+0x12c>)
 8004bfc:	881b      	ldrh	r3, [r3, #0]
 8004bfe:	2b13      	cmp	r3, #19
 8004c00:	d90a      	bls.n	8004c18 <dataTuningUD+0xb0>
					*data -= add;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	897b      	ldrh	r3, [r7, #10]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	b21a      	sxth	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_UP  ) {
 8004c16:	e019      	b.n	8004c4c <dataTuningUD+0xe4>
				} else if (pushUD == 0) {	// 1回押し処理
 8004c18:	4b1f      	ldr	r3, [pc, #124]	; (8004c98 <dataTuningUD+0x130>)
 8004c1a:	f993 3000 	ldrsb.w	r3, [r3]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d114      	bne.n	8004c4c <dataTuningUD+0xe4>
					pushUD = 1;
 8004c22:	4b1d      	ldr	r3, [pc, #116]	; (8004c98 <dataTuningUD+0x130>)
 8004c24:	2201      	movs	r2, #1
 8004c26:	701a      	strb	r2, [r3, #0]
					*data -= add;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	897b      	ldrh	r3, [r7, #10]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	b21a      	sxth	r2, r3
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_UP  ) {
 8004c3c:	e006      	b.n	8004c4c <dataTuningUD+0xe4>
				}
			}
		} else {
			pushUD = 0;
 8004c3e:	4b16      	ldr	r3, [pc, #88]	; (8004c98 <dataTuningUD+0x130>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	701a      	strb	r2, [r3, #0]
			cntSwitchUDLong = 0;
 8004c44:	4b13      	ldr	r3, [pc, #76]	; (8004c94 <dataTuningUD+0x12c>)
 8004c46:	2200      	movs	r2, #0
 8004c48:	801a      	strh	r2, [r3, #0]
 8004c4a:	e000      	b.n	8004c4e <dataTuningUD+0xe6>
			if ( swValTact == SW_UP  ) {
 8004c4c:	bf00      	nop
		}
		cntSwitchUD = 0;
 8004c4e:	4b0f      	ldr	r3, [pc, #60]	; (8004c8c <dataTuningUD+0x124>)
 8004c50:	2200      	movs	r2, #0
 8004c52:	801a      	strh	r2, [r3, #0]

		if ( *data > max) {
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c5a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	da03      	bge.n	8004c6a <dataTuningUD+0x102>
			*data = min;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	893a      	ldrh	r2, [r7, #8]
 8004c66:	801a      	strh	r2, [r3, #0]
		} else if ( *data < min ) {
			*data = max;
		}
	}
}
 8004c68:	e009      	b.n	8004c7e <dataTuningUD+0x116>
		} else if ( *data < min ) {
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c70:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	dd02      	ble.n	8004c7e <dataTuningUD+0x116>
			*data = max;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	88fa      	ldrh	r2, [r7, #6]
 8004c7c:	801a      	strh	r2, [r3, #0]
}
 8004c7e:	bf00      	nop
 8004c80:	3714      	adds	r7, #20
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	2000377c 	.word	0x2000377c
 8004c90:	20003b99 	.word	0x20003b99
 8004c94:	20003780 	.word	0x20003780
 8004c98:	20003785 	.word	0x20003785

08004c9c <dataTuningLR>:
// モジュール名 dataTuningLR
// 処理概要     タクトスイッチで整数型dataを加減する
// 引数         data: 加減させる変数 add: 0: 変化量 dir: 0:上下 1:左右
// 戻り値       なし
///////////////////////////////////////////////////////////////////////////////////////
void dataTuningLR ( int16_t *data, int16_t add, int16_t min, int16_t max) {
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	4608      	mov	r0, r1
 8004ca6:	4611      	mov	r1, r2
 8004ca8:	461a      	mov	r2, r3
 8004caa:	4603      	mov	r3, r0
 8004cac:	817b      	strh	r3, [r7, #10]
 8004cae:	460b      	mov	r3, r1
 8004cb0:	813b      	strh	r3, [r7, #8]
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	80fb      	strh	r3, [r7, #6]
	if ( cntSwitchLR >= 50 ) {
 8004cb6:	4b42      	ldr	r3, [pc, #264]	; (8004dc0 <dataTuningLR+0x124>)
 8004cb8:	881b      	ldrh	r3, [r3, #0]
 8004cba:	2b31      	cmp	r3, #49	; 0x31
 8004cbc:	d979      	bls.n	8004db2 <dataTuningLR+0x116>
		if ( swValTact == SW_LEFT || swValTact == SW_RIGHT ) {
 8004cbe:	4b41      	ldr	r3, [pc, #260]	; (8004dc4 <dataTuningLR+0x128>)
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	2b03      	cmp	r3, #3
 8004cc4:	d003      	beq.n	8004cce <dataTuningLR+0x32>
 8004cc6:	4b3f      	ldr	r3, [pc, #252]	; (8004dc4 <dataTuningLR+0x128>)
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	2b04      	cmp	r3, #4
 8004ccc:	d151      	bne.n	8004d72 <dataTuningLR+0xd6>
			cntSwitchLRLong++; // 長押し時間計測
 8004cce:	4b3e      	ldr	r3, [pc, #248]	; (8004dc8 <dataTuningLR+0x12c>)
 8004cd0:	881b      	ldrh	r3, [r3, #0]
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	4b3c      	ldr	r3, [pc, #240]	; (8004dc8 <dataTuningLR+0x12c>)
 8004cd8:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_RIGHT  ) {
 8004cda:	4b3a      	ldr	r3, [pc, #232]	; (8004dc4 <dataTuningLR+0x128>)
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	2b04      	cmp	r3, #4
 8004ce0:	d121      	bne.n	8004d26 <dataTuningLR+0x8a>
				// インクリメント
				if ( cntSwitchLRLong >= 20 ) {	// 長押し処理
 8004ce2:	4b39      	ldr	r3, [pc, #228]	; (8004dc8 <dataTuningLR+0x12c>)
 8004ce4:	881b      	ldrh	r3, [r3, #0]
 8004ce6:	2b13      	cmp	r3, #19
 8004ce8:	d90a      	bls.n	8004d00 <dataTuningLR+0x64>
					*data += add;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	897b      	ldrh	r3, [r7, #10]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	b21a      	sxth	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_RIGHT  ) {
 8004cfe:	e03f      	b.n	8004d80 <dataTuningLR+0xe4>
				} else if (pushLR == 0) {	// 1回押し処理
 8004d00:	4b32      	ldr	r3, [pc, #200]	; (8004dcc <dataTuningLR+0x130>)
 8004d02:	f993 3000 	ldrsb.w	r3, [r3]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d13a      	bne.n	8004d80 <dataTuningLR+0xe4>
					pushLR = 1;
 8004d0a:	4b30      	ldr	r3, [pc, #192]	; (8004dcc <dataTuningLR+0x130>)
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	701a      	strb	r2, [r3, #0]
					*data += add;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d16:	b29a      	uxth	r2, r3
 8004d18:	897b      	ldrh	r3, [r7, #10]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	b21a      	sxth	r2, r3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_RIGHT  ) {
 8004d24:	e02c      	b.n	8004d80 <dataTuningLR+0xe4>
				}
			} else if ( swValTact == SW_LEFT  ) {
 8004d26:	4b27      	ldr	r3, [pc, #156]	; (8004dc4 <dataTuningLR+0x128>)
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	2b03      	cmp	r3, #3
 8004d2c:	d128      	bne.n	8004d80 <dataTuningLR+0xe4>
				// デクリメント
				if ( cntSwitchLRLong >= 20 ) {	// 長押し処理
 8004d2e:	4b26      	ldr	r3, [pc, #152]	; (8004dc8 <dataTuningLR+0x12c>)
 8004d30:	881b      	ldrh	r3, [r3, #0]
 8004d32:	2b13      	cmp	r3, #19
 8004d34:	d90a      	bls.n	8004d4c <dataTuningLR+0xb0>
					*data -= add;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	897b      	ldrh	r3, [r7, #10]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	b21a      	sxth	r2, r3
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_RIGHT  ) {
 8004d4a:	e019      	b.n	8004d80 <dataTuningLR+0xe4>
				} else if (pushLR == 0) {	// 1回押し処理
 8004d4c:	4b1f      	ldr	r3, [pc, #124]	; (8004dcc <dataTuningLR+0x130>)
 8004d4e:	f993 3000 	ldrsb.w	r3, [r3]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d114      	bne.n	8004d80 <dataTuningLR+0xe4>
					pushLR = 1;
 8004d56:	4b1d      	ldr	r3, [pc, #116]	; (8004dcc <dataTuningLR+0x130>)
 8004d58:	2201      	movs	r2, #1
 8004d5a:	701a      	strb	r2, [r3, #0]
					*data -= add;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d62:	b29a      	uxth	r2, r3
 8004d64:	897b      	ldrh	r3, [r7, #10]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	b21a      	sxth	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	801a      	strh	r2, [r3, #0]
			if ( swValTact == SW_RIGHT  ) {
 8004d70:	e006      	b.n	8004d80 <dataTuningLR+0xe4>
				}
			}
		} else {
			pushLR = 0;
 8004d72:	4b16      	ldr	r3, [pc, #88]	; (8004dcc <dataTuningLR+0x130>)
 8004d74:	2200      	movs	r2, #0
 8004d76:	701a      	strb	r2, [r3, #0]
			cntSwitchLRLong = 0;
 8004d78:	4b13      	ldr	r3, [pc, #76]	; (8004dc8 <dataTuningLR+0x12c>)
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	801a      	strh	r2, [r3, #0]
 8004d7e:	e000      	b.n	8004d82 <dataTuningLR+0xe6>
			if ( swValTact == SW_RIGHT  ) {
 8004d80:	bf00      	nop
		}
		cntSwitchLR = 0;
 8004d82:	4b0f      	ldr	r3, [pc, #60]	; (8004dc0 <dataTuningLR+0x124>)
 8004d84:	2200      	movs	r2, #0
 8004d86:	801a      	strh	r2, [r3, #0]

		if ( *data > max) {
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d8e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	da03      	bge.n	8004d9e <dataTuningLR+0x102>
			*data = min;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	893a      	ldrh	r2, [r7, #8]
 8004d9a:	801a      	strh	r2, [r3, #0]
		} else if ( *data < min ) {
			*data = max;
		}
	}
}
 8004d9c:	e009      	b.n	8004db2 <dataTuningLR+0x116>
		} else if ( *data < min ) {
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004da4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	dd02      	ble.n	8004db2 <dataTuningLR+0x116>
			*data = max;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	88fa      	ldrh	r2, [r7, #6]
 8004db0:	801a      	strh	r2, [r3, #0]
}
 8004db2:	bf00      	nop
 8004db4:	3714      	adds	r7, #20
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	2000377e 	.word	0x2000377e
 8004dc4:	20003b99 	.word	0x20003b99
 8004dc8:	20003782 	.word	0x20003782
 8004dcc:	20003784 	.word	0x20003784

08004dd0 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8004dd0:	b480      	push	{r7}
 8004dd2:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8004dd4:	bf00      	nop
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
	...

08004de0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af04      	add	r7, sp, #16
 8004de6:	4603      	mov	r3, r0
 8004de8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004dea:	f04f 33ff 	mov.w	r3, #4294967295
 8004dee:	9302      	str	r3, [sp, #8]
 8004df0:	2301      	movs	r3, #1
 8004df2:	9301      	str	r3, [sp, #4]
 8004df4:	1dfb      	adds	r3, r7, #7
 8004df6:	9300      	str	r3, [sp, #0]
 8004df8:	2301      	movs	r3, #1
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	2178      	movs	r1, #120	; 0x78
 8004dfe:	4803      	ldr	r0, [pc, #12]	; (8004e0c <ssd1306_WriteCommand+0x2c>)
 8004e00:	f002 fffc 	bl	8007dfc <HAL_I2C_Mem_Write>
}
 8004e04:	bf00      	nop
 8004e06:	3708      	adds	r7, #8
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	200034d0 	.word	0x200034d0

08004e10 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b086      	sub	sp, #24
 8004e14:	af04      	add	r7, sp, #16
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	f04f 32ff 	mov.w	r2, #4294967295
 8004e22:	9202      	str	r2, [sp, #8]
 8004e24:	9301      	str	r3, [sp, #4]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	9300      	str	r3, [sp, #0]
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	2240      	movs	r2, #64	; 0x40
 8004e2e:	2178      	movs	r1, #120	; 0x78
 8004e30:	4803      	ldr	r0, [pc, #12]	; (8004e40 <ssd1306_WriteData+0x30>)
 8004e32:	f002 ffe3 	bl	8007dfc <HAL_I2C_Mem_Write>
}
 8004e36:	bf00      	nop
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	200034d0 	.word	0x200034d0

08004e44 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8004e44:	b580      	push	{r7, lr}
 8004e46:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8004e48:	f7ff ffc2 	bl	8004dd0 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8004e4c:	2064      	movs	r0, #100	; 0x64
 8004e4e:	f001 fa6f 	bl	8006330 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8004e52:	2000      	movs	r0, #0
 8004e54:	f000 fc2e 	bl	80056b4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8004e58:	2020      	movs	r0, #32
 8004e5a:	f7ff ffc1 	bl	8004de0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8004e5e:	2000      	movs	r0, #0
 8004e60:	f7ff ffbe 	bl	8004de0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8004e64:	20b0      	movs	r0, #176	; 0xb0
 8004e66:	f7ff ffbb 	bl	8004de0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8004e6a:	20c8      	movs	r0, #200	; 0xc8
 8004e6c:	f7ff ffb8 	bl	8004de0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8004e70:	2000      	movs	r0, #0
 8004e72:	f7ff ffb5 	bl	8004de0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8004e76:	2010      	movs	r0, #16
 8004e78:	f7ff ffb2 	bl	8004de0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8004e7c:	2040      	movs	r0, #64	; 0x40
 8004e7e:	f7ff ffaf 	bl	8004de0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8004e82:	20ff      	movs	r0, #255	; 0xff
 8004e84:	f000 fc03 	bl	800568e <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8004e88:	20a1      	movs	r0, #161	; 0xa1
 8004e8a:	f7ff ffa9 	bl	8004de0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8004e8e:	20a6      	movs	r0, #166	; 0xa6
 8004e90:	f7ff ffa6 	bl	8004de0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8004e94:	20a8      	movs	r0, #168	; 0xa8
 8004e96:	f7ff ffa3 	bl	8004de0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8004e9a:	203f      	movs	r0, #63	; 0x3f
 8004e9c:	f7ff ffa0 	bl	8004de0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8004ea0:	20a4      	movs	r0, #164	; 0xa4
 8004ea2:	f7ff ff9d 	bl	8004de0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8004ea6:	20d3      	movs	r0, #211	; 0xd3
 8004ea8:	f7ff ff9a 	bl	8004de0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8004eac:	2000      	movs	r0, #0
 8004eae:	f7ff ff97 	bl	8004de0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8004eb2:	20d5      	movs	r0, #213	; 0xd5
 8004eb4:	f7ff ff94 	bl	8004de0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8004eb8:	20f0      	movs	r0, #240	; 0xf0
 8004eba:	f7ff ff91 	bl	8004de0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8004ebe:	20d9      	movs	r0, #217	; 0xd9
 8004ec0:	f7ff ff8e 	bl	8004de0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8004ec4:	2022      	movs	r0, #34	; 0x22
 8004ec6:	f7ff ff8b 	bl	8004de0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8004eca:	20da      	movs	r0, #218	; 0xda
 8004ecc:	f7ff ff88 	bl	8004de0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8004ed0:	2012      	movs	r0, #18
 8004ed2:	f7ff ff85 	bl	8004de0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8004ed6:	20db      	movs	r0, #219	; 0xdb
 8004ed8:	f7ff ff82 	bl	8004de0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8004edc:	2020      	movs	r0, #32
 8004ede:	f7ff ff7f 	bl	8004de0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8004ee2:	208d      	movs	r0, #141	; 0x8d
 8004ee4:	f7ff ff7c 	bl	8004de0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8004ee8:	2014      	movs	r0, #20
 8004eea:	f7ff ff79 	bl	8004de0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8004eee:	2001      	movs	r0, #1
 8004ef0:	f000 fbe0 	bl	80056b4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8004ef4:	2000      	movs	r0, #0
 8004ef6:	f000 f80f 	bl	8004f18 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8004efa:	f000 f831 	bl	8004f60 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8004efe:	4b05      	ldr	r3, [pc, #20]	; (8004f14 <ssd1306_Init+0xd0>)
 8004f00:	2200      	movs	r2, #0
 8004f02:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8004f04:	4b03      	ldr	r3, [pc, #12]	; (8004f14 <ssd1306_Init+0xd0>)
 8004f06:	2200      	movs	r2, #0
 8004f08:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8004f0a:	4b02      	ldr	r3, [pc, #8]	; (8004f14 <ssd1306_Init+0xd0>)
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	711a      	strb	r2, [r3, #4]
}
 8004f10:	bf00      	nop
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	20003b90 	.word	0x20003b90

08004f18 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	4603      	mov	r3, r0
 8004f20:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8004f22:	2300      	movs	r3, #0
 8004f24:	60fb      	str	r3, [r7, #12]
 8004f26:	e00d      	b.n	8004f44 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8004f28:	79fb      	ldrb	r3, [r7, #7]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <ssd1306_Fill+0x1a>
 8004f2e:	2100      	movs	r1, #0
 8004f30:	e000      	b.n	8004f34 <ssd1306_Fill+0x1c>
 8004f32:	21ff      	movs	r1, #255	; 0xff
 8004f34:	4a09      	ldr	r2, [pc, #36]	; (8004f5c <ssd1306_Fill+0x44>)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	4413      	add	r3, r2
 8004f3a:	460a      	mov	r2, r1
 8004f3c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	3301      	adds	r3, #1
 8004f42:	60fb      	str	r3, [r7, #12]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f4a:	d3ed      	bcc.n	8004f28 <ssd1306_Fill+0x10>
    }
}
 8004f4c:	bf00      	nop
 8004f4e:	bf00      	nop
 8004f50:	3714      	adds	r7, #20
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	20003790 	.word	0x20003790

08004f60 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004f66:	2300      	movs	r3, #0
 8004f68:	71fb      	strb	r3, [r7, #7]
 8004f6a:	e016      	b.n	8004f9a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8004f6c:	79fb      	ldrb	r3, [r7, #7]
 8004f6e:	3b50      	subs	r3, #80	; 0x50
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	4618      	mov	r0, r3
 8004f74:	f7ff ff34 	bl	8004de0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8004f78:	2000      	movs	r0, #0
 8004f7a:	f7ff ff31 	bl	8004de0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8004f7e:	2010      	movs	r0, #16
 8004f80:	f7ff ff2e 	bl	8004de0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8004f84:	79fb      	ldrb	r3, [r7, #7]
 8004f86:	01db      	lsls	r3, r3, #7
 8004f88:	4a08      	ldr	r2, [pc, #32]	; (8004fac <ssd1306_UpdateScreen+0x4c>)
 8004f8a:	4413      	add	r3, r2
 8004f8c:	2180      	movs	r1, #128	; 0x80
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7ff ff3e 	bl	8004e10 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004f94:	79fb      	ldrb	r3, [r7, #7]
 8004f96:	3301      	adds	r3, #1
 8004f98:	71fb      	strb	r3, [r7, #7]
 8004f9a:	79fb      	ldrb	r3, [r7, #7]
 8004f9c:	2b07      	cmp	r3, #7
 8004f9e:	d9e5      	bls.n	8004f6c <ssd1306_UpdateScreen+0xc>
    }
}
 8004fa0:	bf00      	nop
 8004fa2:	bf00      	nop
 8004fa4:	3708      	adds	r7, #8
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	20003790 	.word	0x20003790

08004fb0 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	71fb      	strb	r3, [r7, #7]
 8004fba:	460b      	mov	r3, r1
 8004fbc:	71bb      	strb	r3, [r7, #6]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8004fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	db3d      	blt.n	8005046 <ssd1306_DrawPixel+0x96>
 8004fca:	79bb      	ldrb	r3, [r7, #6]
 8004fcc:	2b3f      	cmp	r3, #63	; 0x3f
 8004fce:	d83a      	bhi.n	8005046 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8004fd0:	797b      	ldrb	r3, [r7, #5]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d11a      	bne.n	800500c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8004fd6:	79fa      	ldrb	r2, [r7, #7]
 8004fd8:	79bb      	ldrb	r3, [r7, #6]
 8004fda:	08db      	lsrs	r3, r3, #3
 8004fdc:	b2d8      	uxtb	r0, r3
 8004fde:	4603      	mov	r3, r0
 8004fe0:	01db      	lsls	r3, r3, #7
 8004fe2:	4413      	add	r3, r2
 8004fe4:	4a1b      	ldr	r2, [pc, #108]	; (8005054 <ssd1306_DrawPixel+0xa4>)
 8004fe6:	5cd3      	ldrb	r3, [r2, r3]
 8004fe8:	b25a      	sxtb	r2, r3
 8004fea:	79bb      	ldrb	r3, [r7, #6]
 8004fec:	f003 0307 	and.w	r3, r3, #7
 8004ff0:	2101      	movs	r1, #1
 8004ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff6:	b25b      	sxtb	r3, r3
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	b259      	sxtb	r1, r3
 8004ffc:	79fa      	ldrb	r2, [r7, #7]
 8004ffe:	4603      	mov	r3, r0
 8005000:	01db      	lsls	r3, r3, #7
 8005002:	4413      	add	r3, r2
 8005004:	b2c9      	uxtb	r1, r1
 8005006:	4a13      	ldr	r2, [pc, #76]	; (8005054 <ssd1306_DrawPixel+0xa4>)
 8005008:	54d1      	strb	r1, [r2, r3]
 800500a:	e01d      	b.n	8005048 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800500c:	79fa      	ldrb	r2, [r7, #7]
 800500e:	79bb      	ldrb	r3, [r7, #6]
 8005010:	08db      	lsrs	r3, r3, #3
 8005012:	b2d8      	uxtb	r0, r3
 8005014:	4603      	mov	r3, r0
 8005016:	01db      	lsls	r3, r3, #7
 8005018:	4413      	add	r3, r2
 800501a:	4a0e      	ldr	r2, [pc, #56]	; (8005054 <ssd1306_DrawPixel+0xa4>)
 800501c:	5cd3      	ldrb	r3, [r2, r3]
 800501e:	b25a      	sxtb	r2, r3
 8005020:	79bb      	ldrb	r3, [r7, #6]
 8005022:	f003 0307 	and.w	r3, r3, #7
 8005026:	2101      	movs	r1, #1
 8005028:	fa01 f303 	lsl.w	r3, r1, r3
 800502c:	b25b      	sxtb	r3, r3
 800502e:	43db      	mvns	r3, r3
 8005030:	b25b      	sxtb	r3, r3
 8005032:	4013      	ands	r3, r2
 8005034:	b259      	sxtb	r1, r3
 8005036:	79fa      	ldrb	r2, [r7, #7]
 8005038:	4603      	mov	r3, r0
 800503a:	01db      	lsls	r3, r3, #7
 800503c:	4413      	add	r3, r2
 800503e:	b2c9      	uxtb	r1, r1
 8005040:	4a04      	ldr	r2, [pc, #16]	; (8005054 <ssd1306_DrawPixel+0xa4>)
 8005042:	54d1      	strb	r1, [r2, r3]
 8005044:	e000      	b.n	8005048 <ssd1306_DrawPixel+0x98>
        return;
 8005046:	bf00      	nop
    }
}
 8005048:	370c      	adds	r7, #12
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	20003790 	.word	0x20003790

08005058 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8005058:	b590      	push	{r4, r7, lr}
 800505a:	b089      	sub	sp, #36	; 0x24
 800505c:	af00      	add	r7, sp, #0
 800505e:	4604      	mov	r4, r0
 8005060:	1d38      	adds	r0, r7, #4
 8005062:	e880 0006 	stmia.w	r0, {r1, r2}
 8005066:	461a      	mov	r2, r3
 8005068:	4623      	mov	r3, r4
 800506a:	73fb      	strb	r3, [r7, #15]
 800506c:	4613      	mov	r3, r2
 800506e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8005070:	7bfb      	ldrb	r3, [r7, #15]
 8005072:	2b1f      	cmp	r3, #31
 8005074:	d902      	bls.n	800507c <ssd1306_WriteChar+0x24>
 8005076:	7bfb      	ldrb	r3, [r7, #15]
 8005078:	2b7e      	cmp	r3, #126	; 0x7e
 800507a:	d901      	bls.n	8005080 <ssd1306_WriteChar+0x28>
        return 0;
 800507c:	2300      	movs	r3, #0
 800507e:	e06d      	b.n	800515c <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8005080:	4b38      	ldr	r3, [pc, #224]	; (8005164 <ssd1306_WriteChar+0x10c>)
 8005082:	881b      	ldrh	r3, [r3, #0]
 8005084:	461a      	mov	r2, r3
 8005086:	793b      	ldrb	r3, [r7, #4]
 8005088:	4413      	add	r3, r2
 800508a:	2b80      	cmp	r3, #128	; 0x80
 800508c:	dc06      	bgt.n	800509c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800508e:	4b35      	ldr	r3, [pc, #212]	; (8005164 <ssd1306_WriteChar+0x10c>)
 8005090:	885b      	ldrh	r3, [r3, #2]
 8005092:	461a      	mov	r2, r3
 8005094:	797b      	ldrb	r3, [r7, #5]
 8005096:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8005098:	2b40      	cmp	r3, #64	; 0x40
 800509a:	dd01      	ble.n	80050a0 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 800509c:	2300      	movs	r3, #0
 800509e:	e05d      	b.n	800515c <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80050a0:	2300      	movs	r3, #0
 80050a2:	61fb      	str	r3, [r7, #28]
 80050a4:	e04c      	b.n	8005140 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80050a6:	68ba      	ldr	r2, [r7, #8]
 80050a8:	7bfb      	ldrb	r3, [r7, #15]
 80050aa:	3b20      	subs	r3, #32
 80050ac:	7979      	ldrb	r1, [r7, #5]
 80050ae:	fb01 f303 	mul.w	r3, r1, r3
 80050b2:	4619      	mov	r1, r3
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	440b      	add	r3, r1
 80050b8:	005b      	lsls	r3, r3, #1
 80050ba:	4413      	add	r3, r2
 80050bc:	881b      	ldrh	r3, [r3, #0]
 80050be:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80050c0:	2300      	movs	r3, #0
 80050c2:	61bb      	str	r3, [r7, #24]
 80050c4:	e034      	b.n	8005130 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	fa02 f303 	lsl.w	r3, r2, r3
 80050ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d012      	beq.n	80050fc <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80050d6:	4b23      	ldr	r3, [pc, #140]	; (8005164 <ssd1306_WriteChar+0x10c>)
 80050d8:	881b      	ldrh	r3, [r3, #0]
 80050da:	b2da      	uxtb	r2, r3
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	4413      	add	r3, r2
 80050e2:	b2d8      	uxtb	r0, r3
 80050e4:	4b1f      	ldr	r3, [pc, #124]	; (8005164 <ssd1306_WriteChar+0x10c>)
 80050e6:	885b      	ldrh	r3, [r3, #2]
 80050e8:	b2da      	uxtb	r2, r3
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	4413      	add	r3, r2
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	7bba      	ldrb	r2, [r7, #14]
 80050f4:	4619      	mov	r1, r3
 80050f6:	f7ff ff5b 	bl	8004fb0 <ssd1306_DrawPixel>
 80050fa:	e016      	b.n	800512a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80050fc:	4b19      	ldr	r3, [pc, #100]	; (8005164 <ssd1306_WriteChar+0x10c>)
 80050fe:	881b      	ldrh	r3, [r3, #0]
 8005100:	b2da      	uxtb	r2, r3
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	b2db      	uxtb	r3, r3
 8005106:	4413      	add	r3, r2
 8005108:	b2d8      	uxtb	r0, r3
 800510a:	4b16      	ldr	r3, [pc, #88]	; (8005164 <ssd1306_WriteChar+0x10c>)
 800510c:	885b      	ldrh	r3, [r3, #2]
 800510e:	b2da      	uxtb	r2, r3
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	b2db      	uxtb	r3, r3
 8005114:	4413      	add	r3, r2
 8005116:	b2d9      	uxtb	r1, r3
 8005118:	7bbb      	ldrb	r3, [r7, #14]
 800511a:	2b00      	cmp	r3, #0
 800511c:	bf0c      	ite	eq
 800511e:	2301      	moveq	r3, #1
 8005120:	2300      	movne	r3, #0
 8005122:	b2db      	uxtb	r3, r3
 8005124:	461a      	mov	r2, r3
 8005126:	f7ff ff43 	bl	8004fb0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	3301      	adds	r3, #1
 800512e:	61bb      	str	r3, [r7, #24]
 8005130:	793b      	ldrb	r3, [r7, #4]
 8005132:	461a      	mov	r2, r3
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	4293      	cmp	r3, r2
 8005138:	d3c5      	bcc.n	80050c6 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	3301      	adds	r3, #1
 800513e:	61fb      	str	r3, [r7, #28]
 8005140:	797b      	ldrb	r3, [r7, #5]
 8005142:	461a      	mov	r2, r3
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	4293      	cmp	r3, r2
 8005148:	d3ad      	bcc.n	80050a6 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800514a:	4b06      	ldr	r3, [pc, #24]	; (8005164 <ssd1306_WriteChar+0x10c>)
 800514c:	881a      	ldrh	r2, [r3, #0]
 800514e:	793b      	ldrb	r3, [r7, #4]
 8005150:	b29b      	uxth	r3, r3
 8005152:	4413      	add	r3, r2
 8005154:	b29a      	uxth	r2, r3
 8005156:	4b03      	ldr	r3, [pc, #12]	; (8005164 <ssd1306_WriteChar+0x10c>)
 8005158:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800515a:	7bfb      	ldrb	r3, [r7, #15]
}
 800515c:	4618      	mov	r0, r3
 800515e:	3724      	adds	r7, #36	; 0x24
 8005160:	46bd      	mov	sp, r7
 8005162:	bd90      	pop	{r4, r7, pc}
 8005164:	20003b90 	.word	0x20003b90

08005168 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	1d38      	adds	r0, r7, #4
 8005172:	e880 0006 	stmia.w	r0, {r1, r2}
 8005176:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8005178:	e012      	b.n	80051a0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	7818      	ldrb	r0, [r3, #0]
 800517e:	78fb      	ldrb	r3, [r7, #3]
 8005180:	1d3a      	adds	r2, r7, #4
 8005182:	ca06      	ldmia	r2, {r1, r2}
 8005184:	f7ff ff68 	bl	8005058 <ssd1306_WriteChar>
 8005188:	4603      	mov	r3, r0
 800518a:	461a      	mov	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	429a      	cmp	r2, r3
 8005192:	d002      	beq.n	800519a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	e008      	b.n	80051ac <ssd1306_WriteString+0x44>
        }
        str++;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	3301      	adds	r3, #1
 800519e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1e8      	bne.n	800517a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	781b      	ldrb	r3, [r3, #0]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	4603      	mov	r3, r0
 80051bc:	460a      	mov	r2, r1
 80051be:	71fb      	strb	r3, [r7, #7]
 80051c0:	4613      	mov	r3, r2
 80051c2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80051c4:	79fb      	ldrb	r3, [r7, #7]
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	4b05      	ldr	r3, [pc, #20]	; (80051e0 <ssd1306_SetCursor+0x2c>)
 80051ca:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80051cc:	79bb      	ldrb	r3, [r7, #6]
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	4b03      	ldr	r3, [pc, #12]	; (80051e0 <ssd1306_SetCursor+0x2c>)
 80051d2:	805a      	strh	r2, [r3, #2]
}
 80051d4:	bf00      	nop
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr
 80051e0:	20003b90 	.word	0x20003b90

080051e4 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80051e4:	b590      	push	{r4, r7, lr}
 80051e6:	b089      	sub	sp, #36	; 0x24
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	4604      	mov	r4, r0
 80051ec:	4608      	mov	r0, r1
 80051ee:	4611      	mov	r1, r2
 80051f0:	461a      	mov	r2, r3
 80051f2:	4623      	mov	r3, r4
 80051f4:	71fb      	strb	r3, [r7, #7]
 80051f6:	4603      	mov	r3, r0
 80051f8:	71bb      	strb	r3, [r7, #6]
 80051fa:	460b      	mov	r3, r1
 80051fc:	717b      	strb	r3, [r7, #5]
 80051fe:	4613      	mov	r3, r2
 8005200:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8005202:	797a      	ldrb	r2, [r7, #5]
 8005204:	79fb      	ldrb	r3, [r7, #7]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	2b00      	cmp	r3, #0
 800520a:	bfb8      	it	lt
 800520c:	425b      	neglt	r3, r3
 800520e:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8005210:	793a      	ldrb	r2, [r7, #4]
 8005212:	79bb      	ldrb	r3, [r7, #6]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	2b00      	cmp	r3, #0
 8005218:	bfb8      	it	lt
 800521a:	425b      	neglt	r3, r3
 800521c:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 800521e:	79fa      	ldrb	r2, [r7, #7]
 8005220:	797b      	ldrb	r3, [r7, #5]
 8005222:	429a      	cmp	r2, r3
 8005224:	d201      	bcs.n	800522a <ssd1306_Line+0x46>
 8005226:	2301      	movs	r3, #1
 8005228:	e001      	b.n	800522e <ssd1306_Line+0x4a>
 800522a:	f04f 33ff 	mov.w	r3, #4294967295
 800522e:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8005230:	79ba      	ldrb	r2, [r7, #6]
 8005232:	793b      	ldrb	r3, [r7, #4]
 8005234:	429a      	cmp	r2, r3
 8005236:	d201      	bcs.n	800523c <ssd1306_Line+0x58>
 8005238:	2301      	movs	r3, #1
 800523a:	e001      	b.n	8005240 <ssd1306_Line+0x5c>
 800523c:	f04f 33ff 	mov.w	r3, #4294967295
 8005240:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8005242:	69ba      	ldr	r2, [r7, #24]
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 800524a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800524e:	7939      	ldrb	r1, [r7, #4]
 8005250:	797b      	ldrb	r3, [r7, #5]
 8005252:	4618      	mov	r0, r3
 8005254:	f7ff feac 	bl	8004fb0 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8005258:	e024      	b.n	80052a4 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 800525a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800525e:	79b9      	ldrb	r1, [r7, #6]
 8005260:	79fb      	ldrb	r3, [r7, #7]
 8005262:	4618      	mov	r0, r3
 8005264:	f7ff fea4 	bl	8004fb0 <ssd1306_DrawPixel>
        error2 = error * 2;
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	005b      	lsls	r3, r3, #1
 800526c:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	425b      	negs	r3, r3
 8005272:	68ba      	ldr	r2, [r7, #8]
 8005274:	429a      	cmp	r2, r3
 8005276:	dd08      	ble.n	800528a <ssd1306_Line+0xa6>
            error -= deltaY;
 8005278:	69fa      	ldr	r2, [r7, #28]
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	b2da      	uxtb	r2, r3
 8005284:	79fb      	ldrb	r3, [r7, #7]
 8005286:	4413      	add	r3, r2
 8005288:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	429a      	cmp	r2, r3
 8005290:	da08      	bge.n	80052a4 <ssd1306_Line+0xc0>
            error += deltaX;
 8005292:	69fa      	ldr	r2, [r7, #28]
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	4413      	add	r3, r2
 8005298:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	b2da      	uxtb	r2, r3
 800529e:	79bb      	ldrb	r3, [r7, #6]
 80052a0:	4413      	add	r3, r2
 80052a2:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 80052a4:	79fa      	ldrb	r2, [r7, #7]
 80052a6:	797b      	ldrb	r3, [r7, #5]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d1d6      	bne.n	800525a <ssd1306_Line+0x76>
 80052ac:	79ba      	ldrb	r2, [r7, #6]
 80052ae:	793b      	ldrb	r3, [r7, #4]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d1d2      	bne.n	800525a <ssd1306_Line+0x76>
        }
    }
    return;
 80052b4:	bf00      	nop
}
 80052b6:	3724      	adds	r7, #36	; 0x24
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd90      	pop	{r4, r7, pc}
 80052bc:	0000      	movs	r0, r0
	...

080052c0 <ssd1306_DegToRad>:

    return;
}

/* Convert Degrees to Radians */
static float ssd1306_DegToRad(float par_deg) {
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
    return par_deg * 3.14 / 180.0;
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f7fb f95d 	bl	8000588 <__aeabi_f2d>
 80052ce:	a30d      	add	r3, pc, #52	; (adr r3, 8005304 <ssd1306_DegToRad+0x44>)
 80052d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d4:	f7fb f9b0 	bl	8000638 <__aeabi_dmul>
 80052d8:	4602      	mov	r2, r0
 80052da:	460b      	mov	r3, r1
 80052dc:	4610      	mov	r0, r2
 80052de:	4619      	mov	r1, r3
 80052e0:	f04f 0200 	mov.w	r2, #0
 80052e4:	4b06      	ldr	r3, [pc, #24]	; (8005300 <ssd1306_DegToRad+0x40>)
 80052e6:	f7fb fad1 	bl	800088c <__aeabi_ddiv>
 80052ea:	4602      	mov	r2, r0
 80052ec:	460b      	mov	r3, r1
 80052ee:	4610      	mov	r0, r2
 80052f0:	4619      	mov	r1, r3
 80052f2:	f7fb fc99 	bl	8000c28 <__aeabi_d2f>
 80052f6:	4603      	mov	r3, r0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3708      	adds	r7, #8
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	40668000 	.word	0x40668000
 8005304:	51eb851f 	.word	0x51eb851f
 8005308:	40091eb8 	.word	0x40091eb8

0800530c <ssd1306_NormalizeTo0_360>:

/* Normalize degree to [0;360] */
static uint16_t ssd1306_NormalizeTo0_360(uint16_t par_deg) {
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	4603      	mov	r3, r0
 8005314:	80fb      	strh	r3, [r7, #6]
    uint16_t loc_angle;
    if(par_deg <= 360) {
 8005316:	88fb      	ldrh	r3, [r7, #6]
 8005318:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800531c:	d802      	bhi.n	8005324 <ssd1306_NormalizeTo0_360+0x18>
        loc_angle = par_deg;
 800531e:	88fb      	ldrh	r3, [r7, #6]
 8005320:	81fb      	strh	r3, [r7, #14]
 8005322:	e013      	b.n	800534c <ssd1306_NormalizeTo0_360+0x40>
    } else {
        loc_angle = par_deg % 360;
 8005324:	88fb      	ldrh	r3, [r7, #6]
 8005326:	08da      	lsrs	r2, r3, #3
 8005328:	490c      	ldr	r1, [pc, #48]	; (800535c <ssd1306_NormalizeTo0_360+0x50>)
 800532a:	fba1 1202 	umull	r1, r2, r1, r2
 800532e:	0892      	lsrs	r2, r2, #2
 8005330:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8005334:	fb01 f202 	mul.w	r2, r1, r2
 8005338:	1a9b      	subs	r3, r3, r2
 800533a:	81fb      	strh	r3, [r7, #14]
        loc_angle = ((par_deg != 0)?par_deg:360);
 800533c:	88fb      	ldrh	r3, [r7, #6]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d001      	beq.n	8005346 <ssd1306_NormalizeTo0_360+0x3a>
 8005342:	88fb      	ldrh	r3, [r7, #6]
 8005344:	e001      	b.n	800534a <ssd1306_NormalizeTo0_360+0x3e>
 8005346:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800534a:	81fb      	strh	r3, [r7, #14]
    }
    return loc_angle;
 800534c:	89fb      	ldrh	r3, [r7, #14]
}
 800534e:	4618      	mov	r0, r3
 8005350:	3714      	adds	r7, #20
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	16c16c17 	.word	0x16c16c17

08005360 <ssd1306_DrawArc>:
/*
 * DrawArc. Draw angle is beginning from 4 quart of trigonometric circle (3pi/2)
 * start_angle in degree
 * sweep in degree
 */
void ssd1306_DrawArc(uint8_t x, uint8_t y, uint8_t radius, uint16_t start_angle, uint16_t sweep, SSD1306_COLOR color) {
 8005360:	b5b0      	push	{r4, r5, r7, lr}
 8005362:	b08a      	sub	sp, #40	; 0x28
 8005364:	af02      	add	r7, sp, #8
 8005366:	4604      	mov	r4, r0
 8005368:	4608      	mov	r0, r1
 800536a:	4611      	mov	r1, r2
 800536c:	461a      	mov	r2, r3
 800536e:	4623      	mov	r3, r4
 8005370:	71fb      	strb	r3, [r7, #7]
 8005372:	4603      	mov	r3, r0
 8005374:	71bb      	strb	r3, [r7, #6]
 8005376:	460b      	mov	r3, r1
 8005378:	717b      	strb	r3, [r7, #5]
 800537a:	4613      	mov	r3, r2
 800537c:	807b      	strh	r3, [r7, #2]
    static const uint8_t CIRCLE_APPROXIMATION_SEGMENTS = 36;
    float approx_degree;
    uint32_t approx_segments;
    uint8_t xp1,xp2;
    uint8_t yp1,yp2;
    uint32_t count = 0;
 800537e:	2300      	movs	r3, #0
 8005380:	61fb      	str	r3, [r7, #28]
    uint32_t loc_sweep = 0;
 8005382:	2300      	movs	r3, #0
 8005384:	617b      	str	r3, [r7, #20]
    float rad;
    
    loc_sweep = ssd1306_NormalizeTo0_360(sweep);
 8005386:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005388:	4618      	mov	r0, r3
 800538a:	f7ff ffbf 	bl	800530c <ssd1306_NormalizeTo0_360>
 800538e:	4603      	mov	r3, r0
 8005390:	617b      	str	r3, [r7, #20]
    
    count = (ssd1306_NormalizeTo0_360(start_angle) * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 8005392:	887b      	ldrh	r3, [r7, #2]
 8005394:	4618      	mov	r0, r3
 8005396:	f7ff ffb9 	bl	800530c <ssd1306_NormalizeTo0_360>
 800539a:	4603      	mov	r3, r0
 800539c:	461a      	mov	r2, r3
 800539e:	4b76      	ldr	r3, [pc, #472]	; (8005578 <ssd1306_DrawArc+0x218>)
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	fb02 f303 	mul.w	r3, r2, r3
 80053a6:	4a75      	ldr	r2, [pc, #468]	; (800557c <ssd1306_DrawArc+0x21c>)
 80053a8:	fb82 1203 	smull	r1, r2, r2, r3
 80053ac:	441a      	add	r2, r3
 80053ae:	1212      	asrs	r2, r2, #8
 80053b0:	17db      	asrs	r3, r3, #31
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	61fb      	str	r3, [r7, #28]
    approx_segments = (loc_sweep * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 80053b6:	4b70      	ldr	r3, [pc, #448]	; (8005578 <ssd1306_DrawArc+0x218>)
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	461a      	mov	r2, r3
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	fb02 f303 	mul.w	r3, r2, r3
 80053c2:	08db      	lsrs	r3, r3, #3
 80053c4:	4a6e      	ldr	r2, [pc, #440]	; (8005580 <ssd1306_DrawArc+0x220>)
 80053c6:	fba2 2303 	umull	r2, r3, r2, r3
 80053ca:	089b      	lsrs	r3, r3, #2
 80053cc:	613b      	str	r3, [r7, #16]
    approx_degree = loc_sweep / (float)approx_segments;
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	ee07 3a90 	vmov	s15, r3
 80053d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	ee07 3a90 	vmov	s15, r3
 80053de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80053e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053e6:	edc7 7a03 	vstr	s15, [r7, #12]
    while(count < approx_segments)
 80053ea:	e0bb      	b.n	8005564 <ssd1306_DrawArc+0x204>
    {
        rad = ssd1306_DegToRad(count*approx_degree);
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	ee07 3a90 	vmov	s15, r3
 80053f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80053f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80053fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053fe:	ee17 0a90 	vmov	r0, s15
 8005402:	f7ff ff5d 	bl	80052c0 <ssd1306_DegToRad>
 8005406:	61b8      	str	r0, [r7, #24]
        xp1 = x + (int8_t)(sin(rad)*radius);
 8005408:	69b8      	ldr	r0, [r7, #24]
 800540a:	f7fb f8bd 	bl	8000588 <__aeabi_f2d>
 800540e:	4602      	mov	r2, r0
 8005410:	460b      	mov	r3, r1
 8005412:	4610      	mov	r0, r2
 8005414:	4619      	mov	r1, r3
 8005416:	f008 fe67 	bl	800e0e8 <sin>
 800541a:	4604      	mov	r4, r0
 800541c:	460d      	mov	r5, r1
 800541e:	797b      	ldrb	r3, [r7, #5]
 8005420:	4618      	mov	r0, r3
 8005422:	f7fb f89f 	bl	8000564 <__aeabi_i2d>
 8005426:	4602      	mov	r2, r0
 8005428:	460b      	mov	r3, r1
 800542a:	4620      	mov	r0, r4
 800542c:	4629      	mov	r1, r5
 800542e:	f7fb f903 	bl	8000638 <__aeabi_dmul>
 8005432:	4602      	mov	r2, r0
 8005434:	460b      	mov	r3, r1
 8005436:	4610      	mov	r0, r2
 8005438:	4619      	mov	r1, r3
 800543a:	f7fb fbad 	bl	8000b98 <__aeabi_d2iz>
 800543e:	4603      	mov	r3, r0
 8005440:	b25b      	sxtb	r3, r3
 8005442:	b2da      	uxtb	r2, r3
 8005444:	79fb      	ldrb	r3, [r7, #7]
 8005446:	4413      	add	r3, r2
 8005448:	72fb      	strb	r3, [r7, #11]
        yp1 = y + (int8_t)(cos(rad)*radius);    
 800544a:	69b8      	ldr	r0, [r7, #24]
 800544c:	f7fb f89c 	bl	8000588 <__aeabi_f2d>
 8005450:	4602      	mov	r2, r0
 8005452:	460b      	mov	r3, r1
 8005454:	4610      	mov	r0, r2
 8005456:	4619      	mov	r1, r3
 8005458:	f008 fdfc 	bl	800e054 <cos>
 800545c:	4604      	mov	r4, r0
 800545e:	460d      	mov	r5, r1
 8005460:	797b      	ldrb	r3, [r7, #5]
 8005462:	4618      	mov	r0, r3
 8005464:	f7fb f87e 	bl	8000564 <__aeabi_i2d>
 8005468:	4602      	mov	r2, r0
 800546a:	460b      	mov	r3, r1
 800546c:	4620      	mov	r0, r4
 800546e:	4629      	mov	r1, r5
 8005470:	f7fb f8e2 	bl	8000638 <__aeabi_dmul>
 8005474:	4602      	mov	r2, r0
 8005476:	460b      	mov	r3, r1
 8005478:	4610      	mov	r0, r2
 800547a:	4619      	mov	r1, r3
 800547c:	f7fb fb8c 	bl	8000b98 <__aeabi_d2iz>
 8005480:	4603      	mov	r3, r0
 8005482:	b25b      	sxtb	r3, r3
 8005484:	b2da      	uxtb	r2, r3
 8005486:	79bb      	ldrb	r3, [r7, #6]
 8005488:	4413      	add	r3, r2
 800548a:	72bb      	strb	r3, [r7, #10]
        count++;
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	3301      	adds	r3, #1
 8005490:	61fb      	str	r3, [r7, #28]
        if(count != approx_segments) {
 8005492:	69fa      	ldr	r2, [r7, #28]
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	429a      	cmp	r2, r3
 8005498:	d00e      	beq.n	80054b8 <ssd1306_DrawArc+0x158>
            rad = ssd1306_DegToRad(count*approx_degree);
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	ee07 3a90 	vmov	s15, r3
 80054a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80054a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80054a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ac:	ee17 0a90 	vmov	r0, s15
 80054b0:	f7ff ff06 	bl	80052c0 <ssd1306_DegToRad>
 80054b4:	61b8      	str	r0, [r7, #24]
 80054b6:	e009      	b.n	80054cc <ssd1306_DrawArc+0x16c>
        } else {
            rad = ssd1306_DegToRad(loc_sweep);
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	ee07 3a90 	vmov	s15, r3
 80054be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054c2:	ee17 0a90 	vmov	r0, s15
 80054c6:	f7ff fefb 	bl	80052c0 <ssd1306_DegToRad>
 80054ca:	61b8      	str	r0, [r7, #24]
        }
        xp2 = x + (int8_t)(sin(rad)*radius);
 80054cc:	69b8      	ldr	r0, [r7, #24]
 80054ce:	f7fb f85b 	bl	8000588 <__aeabi_f2d>
 80054d2:	4602      	mov	r2, r0
 80054d4:	460b      	mov	r3, r1
 80054d6:	4610      	mov	r0, r2
 80054d8:	4619      	mov	r1, r3
 80054da:	f008 fe05 	bl	800e0e8 <sin>
 80054de:	4604      	mov	r4, r0
 80054e0:	460d      	mov	r5, r1
 80054e2:	797b      	ldrb	r3, [r7, #5]
 80054e4:	4618      	mov	r0, r3
 80054e6:	f7fb f83d 	bl	8000564 <__aeabi_i2d>
 80054ea:	4602      	mov	r2, r0
 80054ec:	460b      	mov	r3, r1
 80054ee:	4620      	mov	r0, r4
 80054f0:	4629      	mov	r1, r5
 80054f2:	f7fb f8a1 	bl	8000638 <__aeabi_dmul>
 80054f6:	4602      	mov	r2, r0
 80054f8:	460b      	mov	r3, r1
 80054fa:	4610      	mov	r0, r2
 80054fc:	4619      	mov	r1, r3
 80054fe:	f7fb fb4b 	bl	8000b98 <__aeabi_d2iz>
 8005502:	4603      	mov	r3, r0
 8005504:	b25b      	sxtb	r3, r3
 8005506:	b2da      	uxtb	r2, r3
 8005508:	79fb      	ldrb	r3, [r7, #7]
 800550a:	4413      	add	r3, r2
 800550c:	727b      	strb	r3, [r7, #9]
        yp2 = y + (int8_t)(cos(rad)*radius);    
 800550e:	69b8      	ldr	r0, [r7, #24]
 8005510:	f7fb f83a 	bl	8000588 <__aeabi_f2d>
 8005514:	4602      	mov	r2, r0
 8005516:	460b      	mov	r3, r1
 8005518:	4610      	mov	r0, r2
 800551a:	4619      	mov	r1, r3
 800551c:	f008 fd9a 	bl	800e054 <cos>
 8005520:	4604      	mov	r4, r0
 8005522:	460d      	mov	r5, r1
 8005524:	797b      	ldrb	r3, [r7, #5]
 8005526:	4618      	mov	r0, r3
 8005528:	f7fb f81c 	bl	8000564 <__aeabi_i2d>
 800552c:	4602      	mov	r2, r0
 800552e:	460b      	mov	r3, r1
 8005530:	4620      	mov	r0, r4
 8005532:	4629      	mov	r1, r5
 8005534:	f7fb f880 	bl	8000638 <__aeabi_dmul>
 8005538:	4602      	mov	r2, r0
 800553a:	460b      	mov	r3, r1
 800553c:	4610      	mov	r0, r2
 800553e:	4619      	mov	r1, r3
 8005540:	f7fb fb2a 	bl	8000b98 <__aeabi_d2iz>
 8005544:	4603      	mov	r3, r0
 8005546:	b25b      	sxtb	r3, r3
 8005548:	b2da      	uxtb	r2, r3
 800554a:	79bb      	ldrb	r3, [r7, #6]
 800554c:	4413      	add	r3, r2
 800554e:	723b      	strb	r3, [r7, #8]
        ssd1306_Line(xp1,yp1,xp2,yp2,color);
 8005550:	7a3c      	ldrb	r4, [r7, #8]
 8005552:	7a7a      	ldrb	r2, [r7, #9]
 8005554:	7ab9      	ldrb	r1, [r7, #10]
 8005556:	7af8      	ldrb	r0, [r7, #11]
 8005558:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800555c:	9300      	str	r3, [sp, #0]
 800555e:	4623      	mov	r3, r4
 8005560:	f7ff fe40 	bl	80051e4 <ssd1306_Line>
    while(count < approx_segments)
 8005564:	69fa      	ldr	r2, [r7, #28]
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	429a      	cmp	r2, r3
 800556a:	f4ff af3f 	bcc.w	80053ec <ssd1306_DrawArc+0x8c>
    }
    
    return;
 800556e:	bf00      	nop
}
 8005570:	3720      	adds	r7, #32
 8005572:	46bd      	mov	sp, r7
 8005574:	bdb0      	pop	{r4, r5, r7, pc}
 8005576:	bf00      	nop
 8005578:	08013c48 	.word	0x08013c48
 800557c:	b60b60b7 	.word	0xb60b60b7
 8005580:	16c16c17 	.word	0x16c16c17

08005584 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8005584:	b590      	push	{r4, r7, lr}
 8005586:	b085      	sub	sp, #20
 8005588:	af02      	add	r7, sp, #8
 800558a:	4604      	mov	r4, r0
 800558c:	4608      	mov	r0, r1
 800558e:	4611      	mov	r1, r2
 8005590:	461a      	mov	r2, r3
 8005592:	4623      	mov	r3, r4
 8005594:	71fb      	strb	r3, [r7, #7]
 8005596:	4603      	mov	r3, r0
 8005598:	71bb      	strb	r3, [r7, #6]
 800559a:	460b      	mov	r3, r1
 800559c:	717b      	strb	r3, [r7, #5]
 800559e:	4613      	mov	r3, r2
 80055a0:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 80055a2:	79bc      	ldrb	r4, [r7, #6]
 80055a4:	797a      	ldrb	r2, [r7, #5]
 80055a6:	79b9      	ldrb	r1, [r7, #6]
 80055a8:	79f8      	ldrb	r0, [r7, #7]
 80055aa:	7e3b      	ldrb	r3, [r7, #24]
 80055ac:	9300      	str	r3, [sp, #0]
 80055ae:	4623      	mov	r3, r4
 80055b0:	f7ff fe18 	bl	80051e4 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 80055b4:	793c      	ldrb	r4, [r7, #4]
 80055b6:	797a      	ldrb	r2, [r7, #5]
 80055b8:	79b9      	ldrb	r1, [r7, #6]
 80055ba:	7978      	ldrb	r0, [r7, #5]
 80055bc:	7e3b      	ldrb	r3, [r7, #24]
 80055be:	9300      	str	r3, [sp, #0]
 80055c0:	4623      	mov	r3, r4
 80055c2:	f7ff fe0f 	bl	80051e4 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 80055c6:	793c      	ldrb	r4, [r7, #4]
 80055c8:	79fa      	ldrb	r2, [r7, #7]
 80055ca:	7939      	ldrb	r1, [r7, #4]
 80055cc:	7978      	ldrb	r0, [r7, #5]
 80055ce:	7e3b      	ldrb	r3, [r7, #24]
 80055d0:	9300      	str	r3, [sp, #0]
 80055d2:	4623      	mov	r3, r4
 80055d4:	f7ff fe06 	bl	80051e4 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 80055d8:	79bc      	ldrb	r4, [r7, #6]
 80055da:	79fa      	ldrb	r2, [r7, #7]
 80055dc:	7939      	ldrb	r1, [r7, #4]
 80055de:	79f8      	ldrb	r0, [r7, #7]
 80055e0:	7e3b      	ldrb	r3, [r7, #24]
 80055e2:	9300      	str	r3, [sp, #0]
 80055e4:	4623      	mov	r3, r4
 80055e6:	f7ff fdfd 	bl	80051e4 <ssd1306_Line>

    return;
 80055ea:	bf00      	nop
}
 80055ec:	370c      	adds	r7, #12
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd90      	pop	{r4, r7, pc}

080055f2 <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80055f2:	b590      	push	{r4, r7, lr}
 80055f4:	b085      	sub	sp, #20
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	4604      	mov	r4, r0
 80055fa:	4608      	mov	r0, r1
 80055fc:	4611      	mov	r1, r2
 80055fe:	461a      	mov	r2, r3
 8005600:	4623      	mov	r3, r4
 8005602:	71fb      	strb	r3, [r7, #7]
 8005604:	4603      	mov	r3, r0
 8005606:	71bb      	strb	r3, [r7, #6]
 8005608:	460b      	mov	r3, r1
 800560a:	717b      	strb	r3, [r7, #5]
 800560c:	4613      	mov	r3, r2
 800560e:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8005610:	79fa      	ldrb	r2, [r7, #7]
 8005612:	797b      	ldrb	r3, [r7, #5]
 8005614:	4293      	cmp	r3, r2
 8005616:	bf28      	it	cs
 8005618:	4613      	movcs	r3, r2
 800561a:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 800561c:	797a      	ldrb	r2, [r7, #5]
 800561e:	79fb      	ldrb	r3, [r7, #7]
 8005620:	4293      	cmp	r3, r2
 8005622:	bf38      	it	cc
 8005624:	4613      	movcc	r3, r2
 8005626:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8005628:	79ba      	ldrb	r2, [r7, #6]
 800562a:	793b      	ldrb	r3, [r7, #4]
 800562c:	4293      	cmp	r3, r2
 800562e:	bf28      	it	cs
 8005630:	4613      	movcs	r3, r2
 8005632:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8005634:	793a      	ldrb	r2, [r7, #4]
 8005636:	79bb      	ldrb	r3, [r7, #6]
 8005638:	4293      	cmp	r3, r2
 800563a:	bf38      	it	cc
 800563c:	4613      	movcc	r3, r2
 800563e:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8005640:	7afb      	ldrb	r3, [r7, #11]
 8005642:	73fb      	strb	r3, [r7, #15]
 8005644:	e017      	b.n	8005676 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8005646:	7b7b      	ldrb	r3, [r7, #13]
 8005648:	73bb      	strb	r3, [r7, #14]
 800564a:	e009      	b.n	8005660 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 800564c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005650:	7bf9      	ldrb	r1, [r7, #15]
 8005652:	7bbb      	ldrb	r3, [r7, #14]
 8005654:	4618      	mov	r0, r3
 8005656:	f7ff fcab 	bl	8004fb0 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 800565a:	7bbb      	ldrb	r3, [r7, #14]
 800565c:	3301      	adds	r3, #1
 800565e:	73bb      	strb	r3, [r7, #14]
 8005660:	7bba      	ldrb	r2, [r7, #14]
 8005662:	7b3b      	ldrb	r3, [r7, #12]
 8005664:	429a      	cmp	r2, r3
 8005666:	d803      	bhi.n	8005670 <ssd1306_FillRectangle+0x7e>
 8005668:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800566c:	2b00      	cmp	r3, #0
 800566e:	daed      	bge.n	800564c <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8005670:	7bfb      	ldrb	r3, [r7, #15]
 8005672:	3301      	adds	r3, #1
 8005674:	73fb      	strb	r3, [r7, #15]
 8005676:	7bfa      	ldrb	r2, [r7, #15]
 8005678:	7abb      	ldrb	r3, [r7, #10]
 800567a:	429a      	cmp	r2, r3
 800567c:	d803      	bhi.n	8005686 <ssd1306_FillRectangle+0x94>
 800567e:	7bfb      	ldrb	r3, [r7, #15]
 8005680:	2b3f      	cmp	r3, #63	; 0x3f
 8005682:	d9e0      	bls.n	8005646 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8005684:	bf00      	nop
 8005686:	bf00      	nop
}
 8005688:	3714      	adds	r7, #20
 800568a:	46bd      	mov	sp, r7
 800568c:	bd90      	pop	{r4, r7, pc}

0800568e <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800568e:	b580      	push	{r7, lr}
 8005690:	b084      	sub	sp, #16
 8005692:	af00      	add	r7, sp, #0
 8005694:	4603      	mov	r3, r0
 8005696:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8005698:	2381      	movs	r3, #129	; 0x81
 800569a:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800569c:	7bfb      	ldrb	r3, [r7, #15]
 800569e:	4618      	mov	r0, r3
 80056a0:	f7ff fb9e 	bl	8004de0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80056a4:	79fb      	ldrb	r3, [r7, #7]
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7ff fb9a 	bl	8004de0 <ssd1306_WriteCommand>
}
 80056ac:	bf00      	nop
 80056ae:	3710      	adds	r7, #16
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	4603      	mov	r3, r0
 80056bc:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80056be:	79fb      	ldrb	r3, [r7, #7]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d005      	beq.n	80056d0 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80056c4:	23af      	movs	r3, #175	; 0xaf
 80056c6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80056c8:	4b08      	ldr	r3, [pc, #32]	; (80056ec <ssd1306_SetDisplayOn+0x38>)
 80056ca:	2201      	movs	r2, #1
 80056cc:	715a      	strb	r2, [r3, #5]
 80056ce:	e004      	b.n	80056da <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80056d0:	23ae      	movs	r3, #174	; 0xae
 80056d2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80056d4:	4b05      	ldr	r3, [pc, #20]	; (80056ec <ssd1306_SetDisplayOn+0x38>)
 80056d6:	2200      	movs	r2, #0
 80056d8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80056da:	7bfb      	ldrb	r3, [r7, #15]
 80056dc:	4618      	mov	r0, r3
 80056de:	f7ff fb7f 	bl	8004de0 <ssd1306_WriteCommand>
}
 80056e2:	bf00      	nop
 80056e4:	3710      	adds	r7, #16
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	20003b90 	.word	0x20003b90

080056f0 <ssd1306_printf>:

uint8_t ssd1306_GetDisplayOn() {
    return SSD1306.DisplayOn;
}

void ssd1306_printf(FontDef Font, uint8_t *format, ...) {
 80056f0:	b40c      	push	{r2, r3}
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b08c      	sub	sp, #48	; 0x30
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	463b      	mov	r3, r7
 80056fa:	e883 0003 	stmia.w	r3, {r0, r1}
    va_list  argptr;
    uint8_t  str[SSD1306_WIDTH/6+10];

    va_start(argptr, format);
 80056fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005702:	62fb      	str	r3, [r7, #44]	; 0x2c
    vsprintf( str, format, argptr );
 8005704:	f107 030c 	add.w	r3, r7, #12
 8005708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800570a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800570c:	4618      	mov	r0, r3
 800570e:	f00a fd73 	bl	80101f8 <vsiprintf>
    va_end(argptr);

    ssd1306_WriteString(str,Font,White);
 8005712:	f107 000c 	add.w	r0, r7, #12
 8005716:	2301      	movs	r3, #1
 8005718:	463a      	mov	r2, r7
 800571a:	ca06      	ldmia	r2, {r1, r2}
 800571c:	f7ff fd24 	bl	8005168 <ssd1306_WriteString>
}
 8005720:	bf00      	nop
 8005722:	3730      	adds	r7, #48	; 0x30
 8005724:	46bd      	mov	sp, r7
 8005726:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800572a:	b002      	add	sp, #8
 800572c:	4770      	bx	lr
	...

08005730 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005736:	2300      	movs	r3, #0
 8005738:	607b      	str	r3, [r7, #4]
 800573a:	4b10      	ldr	r3, [pc, #64]	; (800577c <HAL_MspInit+0x4c>)
 800573c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800573e:	4a0f      	ldr	r2, [pc, #60]	; (800577c <HAL_MspInit+0x4c>)
 8005740:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005744:	6453      	str	r3, [r2, #68]	; 0x44
 8005746:	4b0d      	ldr	r3, [pc, #52]	; (800577c <HAL_MspInit+0x4c>)
 8005748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800574a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800574e:	607b      	str	r3, [r7, #4]
 8005750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005752:	2300      	movs	r3, #0
 8005754:	603b      	str	r3, [r7, #0]
 8005756:	4b09      	ldr	r3, [pc, #36]	; (800577c <HAL_MspInit+0x4c>)
 8005758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575a:	4a08      	ldr	r2, [pc, #32]	; (800577c <HAL_MspInit+0x4c>)
 800575c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005760:	6413      	str	r3, [r2, #64]	; 0x40
 8005762:	4b06      	ldr	r3, [pc, #24]	; (800577c <HAL_MspInit+0x4c>)
 8005764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800576a:	603b      	str	r3, [r7, #0]
 800576c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800576e:	bf00      	nop
 8005770:	370c      	adds	r7, #12
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop
 800577c:	40023800 	.word	0x40023800

08005780 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b08c      	sub	sp, #48	; 0x30
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005788:	f107 031c 	add.w	r3, r7, #28
 800578c:	2200      	movs	r2, #0
 800578e:	601a      	str	r2, [r3, #0]
 8005790:	605a      	str	r2, [r3, #4]
 8005792:	609a      	str	r2, [r3, #8]
 8005794:	60da      	str	r2, [r3, #12]
 8005796:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a53      	ldr	r2, [pc, #332]	; (80058ec <HAL_ADC_MspInit+0x16c>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d172      	bne.n	8005888 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80057a2:	2300      	movs	r3, #0
 80057a4:	61bb      	str	r3, [r7, #24]
 80057a6:	4b52      	ldr	r3, [pc, #328]	; (80058f0 <HAL_ADC_MspInit+0x170>)
 80057a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057aa:	4a51      	ldr	r2, [pc, #324]	; (80058f0 <HAL_ADC_MspInit+0x170>)
 80057ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057b0:	6453      	str	r3, [r2, #68]	; 0x44
 80057b2:	4b4f      	ldr	r3, [pc, #316]	; (80058f0 <HAL_ADC_MspInit+0x170>)
 80057b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ba:	61bb      	str	r3, [r7, #24]
 80057bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80057be:	2300      	movs	r3, #0
 80057c0:	617b      	str	r3, [r7, #20]
 80057c2:	4b4b      	ldr	r3, [pc, #300]	; (80058f0 <HAL_ADC_MspInit+0x170>)
 80057c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c6:	4a4a      	ldr	r2, [pc, #296]	; (80058f0 <HAL_ADC_MspInit+0x170>)
 80057c8:	f043 0304 	orr.w	r3, r3, #4
 80057cc:	6313      	str	r3, [r2, #48]	; 0x30
 80057ce:	4b48      	ldr	r3, [pc, #288]	; (80058f0 <HAL_ADC_MspInit+0x170>)
 80057d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d2:	f003 0304 	and.w	r3, r3, #4
 80057d6:	617b      	str	r3, [r7, #20]
 80057d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057da:	2300      	movs	r3, #0
 80057dc:	613b      	str	r3, [r7, #16]
 80057de:	4b44      	ldr	r3, [pc, #272]	; (80058f0 <HAL_ADC_MspInit+0x170>)
 80057e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e2:	4a43      	ldr	r2, [pc, #268]	; (80058f0 <HAL_ADC_MspInit+0x170>)
 80057e4:	f043 0301 	orr.w	r3, r3, #1
 80057e8:	6313      	str	r3, [r2, #48]	; 0x30
 80057ea:	4b41      	ldr	r3, [pc, #260]	; (80058f0 <HAL_ADC_MspInit+0x170>)
 80057ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	613b      	str	r3, [r7, #16]
 80057f4:	693b      	ldr	r3, [r7, #16]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80057f6:	230e      	movs	r3, #14
 80057f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80057fa:	2303      	movs	r3, #3
 80057fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057fe:	2300      	movs	r3, #0
 8005800:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005802:	f107 031c 	add.w	r3, r7, #28
 8005806:	4619      	mov	r1, r3
 8005808:	483a      	ldr	r0, [pc, #232]	; (80058f4 <HAL_ADC_MspInit+0x174>)
 800580a:	f001 ffed 	bl	80077e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800580e:	23bf      	movs	r3, #191	; 0xbf
 8005810:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005812:	2303      	movs	r3, #3
 8005814:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005816:	2300      	movs	r3, #0
 8005818:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800581a:	f107 031c 	add.w	r3, r7, #28
 800581e:	4619      	mov	r1, r3
 8005820:	4835      	ldr	r0, [pc, #212]	; (80058f8 <HAL_ADC_MspInit+0x178>)
 8005822:	f001 ffe1 	bl	80077e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8005826:	4b35      	ldr	r3, [pc, #212]	; (80058fc <HAL_ADC_MspInit+0x17c>)
 8005828:	4a35      	ldr	r2, [pc, #212]	; (8005900 <HAL_ADC_MspInit+0x180>)
 800582a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800582c:	4b33      	ldr	r3, [pc, #204]	; (80058fc <HAL_ADC_MspInit+0x17c>)
 800582e:	2200      	movs	r2, #0
 8005830:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005832:	4b32      	ldr	r3, [pc, #200]	; (80058fc <HAL_ADC_MspInit+0x17c>)
 8005834:	2200      	movs	r2, #0
 8005836:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005838:	4b30      	ldr	r3, [pc, #192]	; (80058fc <HAL_ADC_MspInit+0x17c>)
 800583a:	2200      	movs	r2, #0
 800583c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800583e:	4b2f      	ldr	r3, [pc, #188]	; (80058fc <HAL_ADC_MspInit+0x17c>)
 8005840:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005844:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005846:	4b2d      	ldr	r3, [pc, #180]	; (80058fc <HAL_ADC_MspInit+0x17c>)
 8005848:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800584c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800584e:	4b2b      	ldr	r3, [pc, #172]	; (80058fc <HAL_ADC_MspInit+0x17c>)
 8005850:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005854:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005856:	4b29      	ldr	r3, [pc, #164]	; (80058fc <HAL_ADC_MspInit+0x17c>)
 8005858:	f44f 7280 	mov.w	r2, #256	; 0x100
 800585c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800585e:	4b27      	ldr	r3, [pc, #156]	; (80058fc <HAL_ADC_MspInit+0x17c>)
 8005860:	2200      	movs	r2, #0
 8005862:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005864:	4b25      	ldr	r3, [pc, #148]	; (80058fc <HAL_ADC_MspInit+0x17c>)
 8005866:	2200      	movs	r2, #0
 8005868:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800586a:	4824      	ldr	r0, [pc, #144]	; (80058fc <HAL_ADC_MspInit+0x17c>)
 800586c:	f001 fc4c 	bl	8007108 <HAL_DMA_Init>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d001      	beq.n	800587a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8005876:	f7fd ffcf 	bl	8003818 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a1f      	ldr	r2, [pc, #124]	; (80058fc <HAL_ADC_MspInit+0x17c>)
 800587e:	639a      	str	r2, [r3, #56]	; 0x38
 8005880:	4a1e      	ldr	r2, [pc, #120]	; (80058fc <HAL_ADC_MspInit+0x17c>)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8005886:	e02c      	b.n	80058e2 <HAL_ADC_MspInit+0x162>
  else if(hadc->Instance==ADC2)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a1d      	ldr	r2, [pc, #116]	; (8005904 <HAL_ADC_MspInit+0x184>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d127      	bne.n	80058e2 <HAL_ADC_MspInit+0x162>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005892:	2300      	movs	r3, #0
 8005894:	60fb      	str	r3, [r7, #12]
 8005896:	4b16      	ldr	r3, [pc, #88]	; (80058f0 <HAL_ADC_MspInit+0x170>)
 8005898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800589a:	4a15      	ldr	r2, [pc, #84]	; (80058f0 <HAL_ADC_MspInit+0x170>)
 800589c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80058a0:	6453      	str	r3, [r2, #68]	; 0x44
 80058a2:	4b13      	ldr	r3, [pc, #76]	; (80058f0 <HAL_ADC_MspInit+0x170>)
 80058a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058aa:	60fb      	str	r3, [r7, #12]
 80058ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80058ae:	2300      	movs	r3, #0
 80058b0:	60bb      	str	r3, [r7, #8]
 80058b2:	4b0f      	ldr	r3, [pc, #60]	; (80058f0 <HAL_ADC_MspInit+0x170>)
 80058b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b6:	4a0e      	ldr	r2, [pc, #56]	; (80058f0 <HAL_ADC_MspInit+0x170>)
 80058b8:	f043 0304 	orr.w	r3, r3, #4
 80058bc:	6313      	str	r3, [r2, #48]	; 0x30
 80058be:	4b0c      	ldr	r3, [pc, #48]	; (80058f0 <HAL_ADC_MspInit+0x170>)
 80058c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c2:	f003 0304 	and.w	r3, r3, #4
 80058c6:	60bb      	str	r3, [r7, #8]
 80058c8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR_CM1_Pin|BATTM_Pin|MOTOR_CM2_Pin;
 80058ca:	2331      	movs	r3, #49	; 0x31
 80058cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80058ce:	2303      	movs	r3, #3
 80058d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058d2:	2300      	movs	r3, #0
 80058d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80058d6:	f107 031c 	add.w	r3, r7, #28
 80058da:	4619      	mov	r1, r3
 80058dc:	4805      	ldr	r0, [pc, #20]	; (80058f4 <HAL_ADC_MspInit+0x174>)
 80058de:	f001 ff83 	bl	80077e8 <HAL_GPIO_Init>
}
 80058e2:	bf00      	nop
 80058e4:	3730      	adds	r7, #48	; 0x30
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	40012000 	.word	0x40012000
 80058f0:	40023800 	.word	0x40023800
 80058f4:	40020800 	.word	0x40020800
 80058f8:	40020000 	.word	0x40020000
 80058fc:	20003470 	.word	0x20003470
 8005900:	40026410 	.word	0x40026410
 8005904:	40012100 	.word	0x40012100

08005908 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b08a      	sub	sp, #40	; 0x28
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005910:	f107 0314 	add.w	r3, r7, #20
 8005914:	2200      	movs	r2, #0
 8005916:	601a      	str	r2, [r3, #0]
 8005918:	605a      	str	r2, [r3, #4]
 800591a:	609a      	str	r2, [r3, #8]
 800591c:	60da      	str	r2, [r3, #12]
 800591e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a19      	ldr	r2, [pc, #100]	; (800598c <HAL_I2C_MspInit+0x84>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d12b      	bne.n	8005982 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800592a:	2300      	movs	r3, #0
 800592c:	613b      	str	r3, [r7, #16]
 800592e:	4b18      	ldr	r3, [pc, #96]	; (8005990 <HAL_I2C_MspInit+0x88>)
 8005930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005932:	4a17      	ldr	r2, [pc, #92]	; (8005990 <HAL_I2C_MspInit+0x88>)
 8005934:	f043 0302 	orr.w	r3, r3, #2
 8005938:	6313      	str	r3, [r2, #48]	; 0x30
 800593a:	4b15      	ldr	r3, [pc, #84]	; (8005990 <HAL_I2C_MspInit+0x88>)
 800593c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	613b      	str	r3, [r7, #16]
 8005944:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005946:	23c0      	movs	r3, #192	; 0xc0
 8005948:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800594a:	2312      	movs	r3, #18
 800594c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800594e:	2300      	movs	r3, #0
 8005950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005952:	2303      	movs	r3, #3
 8005954:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005956:	2304      	movs	r3, #4
 8005958:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800595a:	f107 0314 	add.w	r3, r7, #20
 800595e:	4619      	mov	r1, r3
 8005960:	480c      	ldr	r0, [pc, #48]	; (8005994 <HAL_I2C_MspInit+0x8c>)
 8005962:	f001 ff41 	bl	80077e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005966:	2300      	movs	r3, #0
 8005968:	60fb      	str	r3, [r7, #12]
 800596a:	4b09      	ldr	r3, [pc, #36]	; (8005990 <HAL_I2C_MspInit+0x88>)
 800596c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596e:	4a08      	ldr	r2, [pc, #32]	; (8005990 <HAL_I2C_MspInit+0x88>)
 8005970:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005974:	6413      	str	r3, [r2, #64]	; 0x40
 8005976:	4b06      	ldr	r3, [pc, #24]	; (8005990 <HAL_I2C_MspInit+0x88>)
 8005978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800597e:	60fb      	str	r3, [r7, #12]
 8005980:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005982:	bf00      	nop
 8005984:	3728      	adds	r7, #40	; 0x28
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	40005400 	.word	0x40005400
 8005990:	40023800 	.word	0x40023800
 8005994:	40020400 	.word	0x40020400

08005998 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b08a      	sub	sp, #40	; 0x28
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059a0:	f107 0314 	add.w	r3, r7, #20
 80059a4:	2200      	movs	r2, #0
 80059a6:	601a      	str	r2, [r3, #0]
 80059a8:	605a      	str	r2, [r3, #4]
 80059aa:	609a      	str	r2, [r3, #8]
 80059ac:	60da      	str	r2, [r3, #12]
 80059ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a19      	ldr	r2, [pc, #100]	; (8005a1c <HAL_SPI_MspInit+0x84>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d12c      	bne.n	8005a14 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80059ba:	2300      	movs	r3, #0
 80059bc:	613b      	str	r3, [r7, #16]
 80059be:	4b18      	ldr	r3, [pc, #96]	; (8005a20 <HAL_SPI_MspInit+0x88>)
 80059c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c2:	4a17      	ldr	r2, [pc, #92]	; (8005a20 <HAL_SPI_MspInit+0x88>)
 80059c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059c8:	6413      	str	r3, [r2, #64]	; 0x40
 80059ca:	4b15      	ldr	r3, [pc, #84]	; (8005a20 <HAL_SPI_MspInit+0x88>)
 80059cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059d2:	613b      	str	r3, [r7, #16]
 80059d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80059d6:	2300      	movs	r3, #0
 80059d8:	60fb      	str	r3, [r7, #12]
 80059da:	4b11      	ldr	r3, [pc, #68]	; (8005a20 <HAL_SPI_MspInit+0x88>)
 80059dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059de:	4a10      	ldr	r2, [pc, #64]	; (8005a20 <HAL_SPI_MspInit+0x88>)
 80059e0:	f043 0304 	orr.w	r3, r3, #4
 80059e4:	6313      	str	r3, [r2, #48]	; 0x30
 80059e6:	4b0e      	ldr	r3, [pc, #56]	; (8005a20 <HAL_SPI_MspInit+0x88>)
 80059e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ea:	f003 0304 	and.w	r3, r3, #4
 80059ee:	60fb      	str	r3, [r7, #12]
 80059f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80059f2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80059f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059f8:	2302      	movs	r3, #2
 80059fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059fc:	2300      	movs	r3, #0
 80059fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a00:	2303      	movs	r3, #3
 8005a02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005a04:	2306      	movs	r3, #6
 8005a06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a08:	f107 0314 	add.w	r3, r7, #20
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	4805      	ldr	r0, [pc, #20]	; (8005a24 <HAL_SPI_MspInit+0x8c>)
 8005a10:	f001 feea 	bl	80077e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8005a14:	bf00      	nop
 8005a16:	3728      	adds	r7, #40	; 0x28
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	40003c00 	.word	0x40003c00
 8005a20:	40023800 	.word	0x40023800
 8005a24:	40020800 	.word	0x40020800

08005a28 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a38:	d10d      	bne.n	8005a56 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	60fb      	str	r3, [r7, #12]
 8005a3e:	4b09      	ldr	r3, [pc, #36]	; (8005a64 <HAL_TIM_PWM_MspInit+0x3c>)
 8005a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a42:	4a08      	ldr	r2, [pc, #32]	; (8005a64 <HAL_TIM_PWM_MspInit+0x3c>)
 8005a44:	f043 0301 	orr.w	r3, r3, #1
 8005a48:	6413      	str	r3, [r2, #64]	; 0x40
 8005a4a:	4b06      	ldr	r3, [pc, #24]	; (8005a64 <HAL_TIM_PWM_MspInit+0x3c>)
 8005a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4e:	f003 0301 	and.w	r3, r3, #1
 8005a52:	60fb      	str	r3, [r7, #12]
 8005a54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005a56:	bf00      	nop
 8005a58:	3714      	adds	r7, #20
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	40023800 	.word	0x40023800

08005a68 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b08c      	sub	sp, #48	; 0x30
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a70:	f107 031c 	add.w	r3, r7, #28
 8005a74:	2200      	movs	r2, #0
 8005a76:	601a      	str	r2, [r3, #0]
 8005a78:	605a      	str	r2, [r3, #4]
 8005a7a:	609a      	str	r2, [r3, #8]
 8005a7c:	60da      	str	r2, [r3, #12]
 8005a7e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a32      	ldr	r2, [pc, #200]	; (8005b50 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d12c      	bne.n	8005ae4 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	61bb      	str	r3, [r7, #24]
 8005a8e:	4b31      	ldr	r3, [pc, #196]	; (8005b54 <HAL_TIM_Encoder_MspInit+0xec>)
 8005a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a92:	4a30      	ldr	r2, [pc, #192]	; (8005b54 <HAL_TIM_Encoder_MspInit+0xec>)
 8005a94:	f043 0302 	orr.w	r3, r3, #2
 8005a98:	6413      	str	r3, [r2, #64]	; 0x40
 8005a9a:	4b2e      	ldr	r3, [pc, #184]	; (8005b54 <HAL_TIM_Encoder_MspInit+0xec>)
 8005a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9e:	f003 0302 	and.w	r3, r3, #2
 8005aa2:	61bb      	str	r3, [r7, #24]
 8005aa4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	617b      	str	r3, [r7, #20]
 8005aaa:	4b2a      	ldr	r3, [pc, #168]	; (8005b54 <HAL_TIM_Encoder_MspInit+0xec>)
 8005aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aae:	4a29      	ldr	r2, [pc, #164]	; (8005b54 <HAL_TIM_Encoder_MspInit+0xec>)
 8005ab0:	f043 0302 	orr.w	r3, r3, #2
 8005ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8005ab6:	4b27      	ldr	r3, [pc, #156]	; (8005b54 <HAL_TIM_Encoder_MspInit+0xec>)
 8005ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aba:	f003 0302 	and.w	r3, r3, #2
 8005abe:	617b      	str	r3, [r7, #20]
 8005ac0:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005ac2:	2330      	movs	r3, #48	; 0x30
 8005ac4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ac6:	2302      	movs	r3, #2
 8005ac8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aca:	2300      	movs	r3, #0
 8005acc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005ad2:	2302      	movs	r3, #2
 8005ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ad6:	f107 031c 	add.w	r3, r7, #28
 8005ada:	4619      	mov	r1, r3
 8005adc:	481e      	ldr	r0, [pc, #120]	; (8005b58 <HAL_TIM_Encoder_MspInit+0xf0>)
 8005ade:	f001 fe83 	bl	80077e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8005ae2:	e030      	b.n	8005b46 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a1c      	ldr	r2, [pc, #112]	; (8005b5c <HAL_TIM_Encoder_MspInit+0xf4>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d12b      	bne.n	8005b46 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005aee:	2300      	movs	r3, #0
 8005af0:	613b      	str	r3, [r7, #16]
 8005af2:	4b18      	ldr	r3, [pc, #96]	; (8005b54 <HAL_TIM_Encoder_MspInit+0xec>)
 8005af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005af6:	4a17      	ldr	r2, [pc, #92]	; (8005b54 <HAL_TIM_Encoder_MspInit+0xec>)
 8005af8:	f043 0302 	orr.w	r3, r3, #2
 8005afc:	6453      	str	r3, [r2, #68]	; 0x44
 8005afe:	4b15      	ldr	r3, [pc, #84]	; (8005b54 <HAL_TIM_Encoder_MspInit+0xec>)
 8005b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b02:	f003 0302 	and.w	r3, r3, #2
 8005b06:	613b      	str	r3, [r7, #16]
 8005b08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	60fb      	str	r3, [r7, #12]
 8005b0e:	4b11      	ldr	r3, [pc, #68]	; (8005b54 <HAL_TIM_Encoder_MspInit+0xec>)
 8005b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b12:	4a10      	ldr	r2, [pc, #64]	; (8005b54 <HAL_TIM_Encoder_MspInit+0xec>)
 8005b14:	f043 0304 	orr.w	r3, r3, #4
 8005b18:	6313      	str	r3, [r2, #48]	; 0x30
 8005b1a:	4b0e      	ldr	r3, [pc, #56]	; (8005b54 <HAL_TIM_Encoder_MspInit+0xec>)
 8005b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b1e:	f003 0304 	and.w	r3, r3, #4
 8005b22:	60fb      	str	r3, [r7, #12]
 8005b24:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005b26:	23c0      	movs	r3, #192	; 0xc0
 8005b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b2a:	2302      	movs	r3, #2
 8005b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b32:	2300      	movs	r3, #0
 8005b34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005b36:	2303      	movs	r3, #3
 8005b38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b3a:	f107 031c 	add.w	r3, r7, #28
 8005b3e:	4619      	mov	r1, r3
 8005b40:	4807      	ldr	r0, [pc, #28]	; (8005b60 <HAL_TIM_Encoder_MspInit+0xf8>)
 8005b42:	f001 fe51 	bl	80077e8 <HAL_GPIO_Init>
}
 8005b46:	bf00      	nop
 8005b48:	3730      	adds	r7, #48	; 0x30
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	40000400 	.word	0x40000400
 8005b54:	40023800 	.word	0x40023800
 8005b58:	40020400 	.word	0x40020400
 8005b5c:	40010400 	.word	0x40010400
 8005b60:	40020800 	.word	0x40020800

08005b64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b086      	sub	sp, #24
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a34      	ldr	r2, [pc, #208]	; (8005c44 <HAL_TIM_Base_MspInit+0xe0>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d116      	bne.n	8005ba4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005b76:	2300      	movs	r3, #0
 8005b78:	617b      	str	r3, [r7, #20]
 8005b7a:	4b33      	ldr	r3, [pc, #204]	; (8005c48 <HAL_TIM_Base_MspInit+0xe4>)
 8005b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7e:	4a32      	ldr	r2, [pc, #200]	; (8005c48 <HAL_TIM_Base_MspInit+0xe4>)
 8005b80:	f043 0310 	orr.w	r3, r3, #16
 8005b84:	6413      	str	r3, [r2, #64]	; 0x40
 8005b86:	4b30      	ldr	r3, [pc, #192]	; (8005c48 <HAL_TIM_Base_MspInit+0xe4>)
 8005b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8a:	f003 0310 	and.w	r3, r3, #16
 8005b8e:	617b      	str	r3, [r7, #20]
 8005b90:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8005b92:	2200      	movs	r2, #0
 8005b94:	2100      	movs	r1, #0
 8005b96:	2036      	movs	r0, #54	; 0x36
 8005b98:	f001 fa7f 	bl	800709a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005b9c:	2036      	movs	r0, #54	; 0x36
 8005b9e:	f001 fa98 	bl	80070d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8005ba2:	e04a      	b.n	8005c3a <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM7)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a28      	ldr	r2, [pc, #160]	; (8005c4c <HAL_TIM_Base_MspInit+0xe8>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d116      	bne.n	8005bdc <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005bae:	2300      	movs	r3, #0
 8005bb0:	613b      	str	r3, [r7, #16]
 8005bb2:	4b25      	ldr	r3, [pc, #148]	; (8005c48 <HAL_TIM_Base_MspInit+0xe4>)
 8005bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb6:	4a24      	ldr	r2, [pc, #144]	; (8005c48 <HAL_TIM_Base_MspInit+0xe4>)
 8005bb8:	f043 0320 	orr.w	r3, r3, #32
 8005bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8005bbe:	4b22      	ldr	r3, [pc, #136]	; (8005c48 <HAL_TIM_Base_MspInit+0xe4>)
 8005bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc2:	f003 0320 	and.w	r3, r3, #32
 8005bc6:	613b      	str	r3, [r7, #16]
 8005bc8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005bca:	2200      	movs	r2, #0
 8005bcc:	2100      	movs	r1, #0
 8005bce:	2037      	movs	r0, #55	; 0x37
 8005bd0:	f001 fa63 	bl	800709a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005bd4:	2037      	movs	r0, #55	; 0x37
 8005bd6:	f001 fa7c 	bl	80070d2 <HAL_NVIC_EnableIRQ>
}
 8005bda:	e02e      	b.n	8005c3a <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM10)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a1b      	ldr	r2, [pc, #108]	; (8005c50 <HAL_TIM_Base_MspInit+0xec>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d116      	bne.n	8005c14 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005be6:	2300      	movs	r3, #0
 8005be8:	60fb      	str	r3, [r7, #12]
 8005bea:	4b17      	ldr	r3, [pc, #92]	; (8005c48 <HAL_TIM_Base_MspInit+0xe4>)
 8005bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bee:	4a16      	ldr	r2, [pc, #88]	; (8005c48 <HAL_TIM_Base_MspInit+0xe4>)
 8005bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8005bf6:	4b14      	ldr	r3, [pc, #80]	; (8005c48 <HAL_TIM_Base_MspInit+0xe4>)
 8005bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bfe:	60fb      	str	r3, [r7, #12]
 8005c00:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8005c02:	2200      	movs	r2, #0
 8005c04:	2100      	movs	r1, #0
 8005c06:	2019      	movs	r0, #25
 8005c08:	f001 fa47 	bl	800709a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005c0c:	2019      	movs	r0, #25
 8005c0e:	f001 fa60 	bl	80070d2 <HAL_NVIC_EnableIRQ>
}
 8005c12:	e012      	b.n	8005c3a <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM13)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a0e      	ldr	r2, [pc, #56]	; (8005c54 <HAL_TIM_Base_MspInit+0xf0>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d10d      	bne.n	8005c3a <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8005c1e:	2300      	movs	r3, #0
 8005c20:	60bb      	str	r3, [r7, #8]
 8005c22:	4b09      	ldr	r3, [pc, #36]	; (8005c48 <HAL_TIM_Base_MspInit+0xe4>)
 8005c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c26:	4a08      	ldr	r2, [pc, #32]	; (8005c48 <HAL_TIM_Base_MspInit+0xe4>)
 8005c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8005c2e:	4b06      	ldr	r3, [pc, #24]	; (8005c48 <HAL_TIM_Base_MspInit+0xe4>)
 8005c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c36:	60bb      	str	r3, [r7, #8]
 8005c38:	68bb      	ldr	r3, [r7, #8]
}
 8005c3a:	bf00      	nop
 8005c3c:	3718      	adds	r7, #24
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	40001000 	.word	0x40001000
 8005c48:	40023800 	.word	0x40023800
 8005c4c:	40001400 	.word	0x40001400
 8005c50:	40014400 	.word	0x40014400
 8005c54:	40001c00 	.word	0x40001c00

08005c58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b08a      	sub	sp, #40	; 0x28
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c60:	f107 0314 	add.w	r3, r7, #20
 8005c64:	2200      	movs	r2, #0
 8005c66:	601a      	str	r2, [r3, #0]
 8005c68:	605a      	str	r2, [r3, #4]
 8005c6a:	609a      	str	r2, [r3, #8]
 8005c6c:	60da      	str	r2, [r3, #12]
 8005c6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c78:	d11f      	bne.n	8005cba <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	613b      	str	r3, [r7, #16]
 8005c7e:	4b22      	ldr	r3, [pc, #136]	; (8005d08 <HAL_TIM_MspPostInit+0xb0>)
 8005c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c82:	4a21      	ldr	r2, [pc, #132]	; (8005d08 <HAL_TIM_MspPostInit+0xb0>)
 8005c84:	f043 0302 	orr.w	r3, r3, #2
 8005c88:	6313      	str	r3, [r2, #48]	; 0x30
 8005c8a:	4b1f      	ldr	r3, [pc, #124]	; (8005d08 <HAL_TIM_MspPostInit+0xb0>)
 8005c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c8e:	f003 0302 	and.w	r3, r3, #2
 8005c92:	613b      	str	r3, [r7, #16]
 8005c94:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8005c96:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005c9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c9c:	2302      	movs	r3, #2
 8005c9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005cac:	f107 0314 	add.w	r3, r7, #20
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	4816      	ldr	r0, [pc, #88]	; (8005d0c <HAL_TIM_MspPostInit+0xb4>)
 8005cb4:	f001 fd98 	bl	80077e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8005cb8:	e022      	b.n	8005d00 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM13)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a14      	ldr	r2, [pc, #80]	; (8005d10 <HAL_TIM_MspPostInit+0xb8>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d11d      	bne.n	8005d00 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	60fb      	str	r3, [r7, #12]
 8005cc8:	4b0f      	ldr	r3, [pc, #60]	; (8005d08 <HAL_TIM_MspPostInit+0xb0>)
 8005cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ccc:	4a0e      	ldr	r2, [pc, #56]	; (8005d08 <HAL_TIM_MspPostInit+0xb0>)
 8005cce:	f043 0301 	orr.w	r3, r3, #1
 8005cd2:	6313      	str	r3, [r2, #48]	; 0x30
 8005cd4:	4b0c      	ldr	r3, [pc, #48]	; (8005d08 <HAL_TIM_MspPostInit+0xb0>)
 8005cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd8:	f003 0301 	and.w	r3, r3, #1
 8005cdc:	60fb      	str	r3, [r7, #12]
 8005cde:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005ce0:	2340      	movs	r3, #64	; 0x40
 8005ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ce4:	2302      	movs	r3, #2
 8005ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cec:	2300      	movs	r3, #0
 8005cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8005cf0:	2309      	movs	r3, #9
 8005cf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cf4:	f107 0314 	add.w	r3, r7, #20
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	4806      	ldr	r0, [pc, #24]	; (8005d14 <HAL_TIM_MspPostInit+0xbc>)
 8005cfc:	f001 fd74 	bl	80077e8 <HAL_GPIO_Init>
}
 8005d00:	bf00      	nop
 8005d02:	3728      	adds	r7, #40	; 0x28
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	40023800 	.word	0x40023800
 8005d0c:	40020400 	.word	0x40020400
 8005d10:	40001c00 	.word	0x40001c00
 8005d14:	40020000 	.word	0x40020000

08005d18 <SDTimer_Handler>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;
void SDTimer_Handler(void){
 8005d18:	b480      	push	{r7}
 8005d1a:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 8005d1c:	4b0e      	ldr	r3, [pc, #56]	; (8005d58 <SDTimer_Handler+0x40>)
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d006      	beq.n	8005d34 <SDTimer_Handler+0x1c>
		Timer1--;
 8005d26:	4b0c      	ldr	r3, [pc, #48]	; (8005d58 <SDTimer_Handler+0x40>)
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	b2da      	uxtb	r2, r3
 8005d30:	4b09      	ldr	r3, [pc, #36]	; (8005d58 <SDTimer_Handler+0x40>)
 8005d32:	701a      	strb	r2, [r3, #0]

	if(Timer2 > 0)
 8005d34:	4b09      	ldr	r3, [pc, #36]	; (8005d5c <SDTimer_Handler+0x44>)
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d006      	beq.n	8005d4c <SDTimer_Handler+0x34>
		Timer2--;
 8005d3e:	4b07      	ldr	r3, [pc, #28]	; (8005d5c <SDTimer_Handler+0x44>)
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	3b01      	subs	r3, #1
 8005d46:	b2da      	uxtb	r2, r3
 8005d48:	4b04      	ldr	r3, [pc, #16]	; (8005d5c <SDTimer_Handler+0x44>)
 8005d4a:	701a      	strb	r2, [r3, #0]
}
 8005d4c:	bf00      	nop
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	20003b97 	.word	0x20003b97
 8005d5c:	20003b98 	.word	0x20003b98

08005d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005d60:	b480      	push	{r7}
 8005d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005d64:	e7fe      	b.n	8005d64 <NMI_Handler+0x4>

08005d66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005d66:	b480      	push	{r7}
 8005d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005d6a:	e7fe      	b.n	8005d6a <HardFault_Handler+0x4>

08005d6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005d70:	e7fe      	b.n	8005d70 <MemManage_Handler+0x4>

08005d72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005d72:	b480      	push	{r7}
 8005d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005d76:	e7fe      	b.n	8005d76 <BusFault_Handler+0x4>

08005d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005d7c:	e7fe      	b.n	8005d7c <UsageFault_Handler+0x4>

08005d7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005d7e:	b480      	push	{r7}
 8005d80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005d82:	bf00      	nop
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005d90:	bf00      	nop
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr

08005d9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005d9e:	bf00      	nop
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  FatFsCnt++;
 8005dac:	4b0a      	ldr	r3, [pc, #40]	; (8005dd8 <SysTick_Handler+0x30>)
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	3301      	adds	r3, #1
 8005db4:	b2da      	uxtb	r2, r3
 8005db6:	4b08      	ldr	r3, [pc, #32]	; (8005dd8 <SysTick_Handler+0x30>)
 8005db8:	701a      	strb	r2, [r3, #0]
  if(FatFsCnt >= 10){
 8005dba:	4b07      	ldr	r3, [pc, #28]	; (8005dd8 <SysTick_Handler+0x30>)
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	2b09      	cmp	r3, #9
 8005dc2:	d904      	bls.n	8005dce <SysTick_Handler+0x26>
    FatFsCnt = 0;
 8005dc4:	4b04      	ldr	r3, [pc, #16]	; (8005dd8 <SysTick_Handler+0x30>)
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	701a      	strb	r2, [r3, #0]
    SDTimer_Handler();
 8005dca:	f7ff ffa5 	bl	8005d18 <SDTimer_Handler>
  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005dce:	f000 fa8f 	bl	80062f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005dd2:	bf00      	nop
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	20003b96 	.word	0x20003b96

08005ddc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8005de0:	4802      	ldr	r0, [pc, #8]	; (8005dec <TIM1_UP_TIM10_IRQHandler+0x10>)
 8005de2:	f004 fac7 	bl	800a374 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005de6:	bf00      	nop
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	200036e4 	.word	0x200036e4

08005df0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005df4:	4802      	ldr	r0, [pc, #8]	; (8005e00 <TIM6_DAC_IRQHandler+0x10>)
 8005df6:	f004 fabd 	bl	800a374 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005dfa:	bf00      	nop
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	2000360c 	.word	0x2000360c

08005e04 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005e08:	4802      	ldr	r0, [pc, #8]	; (8005e14 <TIM7_IRQHandler+0x10>)
 8005e0a:	f004 fab3 	bl	800a374 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005e0e:	bf00      	nop
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	20003654 	.word	0x20003654

08005e18 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005e1c:	4802      	ldr	r0, [pc, #8]	; (8005e28 <DMA2_Stream0_IRQHandler+0x10>)
 8005e1e:	f001 fa79 	bl	8007314 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005e22:	bf00      	nop
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	20003470 	.word	0x20003470

08005e2c <getSwitches>:
// 処理概要  	スイッチの読み込み(10msごとに実行)
// 引数     	なし
// 戻り値    	なし
/////////////////////////////////////////////////////////////////////
void getSwitches(void)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	af00      	add	r7, sp, #0
	// タクトスイッチ読み込み
	swValTact = getSWtact();
 8005e30:	f000 f854 	bl	8005edc <getSWtact>
 8005e34:	4603      	mov	r3, r0
 8005e36:	461a      	mov	r2, r3
 8005e38:	4b07      	ldr	r3, [pc, #28]	; (8005e58 <getSwitches+0x2c>)
 8005e3a:	701a      	strb	r2, [r3, #0]
	// ディップスイッチ読み込み
	swValRotary = getSWrotary();
 8005e3c:	f000 f812 	bl	8005e64 <getSWrotary>
 8005e40:	4603      	mov	r3, r0
 8005e42:	461a      	mov	r2, r3
 8005e44:	4b05      	ldr	r3, [pc, #20]	; (8005e5c <getSwitches+0x30>)
 8005e46:	701a      	strb	r2, [r3, #0]
	//メインボード上のタクトスイッチ読み込み
	swValMainTact = getSWMainTact();
 8005e48:	f000 f88a 	bl	8005f60 <getSWMainTact>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	461a      	mov	r2, r3
 8005e50:	4b03      	ldr	r3, [pc, #12]	; (8005e60 <getSwitches+0x34>)
 8005e52:	701a      	strb	r2, [r3, #0]
}
 8005e54:	bf00      	nop
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	20003b99 	.word	0x20003b99
 8005e5c:	20003b9a 	.word	0x20003b9a
 8005e60:	20003b9b 	.word	0x20003b9b

08005e64 <getSWrotary>:
// 処理概要     ディップスイッチ値を16進数で取得
// 引数         なし
// 戻り値       スイッチ値 0～15
/////////////////////////////////////////////////////////////////////
uint8_t getSWrotary(void) 
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
	uint8_t	dpsw[4] = {0};
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	607b      	str	r3, [r7, #4]
	
	if ( DIPSW1 == 1 )	dpsw[0] = 0x1;
 8005e6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005e72:	4819      	ldr	r0, [pc, #100]	; (8005ed8 <getSWrotary+0x74>)
 8005e74:	f001 fe4c 	bl	8007b10 <HAL_GPIO_ReadPin>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d101      	bne.n	8005e82 <getSWrotary+0x1e>
 8005e7e:	2301      	movs	r3, #1
 8005e80:	713b      	strb	r3, [r7, #4]
	if ( DIPSW2 == 1 )	dpsw[1] = 0x2;
 8005e82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005e86:	4814      	ldr	r0, [pc, #80]	; (8005ed8 <getSWrotary+0x74>)
 8005e88:	f001 fe42 	bl	8007b10 <HAL_GPIO_ReadPin>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d101      	bne.n	8005e96 <getSWrotary+0x32>
 8005e92:	2302      	movs	r3, #2
 8005e94:	717b      	strb	r3, [r7, #5]
	if ( DIPSW3 == 1 )	dpsw[2] = 0x4;
 8005e96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005e9a:	480f      	ldr	r0, [pc, #60]	; (8005ed8 <getSWrotary+0x74>)
 8005e9c:	f001 fe38 	bl	8007b10 <HAL_GPIO_ReadPin>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d101      	bne.n	8005eaa <getSWrotary+0x46>
 8005ea6:	2304      	movs	r3, #4
 8005ea8:	71bb      	strb	r3, [r7, #6]
	if ( DIPSW4 == 1 )	dpsw[3] = 0x8;
 8005eaa:	2101      	movs	r1, #1
 8005eac:	480a      	ldr	r0, [pc, #40]	; (8005ed8 <getSWrotary+0x74>)
 8005eae:	f001 fe2f 	bl	8007b10 <HAL_GPIO_ReadPin>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d101      	bne.n	8005ebc <getSWrotary+0x58>
 8005eb8:	2308      	movs	r3, #8
 8005eba:	71fb      	strb	r3, [r7, #7]

	return ( dpsw[0] + dpsw[1] + dpsw[2] + dpsw[3] );
 8005ebc:	793a      	ldrb	r2, [r7, #4]
 8005ebe:	797b      	ldrb	r3, [r7, #5]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	b2da      	uxtb	r2, r3
 8005ec4:	79bb      	ldrb	r3, [r7, #6]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	b2da      	uxtb	r2, r3
 8005eca:	79fb      	ldrb	r3, [r7, #7]
 8005ecc:	4413      	add	r3, r2
 8005ece:	b2db      	uxtb	r3, r3
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3708      	adds	r7, #8
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	40020400 	.word	0x40020400

08005edc <getSWtact>:
// 処理概要     タクトスイッチ値を16進数で取得
// 引数         なし
// 戻り値       スイッチ値 0～7
///////////////////////////////////////////////////////////////////////////
uint8_t getSWtact(void) 
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
	uint8_t	ret = SW_NONE;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	71fb      	strb	r3, [r7, #7]
	
	if ( TACTSW1 == 0 )	ret = SW_UP;
 8005ee6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005eea:	481a      	ldr	r0, [pc, #104]	; (8005f54 <getSWtact+0x78>)
 8005eec:	f001 fe10 	bl	8007b10 <HAL_GPIO_ReadPin>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d101      	bne.n	8005efa <getSWtact+0x1e>
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	71fb      	strb	r3, [r7, #7]
	if ( TACTSW2 == 0 )	ret = SW_LEFT;
 8005efa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005efe:	4816      	ldr	r0, [pc, #88]	; (8005f58 <getSWtact+0x7c>)
 8005f00:	f001 fe06 	bl	8007b10 <HAL_GPIO_ReadPin>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d101      	bne.n	8005f0e <getSWtact+0x32>
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	71fb      	strb	r3, [r7, #7]
	if ( TACTSW3 == 0 )	ret = SW_RIGHT;
 8005f0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005f12:	4811      	ldr	r0, [pc, #68]	; (8005f58 <getSWtact+0x7c>)
 8005f14:	f001 fdfc 	bl	8007b10 <HAL_GPIO_ReadPin>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d101      	bne.n	8005f22 <getSWtact+0x46>
 8005f1e:	2304      	movs	r3, #4
 8005f20:	71fb      	strb	r3, [r7, #7]
	if ( TACTSW4 == 0 )	ret = SW_DOWN;
 8005f22:	2102      	movs	r1, #2
 8005f24:	480d      	ldr	r0, [pc, #52]	; (8005f5c <getSWtact+0x80>)
 8005f26:	f001 fdf3 	bl	8007b10 <HAL_GPIO_ReadPin>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d101      	bne.n	8005f34 <getSWtact+0x58>
 8005f30:	2305      	movs	r3, #5
 8005f32:	71fb      	strb	r3, [r7, #7]
	if ( TACTSW5 == 0 )	ret = SW_PUSH;
 8005f34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005f38:	4806      	ldr	r0, [pc, #24]	; (8005f54 <getSWtact+0x78>)
 8005f3a:	f001 fde9 	bl	8007b10 <HAL_GPIO_ReadPin>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d101      	bne.n	8005f48 <getSWtact+0x6c>
 8005f44:	2302      	movs	r3, #2
 8005f46:	71fb      	strb	r3, [r7, #7]

	return ret;
 8005f48:	79fb      	ldrb	r3, [r7, #7]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3708      	adds	r7, #8
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	40020000 	.word	0x40020000
 8005f58:	40020800 	.word	0x40020800
 8005f5c:	40020400 	.word	0x40020400

08005f60 <getSWMainTact>:
// 処理概要     タクトスイッチ値を16進数で取得
// 引数         なし
// 戻り値       スイッチ値 0～7
///////////////////////////////////////////////////////////////////////////
uint8_t getSWMainTact(void) 
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
	uint8_t	ret = SW_NONE;
 8005f66:	2300      	movs	r3, #0
 8005f68:	71fb      	strb	r3, [r7, #7]
	
	if ( ButtonR == 0 )	ret = SW_TACT_R;
 8005f6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005f6e:	480b      	ldr	r0, [pc, #44]	; (8005f9c <getSWMainTact+0x3c>)
 8005f70:	f001 fdce 	bl	8007b10 <HAL_GPIO_ReadPin>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d101      	bne.n	8005f7e <getSWMainTact+0x1e>
 8005f7a:	2306      	movs	r3, #6
 8005f7c:	71fb      	strb	r3, [r7, #7]
	if ( ButtonL == 0 )	ret = SW_TACT_L;
 8005f7e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005f82:	4806      	ldr	r0, [pc, #24]	; (8005f9c <getSWMainTact+0x3c>)
 8005f84:	f001 fdc4 	bl	8007b10 <HAL_GPIO_ReadPin>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d101      	bne.n	8005f92 <getSWMainTact+0x32>
 8005f8e:	2307      	movs	r3, #7
 8005f90:	71fb      	strb	r3, [r7, #7]

	return ret;
 8005f92:	79fb      	ldrb	r3, [r7, #7]
 8005f94:	4618      	mov	r0, r3
 8005f96:	3708      	adds	r7, #8
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	40020000 	.word	0x40020000

08005fa0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	af00      	add	r7, sp, #0
  return 1;
 8005fa4:	2301      	movs	r3, #1
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <_kill>:

int _kill(int pid, int sig)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b082      	sub	sp, #8
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005fba:	f00a fa0f 	bl	80103dc <__errno>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2216      	movs	r2, #22
 8005fc2:	601a      	str	r2, [r3, #0]
  return -1;
 8005fc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3708      	adds	r7, #8
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <_exit>:

void _exit (int status)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005fd8:	f04f 31ff 	mov.w	r1, #4294967295
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f7ff ffe7 	bl	8005fb0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005fe2:	e7fe      	b.n	8005fe2 <_exit+0x12>

08005fe4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b086      	sub	sp, #24
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	617b      	str	r3, [r7, #20]
 8005ff4:	e00a      	b.n	800600c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005ff6:	f3af 8000 	nop.w
 8005ffa:	4601      	mov	r1, r0
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	1c5a      	adds	r2, r3, #1
 8006000:	60ba      	str	r2, [r7, #8]
 8006002:	b2ca      	uxtb	r2, r1
 8006004:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	3301      	adds	r3, #1
 800600a:	617b      	str	r3, [r7, #20]
 800600c:	697a      	ldr	r2, [r7, #20]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	429a      	cmp	r2, r3
 8006012:	dbf0      	blt.n	8005ff6 <_read+0x12>
  }

  return len;
 8006014:	687b      	ldr	r3, [r7, #4]
}
 8006016:	4618      	mov	r0, r3
 8006018:	3718      	adds	r7, #24
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}

0800601e <_close>:
  }
  return len;
}

int _close(int file)
{
 800601e:	b480      	push	{r7}
 8006020:	b083      	sub	sp, #12
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006026:	f04f 33ff 	mov.w	r3, #4294967295
}
 800602a:	4618      	mov	r0, r3
 800602c:	370c      	adds	r7, #12
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr

08006036 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006036:	b480      	push	{r7}
 8006038:	b083      	sub	sp, #12
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
 800603e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006046:	605a      	str	r2, [r3, #4]
  return 0;
 8006048:	2300      	movs	r3, #0
}
 800604a:	4618      	mov	r0, r3
 800604c:	370c      	adds	r7, #12
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr

08006056 <_isatty>:

int _isatty(int file)
{
 8006056:	b480      	push	{r7}
 8006058:	b083      	sub	sp, #12
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800605e:	2301      	movs	r3, #1
}
 8006060:	4618      	mov	r0, r3
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800606c:	b480      	push	{r7}
 800606e:	b085      	sub	sp, #20
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3714      	adds	r7, #20
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
	...

08006088 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b086      	sub	sp, #24
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006090:	4a14      	ldr	r2, [pc, #80]	; (80060e4 <_sbrk+0x5c>)
 8006092:	4b15      	ldr	r3, [pc, #84]	; (80060e8 <_sbrk+0x60>)
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800609c:	4b13      	ldr	r3, [pc, #76]	; (80060ec <_sbrk+0x64>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d102      	bne.n	80060aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80060a4:	4b11      	ldr	r3, [pc, #68]	; (80060ec <_sbrk+0x64>)
 80060a6:	4a12      	ldr	r2, [pc, #72]	; (80060f0 <_sbrk+0x68>)
 80060a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80060aa:	4b10      	ldr	r3, [pc, #64]	; (80060ec <_sbrk+0x64>)
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4413      	add	r3, r2
 80060b2:	693a      	ldr	r2, [r7, #16]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d207      	bcs.n	80060c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80060b8:	f00a f990 	bl	80103dc <__errno>
 80060bc:	4603      	mov	r3, r0
 80060be:	220c      	movs	r2, #12
 80060c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80060c2:	f04f 33ff 	mov.w	r3, #4294967295
 80060c6:	e009      	b.n	80060dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80060c8:	4b08      	ldr	r3, [pc, #32]	; (80060ec <_sbrk+0x64>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80060ce:	4b07      	ldr	r3, [pc, #28]	; (80060ec <_sbrk+0x64>)
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4413      	add	r3, r2
 80060d6:	4a05      	ldr	r2, [pc, #20]	; (80060ec <_sbrk+0x64>)
 80060d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80060da:	68fb      	ldr	r3, [r7, #12]
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3718      	adds	r7, #24
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	20020000 	.word	0x20020000
 80060e8:	00000400 	.word	0x00000400
 80060ec:	20003b9c 	.word	0x20003b9c
 80060f0:	20003f30 	.word	0x20003f30

080060f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80060f4:	b480      	push	{r7}
 80060f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80060f8:	4b06      	ldr	r3, [pc, #24]	; (8006114 <SystemInit+0x20>)
 80060fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060fe:	4a05      	ldr	r2, [pc, #20]	; (8006114 <SystemInit+0x20>)
 8006100:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006104:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006108:	bf00      	nop
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	e000ed00 	.word	0xe000ed00

08006118 <Interrupt1ms>:
// モジュール名 Interrupt1ms
// 処理概要     タイマー割り込み(1ms)
// 引数         なし
// 戻り値       なし
/////////////////////////////////////////////////////////////////////
void Interrupt1ms(void) {
 8006118:	b580      	push	{r7, lr}
 800611a:	af00      	add	r7, sp, #0
    // Interrupt 1ms
    cntRun++;
 800611c:	4b25      	ldr	r3, [pc, #148]	; (80061b4 <Interrupt1ms+0x9c>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	3301      	adds	r3, #1
 8006122:	4a24      	ldr	r2, [pc, #144]	; (80061b4 <Interrupt1ms+0x9c>)
 8006124:	6013      	str	r3, [r2, #0]
    cnt10++;
 8006126:	4b24      	ldr	r3, [pc, #144]	; (80061b8 <Interrupt1ms+0xa0>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	3301      	adds	r3, #1
 800612c:	4a22      	ldr	r2, [pc, #136]	; (80061b8 <Interrupt1ms+0xa0>)
 800612e:	6013      	str	r3, [r2, #0]

    // Encoder
    getEncoder();
 8006130:	f7fb ffa4 	bl	800207c <getEncoder>

    // PID制御処理
    motorControlTrace();
 8006134:	f7fb f8f0 	bl	8001318 <motorControlTrace>
    motorControlSpeed();
 8006138:	f7fb fa62 	bl	8001600 <motorControlSpeed>

    // 走行前に処理
    if (patternTrace < 10 || patternTrace > 100) {
 800613c:	4b1f      	ldr	r3, [pc, #124]	; (80061bc <Interrupt1ms+0xa4>)
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	2b09      	cmp	r3, #9
 8006142:	d903      	bls.n	800614c <Interrupt1ms+0x34>
 8006144:	4b1d      	ldr	r3, [pc, #116]	; (80061bc <Interrupt1ms+0xa4>)
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	2b64      	cmp	r3, #100	; 0x64
 800614a:	d91f      	bls.n	800618c <Interrupt1ms+0x74>
        getSwitches();  // スイッチの入力を取得
 800614c:	f7ff fe6e 	bl	8005e2c <getSwitches>
        countDown();
 8006150:	f7fb ff7c 	bl	800204c <countDown>
        cntSetup1++;
 8006154:	4b1a      	ldr	r3, [pc, #104]	; (80061c0 <Interrupt1ms+0xa8>)
 8006156:	881b      	ldrh	r3, [r3, #0]
 8006158:	3301      	adds	r3, #1
 800615a:	b29a      	uxth	r2, r3
 800615c:	4b18      	ldr	r3, [pc, #96]	; (80061c0 <Interrupt1ms+0xa8>)
 800615e:	801a      	strh	r2, [r3, #0]
        cntSetup2++;
 8006160:	4b18      	ldr	r3, [pc, #96]	; (80061c4 <Interrupt1ms+0xac>)
 8006162:	881b      	ldrh	r3, [r3, #0]
 8006164:	3301      	adds	r3, #1
 8006166:	b29a      	uxth	r2, r3
 8006168:	4b16      	ldr	r3, [pc, #88]	; (80061c4 <Interrupt1ms+0xac>)
 800616a:	801a      	strh	r2, [r3, #0]
        cntSwitchUD++;
 800616c:	4b16      	ldr	r3, [pc, #88]	; (80061c8 <Interrupt1ms+0xb0>)
 800616e:	881b      	ldrh	r3, [r3, #0]
 8006170:	3301      	adds	r3, #1
 8006172:	b29a      	uxth	r2, r3
 8006174:	4b14      	ldr	r3, [pc, #80]	; (80061c8 <Interrupt1ms+0xb0>)
 8006176:	801a      	strh	r2, [r3, #0]
        cntSwitchLR++;
 8006178:	4b14      	ldr	r3, [pc, #80]	; (80061cc <Interrupt1ms+0xb4>)
 800617a:	881b      	ldrh	r3, [r3, #0]
 800617c:	3301      	adds	r3, #1
 800617e:	b29a      	uxth	r2, r3
 8006180:	4b12      	ldr	r3, [pc, #72]	; (80061cc <Interrupt1ms+0xb4>)
 8006182:	801a      	strh	r2, [r3, #0]

        motorControlYawRate();
 8006184:	f7fb fad8 	bl	8001738 <motorControlYawRate>
        motorControlYaw();
 8006188:	f7fb fb86 	bl	8001898 <motorControlYaw>
    }

    if(cnt10 >= 10) {
 800618c:	4b0a      	ldr	r3, [pc, #40]	; (80061b8 <Interrupt1ms+0xa0>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2b09      	cmp	r3, #9
 8006192:	dd0c      	ble.n	80061ae <Interrupt1ms+0x96>
        getADC2();
 8006194:	f7fb fdf2 	bl	8001d7c <getADC2>
        
        if(initIMU) {
 8006198:	4b0d      	ldr	r3, [pc, #52]	; (80061d0 <Interrupt1ms+0xb8>)
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d003      	beq.n	80061a8 <Interrupt1ms+0x90>
            BMI088getGyro();
 80061a0:	f7fa fff6 	bl	8001190 <BMI088getGyro>
            calcDegrees();
 80061a4:	f7fb f854 	bl	8001250 <calcDegrees>
        }
        cnt10 = 0;
 80061a8:	4b03      	ldr	r3, [pc, #12]	; (80061b8 <Interrupt1ms+0xa0>)
 80061aa:	2200      	movs	r2, #0
 80061ac:	601a      	str	r2, [r3, #0]
    }
    
}
 80061ae:	bf00      	nop
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	20003344 	.word	0x20003344
 80061b8:	20003ba0 	.word	0x20003ba0
 80061bc:	20003328 	.word	0x20003328
 80061c0:	20003778 	.word	0x20003778
 80061c4:	2000377a 	.word	0x2000377a
 80061c8:	2000377c 	.word	0x2000377c
 80061cc:	2000377e 	.word	0x2000377e
 80061d0:	2000332b 	.word	0x2000332b

080061d4 <Interrupt100us>:
// モジュール名 Interrupt100us
// 処理概要     タイマー割り込み(0.1ms)
// 引数         なし
// 戻り値       なし
/////////////////////////////////////////////////////////////////////
void Interrupt100us(void) {
 80061d4:	b580      	push	{r7, lr}
 80061d6:	af00      	add	r7, sp, #0
    // Interrupt 100us
    if (modeLOG) writeLogPut();
 80061d8:	4b03      	ldr	r3, [pc, #12]	; (80061e8 <Interrupt100us+0x14>)
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d001      	beq.n	80061e4 <Interrupt100us+0x10>
 80061e0:	f7fb fcc6 	bl	8001b70 <writeLogPut>
}
 80061e4:	bf00      	nop
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	20003329 	.word	0x20003329

080061ec <Interrupt300ns>:
// モジュール名 Interrupt300ns
// 処理概要     タイマー割り込み(300ns)
// 引数         なし
// 戻り値       なし
/////////////////////////////////////////////////////////////////////
void Interrupt300ns(void) {
 80061ec:	b580      	push	{r7, lr}
 80061ee:	af00      	add	r7, sp, #0
    // Interrupt 300ns
    sendColorData();
 80061f0:	f7fb fd2e 	bl	8001c50 <sendColorData>
}
 80061f4:	bf00      	nop
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80061f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006230 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80061fc:	480d      	ldr	r0, [pc, #52]	; (8006234 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80061fe:	490e      	ldr	r1, [pc, #56]	; (8006238 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006200:	4a0e      	ldr	r2, [pc, #56]	; (800623c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006202:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006204:	e002      	b.n	800620c <LoopCopyDataInit>

08006206 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006206:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006208:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800620a:	3304      	adds	r3, #4

0800620c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800620c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800620e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006210:	d3f9      	bcc.n	8006206 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006212:	4a0b      	ldr	r2, [pc, #44]	; (8006240 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006214:	4c0b      	ldr	r4, [pc, #44]	; (8006244 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006216:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006218:	e001      	b.n	800621e <LoopFillZerobss>

0800621a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800621a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800621c:	3204      	adds	r2, #4

0800621e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800621e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006220:	d3fb      	bcc.n	800621a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006222:	f7ff ff67 	bl	80060f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006226:	f00a f8df 	bl	80103e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800622a:	f7fc fd78 	bl	8002d1e <main>
  bx  lr    
 800622e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006230:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006234:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006238:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 800623c:	08014cb4 	.word	0x08014cb4
  ldr r2, =_sbss
 8006240:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8006244:	20003f30 	.word	0x20003f30

08006248 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006248:	e7fe      	b.n	8006248 <ADC_IRQHandler>
	...

0800624c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006250:	4b0e      	ldr	r3, [pc, #56]	; (800628c <HAL_Init+0x40>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a0d      	ldr	r2, [pc, #52]	; (800628c <HAL_Init+0x40>)
 8006256:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800625a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800625c:	4b0b      	ldr	r3, [pc, #44]	; (800628c <HAL_Init+0x40>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a0a      	ldr	r2, [pc, #40]	; (800628c <HAL_Init+0x40>)
 8006262:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006266:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006268:	4b08      	ldr	r3, [pc, #32]	; (800628c <HAL_Init+0x40>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a07      	ldr	r2, [pc, #28]	; (800628c <HAL_Init+0x40>)
 800626e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006272:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006274:	2003      	movs	r0, #3
 8006276:	f000 ff05 	bl	8007084 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800627a:	200f      	movs	r0, #15
 800627c:	f000 f808 	bl	8006290 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006280:	f7ff fa56 	bl	8005730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	40023c00 	.word	0x40023c00

08006290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006298:	4b12      	ldr	r3, [pc, #72]	; (80062e4 <HAL_InitTick+0x54>)
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	4b12      	ldr	r3, [pc, #72]	; (80062e8 <HAL_InitTick+0x58>)
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	4619      	mov	r1, r3
 80062a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80062a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80062aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ae:	4618      	mov	r0, r3
 80062b0:	f000 ff1d 	bl	80070ee <HAL_SYSTICK_Config>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d001      	beq.n	80062be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e00e      	b.n	80062dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2b0f      	cmp	r3, #15
 80062c2:	d80a      	bhi.n	80062da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80062c4:	2200      	movs	r2, #0
 80062c6:	6879      	ldr	r1, [r7, #4]
 80062c8:	f04f 30ff 	mov.w	r0, #4294967295
 80062cc:	f000 fee5 	bl	800709a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80062d0:	4a06      	ldr	r2, [pc, #24]	; (80062ec <HAL_InitTick+0x5c>)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80062d6:	2300      	movs	r3, #0
 80062d8:	e000      	b.n	80062dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80062da:	2301      	movs	r3, #1
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3708      	adds	r7, #8
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	20000058 	.word	0x20000058
 80062e8:	20000060 	.word	0x20000060
 80062ec:	2000005c 	.word	0x2000005c

080062f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80062f0:	b480      	push	{r7}
 80062f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80062f4:	4b06      	ldr	r3, [pc, #24]	; (8006310 <HAL_IncTick+0x20>)
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	461a      	mov	r2, r3
 80062fa:	4b06      	ldr	r3, [pc, #24]	; (8006314 <HAL_IncTick+0x24>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4413      	add	r3, r2
 8006300:	4a04      	ldr	r2, [pc, #16]	; (8006314 <HAL_IncTick+0x24>)
 8006302:	6013      	str	r3, [r2, #0]
}
 8006304:	bf00      	nop
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop
 8006310:	20000060 	.word	0x20000060
 8006314:	20003ba4 	.word	0x20003ba4

08006318 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006318:	b480      	push	{r7}
 800631a:	af00      	add	r7, sp, #0
  return uwTick;
 800631c:	4b03      	ldr	r3, [pc, #12]	; (800632c <HAL_GetTick+0x14>)
 800631e:	681b      	ldr	r3, [r3, #0]
}
 8006320:	4618      	mov	r0, r3
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	20003ba4 	.word	0x20003ba4

08006330 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006338:	f7ff ffee 	bl	8006318 <HAL_GetTick>
 800633c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006348:	d005      	beq.n	8006356 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800634a:	4b0a      	ldr	r3, [pc, #40]	; (8006374 <HAL_Delay+0x44>)
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	461a      	mov	r2, r3
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	4413      	add	r3, r2
 8006354:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006356:	bf00      	nop
 8006358:	f7ff ffde 	bl	8006318 <HAL_GetTick>
 800635c:	4602      	mov	r2, r0
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	429a      	cmp	r2, r3
 8006366:	d8f7      	bhi.n	8006358 <HAL_Delay+0x28>
  {
  }
}
 8006368:	bf00      	nop
 800636a:	bf00      	nop
 800636c:	3710      	adds	r7, #16
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	20000060 	.word	0x20000060

08006378 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006380:	2300      	movs	r3, #0
 8006382:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d101      	bne.n	800638e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e033      	b.n	80063f6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006392:	2b00      	cmp	r3, #0
 8006394:	d109      	bne.n	80063aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f7ff f9f2 	bl	8005780 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ae:	f003 0310 	and.w	r3, r3, #16
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d118      	bne.n	80063e8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80063be:	f023 0302 	bic.w	r3, r3, #2
 80063c2:	f043 0202 	orr.w	r2, r3, #2
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 fc0c 	bl	8006be8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063da:	f023 0303 	bic.w	r3, r3, #3
 80063de:	f043 0201 	orr.w	r2, r3, #1
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	641a      	str	r2, [r3, #64]	; 0x40
 80063e6:	e001      	b.n	80063ec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80063f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3710      	adds	r7, #16
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
	...

08006400 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006400:	b480      	push	{r7}
 8006402:	b085      	sub	sp, #20
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8006408:	2300      	movs	r3, #0
 800640a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006412:	2b01      	cmp	r3, #1
 8006414:	d101      	bne.n	800641a <HAL_ADC_Start+0x1a>
 8006416:	2302      	movs	r3, #2
 8006418:	e0b2      	b.n	8006580 <HAL_ADC_Start+0x180>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2201      	movs	r2, #1
 800641e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	f003 0301 	and.w	r3, r3, #1
 800642c:	2b01      	cmp	r3, #1
 800642e:	d018      	beq.n	8006462 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	689a      	ldr	r2, [r3, #8]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f042 0201 	orr.w	r2, r2, #1
 800643e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006440:	4b52      	ldr	r3, [pc, #328]	; (800658c <HAL_ADC_Start+0x18c>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a52      	ldr	r2, [pc, #328]	; (8006590 <HAL_ADC_Start+0x190>)
 8006446:	fba2 2303 	umull	r2, r3, r2, r3
 800644a:	0c9a      	lsrs	r2, r3, #18
 800644c:	4613      	mov	r3, r2
 800644e:	005b      	lsls	r3, r3, #1
 8006450:	4413      	add	r3, r2
 8006452:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006454:	e002      	b.n	800645c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	3b01      	subs	r3, #1
 800645a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1f9      	bne.n	8006456 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	f003 0301 	and.w	r3, r3, #1
 800646c:	2b01      	cmp	r3, #1
 800646e:	d17a      	bne.n	8006566 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006474:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006478:	f023 0301 	bic.w	r3, r3, #1
 800647c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800648e:	2b00      	cmp	r3, #0
 8006490:	d007      	beq.n	80064a2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006496:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800649a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064ae:	d106      	bne.n	80064be <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064b4:	f023 0206 	bic.w	r2, r3, #6
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	645a      	str	r2, [r3, #68]	; 0x44
 80064bc:	e002      	b.n	80064c4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80064cc:	4b31      	ldr	r3, [pc, #196]	; (8006594 <HAL_ADC_Start+0x194>)
 80064ce:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80064d8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	f003 031f 	and.w	r3, r3, #31
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d12a      	bne.n	800653c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a2b      	ldr	r2, [pc, #172]	; (8006598 <HAL_ADC_Start+0x198>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d015      	beq.n	800651c <HAL_ADC_Start+0x11c>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a29      	ldr	r2, [pc, #164]	; (800659c <HAL_ADC_Start+0x19c>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d105      	bne.n	8006506 <HAL_ADC_Start+0x106>
 80064fa:	4b26      	ldr	r3, [pc, #152]	; (8006594 <HAL_ADC_Start+0x194>)
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	f003 031f 	and.w	r3, r3, #31
 8006502:	2b00      	cmp	r3, #0
 8006504:	d00a      	beq.n	800651c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a25      	ldr	r2, [pc, #148]	; (80065a0 <HAL_ADC_Start+0x1a0>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d136      	bne.n	800657e <HAL_ADC_Start+0x17e>
 8006510:	4b20      	ldr	r3, [pc, #128]	; (8006594 <HAL_ADC_Start+0x194>)
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	f003 0310 	and.w	r3, r3, #16
 8006518:	2b00      	cmp	r3, #0
 800651a:	d130      	bne.n	800657e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006526:	2b00      	cmp	r3, #0
 8006528:	d129      	bne.n	800657e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	689a      	ldr	r2, [r3, #8]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006538:	609a      	str	r2, [r3, #8]
 800653a:	e020      	b.n	800657e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a15      	ldr	r2, [pc, #84]	; (8006598 <HAL_ADC_Start+0x198>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d11b      	bne.n	800657e <HAL_ADC_Start+0x17e>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d114      	bne.n	800657e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	689a      	ldr	r2, [r3, #8]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006562:	609a      	str	r2, [r3, #8]
 8006564:	e00b      	b.n	800657e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656a:	f043 0210 	orr.w	r2, r3, #16
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006576:	f043 0201 	orr.w	r2, r3, #1
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800657e:	2300      	movs	r3, #0
}
 8006580:	4618      	mov	r0, r3
 8006582:	3714      	adds	r7, #20
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr
 800658c:	20000058 	.word	0x20000058
 8006590:	431bde83 	.word	0x431bde83
 8006594:	40012300 	.word	0x40012300
 8006598:	40012000 	.word	0x40012000
 800659c:	40012100 	.word	0x40012100
 80065a0:	40012200 	.word	0x40012200

080065a4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d101      	bne.n	80065ba <HAL_ADC_Stop+0x16>
 80065b6:	2302      	movs	r3, #2
 80065b8:	e021      	b.n	80065fe <HAL_ADC_Stop+0x5a>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2201      	movs	r2, #1
 80065be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	689a      	ldr	r2, [r3, #8]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f022 0201 	bic.w	r2, r2, #1
 80065d0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	f003 0301 	and.w	r3, r3, #1
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d109      	bne.n	80065f4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80065e8:	f023 0301 	bic.w	r3, r3, #1
 80065ec:	f043 0201 	orr.w	r2, r3, #1
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	370c      	adds	r7, #12
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr

0800660a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800660a:	b580      	push	{r7, lr}
 800660c:	b084      	sub	sp, #16
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
 8006612:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006614:	2300      	movs	r3, #0
 8006616:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006622:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006626:	d113      	bne.n	8006650 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006632:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006636:	d10b      	bne.n	8006650 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663c:	f043 0220 	orr.w	r2, r3, #32
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	e063      	b.n	8006718 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8006650:	f7ff fe62 	bl	8006318 <HAL_GetTick>
 8006654:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006656:	e021      	b.n	800669c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800665e:	d01d      	beq.n	800669c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d007      	beq.n	8006676 <HAL_ADC_PollForConversion+0x6c>
 8006666:	f7ff fe57 	bl	8006318 <HAL_GetTick>
 800666a:	4602      	mov	r2, r0
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	1ad3      	subs	r3, r2, r3
 8006670:	683a      	ldr	r2, [r7, #0]
 8006672:	429a      	cmp	r2, r3
 8006674:	d212      	bcs.n	800669c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 0302 	and.w	r3, r3, #2
 8006680:	2b02      	cmp	r3, #2
 8006682:	d00b      	beq.n	800669c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006688:	f043 0204 	orr.w	r2, r3, #4
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	e03d      	b.n	8006718 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 0302 	and.w	r3, r3, #2
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d1d6      	bne.n	8006658 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f06f 0212 	mvn.w	r2, #18
 80066b2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d123      	bne.n	8006716 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d11f      	bne.n	8006716 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066dc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d006      	beq.n	80066f2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d111      	bne.n	8006716 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006702:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d105      	bne.n	8006716 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670e:	f043 0201 	orr.w	r2, r3, #1
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	3710      	adds	r7, #16
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b086      	sub	sp, #24
 8006724:	af00      	add	r7, sp, #0
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800672c:	2300      	movs	r3, #0
 800672e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006736:	2b01      	cmp	r3, #1
 8006738:	d101      	bne.n	800673e <HAL_ADC_Start_DMA+0x1e>
 800673a:	2302      	movs	r3, #2
 800673c:	e0e9      	b.n	8006912 <HAL_ADC_Start_DMA+0x1f2>
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2201      	movs	r2, #1
 8006742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	f003 0301 	and.w	r3, r3, #1
 8006750:	2b01      	cmp	r3, #1
 8006752:	d018      	beq.n	8006786 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	689a      	ldr	r2, [r3, #8]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f042 0201 	orr.w	r2, r2, #1
 8006762:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006764:	4b6d      	ldr	r3, [pc, #436]	; (800691c <HAL_ADC_Start_DMA+0x1fc>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a6d      	ldr	r2, [pc, #436]	; (8006920 <HAL_ADC_Start_DMA+0x200>)
 800676a:	fba2 2303 	umull	r2, r3, r2, r3
 800676e:	0c9a      	lsrs	r2, r3, #18
 8006770:	4613      	mov	r3, r2
 8006772:	005b      	lsls	r3, r3, #1
 8006774:	4413      	add	r3, r2
 8006776:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006778:	e002      	b.n	8006780 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	3b01      	subs	r3, #1
 800677e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d1f9      	bne.n	800677a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006790:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006794:	d107      	bne.n	80067a6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	689a      	ldr	r2, [r3, #8]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067a4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	f003 0301 	and.w	r3, r3, #1
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	f040 80a1 	bne.w	80068f8 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80067be:	f023 0301 	bic.w	r3, r3, #1
 80067c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d007      	beq.n	80067e8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80067e0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067f4:	d106      	bne.n	8006804 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067fa:	f023 0206 	bic.w	r2, r3, #6
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	645a      	str	r2, [r3, #68]	; 0x44
 8006802:	e002      	b.n	800680a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2200      	movs	r2, #0
 8006808:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006812:	4b44      	ldr	r3, [pc, #272]	; (8006924 <HAL_ADC_Start_DMA+0x204>)
 8006814:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800681a:	4a43      	ldr	r2, [pc, #268]	; (8006928 <HAL_ADC_Start_DMA+0x208>)
 800681c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006822:	4a42      	ldr	r2, [pc, #264]	; (800692c <HAL_ADC_Start_DMA+0x20c>)
 8006824:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682a:	4a41      	ldr	r2, [pc, #260]	; (8006930 <HAL_ADC_Start_DMA+0x210>)
 800682c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006836:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	685a      	ldr	r2, [r3, #4]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006846:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	689a      	ldr	r2, [r3, #8]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006856:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	334c      	adds	r3, #76	; 0x4c
 8006862:	4619      	mov	r1, r3
 8006864:	68ba      	ldr	r2, [r7, #8]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f000 fcfc 	bl	8007264 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	f003 031f 	and.w	r3, r3, #31
 8006874:	2b00      	cmp	r3, #0
 8006876:	d12a      	bne.n	80068ce <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a2d      	ldr	r2, [pc, #180]	; (8006934 <HAL_ADC_Start_DMA+0x214>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d015      	beq.n	80068ae <HAL_ADC_Start_DMA+0x18e>
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a2c      	ldr	r2, [pc, #176]	; (8006938 <HAL_ADC_Start_DMA+0x218>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d105      	bne.n	8006898 <HAL_ADC_Start_DMA+0x178>
 800688c:	4b25      	ldr	r3, [pc, #148]	; (8006924 <HAL_ADC_Start_DMA+0x204>)
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	f003 031f 	and.w	r3, r3, #31
 8006894:	2b00      	cmp	r3, #0
 8006896:	d00a      	beq.n	80068ae <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a27      	ldr	r2, [pc, #156]	; (800693c <HAL_ADC_Start_DMA+0x21c>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d136      	bne.n	8006910 <HAL_ADC_Start_DMA+0x1f0>
 80068a2:	4b20      	ldr	r3, [pc, #128]	; (8006924 <HAL_ADC_Start_DMA+0x204>)
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	f003 0310 	and.w	r3, r3, #16
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d130      	bne.n	8006910 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d129      	bne.n	8006910 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	689a      	ldr	r2, [r3, #8]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80068ca:	609a      	str	r2, [r3, #8]
 80068cc:	e020      	b.n	8006910 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a18      	ldr	r2, [pc, #96]	; (8006934 <HAL_ADC_Start_DMA+0x214>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d11b      	bne.n	8006910 <HAL_ADC_Start_DMA+0x1f0>
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d114      	bne.n	8006910 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	689a      	ldr	r2, [r3, #8]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80068f4:	609a      	str	r2, [r3, #8]
 80068f6:	e00b      	b.n	8006910 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fc:	f043 0210 	orr.w	r2, r3, #16
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006908:	f043 0201 	orr.w	r2, r3, #1
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006910:	2300      	movs	r3, #0
}
 8006912:	4618      	mov	r0, r3
 8006914:	3718      	adds	r7, #24
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	20000058 	.word	0x20000058
 8006920:	431bde83 	.word	0x431bde83
 8006924:	40012300 	.word	0x40012300
 8006928:	08006de1 	.word	0x08006de1
 800692c:	08006e9b 	.word	0x08006e9b
 8006930:	08006eb7 	.word	0x08006eb7
 8006934:	40012000 	.word	0x40012000
 8006938:	40012100 	.word	0x40012100
 800693c:	40012200 	.word	0x40012200

08006940 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800694e:	4618      	mov	r0, r3
 8006950:	370c      	adds	r7, #12
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr

0800695a <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800695a:	b480      	push	{r7}
 800695c:	b083      	sub	sp, #12
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006962:	bf00      	nop
 8006964:	370c      	adds	r7, #12
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr

0800696e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800696e:	b480      	push	{r7}
 8006970:	b083      	sub	sp, #12
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006976:	bf00      	nop
 8006978:	370c      	adds	r7, #12
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr
	...

08006984 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006984:	b480      	push	{r7}
 8006986:	b085      	sub	sp, #20
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800698e:	2300      	movs	r3, #0
 8006990:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006998:	2b01      	cmp	r3, #1
 800699a:	d101      	bne.n	80069a0 <HAL_ADC_ConfigChannel+0x1c>
 800699c:	2302      	movs	r3, #2
 800699e:	e113      	b.n	8006bc8 <HAL_ADC_ConfigChannel+0x244>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2b09      	cmp	r3, #9
 80069ae:	d925      	bls.n	80069fc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	68d9      	ldr	r1, [r3, #12]
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	461a      	mov	r2, r3
 80069be:	4613      	mov	r3, r2
 80069c0:	005b      	lsls	r3, r3, #1
 80069c2:	4413      	add	r3, r2
 80069c4:	3b1e      	subs	r3, #30
 80069c6:	2207      	movs	r2, #7
 80069c8:	fa02 f303 	lsl.w	r3, r2, r3
 80069cc:	43da      	mvns	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	400a      	ands	r2, r1
 80069d4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	68d9      	ldr	r1, [r3, #12]
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	689a      	ldr	r2, [r3, #8]
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	4618      	mov	r0, r3
 80069e8:	4603      	mov	r3, r0
 80069ea:	005b      	lsls	r3, r3, #1
 80069ec:	4403      	add	r3, r0
 80069ee:	3b1e      	subs	r3, #30
 80069f0:	409a      	lsls	r2, r3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	430a      	orrs	r2, r1
 80069f8:	60da      	str	r2, [r3, #12]
 80069fa:	e022      	b.n	8006a42 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	6919      	ldr	r1, [r3, #16]
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	461a      	mov	r2, r3
 8006a0a:	4613      	mov	r3, r2
 8006a0c:	005b      	lsls	r3, r3, #1
 8006a0e:	4413      	add	r3, r2
 8006a10:	2207      	movs	r2, #7
 8006a12:	fa02 f303 	lsl.w	r3, r2, r3
 8006a16:	43da      	mvns	r2, r3
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	400a      	ands	r2, r1
 8006a1e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	6919      	ldr	r1, [r3, #16]
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	689a      	ldr	r2, [r3, #8]
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	4618      	mov	r0, r3
 8006a32:	4603      	mov	r3, r0
 8006a34:	005b      	lsls	r3, r3, #1
 8006a36:	4403      	add	r3, r0
 8006a38:	409a      	lsls	r2, r3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	430a      	orrs	r2, r1
 8006a40:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	2b06      	cmp	r3, #6
 8006a48:	d824      	bhi.n	8006a94 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	685a      	ldr	r2, [r3, #4]
 8006a54:	4613      	mov	r3, r2
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	4413      	add	r3, r2
 8006a5a:	3b05      	subs	r3, #5
 8006a5c:	221f      	movs	r2, #31
 8006a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a62:	43da      	mvns	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	400a      	ands	r2, r1
 8006a6a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	4618      	mov	r0, r3
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	685a      	ldr	r2, [r3, #4]
 8006a7e:	4613      	mov	r3, r2
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	4413      	add	r3, r2
 8006a84:	3b05      	subs	r3, #5
 8006a86:	fa00 f203 	lsl.w	r2, r0, r3
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	430a      	orrs	r2, r1
 8006a90:	635a      	str	r2, [r3, #52]	; 0x34
 8006a92:	e04c      	b.n	8006b2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	2b0c      	cmp	r3, #12
 8006a9a:	d824      	bhi.n	8006ae6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	685a      	ldr	r2, [r3, #4]
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	4413      	add	r3, r2
 8006aac:	3b23      	subs	r3, #35	; 0x23
 8006aae:	221f      	movs	r2, #31
 8006ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab4:	43da      	mvns	r2, r3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	400a      	ands	r2, r1
 8006abc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	4618      	mov	r0, r3
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	685a      	ldr	r2, [r3, #4]
 8006ad0:	4613      	mov	r3, r2
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	4413      	add	r3, r2
 8006ad6:	3b23      	subs	r3, #35	; 0x23
 8006ad8:	fa00 f203 	lsl.w	r2, r0, r3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	430a      	orrs	r2, r1
 8006ae2:	631a      	str	r2, [r3, #48]	; 0x30
 8006ae4:	e023      	b.n	8006b2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	685a      	ldr	r2, [r3, #4]
 8006af0:	4613      	mov	r3, r2
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	4413      	add	r3, r2
 8006af6:	3b41      	subs	r3, #65	; 0x41
 8006af8:	221f      	movs	r2, #31
 8006afa:	fa02 f303 	lsl.w	r3, r2, r3
 8006afe:	43da      	mvns	r2, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	400a      	ands	r2, r1
 8006b06:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	4618      	mov	r0, r3
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	685a      	ldr	r2, [r3, #4]
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	4413      	add	r3, r2
 8006b20:	3b41      	subs	r3, #65	; 0x41
 8006b22:	fa00 f203 	lsl.w	r2, r0, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	430a      	orrs	r2, r1
 8006b2c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006b2e:	4b29      	ldr	r3, [pc, #164]	; (8006bd4 <HAL_ADC_ConfigChannel+0x250>)
 8006b30:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a28      	ldr	r2, [pc, #160]	; (8006bd8 <HAL_ADC_ConfigChannel+0x254>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d10f      	bne.n	8006b5c <HAL_ADC_ConfigChannel+0x1d8>
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2b12      	cmp	r3, #18
 8006b42:	d10b      	bne.n	8006b5c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a1d      	ldr	r2, [pc, #116]	; (8006bd8 <HAL_ADC_ConfigChannel+0x254>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d12b      	bne.n	8006bbe <HAL_ADC_ConfigChannel+0x23a>
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a1c      	ldr	r2, [pc, #112]	; (8006bdc <HAL_ADC_ConfigChannel+0x258>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d003      	beq.n	8006b78 <HAL_ADC_ConfigChannel+0x1f4>
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2b11      	cmp	r3, #17
 8006b76:	d122      	bne.n	8006bbe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a11      	ldr	r2, [pc, #68]	; (8006bdc <HAL_ADC_ConfigChannel+0x258>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d111      	bne.n	8006bbe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006b9a:	4b11      	ldr	r3, [pc, #68]	; (8006be0 <HAL_ADC_ConfigChannel+0x25c>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a11      	ldr	r2, [pc, #68]	; (8006be4 <HAL_ADC_ConfigChannel+0x260>)
 8006ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba4:	0c9a      	lsrs	r2, r3, #18
 8006ba6:	4613      	mov	r3, r2
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	4413      	add	r3, r2
 8006bac:	005b      	lsls	r3, r3, #1
 8006bae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006bb0:	e002      	b.n	8006bb8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	3b01      	subs	r3, #1
 8006bb6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1f9      	bne.n	8006bb2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3714      	adds	r7, #20
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr
 8006bd4:	40012300 	.word	0x40012300
 8006bd8:	40012000 	.word	0x40012000
 8006bdc:	10000012 	.word	0x10000012
 8006be0:	20000058 	.word	0x20000058
 8006be4:	431bde83 	.word	0x431bde83

08006be8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b085      	sub	sp, #20
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006bf0:	4b79      	ldr	r3, [pc, #484]	; (8006dd8 <ADC_Init+0x1f0>)
 8006bf2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	685a      	ldr	r2, [r3, #4]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	431a      	orrs	r2, r3
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	685a      	ldr	r2, [r3, #4]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	6859      	ldr	r1, [r3, #4]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	691b      	ldr	r3, [r3, #16]
 8006c28:	021a      	lsls	r2, r3, #8
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	430a      	orrs	r2, r1
 8006c30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	685a      	ldr	r2, [r3, #4]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006c40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	6859      	ldr	r1, [r3, #4]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	689a      	ldr	r2, [r3, #8]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	430a      	orrs	r2, r1
 8006c52:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	689a      	ldr	r2, [r3, #8]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	6899      	ldr	r1, [r3, #8]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	68da      	ldr	r2, [r3, #12]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	430a      	orrs	r2, r1
 8006c74:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c7a:	4a58      	ldr	r2, [pc, #352]	; (8006ddc <ADC_Init+0x1f4>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d022      	beq.n	8006cc6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	689a      	ldr	r2, [r3, #8]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006c8e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	6899      	ldr	r1, [r3, #8]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	430a      	orrs	r2, r1
 8006ca0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	689a      	ldr	r2, [r3, #8]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006cb0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	6899      	ldr	r1, [r3, #8]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	430a      	orrs	r2, r1
 8006cc2:	609a      	str	r2, [r3, #8]
 8006cc4:	e00f      	b.n	8006ce6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	689a      	ldr	r2, [r3, #8]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006cd4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	689a      	ldr	r2, [r3, #8]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006ce4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	689a      	ldr	r2, [r3, #8]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f022 0202 	bic.w	r2, r2, #2
 8006cf4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	6899      	ldr	r1, [r3, #8]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	7e1b      	ldrb	r3, [r3, #24]
 8006d00:	005a      	lsls	r2, r3, #1
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	430a      	orrs	r2, r1
 8006d08:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d01b      	beq.n	8006d4c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	685a      	ldr	r2, [r3, #4]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d22:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	685a      	ldr	r2, [r3, #4]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006d32:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	6859      	ldr	r1, [r3, #4]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	035a      	lsls	r2, r3, #13
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	430a      	orrs	r2, r1
 8006d48:	605a      	str	r2, [r3, #4]
 8006d4a:	e007      	b.n	8006d5c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	685a      	ldr	r2, [r3, #4]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d5a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006d6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	69db      	ldr	r3, [r3, #28]
 8006d76:	3b01      	subs	r3, #1
 8006d78:	051a      	lsls	r2, r3, #20
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	430a      	orrs	r2, r1
 8006d80:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	689a      	ldr	r2, [r3, #8]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006d90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	6899      	ldr	r1, [r3, #8]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d9e:	025a      	lsls	r2, r3, #9
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	430a      	orrs	r2, r1
 8006da6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	689a      	ldr	r2, [r3, #8]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006db6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	6899      	ldr	r1, [r3, #8]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	695b      	ldr	r3, [r3, #20]
 8006dc2:	029a      	lsls	r2, r3, #10
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	430a      	orrs	r2, r1
 8006dca:	609a      	str	r2, [r3, #8]
}
 8006dcc:	bf00      	nop
 8006dce:	3714      	adds	r7, #20
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr
 8006dd8:	40012300 	.word	0x40012300
 8006ddc:	0f000001 	.word	0x0f000001

08006de0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dec:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d13c      	bne.n	8006e74 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dfe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d12b      	bne.n	8006e6c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d127      	bne.n	8006e6c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e22:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d006      	beq.n	8006e38 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d119      	bne.n	8006e6c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	685a      	ldr	r2, [r3, #4]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f022 0220 	bic.w	r2, r2, #32
 8006e46:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d105      	bne.n	8006e6c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e64:	f043 0201 	orr.w	r2, r3, #1
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006e6c:	68f8      	ldr	r0, [r7, #12]
 8006e6e:	f7fc fc89 	bl	8003784 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006e72:	e00e      	b.n	8006e92 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e78:	f003 0310 	and.w	r3, r3, #16
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d003      	beq.n	8006e88 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006e80:	68f8      	ldr	r0, [r7, #12]
 8006e82:	f7ff fd74 	bl	800696e <HAL_ADC_ErrorCallback>
}
 8006e86:	e004      	b.n	8006e92 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	4798      	blx	r3
}
 8006e92:	bf00      	nop
 8006e94:	3710      	adds	r7, #16
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}

08006e9a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006e9a:	b580      	push	{r7, lr}
 8006e9c:	b084      	sub	sp, #16
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	f7ff fd56 	bl	800695a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006eae:	bf00      	nop
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}

08006eb6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006eb6:	b580      	push	{r7, lr}
 8006eb8:	b084      	sub	sp, #16
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2240      	movs	r2, #64	; 0x40
 8006ec8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ece:	f043 0204 	orr.w	r2, r3, #4
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	f7ff fd49 	bl	800696e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006edc:	bf00      	nop
 8006ede:	3710      	adds	r7, #16
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <__NVIC_SetPriorityGrouping>:
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f003 0307 	and.w	r3, r3, #7
 8006ef2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006ef4:	4b0c      	ldr	r3, [pc, #48]	; (8006f28 <__NVIC_SetPriorityGrouping+0x44>)
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006efa:	68ba      	ldr	r2, [r7, #8]
 8006efc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006f00:	4013      	ands	r3, r2
 8006f02:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006f0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006f16:	4a04      	ldr	r2, [pc, #16]	; (8006f28 <__NVIC_SetPriorityGrouping+0x44>)
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	60d3      	str	r3, [r2, #12]
}
 8006f1c:	bf00      	nop
 8006f1e:	3714      	adds	r7, #20
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr
 8006f28:	e000ed00 	.word	0xe000ed00

08006f2c <__NVIC_GetPriorityGrouping>:
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006f30:	4b04      	ldr	r3, [pc, #16]	; (8006f44 <__NVIC_GetPriorityGrouping+0x18>)
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	0a1b      	lsrs	r3, r3, #8
 8006f36:	f003 0307 	and.w	r3, r3, #7
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr
 8006f44:	e000ed00 	.word	0xe000ed00

08006f48 <__NVIC_EnableIRQ>:
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	4603      	mov	r3, r0
 8006f50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	db0b      	blt.n	8006f72 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006f5a:	79fb      	ldrb	r3, [r7, #7]
 8006f5c:	f003 021f 	and.w	r2, r3, #31
 8006f60:	4907      	ldr	r1, [pc, #28]	; (8006f80 <__NVIC_EnableIRQ+0x38>)
 8006f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f66:	095b      	lsrs	r3, r3, #5
 8006f68:	2001      	movs	r0, #1
 8006f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8006f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006f72:	bf00      	nop
 8006f74:	370c      	adds	r7, #12
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr
 8006f7e:	bf00      	nop
 8006f80:	e000e100 	.word	0xe000e100

08006f84 <__NVIC_SetPriority>:
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	6039      	str	r1, [r7, #0]
 8006f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	db0a      	blt.n	8006fae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	b2da      	uxtb	r2, r3
 8006f9c:	490c      	ldr	r1, [pc, #48]	; (8006fd0 <__NVIC_SetPriority+0x4c>)
 8006f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fa2:	0112      	lsls	r2, r2, #4
 8006fa4:	b2d2      	uxtb	r2, r2
 8006fa6:	440b      	add	r3, r1
 8006fa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006fac:	e00a      	b.n	8006fc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	b2da      	uxtb	r2, r3
 8006fb2:	4908      	ldr	r1, [pc, #32]	; (8006fd4 <__NVIC_SetPriority+0x50>)
 8006fb4:	79fb      	ldrb	r3, [r7, #7]
 8006fb6:	f003 030f 	and.w	r3, r3, #15
 8006fba:	3b04      	subs	r3, #4
 8006fbc:	0112      	lsls	r2, r2, #4
 8006fbe:	b2d2      	uxtb	r2, r2
 8006fc0:	440b      	add	r3, r1
 8006fc2:	761a      	strb	r2, [r3, #24]
}
 8006fc4:	bf00      	nop
 8006fc6:	370c      	adds	r7, #12
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr
 8006fd0:	e000e100 	.word	0xe000e100
 8006fd4:	e000ed00 	.word	0xe000ed00

08006fd8 <NVIC_EncodePriority>:
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b089      	sub	sp, #36	; 0x24
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	60b9      	str	r1, [r7, #8]
 8006fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f003 0307 	and.w	r3, r3, #7
 8006fea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	f1c3 0307 	rsb	r3, r3, #7
 8006ff2:	2b04      	cmp	r3, #4
 8006ff4:	bf28      	it	cs
 8006ff6:	2304      	movcs	r3, #4
 8006ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006ffa:	69fb      	ldr	r3, [r7, #28]
 8006ffc:	3304      	adds	r3, #4
 8006ffe:	2b06      	cmp	r3, #6
 8007000:	d902      	bls.n	8007008 <NVIC_EncodePriority+0x30>
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	3b03      	subs	r3, #3
 8007006:	e000      	b.n	800700a <NVIC_EncodePriority+0x32>
 8007008:	2300      	movs	r3, #0
 800700a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800700c:	f04f 32ff 	mov.w	r2, #4294967295
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	fa02 f303 	lsl.w	r3, r2, r3
 8007016:	43da      	mvns	r2, r3
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	401a      	ands	r2, r3
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007020:	f04f 31ff 	mov.w	r1, #4294967295
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	fa01 f303 	lsl.w	r3, r1, r3
 800702a:	43d9      	mvns	r1, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007030:	4313      	orrs	r3, r2
}
 8007032:	4618      	mov	r0, r3
 8007034:	3724      	adds	r7, #36	; 0x24
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr
	...

08007040 <SysTick_Config>:
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b082      	sub	sp, #8
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	3b01      	subs	r3, #1
 800704c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007050:	d301      	bcc.n	8007056 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8007052:	2301      	movs	r3, #1
 8007054:	e00f      	b.n	8007076 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007056:	4a0a      	ldr	r2, [pc, #40]	; (8007080 <SysTick_Config+0x40>)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	3b01      	subs	r3, #1
 800705c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800705e:	210f      	movs	r1, #15
 8007060:	f04f 30ff 	mov.w	r0, #4294967295
 8007064:	f7ff ff8e 	bl	8006f84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007068:	4b05      	ldr	r3, [pc, #20]	; (8007080 <SysTick_Config+0x40>)
 800706a:	2200      	movs	r2, #0
 800706c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800706e:	4b04      	ldr	r3, [pc, #16]	; (8007080 <SysTick_Config+0x40>)
 8007070:	2207      	movs	r2, #7
 8007072:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	3708      	adds	r7, #8
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	e000e010 	.word	0xe000e010

08007084 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f7ff ff29 	bl	8006ee4 <__NVIC_SetPriorityGrouping>
}
 8007092:	bf00      	nop
 8007094:	3708      	adds	r7, #8
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}

0800709a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800709a:	b580      	push	{r7, lr}
 800709c:	b086      	sub	sp, #24
 800709e:	af00      	add	r7, sp, #0
 80070a0:	4603      	mov	r3, r0
 80070a2:	60b9      	str	r1, [r7, #8]
 80070a4:	607a      	str	r2, [r7, #4]
 80070a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80070a8:	2300      	movs	r3, #0
 80070aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80070ac:	f7ff ff3e 	bl	8006f2c <__NVIC_GetPriorityGrouping>
 80070b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	68b9      	ldr	r1, [r7, #8]
 80070b6:	6978      	ldr	r0, [r7, #20]
 80070b8:	f7ff ff8e 	bl	8006fd8 <NVIC_EncodePriority>
 80070bc:	4602      	mov	r2, r0
 80070be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070c2:	4611      	mov	r1, r2
 80070c4:	4618      	mov	r0, r3
 80070c6:	f7ff ff5d 	bl	8006f84 <__NVIC_SetPriority>
}
 80070ca:	bf00      	nop
 80070cc:	3718      	adds	r7, #24
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b082      	sub	sp, #8
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	4603      	mov	r3, r0
 80070da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80070dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070e0:	4618      	mov	r0, r3
 80070e2:	f7ff ff31 	bl	8006f48 <__NVIC_EnableIRQ>
}
 80070e6:	bf00      	nop
 80070e8:	3708      	adds	r7, #8
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b082      	sub	sp, #8
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f7ff ffa2 	bl	8007040 <SysTick_Config>
 80070fc:	4603      	mov	r3, r0
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3708      	adds	r7, #8
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
	...

08007108 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b086      	sub	sp, #24
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007110:	2300      	movs	r3, #0
 8007112:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007114:	f7ff f900 	bl	8006318 <HAL_GetTick>
 8007118:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d101      	bne.n	8007124 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	e099      	b.n	8007258 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2202      	movs	r2, #2
 8007128:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f022 0201 	bic.w	r2, r2, #1
 8007142:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007144:	e00f      	b.n	8007166 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007146:	f7ff f8e7 	bl	8006318 <HAL_GetTick>
 800714a:	4602      	mov	r2, r0
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	1ad3      	subs	r3, r2, r3
 8007150:	2b05      	cmp	r3, #5
 8007152:	d908      	bls.n	8007166 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2220      	movs	r2, #32
 8007158:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2203      	movs	r2, #3
 800715e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007162:	2303      	movs	r3, #3
 8007164:	e078      	b.n	8007258 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f003 0301 	and.w	r3, r3, #1
 8007170:	2b00      	cmp	r3, #0
 8007172:	d1e8      	bne.n	8007146 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800717c:	697a      	ldr	r2, [r7, #20]
 800717e:	4b38      	ldr	r3, [pc, #224]	; (8007260 <HAL_DMA_Init+0x158>)
 8007180:	4013      	ands	r3, r2
 8007182:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	685a      	ldr	r2, [r3, #4]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007192:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	691b      	ldr	r3, [r3, #16]
 8007198:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800719e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	699b      	ldr	r3, [r3, #24]
 80071a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80071aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6a1b      	ldr	r3, [r3, #32]
 80071b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80071b2:	697a      	ldr	r2, [r7, #20]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071bc:	2b04      	cmp	r3, #4
 80071be:	d107      	bne.n	80071d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c8:	4313      	orrs	r3, r2
 80071ca:	697a      	ldr	r2, [r7, #20]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	697a      	ldr	r2, [r7, #20]
 80071d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	695b      	ldr	r3, [r3, #20]
 80071de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	f023 0307 	bic.w	r3, r3, #7
 80071e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ec:	697a      	ldr	r2, [r7, #20]
 80071ee:	4313      	orrs	r3, r2
 80071f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f6:	2b04      	cmp	r3, #4
 80071f8:	d117      	bne.n	800722a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071fe:	697a      	ldr	r2, [r7, #20]
 8007200:	4313      	orrs	r3, r2
 8007202:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00e      	beq.n	800722a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 fa6f 	bl	80076f0 <DMA_CheckFifoParam>
 8007212:	4603      	mov	r3, r0
 8007214:	2b00      	cmp	r3, #0
 8007216:	d008      	beq.n	800722a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2240      	movs	r2, #64	; 0x40
 800721c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2201      	movs	r2, #1
 8007222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007226:	2301      	movs	r3, #1
 8007228:	e016      	b.n	8007258 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	697a      	ldr	r2, [r7, #20]
 8007230:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 fa26 	bl	8007684 <DMA_CalcBaseAndBitshift>
 8007238:	4603      	mov	r3, r0
 800723a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007240:	223f      	movs	r2, #63	; 0x3f
 8007242:	409a      	lsls	r2, r3
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2201      	movs	r2, #1
 8007252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007256:	2300      	movs	r3, #0
}
 8007258:	4618      	mov	r0, r3
 800725a:	3718      	adds	r7, #24
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}
 8007260:	f010803f 	.word	0xf010803f

08007264 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b086      	sub	sp, #24
 8007268:	af00      	add	r7, sp, #0
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	607a      	str	r2, [r7, #4]
 8007270:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007272:	2300      	movs	r3, #0
 8007274:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800727a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007282:	2b01      	cmp	r3, #1
 8007284:	d101      	bne.n	800728a <HAL_DMA_Start_IT+0x26>
 8007286:	2302      	movs	r3, #2
 8007288:	e040      	b.n	800730c <HAL_DMA_Start_IT+0xa8>
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2201      	movs	r2, #1
 800728e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007298:	b2db      	uxtb	r3, r3
 800729a:	2b01      	cmp	r3, #1
 800729c:	d12f      	bne.n	80072fe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2202      	movs	r2, #2
 80072a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2200      	movs	r2, #0
 80072aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	68b9      	ldr	r1, [r7, #8]
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	f000 f9b8 	bl	8007628 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072bc:	223f      	movs	r2, #63	; 0x3f
 80072be:	409a      	lsls	r2, r3
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f042 0216 	orr.w	r2, r2, #22
 80072d2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d007      	beq.n	80072ec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f042 0208 	orr.w	r2, r2, #8
 80072ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f042 0201 	orr.w	r2, r2, #1
 80072fa:	601a      	str	r2, [r3, #0]
 80072fc:	e005      	b.n	800730a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2200      	movs	r2, #0
 8007302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007306:	2302      	movs	r3, #2
 8007308:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800730a:	7dfb      	ldrb	r3, [r7, #23]
}
 800730c:	4618      	mov	r0, r3
 800730e:	3718      	adds	r7, #24
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b086      	sub	sp, #24
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800731c:	2300      	movs	r3, #0
 800731e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007320:	4b8e      	ldr	r3, [pc, #568]	; (800755c <HAL_DMA_IRQHandler+0x248>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a8e      	ldr	r2, [pc, #568]	; (8007560 <HAL_DMA_IRQHandler+0x24c>)
 8007326:	fba2 2303 	umull	r2, r3, r2, r3
 800732a:	0a9b      	lsrs	r3, r3, #10
 800732c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007332:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800733e:	2208      	movs	r2, #8
 8007340:	409a      	lsls	r2, r3
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	4013      	ands	r3, r2
 8007346:	2b00      	cmp	r3, #0
 8007348:	d01a      	beq.n	8007380 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f003 0304 	and.w	r3, r3, #4
 8007354:	2b00      	cmp	r3, #0
 8007356:	d013      	beq.n	8007380 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f022 0204 	bic.w	r2, r2, #4
 8007366:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800736c:	2208      	movs	r2, #8
 800736e:	409a      	lsls	r2, r3
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007378:	f043 0201 	orr.w	r2, r3, #1
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007384:	2201      	movs	r2, #1
 8007386:	409a      	lsls	r2, r3
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	4013      	ands	r3, r2
 800738c:	2b00      	cmp	r3, #0
 800738e:	d012      	beq.n	80073b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	695b      	ldr	r3, [r3, #20]
 8007396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800739a:	2b00      	cmp	r3, #0
 800739c:	d00b      	beq.n	80073b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073a2:	2201      	movs	r2, #1
 80073a4:	409a      	lsls	r2, r3
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ae:	f043 0202 	orr.w	r2, r3, #2
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073ba:	2204      	movs	r2, #4
 80073bc:	409a      	lsls	r2, r3
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	4013      	ands	r3, r2
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d012      	beq.n	80073ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 0302 	and.w	r3, r3, #2
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d00b      	beq.n	80073ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073d8:	2204      	movs	r2, #4
 80073da:	409a      	lsls	r2, r3
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073e4:	f043 0204 	orr.w	r2, r3, #4
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073f0:	2210      	movs	r2, #16
 80073f2:	409a      	lsls	r2, r3
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	4013      	ands	r3, r2
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d043      	beq.n	8007484 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f003 0308 	and.w	r3, r3, #8
 8007406:	2b00      	cmp	r3, #0
 8007408:	d03c      	beq.n	8007484 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800740e:	2210      	movs	r2, #16
 8007410:	409a      	lsls	r2, r3
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007420:	2b00      	cmp	r3, #0
 8007422:	d018      	beq.n	8007456 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800742e:	2b00      	cmp	r3, #0
 8007430:	d108      	bne.n	8007444 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007436:	2b00      	cmp	r3, #0
 8007438:	d024      	beq.n	8007484 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	4798      	blx	r3
 8007442:	e01f      	b.n	8007484 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007448:	2b00      	cmp	r3, #0
 800744a:	d01b      	beq.n	8007484 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	4798      	blx	r3
 8007454:	e016      	b.n	8007484 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007460:	2b00      	cmp	r3, #0
 8007462:	d107      	bne.n	8007474 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f022 0208 	bic.w	r2, r2, #8
 8007472:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007478:	2b00      	cmp	r3, #0
 800747a:	d003      	beq.n	8007484 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007488:	2220      	movs	r2, #32
 800748a:	409a      	lsls	r2, r3
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	4013      	ands	r3, r2
 8007490:	2b00      	cmp	r3, #0
 8007492:	f000 808f 	beq.w	80075b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f003 0310 	and.w	r3, r3, #16
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	f000 8087 	beq.w	80075b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074aa:	2220      	movs	r2, #32
 80074ac:	409a      	lsls	r2, r3
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	2b05      	cmp	r3, #5
 80074bc:	d136      	bne.n	800752c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f022 0216 	bic.w	r2, r2, #22
 80074cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	695a      	ldr	r2, [r3, #20]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80074dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d103      	bne.n	80074ee <HAL_DMA_IRQHandler+0x1da>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d007      	beq.n	80074fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f022 0208 	bic.w	r2, r2, #8
 80074fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007502:	223f      	movs	r2, #63	; 0x3f
 8007504:	409a      	lsls	r2, r3
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2201      	movs	r2, #1
 800750e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800751e:	2b00      	cmp	r3, #0
 8007520:	d07e      	beq.n	8007620 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	4798      	blx	r3
        }
        return;
 800752a:	e079      	b.n	8007620 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007536:	2b00      	cmp	r3, #0
 8007538:	d01d      	beq.n	8007576 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007544:	2b00      	cmp	r3, #0
 8007546:	d10d      	bne.n	8007564 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800754c:	2b00      	cmp	r3, #0
 800754e:	d031      	beq.n	80075b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	4798      	blx	r3
 8007558:	e02c      	b.n	80075b4 <HAL_DMA_IRQHandler+0x2a0>
 800755a:	bf00      	nop
 800755c:	20000058 	.word	0x20000058
 8007560:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007568:	2b00      	cmp	r3, #0
 800756a:	d023      	beq.n	80075b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	4798      	blx	r3
 8007574:	e01e      	b.n	80075b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007580:	2b00      	cmp	r3, #0
 8007582:	d10f      	bne.n	80075a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f022 0210 	bic.w	r2, r2, #16
 8007592:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2201      	movs	r2, #1
 8007598:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d003      	beq.n	80075b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d032      	beq.n	8007622 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075c0:	f003 0301 	and.w	r3, r3, #1
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d022      	beq.n	800760e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2205      	movs	r2, #5
 80075cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f022 0201 	bic.w	r2, r2, #1
 80075de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	3301      	adds	r3, #1
 80075e4:	60bb      	str	r3, [r7, #8]
 80075e6:	697a      	ldr	r2, [r7, #20]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d307      	bcc.n	80075fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f003 0301 	and.w	r3, r3, #1
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d1f2      	bne.n	80075e0 <HAL_DMA_IRQHandler+0x2cc>
 80075fa:	e000      	b.n	80075fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80075fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2201      	movs	r2, #1
 8007602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007612:	2b00      	cmp	r3, #0
 8007614:	d005      	beq.n	8007622 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	4798      	blx	r3
 800761e:	e000      	b.n	8007622 <HAL_DMA_IRQHandler+0x30e>
        return;
 8007620:	bf00      	nop
    }
  }
}
 8007622:	3718      	adds	r7, #24
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007628:	b480      	push	{r7}
 800762a:	b085      	sub	sp, #20
 800762c:	af00      	add	r7, sp, #0
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	607a      	str	r2, [r7, #4]
 8007634:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007644:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	683a      	ldr	r2, [r7, #0]
 800764c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	2b40      	cmp	r3, #64	; 0x40
 8007654:	d108      	bne.n	8007668 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	68ba      	ldr	r2, [r7, #8]
 8007664:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007666:	e007      	b.n	8007678 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	68ba      	ldr	r2, [r7, #8]
 800766e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	60da      	str	r2, [r3, #12]
}
 8007678:	bf00      	nop
 800767a:	3714      	adds	r7, #20
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr

08007684 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007684:	b480      	push	{r7}
 8007686:	b085      	sub	sp, #20
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	b2db      	uxtb	r3, r3
 8007692:	3b10      	subs	r3, #16
 8007694:	4a14      	ldr	r2, [pc, #80]	; (80076e8 <DMA_CalcBaseAndBitshift+0x64>)
 8007696:	fba2 2303 	umull	r2, r3, r2, r3
 800769a:	091b      	lsrs	r3, r3, #4
 800769c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800769e:	4a13      	ldr	r2, [pc, #76]	; (80076ec <DMA_CalcBaseAndBitshift+0x68>)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	4413      	add	r3, r2
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	461a      	mov	r2, r3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2b03      	cmp	r3, #3
 80076b0:	d909      	bls.n	80076c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80076ba:	f023 0303 	bic.w	r3, r3, #3
 80076be:	1d1a      	adds	r2, r3, #4
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	659a      	str	r2, [r3, #88]	; 0x58
 80076c4:	e007      	b.n	80076d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80076ce:	f023 0303 	bic.w	r3, r3, #3
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3714      	adds	r7, #20
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr
 80076e6:	bf00      	nop
 80076e8:	aaaaaaab 	.word	0xaaaaaaab
 80076ec:	08014254 	.word	0x08014254

080076f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b085      	sub	sp, #20
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076f8:	2300      	movs	r3, #0
 80076fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007700:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	699b      	ldr	r3, [r3, #24]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d11f      	bne.n	800774a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	2b03      	cmp	r3, #3
 800770e:	d856      	bhi.n	80077be <DMA_CheckFifoParam+0xce>
 8007710:	a201      	add	r2, pc, #4	; (adr r2, 8007718 <DMA_CheckFifoParam+0x28>)
 8007712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007716:	bf00      	nop
 8007718:	08007729 	.word	0x08007729
 800771c:	0800773b 	.word	0x0800773b
 8007720:	08007729 	.word	0x08007729
 8007724:	080077bf 	.word	0x080077bf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800772c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007730:	2b00      	cmp	r3, #0
 8007732:	d046      	beq.n	80077c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007738:	e043      	b.n	80077c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800773e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007742:	d140      	bne.n	80077c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007748:	e03d      	b.n	80077c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	699b      	ldr	r3, [r3, #24]
 800774e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007752:	d121      	bne.n	8007798 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	2b03      	cmp	r3, #3
 8007758:	d837      	bhi.n	80077ca <DMA_CheckFifoParam+0xda>
 800775a:	a201      	add	r2, pc, #4	; (adr r2, 8007760 <DMA_CheckFifoParam+0x70>)
 800775c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007760:	08007771 	.word	0x08007771
 8007764:	08007777 	.word	0x08007777
 8007768:	08007771 	.word	0x08007771
 800776c:	08007789 	.word	0x08007789
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	73fb      	strb	r3, [r7, #15]
      break;
 8007774:	e030      	b.n	80077d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800777a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800777e:	2b00      	cmp	r3, #0
 8007780:	d025      	beq.n	80077ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007782:	2301      	movs	r3, #1
 8007784:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007786:	e022      	b.n	80077ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800778c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007790:	d11f      	bne.n	80077d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007796:	e01c      	b.n	80077d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	2b02      	cmp	r3, #2
 800779c:	d903      	bls.n	80077a6 <DMA_CheckFifoParam+0xb6>
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	2b03      	cmp	r3, #3
 80077a2:	d003      	beq.n	80077ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80077a4:	e018      	b.n	80077d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	73fb      	strb	r3, [r7, #15]
      break;
 80077aa:	e015      	b.n	80077d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d00e      	beq.n	80077d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	73fb      	strb	r3, [r7, #15]
      break;
 80077bc:	e00b      	b.n	80077d6 <DMA_CheckFifoParam+0xe6>
      break;
 80077be:	bf00      	nop
 80077c0:	e00a      	b.n	80077d8 <DMA_CheckFifoParam+0xe8>
      break;
 80077c2:	bf00      	nop
 80077c4:	e008      	b.n	80077d8 <DMA_CheckFifoParam+0xe8>
      break;
 80077c6:	bf00      	nop
 80077c8:	e006      	b.n	80077d8 <DMA_CheckFifoParam+0xe8>
      break;
 80077ca:	bf00      	nop
 80077cc:	e004      	b.n	80077d8 <DMA_CheckFifoParam+0xe8>
      break;
 80077ce:	bf00      	nop
 80077d0:	e002      	b.n	80077d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80077d2:	bf00      	nop
 80077d4:	e000      	b.n	80077d8 <DMA_CheckFifoParam+0xe8>
      break;
 80077d6:	bf00      	nop
    }
  } 
  
  return status; 
 80077d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3714      	adds	r7, #20
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop

080077e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b089      	sub	sp, #36	; 0x24
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80077f2:	2300      	movs	r3, #0
 80077f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80077f6:	2300      	movs	r3, #0
 80077f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80077fa:	2300      	movs	r3, #0
 80077fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80077fe:	2300      	movs	r3, #0
 8007800:	61fb      	str	r3, [r7, #28]
 8007802:	e165      	b.n	8007ad0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007804:	2201      	movs	r2, #1
 8007806:	69fb      	ldr	r3, [r7, #28]
 8007808:	fa02 f303 	lsl.w	r3, r2, r3
 800780c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	697a      	ldr	r2, [r7, #20]
 8007814:	4013      	ands	r3, r2
 8007816:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007818:	693a      	ldr	r2, [r7, #16]
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	429a      	cmp	r2, r3
 800781e:	f040 8154 	bne.w	8007aca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	f003 0303 	and.w	r3, r3, #3
 800782a:	2b01      	cmp	r3, #1
 800782c:	d005      	beq.n	800783a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007836:	2b02      	cmp	r3, #2
 8007838:	d130      	bne.n	800789c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	005b      	lsls	r3, r3, #1
 8007844:	2203      	movs	r2, #3
 8007846:	fa02 f303 	lsl.w	r3, r2, r3
 800784a:	43db      	mvns	r3, r3
 800784c:	69ba      	ldr	r2, [r7, #24]
 800784e:	4013      	ands	r3, r2
 8007850:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	68da      	ldr	r2, [r3, #12]
 8007856:	69fb      	ldr	r3, [r7, #28]
 8007858:	005b      	lsls	r3, r3, #1
 800785a:	fa02 f303 	lsl.w	r3, r2, r3
 800785e:	69ba      	ldr	r2, [r7, #24]
 8007860:	4313      	orrs	r3, r2
 8007862:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	69ba      	ldr	r2, [r7, #24]
 8007868:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007870:	2201      	movs	r2, #1
 8007872:	69fb      	ldr	r3, [r7, #28]
 8007874:	fa02 f303 	lsl.w	r3, r2, r3
 8007878:	43db      	mvns	r3, r3
 800787a:	69ba      	ldr	r2, [r7, #24]
 800787c:	4013      	ands	r3, r2
 800787e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	091b      	lsrs	r3, r3, #4
 8007886:	f003 0201 	and.w	r2, r3, #1
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	fa02 f303 	lsl.w	r3, r2, r3
 8007890:	69ba      	ldr	r2, [r7, #24]
 8007892:	4313      	orrs	r3, r2
 8007894:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	69ba      	ldr	r2, [r7, #24]
 800789a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	f003 0303 	and.w	r3, r3, #3
 80078a4:	2b03      	cmp	r3, #3
 80078a6:	d017      	beq.n	80078d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	68db      	ldr	r3, [r3, #12]
 80078ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	005b      	lsls	r3, r3, #1
 80078b2:	2203      	movs	r2, #3
 80078b4:	fa02 f303 	lsl.w	r3, r2, r3
 80078b8:	43db      	mvns	r3, r3
 80078ba:	69ba      	ldr	r2, [r7, #24]
 80078bc:	4013      	ands	r3, r2
 80078be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	689a      	ldr	r2, [r3, #8]
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	005b      	lsls	r3, r3, #1
 80078c8:	fa02 f303 	lsl.w	r3, r2, r3
 80078cc:	69ba      	ldr	r2, [r7, #24]
 80078ce:	4313      	orrs	r3, r2
 80078d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	69ba      	ldr	r2, [r7, #24]
 80078d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	f003 0303 	and.w	r3, r3, #3
 80078e0:	2b02      	cmp	r3, #2
 80078e2:	d123      	bne.n	800792c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80078e4:	69fb      	ldr	r3, [r7, #28]
 80078e6:	08da      	lsrs	r2, r3, #3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	3208      	adds	r2, #8
 80078ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	f003 0307 	and.w	r3, r3, #7
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	220f      	movs	r2, #15
 80078fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007900:	43db      	mvns	r3, r3
 8007902:	69ba      	ldr	r2, [r7, #24]
 8007904:	4013      	ands	r3, r2
 8007906:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	691a      	ldr	r2, [r3, #16]
 800790c:	69fb      	ldr	r3, [r7, #28]
 800790e:	f003 0307 	and.w	r3, r3, #7
 8007912:	009b      	lsls	r3, r3, #2
 8007914:	fa02 f303 	lsl.w	r3, r2, r3
 8007918:	69ba      	ldr	r2, [r7, #24]
 800791a:	4313      	orrs	r3, r2
 800791c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800791e:	69fb      	ldr	r3, [r7, #28]
 8007920:	08da      	lsrs	r2, r3, #3
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	3208      	adds	r2, #8
 8007926:	69b9      	ldr	r1, [r7, #24]
 8007928:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	005b      	lsls	r3, r3, #1
 8007936:	2203      	movs	r2, #3
 8007938:	fa02 f303 	lsl.w	r3, r2, r3
 800793c:	43db      	mvns	r3, r3
 800793e:	69ba      	ldr	r2, [r7, #24]
 8007940:	4013      	ands	r3, r2
 8007942:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	f003 0203 	and.w	r2, r3, #3
 800794c:	69fb      	ldr	r3, [r7, #28]
 800794e:	005b      	lsls	r3, r3, #1
 8007950:	fa02 f303 	lsl.w	r3, r2, r3
 8007954:	69ba      	ldr	r2, [r7, #24]
 8007956:	4313      	orrs	r3, r2
 8007958:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	69ba      	ldr	r2, [r7, #24]
 800795e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007968:	2b00      	cmp	r3, #0
 800796a:	f000 80ae 	beq.w	8007aca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800796e:	2300      	movs	r3, #0
 8007970:	60fb      	str	r3, [r7, #12]
 8007972:	4b5d      	ldr	r3, [pc, #372]	; (8007ae8 <HAL_GPIO_Init+0x300>)
 8007974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007976:	4a5c      	ldr	r2, [pc, #368]	; (8007ae8 <HAL_GPIO_Init+0x300>)
 8007978:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800797c:	6453      	str	r3, [r2, #68]	; 0x44
 800797e:	4b5a      	ldr	r3, [pc, #360]	; (8007ae8 <HAL_GPIO_Init+0x300>)
 8007980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007986:	60fb      	str	r3, [r7, #12]
 8007988:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800798a:	4a58      	ldr	r2, [pc, #352]	; (8007aec <HAL_GPIO_Init+0x304>)
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	089b      	lsrs	r3, r3, #2
 8007990:	3302      	adds	r3, #2
 8007992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007996:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	f003 0303 	and.w	r3, r3, #3
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	220f      	movs	r2, #15
 80079a2:	fa02 f303 	lsl.w	r3, r2, r3
 80079a6:	43db      	mvns	r3, r3
 80079a8:	69ba      	ldr	r2, [r7, #24]
 80079aa:	4013      	ands	r3, r2
 80079ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	4a4f      	ldr	r2, [pc, #316]	; (8007af0 <HAL_GPIO_Init+0x308>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d025      	beq.n	8007a02 <HAL_GPIO_Init+0x21a>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4a4e      	ldr	r2, [pc, #312]	; (8007af4 <HAL_GPIO_Init+0x30c>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d01f      	beq.n	80079fe <HAL_GPIO_Init+0x216>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4a4d      	ldr	r2, [pc, #308]	; (8007af8 <HAL_GPIO_Init+0x310>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d019      	beq.n	80079fa <HAL_GPIO_Init+0x212>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4a4c      	ldr	r2, [pc, #304]	; (8007afc <HAL_GPIO_Init+0x314>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d013      	beq.n	80079f6 <HAL_GPIO_Init+0x20e>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4a4b      	ldr	r2, [pc, #300]	; (8007b00 <HAL_GPIO_Init+0x318>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d00d      	beq.n	80079f2 <HAL_GPIO_Init+0x20a>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	4a4a      	ldr	r2, [pc, #296]	; (8007b04 <HAL_GPIO_Init+0x31c>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d007      	beq.n	80079ee <HAL_GPIO_Init+0x206>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4a49      	ldr	r2, [pc, #292]	; (8007b08 <HAL_GPIO_Init+0x320>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d101      	bne.n	80079ea <HAL_GPIO_Init+0x202>
 80079e6:	2306      	movs	r3, #6
 80079e8:	e00c      	b.n	8007a04 <HAL_GPIO_Init+0x21c>
 80079ea:	2307      	movs	r3, #7
 80079ec:	e00a      	b.n	8007a04 <HAL_GPIO_Init+0x21c>
 80079ee:	2305      	movs	r3, #5
 80079f0:	e008      	b.n	8007a04 <HAL_GPIO_Init+0x21c>
 80079f2:	2304      	movs	r3, #4
 80079f4:	e006      	b.n	8007a04 <HAL_GPIO_Init+0x21c>
 80079f6:	2303      	movs	r3, #3
 80079f8:	e004      	b.n	8007a04 <HAL_GPIO_Init+0x21c>
 80079fa:	2302      	movs	r3, #2
 80079fc:	e002      	b.n	8007a04 <HAL_GPIO_Init+0x21c>
 80079fe:	2301      	movs	r3, #1
 8007a00:	e000      	b.n	8007a04 <HAL_GPIO_Init+0x21c>
 8007a02:	2300      	movs	r3, #0
 8007a04:	69fa      	ldr	r2, [r7, #28]
 8007a06:	f002 0203 	and.w	r2, r2, #3
 8007a0a:	0092      	lsls	r2, r2, #2
 8007a0c:	4093      	lsls	r3, r2
 8007a0e:	69ba      	ldr	r2, [r7, #24]
 8007a10:	4313      	orrs	r3, r2
 8007a12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007a14:	4935      	ldr	r1, [pc, #212]	; (8007aec <HAL_GPIO_Init+0x304>)
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	089b      	lsrs	r3, r3, #2
 8007a1a:	3302      	adds	r3, #2
 8007a1c:	69ba      	ldr	r2, [r7, #24]
 8007a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007a22:	4b3a      	ldr	r3, [pc, #232]	; (8007b0c <HAL_GPIO_Init+0x324>)
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	43db      	mvns	r3, r3
 8007a2c:	69ba      	ldr	r2, [r7, #24]
 8007a2e:	4013      	ands	r3, r2
 8007a30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d003      	beq.n	8007a46 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8007a3e:	69ba      	ldr	r2, [r7, #24]
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007a46:	4a31      	ldr	r2, [pc, #196]	; (8007b0c <HAL_GPIO_Init+0x324>)
 8007a48:	69bb      	ldr	r3, [r7, #24]
 8007a4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007a4c:	4b2f      	ldr	r3, [pc, #188]	; (8007b0c <HAL_GPIO_Init+0x324>)
 8007a4e:	68db      	ldr	r3, [r3, #12]
 8007a50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	43db      	mvns	r3, r3
 8007a56:	69ba      	ldr	r2, [r7, #24]
 8007a58:	4013      	ands	r3, r2
 8007a5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d003      	beq.n	8007a70 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8007a68:	69ba      	ldr	r2, [r7, #24]
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007a70:	4a26      	ldr	r2, [pc, #152]	; (8007b0c <HAL_GPIO_Init+0x324>)
 8007a72:	69bb      	ldr	r3, [r7, #24]
 8007a74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007a76:	4b25      	ldr	r3, [pc, #148]	; (8007b0c <HAL_GPIO_Init+0x324>)
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	43db      	mvns	r3, r3
 8007a80:	69ba      	ldr	r2, [r7, #24]
 8007a82:	4013      	ands	r3, r2
 8007a84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d003      	beq.n	8007a9a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8007a92:	69ba      	ldr	r2, [r7, #24]
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	4313      	orrs	r3, r2
 8007a98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007a9a:	4a1c      	ldr	r2, [pc, #112]	; (8007b0c <HAL_GPIO_Init+0x324>)
 8007a9c:	69bb      	ldr	r3, [r7, #24]
 8007a9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007aa0:	4b1a      	ldr	r3, [pc, #104]	; (8007b0c <HAL_GPIO_Init+0x324>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	43db      	mvns	r3, r3
 8007aaa:	69ba      	ldr	r2, [r7, #24]
 8007aac:	4013      	ands	r3, r2
 8007aae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d003      	beq.n	8007ac4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007abc:	69ba      	ldr	r2, [r7, #24]
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007ac4:	4a11      	ldr	r2, [pc, #68]	; (8007b0c <HAL_GPIO_Init+0x324>)
 8007ac6:	69bb      	ldr	r3, [r7, #24]
 8007ac8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007aca:	69fb      	ldr	r3, [r7, #28]
 8007acc:	3301      	adds	r3, #1
 8007ace:	61fb      	str	r3, [r7, #28]
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	2b0f      	cmp	r3, #15
 8007ad4:	f67f ae96 	bls.w	8007804 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007ad8:	bf00      	nop
 8007ada:	bf00      	nop
 8007adc:	3724      	adds	r7, #36	; 0x24
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr
 8007ae6:	bf00      	nop
 8007ae8:	40023800 	.word	0x40023800
 8007aec:	40013800 	.word	0x40013800
 8007af0:	40020000 	.word	0x40020000
 8007af4:	40020400 	.word	0x40020400
 8007af8:	40020800 	.word	0x40020800
 8007afc:	40020c00 	.word	0x40020c00
 8007b00:	40021000 	.word	0x40021000
 8007b04:	40021400 	.word	0x40021400
 8007b08:	40021800 	.word	0x40021800
 8007b0c:	40013c00 	.word	0x40013c00

08007b10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b085      	sub	sp, #20
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	460b      	mov	r3, r1
 8007b1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	691a      	ldr	r2, [r3, #16]
 8007b20:	887b      	ldrh	r3, [r7, #2]
 8007b22:	4013      	ands	r3, r2
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d002      	beq.n	8007b2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	73fb      	strb	r3, [r7, #15]
 8007b2c:	e001      	b.n	8007b32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3714      	adds	r7, #20
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	460b      	mov	r3, r1
 8007b4a:	807b      	strh	r3, [r7, #2]
 8007b4c:	4613      	mov	r3, r2
 8007b4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007b50:	787b      	ldrb	r3, [r7, #1]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d003      	beq.n	8007b5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007b56:	887a      	ldrh	r2, [r7, #2]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007b5c:	e003      	b.n	8007b66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007b5e:	887b      	ldrh	r3, [r7, #2]
 8007b60:	041a      	lsls	r2, r3, #16
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	619a      	str	r2, [r3, #24]
}
 8007b66:	bf00      	nop
 8007b68:	370c      	adds	r7, #12
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr
	...

08007b74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d101      	bne.n	8007b86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	e12b      	b.n	8007dde <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d106      	bne.n	8007ba0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2200      	movs	r2, #0
 8007b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f7fd feb4 	bl	8005908 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2224      	movs	r2, #36	; 0x24
 8007ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f022 0201 	bic.w	r2, r2, #1
 8007bb6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007bc6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007bd6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007bd8:	f000 fd6a 	bl	80086b0 <HAL_RCC_GetPCLK1Freq>
 8007bdc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	4a81      	ldr	r2, [pc, #516]	; (8007de8 <HAL_I2C_Init+0x274>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d807      	bhi.n	8007bf8 <HAL_I2C_Init+0x84>
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	4a80      	ldr	r2, [pc, #512]	; (8007dec <HAL_I2C_Init+0x278>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	bf94      	ite	ls
 8007bf0:	2301      	movls	r3, #1
 8007bf2:	2300      	movhi	r3, #0
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	e006      	b.n	8007c06 <HAL_I2C_Init+0x92>
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	4a7d      	ldr	r2, [pc, #500]	; (8007df0 <HAL_I2C_Init+0x27c>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	bf94      	ite	ls
 8007c00:	2301      	movls	r3, #1
 8007c02:	2300      	movhi	r3, #0
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d001      	beq.n	8007c0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e0e7      	b.n	8007dde <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	4a78      	ldr	r2, [pc, #480]	; (8007df4 <HAL_I2C_Init+0x280>)
 8007c12:	fba2 2303 	umull	r2, r3, r2, r3
 8007c16:	0c9b      	lsrs	r3, r3, #18
 8007c18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	68ba      	ldr	r2, [r7, #8]
 8007c2a:	430a      	orrs	r2, r1
 8007c2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	6a1b      	ldr	r3, [r3, #32]
 8007c34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	4a6a      	ldr	r2, [pc, #424]	; (8007de8 <HAL_I2C_Init+0x274>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d802      	bhi.n	8007c48 <HAL_I2C_Init+0xd4>
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	3301      	adds	r3, #1
 8007c46:	e009      	b.n	8007c5c <HAL_I2C_Init+0xe8>
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007c4e:	fb02 f303 	mul.w	r3, r2, r3
 8007c52:	4a69      	ldr	r2, [pc, #420]	; (8007df8 <HAL_I2C_Init+0x284>)
 8007c54:	fba2 2303 	umull	r2, r3, r2, r3
 8007c58:	099b      	lsrs	r3, r3, #6
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	6812      	ldr	r2, [r2, #0]
 8007c60:	430b      	orrs	r3, r1
 8007c62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	69db      	ldr	r3, [r3, #28]
 8007c6a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007c6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	495c      	ldr	r1, [pc, #368]	; (8007de8 <HAL_I2C_Init+0x274>)
 8007c78:	428b      	cmp	r3, r1
 8007c7a:	d819      	bhi.n	8007cb0 <HAL_I2C_Init+0x13c>
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	1e59      	subs	r1, r3, #1
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	005b      	lsls	r3, r3, #1
 8007c86:	fbb1 f3f3 	udiv	r3, r1, r3
 8007c8a:	1c59      	adds	r1, r3, #1
 8007c8c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007c90:	400b      	ands	r3, r1
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d00a      	beq.n	8007cac <HAL_I2C_Init+0x138>
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	1e59      	subs	r1, r3, #1
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	005b      	lsls	r3, r3, #1
 8007ca0:	fbb1 f3f3 	udiv	r3, r1, r3
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007caa:	e051      	b.n	8007d50 <HAL_I2C_Init+0x1dc>
 8007cac:	2304      	movs	r3, #4
 8007cae:	e04f      	b.n	8007d50 <HAL_I2C_Init+0x1dc>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d111      	bne.n	8007cdc <HAL_I2C_Init+0x168>
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	1e58      	subs	r0, r3, #1
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6859      	ldr	r1, [r3, #4]
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	005b      	lsls	r3, r3, #1
 8007cc4:	440b      	add	r3, r1
 8007cc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8007cca:	3301      	adds	r3, #1
 8007ccc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	bf0c      	ite	eq
 8007cd4:	2301      	moveq	r3, #1
 8007cd6:	2300      	movne	r3, #0
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	e012      	b.n	8007d02 <HAL_I2C_Init+0x18e>
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	1e58      	subs	r0, r3, #1
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6859      	ldr	r1, [r3, #4]
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	440b      	add	r3, r1
 8007cea:	0099      	lsls	r1, r3, #2
 8007cec:	440b      	add	r3, r1
 8007cee:	fbb0 f3f3 	udiv	r3, r0, r3
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	bf0c      	ite	eq
 8007cfc:	2301      	moveq	r3, #1
 8007cfe:	2300      	movne	r3, #0
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d001      	beq.n	8007d0a <HAL_I2C_Init+0x196>
 8007d06:	2301      	movs	r3, #1
 8007d08:	e022      	b.n	8007d50 <HAL_I2C_Init+0x1dc>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d10e      	bne.n	8007d30 <HAL_I2C_Init+0x1bc>
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	1e58      	subs	r0, r3, #1
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6859      	ldr	r1, [r3, #4]
 8007d1a:	460b      	mov	r3, r1
 8007d1c:	005b      	lsls	r3, r3, #1
 8007d1e:	440b      	add	r3, r1
 8007d20:	fbb0 f3f3 	udiv	r3, r0, r3
 8007d24:	3301      	adds	r3, #1
 8007d26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d2e:	e00f      	b.n	8007d50 <HAL_I2C_Init+0x1dc>
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	1e58      	subs	r0, r3, #1
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6859      	ldr	r1, [r3, #4]
 8007d38:	460b      	mov	r3, r1
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	440b      	add	r3, r1
 8007d3e:	0099      	lsls	r1, r3, #2
 8007d40:	440b      	add	r3, r1
 8007d42:	fbb0 f3f3 	udiv	r3, r0, r3
 8007d46:	3301      	adds	r3, #1
 8007d48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d50:	6879      	ldr	r1, [r7, #4]
 8007d52:	6809      	ldr	r1, [r1, #0]
 8007d54:	4313      	orrs	r3, r2
 8007d56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	69da      	ldr	r2, [r3, #28]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6a1b      	ldr	r3, [r3, #32]
 8007d6a:	431a      	orrs	r2, r3
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	430a      	orrs	r2, r1
 8007d72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007d7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	6911      	ldr	r1, [r2, #16]
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	68d2      	ldr	r2, [r2, #12]
 8007d8a:	4311      	orrs	r1, r2
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	6812      	ldr	r2, [r2, #0]
 8007d90:	430b      	orrs	r3, r1
 8007d92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	68db      	ldr	r3, [r3, #12]
 8007d9a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	695a      	ldr	r2, [r3, #20]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	699b      	ldr	r3, [r3, #24]
 8007da6:	431a      	orrs	r2, r3
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	430a      	orrs	r2, r1
 8007dae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f042 0201 	orr.w	r2, r2, #1
 8007dbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2220      	movs	r2, #32
 8007dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007ddc:	2300      	movs	r3, #0
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3710      	adds	r7, #16
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	bf00      	nop
 8007de8:	000186a0 	.word	0x000186a0
 8007dec:	001e847f 	.word	0x001e847f
 8007df0:	003d08ff 	.word	0x003d08ff
 8007df4:	431bde83 	.word	0x431bde83
 8007df8:	10624dd3 	.word	0x10624dd3

08007dfc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b088      	sub	sp, #32
 8007e00:	af02      	add	r7, sp, #8
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	4608      	mov	r0, r1
 8007e06:	4611      	mov	r1, r2
 8007e08:	461a      	mov	r2, r3
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	817b      	strh	r3, [r7, #10]
 8007e0e:	460b      	mov	r3, r1
 8007e10:	813b      	strh	r3, [r7, #8]
 8007e12:	4613      	mov	r3, r2
 8007e14:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007e16:	f7fe fa7f 	bl	8006318 <HAL_GetTick>
 8007e1a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	2b20      	cmp	r3, #32
 8007e26:	f040 80d9 	bne.w	8007fdc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	9300      	str	r3, [sp, #0]
 8007e2e:	2319      	movs	r3, #25
 8007e30:	2201      	movs	r2, #1
 8007e32:	496d      	ldr	r1, [pc, #436]	; (8007fe8 <HAL_I2C_Mem_Write+0x1ec>)
 8007e34:	68f8      	ldr	r0, [r7, #12]
 8007e36:	f000 f971 	bl	800811c <I2C_WaitOnFlagUntilTimeout>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d001      	beq.n	8007e44 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007e40:	2302      	movs	r3, #2
 8007e42:	e0cc      	b.n	8007fde <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d101      	bne.n	8007e52 <HAL_I2C_Mem_Write+0x56>
 8007e4e:	2302      	movs	r3, #2
 8007e50:	e0c5      	b.n	8007fde <HAL_I2C_Mem_Write+0x1e2>
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2201      	movs	r2, #1
 8007e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f003 0301 	and.w	r3, r3, #1
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d007      	beq.n	8007e78 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f042 0201 	orr.w	r2, r2, #1
 8007e76:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e86:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2221      	movs	r2, #33	; 0x21
 8007e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2240      	movs	r2, #64	; 0x40
 8007e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	6a3a      	ldr	r2, [r7, #32]
 8007ea2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007ea8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007eae:	b29a      	uxth	r2, r3
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	4a4d      	ldr	r2, [pc, #308]	; (8007fec <HAL_I2C_Mem_Write+0x1f0>)
 8007eb8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007eba:	88f8      	ldrh	r0, [r7, #6]
 8007ebc:	893a      	ldrh	r2, [r7, #8]
 8007ebe:	8979      	ldrh	r1, [r7, #10]
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	9301      	str	r3, [sp, #4]
 8007ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec6:	9300      	str	r3, [sp, #0]
 8007ec8:	4603      	mov	r3, r0
 8007eca:	68f8      	ldr	r0, [r7, #12]
 8007ecc:	f000 f890 	bl	8007ff0 <I2C_RequestMemoryWrite>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d052      	beq.n	8007f7c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e081      	b.n	8007fde <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007eda:	697a      	ldr	r2, [r7, #20]
 8007edc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ede:	68f8      	ldr	r0, [r7, #12]
 8007ee0:	f000 f9f2 	bl	80082c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d00d      	beq.n	8007f06 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eee:	2b04      	cmp	r3, #4
 8007ef0:	d107      	bne.n	8007f02 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f00:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	e06b      	b.n	8007fde <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0a:	781a      	ldrb	r2, [r3, #0]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f16:	1c5a      	adds	r2, r3, #1
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f20:	3b01      	subs	r3, #1
 8007f22:	b29a      	uxth	r2, r3
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	3b01      	subs	r3, #1
 8007f30:	b29a      	uxth	r2, r3
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	695b      	ldr	r3, [r3, #20]
 8007f3c:	f003 0304 	and.w	r3, r3, #4
 8007f40:	2b04      	cmp	r3, #4
 8007f42:	d11b      	bne.n	8007f7c <HAL_I2C_Mem_Write+0x180>
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d017      	beq.n	8007f7c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f50:	781a      	ldrb	r2, [r3, #0]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5c:	1c5a      	adds	r2, r3, #1
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f66:	3b01      	subs	r3, #1
 8007f68:	b29a      	uxth	r2, r3
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	3b01      	subs	r3, #1
 8007f76:	b29a      	uxth	r2, r3
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d1aa      	bne.n	8007eda <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f84:	697a      	ldr	r2, [r7, #20]
 8007f86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f88:	68f8      	ldr	r0, [r7, #12]
 8007f8a:	f000 f9de 	bl	800834a <I2C_WaitOnBTFFlagUntilTimeout>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d00d      	beq.n	8007fb0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f98:	2b04      	cmp	r3, #4
 8007f9a:	d107      	bne.n	8007fac <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007faa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007fac:	2301      	movs	r3, #1
 8007fae:	e016      	b.n	8007fde <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	681a      	ldr	r2, [r3, #0]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2220      	movs	r2, #32
 8007fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	e000      	b.n	8007fde <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007fdc:	2302      	movs	r3, #2
  }
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3718      	adds	r7, #24
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	00100002 	.word	0x00100002
 8007fec:	ffff0000 	.word	0xffff0000

08007ff0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b088      	sub	sp, #32
 8007ff4:	af02      	add	r7, sp, #8
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	4608      	mov	r0, r1
 8007ffa:	4611      	mov	r1, r2
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	4603      	mov	r3, r0
 8008000:	817b      	strh	r3, [r7, #10]
 8008002:	460b      	mov	r3, r1
 8008004:	813b      	strh	r3, [r7, #8]
 8008006:	4613      	mov	r3, r2
 8008008:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	681a      	ldr	r2, [r3, #0]
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008018:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800801a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801c:	9300      	str	r3, [sp, #0]
 800801e:	6a3b      	ldr	r3, [r7, #32]
 8008020:	2200      	movs	r2, #0
 8008022:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008026:	68f8      	ldr	r0, [r7, #12]
 8008028:	f000 f878 	bl	800811c <I2C_WaitOnFlagUntilTimeout>
 800802c:	4603      	mov	r3, r0
 800802e:	2b00      	cmp	r3, #0
 8008030:	d00d      	beq.n	800804e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800803c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008040:	d103      	bne.n	800804a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008048:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800804a:	2303      	movs	r3, #3
 800804c:	e05f      	b.n	800810e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800804e:	897b      	ldrh	r3, [r7, #10]
 8008050:	b2db      	uxtb	r3, r3
 8008052:	461a      	mov	r2, r3
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800805c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800805e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008060:	6a3a      	ldr	r2, [r7, #32]
 8008062:	492d      	ldr	r1, [pc, #180]	; (8008118 <I2C_RequestMemoryWrite+0x128>)
 8008064:	68f8      	ldr	r0, [r7, #12]
 8008066:	f000 f8b0 	bl	80081ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800806a:	4603      	mov	r3, r0
 800806c:	2b00      	cmp	r3, #0
 800806e:	d001      	beq.n	8008074 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008070:	2301      	movs	r3, #1
 8008072:	e04c      	b.n	800810e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008074:	2300      	movs	r3, #0
 8008076:	617b      	str	r3, [r7, #20]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	695b      	ldr	r3, [r3, #20]
 800807e:	617b      	str	r3, [r7, #20]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	699b      	ldr	r3, [r3, #24]
 8008086:	617b      	str	r3, [r7, #20]
 8008088:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800808a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800808c:	6a39      	ldr	r1, [r7, #32]
 800808e:	68f8      	ldr	r0, [r7, #12]
 8008090:	f000 f91a 	bl	80082c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008094:	4603      	mov	r3, r0
 8008096:	2b00      	cmp	r3, #0
 8008098:	d00d      	beq.n	80080b6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800809e:	2b04      	cmp	r3, #4
 80080a0:	d107      	bne.n	80080b2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
 80080b4:	e02b      	b.n	800810e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80080b6:	88fb      	ldrh	r3, [r7, #6]
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d105      	bne.n	80080c8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80080bc:	893b      	ldrh	r3, [r7, #8]
 80080be:	b2da      	uxtb	r2, r3
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	611a      	str	r2, [r3, #16]
 80080c6:	e021      	b.n	800810c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80080c8:	893b      	ldrh	r3, [r7, #8]
 80080ca:	0a1b      	lsrs	r3, r3, #8
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	b2da      	uxtb	r2, r3
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80080d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080d8:	6a39      	ldr	r1, [r7, #32]
 80080da:	68f8      	ldr	r0, [r7, #12]
 80080dc:	f000 f8f4 	bl	80082c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80080e0:	4603      	mov	r3, r0
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d00d      	beq.n	8008102 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ea:	2b04      	cmp	r3, #4
 80080ec:	d107      	bne.n	80080fe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80080fe:	2301      	movs	r3, #1
 8008100:	e005      	b.n	800810e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008102:	893b      	ldrh	r3, [r7, #8]
 8008104:	b2da      	uxtb	r2, r3
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800810c:	2300      	movs	r3, #0
}
 800810e:	4618      	mov	r0, r3
 8008110:	3718      	adds	r7, #24
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	00010002 	.word	0x00010002

0800811c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	60b9      	str	r1, [r7, #8]
 8008126:	603b      	str	r3, [r7, #0]
 8008128:	4613      	mov	r3, r2
 800812a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800812c:	e025      	b.n	800817a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008134:	d021      	beq.n	800817a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008136:	f7fe f8ef 	bl	8006318 <HAL_GetTick>
 800813a:	4602      	mov	r2, r0
 800813c:	69bb      	ldr	r3, [r7, #24]
 800813e:	1ad3      	subs	r3, r2, r3
 8008140:	683a      	ldr	r2, [r7, #0]
 8008142:	429a      	cmp	r2, r3
 8008144:	d302      	bcc.n	800814c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d116      	bne.n	800817a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2200      	movs	r2, #0
 8008150:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2220      	movs	r2, #32
 8008156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2200      	movs	r2, #0
 800815e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008166:	f043 0220 	orr.w	r2, r3, #32
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2200      	movs	r2, #0
 8008172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008176:	2301      	movs	r3, #1
 8008178:	e023      	b.n	80081c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	0c1b      	lsrs	r3, r3, #16
 800817e:	b2db      	uxtb	r3, r3
 8008180:	2b01      	cmp	r3, #1
 8008182:	d10d      	bne.n	80081a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	695b      	ldr	r3, [r3, #20]
 800818a:	43da      	mvns	r2, r3
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	4013      	ands	r3, r2
 8008190:	b29b      	uxth	r3, r3
 8008192:	2b00      	cmp	r3, #0
 8008194:	bf0c      	ite	eq
 8008196:	2301      	moveq	r3, #1
 8008198:	2300      	movne	r3, #0
 800819a:	b2db      	uxtb	r3, r3
 800819c:	461a      	mov	r2, r3
 800819e:	e00c      	b.n	80081ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	699b      	ldr	r3, [r3, #24]
 80081a6:	43da      	mvns	r2, r3
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	4013      	ands	r3, r2
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	bf0c      	ite	eq
 80081b2:	2301      	moveq	r3, #1
 80081b4:	2300      	movne	r3, #0
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	461a      	mov	r2, r3
 80081ba:	79fb      	ldrb	r3, [r7, #7]
 80081bc:	429a      	cmp	r2, r3
 80081be:	d0b6      	beq.n	800812e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80081c0:	2300      	movs	r3, #0
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3710      	adds	r7, #16
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}

080081ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80081ca:	b580      	push	{r7, lr}
 80081cc:	b084      	sub	sp, #16
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	60f8      	str	r0, [r7, #12]
 80081d2:	60b9      	str	r1, [r7, #8]
 80081d4:	607a      	str	r2, [r7, #4]
 80081d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80081d8:	e051      	b.n	800827e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	695b      	ldr	r3, [r3, #20]
 80081e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081e8:	d123      	bne.n	8008232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008202:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2200      	movs	r2, #0
 8008208:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2220      	movs	r2, #32
 800820e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2200      	movs	r2, #0
 8008216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821e:	f043 0204 	orr.w	r2, r3, #4
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2200      	movs	r2, #0
 800822a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	e046      	b.n	80082c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008238:	d021      	beq.n	800827e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800823a:	f7fe f86d 	bl	8006318 <HAL_GetTick>
 800823e:	4602      	mov	r2, r0
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	1ad3      	subs	r3, r2, r3
 8008244:	687a      	ldr	r2, [r7, #4]
 8008246:	429a      	cmp	r2, r3
 8008248:	d302      	bcc.n	8008250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d116      	bne.n	800827e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2200      	movs	r2, #0
 8008254:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2220      	movs	r2, #32
 800825a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2200      	movs	r2, #0
 8008262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800826a:	f043 0220 	orr.w	r2, r3, #32
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2200      	movs	r2, #0
 8008276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800827a:	2301      	movs	r3, #1
 800827c:	e020      	b.n	80082c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	0c1b      	lsrs	r3, r3, #16
 8008282:	b2db      	uxtb	r3, r3
 8008284:	2b01      	cmp	r3, #1
 8008286:	d10c      	bne.n	80082a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	695b      	ldr	r3, [r3, #20]
 800828e:	43da      	mvns	r2, r3
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	4013      	ands	r3, r2
 8008294:	b29b      	uxth	r3, r3
 8008296:	2b00      	cmp	r3, #0
 8008298:	bf14      	ite	ne
 800829a:	2301      	movne	r3, #1
 800829c:	2300      	moveq	r3, #0
 800829e:	b2db      	uxtb	r3, r3
 80082a0:	e00b      	b.n	80082ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	699b      	ldr	r3, [r3, #24]
 80082a8:	43da      	mvns	r2, r3
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	4013      	ands	r3, r2
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	bf14      	ite	ne
 80082b4:	2301      	movne	r3, #1
 80082b6:	2300      	moveq	r3, #0
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d18d      	bne.n	80081da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80082be:	2300      	movs	r3, #0
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3710      	adds	r7, #16
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80082d4:	e02d      	b.n	8008332 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80082d6:	68f8      	ldr	r0, [r7, #12]
 80082d8:	f000 f878 	bl	80083cc <I2C_IsAcknowledgeFailed>
 80082dc:	4603      	mov	r3, r0
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d001      	beq.n	80082e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	e02d      	b.n	8008342 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ec:	d021      	beq.n	8008332 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082ee:	f7fe f813 	bl	8006318 <HAL_GetTick>
 80082f2:	4602      	mov	r2, r0
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	1ad3      	subs	r3, r2, r3
 80082f8:	68ba      	ldr	r2, [r7, #8]
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d302      	bcc.n	8008304 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d116      	bne.n	8008332 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2200      	movs	r2, #0
 8008308:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2220      	movs	r2, #32
 800830e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2200      	movs	r2, #0
 8008316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800831e:	f043 0220 	orr.w	r2, r3, #32
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2200      	movs	r2, #0
 800832a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800832e:	2301      	movs	r3, #1
 8008330:	e007      	b.n	8008342 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	695b      	ldr	r3, [r3, #20]
 8008338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800833c:	2b80      	cmp	r3, #128	; 0x80
 800833e:	d1ca      	bne.n	80082d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008340:	2300      	movs	r3, #0
}
 8008342:	4618      	mov	r0, r3
 8008344:	3710      	adds	r7, #16
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}

0800834a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800834a:	b580      	push	{r7, lr}
 800834c:	b084      	sub	sp, #16
 800834e:	af00      	add	r7, sp, #0
 8008350:	60f8      	str	r0, [r7, #12]
 8008352:	60b9      	str	r1, [r7, #8]
 8008354:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008356:	e02d      	b.n	80083b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008358:	68f8      	ldr	r0, [r7, #12]
 800835a:	f000 f837 	bl	80083cc <I2C_IsAcknowledgeFailed>
 800835e:	4603      	mov	r3, r0
 8008360:	2b00      	cmp	r3, #0
 8008362:	d001      	beq.n	8008368 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008364:	2301      	movs	r3, #1
 8008366:	e02d      	b.n	80083c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800836e:	d021      	beq.n	80083b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008370:	f7fd ffd2 	bl	8006318 <HAL_GetTick>
 8008374:	4602      	mov	r2, r0
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	1ad3      	subs	r3, r2, r3
 800837a:	68ba      	ldr	r2, [r7, #8]
 800837c:	429a      	cmp	r2, r3
 800837e:	d302      	bcc.n	8008386 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d116      	bne.n	80083b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2200      	movs	r2, #0
 800838a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2220      	movs	r2, #32
 8008390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2200      	movs	r2, #0
 8008398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083a0:	f043 0220 	orr.w	r2, r3, #32
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2200      	movs	r2, #0
 80083ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80083b0:	2301      	movs	r3, #1
 80083b2:	e007      	b.n	80083c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	695b      	ldr	r3, [r3, #20]
 80083ba:	f003 0304 	and.w	r3, r3, #4
 80083be:	2b04      	cmp	r3, #4
 80083c0:	d1ca      	bne.n	8008358 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80083c2:	2300      	movs	r3, #0
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3710      	adds	r7, #16
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b083      	sub	sp, #12
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	695b      	ldr	r3, [r3, #20]
 80083da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083e2:	d11b      	bne.n	800841c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80083ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2220      	movs	r2, #32
 80083f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2200      	movs	r2, #0
 8008400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008408:	f043 0204 	orr.w	r2, r3, #4
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008418:	2301      	movs	r3, #1
 800841a:	e000      	b.n	800841e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800841c:	2300      	movs	r3, #0
}
 800841e:	4618      	mov	r0, r3
 8008420:	370c      	adds	r7, #12
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr
	...

0800842c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b082      	sub	sp, #8
 8008430:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8008432:	2300      	movs	r3, #0
 8008434:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008436:	2300      	movs	r3, #0
 8008438:	603b      	str	r3, [r7, #0]
 800843a:	4b20      	ldr	r3, [pc, #128]	; (80084bc <HAL_PWREx_EnableOverDrive+0x90>)
 800843c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800843e:	4a1f      	ldr	r2, [pc, #124]	; (80084bc <HAL_PWREx_EnableOverDrive+0x90>)
 8008440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008444:	6413      	str	r3, [r2, #64]	; 0x40
 8008446:	4b1d      	ldr	r3, [pc, #116]	; (80084bc <HAL_PWREx_EnableOverDrive+0x90>)
 8008448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800844a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800844e:	603b      	str	r3, [r7, #0]
 8008450:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008452:	4b1b      	ldr	r3, [pc, #108]	; (80084c0 <HAL_PWREx_EnableOverDrive+0x94>)
 8008454:	2201      	movs	r2, #1
 8008456:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008458:	f7fd ff5e 	bl	8006318 <HAL_GetTick>
 800845c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800845e:	e009      	b.n	8008474 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008460:	f7fd ff5a 	bl	8006318 <HAL_GetTick>
 8008464:	4602      	mov	r2, r0
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	1ad3      	subs	r3, r2, r3
 800846a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800846e:	d901      	bls.n	8008474 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8008470:	2303      	movs	r3, #3
 8008472:	e01f      	b.n	80084b4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008474:	4b13      	ldr	r3, [pc, #76]	; (80084c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800847c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008480:	d1ee      	bne.n	8008460 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008482:	4b11      	ldr	r3, [pc, #68]	; (80084c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008484:	2201      	movs	r2, #1
 8008486:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008488:	f7fd ff46 	bl	8006318 <HAL_GetTick>
 800848c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800848e:	e009      	b.n	80084a4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008490:	f7fd ff42 	bl	8006318 <HAL_GetTick>
 8008494:	4602      	mov	r2, r0
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	1ad3      	subs	r3, r2, r3
 800849a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800849e:	d901      	bls.n	80084a4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80084a0:	2303      	movs	r3, #3
 80084a2:	e007      	b.n	80084b4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80084a4:	4b07      	ldr	r3, [pc, #28]	; (80084c4 <HAL_PWREx_EnableOverDrive+0x98>)
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084b0:	d1ee      	bne.n	8008490 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80084b2:	2300      	movs	r3, #0
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3708      	adds	r7, #8
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}
 80084bc:	40023800 	.word	0x40023800
 80084c0:	420e0040 	.word	0x420e0040
 80084c4:	40007000 	.word	0x40007000
 80084c8:	420e0044 	.word	0x420e0044

080084cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d101      	bne.n	80084e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80084dc:	2301      	movs	r3, #1
 80084de:	e0cc      	b.n	800867a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80084e0:	4b68      	ldr	r3, [pc, #416]	; (8008684 <HAL_RCC_ClockConfig+0x1b8>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f003 030f 	and.w	r3, r3, #15
 80084e8:	683a      	ldr	r2, [r7, #0]
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d90c      	bls.n	8008508 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084ee:	4b65      	ldr	r3, [pc, #404]	; (8008684 <HAL_RCC_ClockConfig+0x1b8>)
 80084f0:	683a      	ldr	r2, [r7, #0]
 80084f2:	b2d2      	uxtb	r2, r2
 80084f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80084f6:	4b63      	ldr	r3, [pc, #396]	; (8008684 <HAL_RCC_ClockConfig+0x1b8>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f003 030f 	and.w	r3, r3, #15
 80084fe:	683a      	ldr	r2, [r7, #0]
 8008500:	429a      	cmp	r2, r3
 8008502:	d001      	beq.n	8008508 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008504:	2301      	movs	r3, #1
 8008506:	e0b8      	b.n	800867a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f003 0302 	and.w	r3, r3, #2
 8008510:	2b00      	cmp	r3, #0
 8008512:	d020      	beq.n	8008556 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f003 0304 	and.w	r3, r3, #4
 800851c:	2b00      	cmp	r3, #0
 800851e:	d005      	beq.n	800852c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008520:	4b59      	ldr	r3, [pc, #356]	; (8008688 <HAL_RCC_ClockConfig+0x1bc>)
 8008522:	689b      	ldr	r3, [r3, #8]
 8008524:	4a58      	ldr	r2, [pc, #352]	; (8008688 <HAL_RCC_ClockConfig+0x1bc>)
 8008526:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800852a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f003 0308 	and.w	r3, r3, #8
 8008534:	2b00      	cmp	r3, #0
 8008536:	d005      	beq.n	8008544 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008538:	4b53      	ldr	r3, [pc, #332]	; (8008688 <HAL_RCC_ClockConfig+0x1bc>)
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	4a52      	ldr	r2, [pc, #328]	; (8008688 <HAL_RCC_ClockConfig+0x1bc>)
 800853e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008542:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008544:	4b50      	ldr	r3, [pc, #320]	; (8008688 <HAL_RCC_ClockConfig+0x1bc>)
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	494d      	ldr	r1, [pc, #308]	; (8008688 <HAL_RCC_ClockConfig+0x1bc>)
 8008552:	4313      	orrs	r3, r2
 8008554:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f003 0301 	and.w	r3, r3, #1
 800855e:	2b00      	cmp	r3, #0
 8008560:	d044      	beq.n	80085ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	2b01      	cmp	r3, #1
 8008568:	d107      	bne.n	800857a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800856a:	4b47      	ldr	r3, [pc, #284]	; (8008688 <HAL_RCC_ClockConfig+0x1bc>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008572:	2b00      	cmp	r3, #0
 8008574:	d119      	bne.n	80085aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008576:	2301      	movs	r3, #1
 8008578:	e07f      	b.n	800867a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	2b02      	cmp	r3, #2
 8008580:	d003      	beq.n	800858a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008586:	2b03      	cmp	r3, #3
 8008588:	d107      	bne.n	800859a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800858a:	4b3f      	ldr	r3, [pc, #252]	; (8008688 <HAL_RCC_ClockConfig+0x1bc>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008592:	2b00      	cmp	r3, #0
 8008594:	d109      	bne.n	80085aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	e06f      	b.n	800867a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800859a:	4b3b      	ldr	r3, [pc, #236]	; (8008688 <HAL_RCC_ClockConfig+0x1bc>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f003 0302 	and.w	r3, r3, #2
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d101      	bne.n	80085aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80085a6:	2301      	movs	r3, #1
 80085a8:	e067      	b.n	800867a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80085aa:	4b37      	ldr	r3, [pc, #220]	; (8008688 <HAL_RCC_ClockConfig+0x1bc>)
 80085ac:	689b      	ldr	r3, [r3, #8]
 80085ae:	f023 0203 	bic.w	r2, r3, #3
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	4934      	ldr	r1, [pc, #208]	; (8008688 <HAL_RCC_ClockConfig+0x1bc>)
 80085b8:	4313      	orrs	r3, r2
 80085ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80085bc:	f7fd feac 	bl	8006318 <HAL_GetTick>
 80085c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085c2:	e00a      	b.n	80085da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80085c4:	f7fd fea8 	bl	8006318 <HAL_GetTick>
 80085c8:	4602      	mov	r2, r0
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	1ad3      	subs	r3, r2, r3
 80085ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d901      	bls.n	80085da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80085d6:	2303      	movs	r3, #3
 80085d8:	e04f      	b.n	800867a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085da:	4b2b      	ldr	r3, [pc, #172]	; (8008688 <HAL_RCC_ClockConfig+0x1bc>)
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	f003 020c 	and.w	r2, r3, #12
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	009b      	lsls	r3, r3, #2
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d1eb      	bne.n	80085c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80085ec:	4b25      	ldr	r3, [pc, #148]	; (8008684 <HAL_RCC_ClockConfig+0x1b8>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f003 030f 	and.w	r3, r3, #15
 80085f4:	683a      	ldr	r2, [r7, #0]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d20c      	bcs.n	8008614 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085fa:	4b22      	ldr	r3, [pc, #136]	; (8008684 <HAL_RCC_ClockConfig+0x1b8>)
 80085fc:	683a      	ldr	r2, [r7, #0]
 80085fe:	b2d2      	uxtb	r2, r2
 8008600:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008602:	4b20      	ldr	r3, [pc, #128]	; (8008684 <HAL_RCC_ClockConfig+0x1b8>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f003 030f 	and.w	r3, r3, #15
 800860a:	683a      	ldr	r2, [r7, #0]
 800860c:	429a      	cmp	r2, r3
 800860e:	d001      	beq.n	8008614 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008610:	2301      	movs	r3, #1
 8008612:	e032      	b.n	800867a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f003 0304 	and.w	r3, r3, #4
 800861c:	2b00      	cmp	r3, #0
 800861e:	d008      	beq.n	8008632 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008620:	4b19      	ldr	r3, [pc, #100]	; (8008688 <HAL_RCC_ClockConfig+0x1bc>)
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	68db      	ldr	r3, [r3, #12]
 800862c:	4916      	ldr	r1, [pc, #88]	; (8008688 <HAL_RCC_ClockConfig+0x1bc>)
 800862e:	4313      	orrs	r3, r2
 8008630:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f003 0308 	and.w	r3, r3, #8
 800863a:	2b00      	cmp	r3, #0
 800863c:	d009      	beq.n	8008652 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800863e:	4b12      	ldr	r3, [pc, #72]	; (8008688 <HAL_RCC_ClockConfig+0x1bc>)
 8008640:	689b      	ldr	r3, [r3, #8]
 8008642:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	691b      	ldr	r3, [r3, #16]
 800864a:	00db      	lsls	r3, r3, #3
 800864c:	490e      	ldr	r1, [pc, #56]	; (8008688 <HAL_RCC_ClockConfig+0x1bc>)
 800864e:	4313      	orrs	r3, r2
 8008650:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008652:	f000 f841 	bl	80086d8 <HAL_RCC_GetSysClockFreq>
 8008656:	4602      	mov	r2, r0
 8008658:	4b0b      	ldr	r3, [pc, #44]	; (8008688 <HAL_RCC_ClockConfig+0x1bc>)
 800865a:	689b      	ldr	r3, [r3, #8]
 800865c:	091b      	lsrs	r3, r3, #4
 800865e:	f003 030f 	and.w	r3, r3, #15
 8008662:	490a      	ldr	r1, [pc, #40]	; (800868c <HAL_RCC_ClockConfig+0x1c0>)
 8008664:	5ccb      	ldrb	r3, [r1, r3]
 8008666:	fa22 f303 	lsr.w	r3, r2, r3
 800866a:	4a09      	ldr	r2, [pc, #36]	; (8008690 <HAL_RCC_ClockConfig+0x1c4>)
 800866c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800866e:	4b09      	ldr	r3, [pc, #36]	; (8008694 <HAL_RCC_ClockConfig+0x1c8>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4618      	mov	r0, r3
 8008674:	f7fd fe0c 	bl	8006290 <HAL_InitTick>

  return HAL_OK;
 8008678:	2300      	movs	r3, #0
}
 800867a:	4618      	mov	r0, r3
 800867c:	3710      	adds	r7, #16
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	40023c00 	.word	0x40023c00
 8008688:	40023800 	.word	0x40023800
 800868c:	0801423c 	.word	0x0801423c
 8008690:	20000058 	.word	0x20000058
 8008694:	2000005c 	.word	0x2000005c

08008698 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008698:	b480      	push	{r7}
 800869a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800869c:	4b03      	ldr	r3, [pc, #12]	; (80086ac <HAL_RCC_GetHCLKFreq+0x14>)
 800869e:	681b      	ldr	r3, [r3, #0]
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr
 80086aa:	bf00      	nop
 80086ac:	20000058 	.word	0x20000058

080086b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80086b4:	f7ff fff0 	bl	8008698 <HAL_RCC_GetHCLKFreq>
 80086b8:	4602      	mov	r2, r0
 80086ba:	4b05      	ldr	r3, [pc, #20]	; (80086d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	0a9b      	lsrs	r3, r3, #10
 80086c0:	f003 0307 	and.w	r3, r3, #7
 80086c4:	4903      	ldr	r1, [pc, #12]	; (80086d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80086c6:	5ccb      	ldrb	r3, [r1, r3]
 80086c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	bd80      	pop	{r7, pc}
 80086d0:	40023800 	.word	0x40023800
 80086d4:	0801424c 	.word	0x0801424c

080086d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80086d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086dc:	b0a6      	sub	sp, #152	; 0x98
 80086de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80086e0:	2300      	movs	r3, #0
 80086e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 80086e6:	2300      	movs	r3, #0
 80086e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80086ec:	2300      	movs	r3, #0
 80086ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80086f2:	2300      	movs	r3, #0
 80086f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80086f8:	2300      	movs	r3, #0
 80086fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80086fe:	4bc8      	ldr	r3, [pc, #800]	; (8008a20 <HAL_RCC_GetSysClockFreq+0x348>)
 8008700:	689b      	ldr	r3, [r3, #8]
 8008702:	f003 030c 	and.w	r3, r3, #12
 8008706:	2b0c      	cmp	r3, #12
 8008708:	f200 817e 	bhi.w	8008a08 <HAL_RCC_GetSysClockFreq+0x330>
 800870c:	a201      	add	r2, pc, #4	; (adr r2, 8008714 <HAL_RCC_GetSysClockFreq+0x3c>)
 800870e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008712:	bf00      	nop
 8008714:	08008749 	.word	0x08008749
 8008718:	08008a09 	.word	0x08008a09
 800871c:	08008a09 	.word	0x08008a09
 8008720:	08008a09 	.word	0x08008a09
 8008724:	08008751 	.word	0x08008751
 8008728:	08008a09 	.word	0x08008a09
 800872c:	08008a09 	.word	0x08008a09
 8008730:	08008a09 	.word	0x08008a09
 8008734:	08008759 	.word	0x08008759
 8008738:	08008a09 	.word	0x08008a09
 800873c:	08008a09 	.word	0x08008a09
 8008740:	08008a09 	.word	0x08008a09
 8008744:	080088c3 	.word	0x080088c3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008748:	4bb6      	ldr	r3, [pc, #728]	; (8008a24 <HAL_RCC_GetSysClockFreq+0x34c>)
 800874a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 800874e:	e15f      	b.n	8008a10 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008750:	4bb5      	ldr	r3, [pc, #724]	; (8008a28 <HAL_RCC_GetSysClockFreq+0x350>)
 8008752:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8008756:	e15b      	b.n	8008a10 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008758:	4bb1      	ldr	r3, [pc, #708]	; (8008a20 <HAL_RCC_GetSysClockFreq+0x348>)
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008760:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008764:	4bae      	ldr	r3, [pc, #696]	; (8008a20 <HAL_RCC_GetSysClockFreq+0x348>)
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800876c:	2b00      	cmp	r3, #0
 800876e:	d031      	beq.n	80087d4 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008770:	4bab      	ldr	r3, [pc, #684]	; (8008a20 <HAL_RCC_GetSysClockFreq+0x348>)
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	099b      	lsrs	r3, r3, #6
 8008776:	2200      	movs	r2, #0
 8008778:	66bb      	str	r3, [r7, #104]	; 0x68
 800877a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800877c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800877e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008782:	663b      	str	r3, [r7, #96]	; 0x60
 8008784:	2300      	movs	r3, #0
 8008786:	667b      	str	r3, [r7, #100]	; 0x64
 8008788:	4ba7      	ldr	r3, [pc, #668]	; (8008a28 <HAL_RCC_GetSysClockFreq+0x350>)
 800878a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800878e:	462a      	mov	r2, r5
 8008790:	fb03 f202 	mul.w	r2, r3, r2
 8008794:	2300      	movs	r3, #0
 8008796:	4621      	mov	r1, r4
 8008798:	fb01 f303 	mul.w	r3, r1, r3
 800879c:	4413      	add	r3, r2
 800879e:	4aa2      	ldr	r2, [pc, #648]	; (8008a28 <HAL_RCC_GetSysClockFreq+0x350>)
 80087a0:	4621      	mov	r1, r4
 80087a2:	fba1 1202 	umull	r1, r2, r1, r2
 80087a6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80087a8:	460a      	mov	r2, r1
 80087aa:	67ba      	str	r2, [r7, #120]	; 0x78
 80087ac:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80087ae:	4413      	add	r3, r2
 80087b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80087b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80087b6:	2200      	movs	r2, #0
 80087b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80087ba:	65fa      	str	r2, [r7, #92]	; 0x5c
 80087bc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80087c0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80087c4:	f7f8 fa80 	bl	8000cc8 <__aeabi_uldivmod>
 80087c8:	4602      	mov	r2, r0
 80087ca:	460b      	mov	r3, r1
 80087cc:	4613      	mov	r3, r2
 80087ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80087d2:	e064      	b.n	800889e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80087d4:	4b92      	ldr	r3, [pc, #584]	; (8008a20 <HAL_RCC_GetSysClockFreq+0x348>)
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	099b      	lsrs	r3, r3, #6
 80087da:	2200      	movs	r2, #0
 80087dc:	653b      	str	r3, [r7, #80]	; 0x50
 80087de:	657a      	str	r2, [r7, #84]	; 0x54
 80087e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80087e8:	2300      	movs	r3, #0
 80087ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087ec:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80087f0:	4622      	mov	r2, r4
 80087f2:	462b      	mov	r3, r5
 80087f4:	f04f 0000 	mov.w	r0, #0
 80087f8:	f04f 0100 	mov.w	r1, #0
 80087fc:	0159      	lsls	r1, r3, #5
 80087fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008802:	0150      	lsls	r0, r2, #5
 8008804:	4602      	mov	r2, r0
 8008806:	460b      	mov	r3, r1
 8008808:	4621      	mov	r1, r4
 800880a:	1a51      	subs	r1, r2, r1
 800880c:	6139      	str	r1, [r7, #16]
 800880e:	4629      	mov	r1, r5
 8008810:	eb63 0301 	sbc.w	r3, r3, r1
 8008814:	617b      	str	r3, [r7, #20]
 8008816:	f04f 0200 	mov.w	r2, #0
 800881a:	f04f 0300 	mov.w	r3, #0
 800881e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008822:	4659      	mov	r1, fp
 8008824:	018b      	lsls	r3, r1, #6
 8008826:	4651      	mov	r1, sl
 8008828:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800882c:	4651      	mov	r1, sl
 800882e:	018a      	lsls	r2, r1, #6
 8008830:	4651      	mov	r1, sl
 8008832:	ebb2 0801 	subs.w	r8, r2, r1
 8008836:	4659      	mov	r1, fp
 8008838:	eb63 0901 	sbc.w	r9, r3, r1
 800883c:	f04f 0200 	mov.w	r2, #0
 8008840:	f04f 0300 	mov.w	r3, #0
 8008844:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008848:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800884c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008850:	4690      	mov	r8, r2
 8008852:	4699      	mov	r9, r3
 8008854:	4623      	mov	r3, r4
 8008856:	eb18 0303 	adds.w	r3, r8, r3
 800885a:	60bb      	str	r3, [r7, #8]
 800885c:	462b      	mov	r3, r5
 800885e:	eb49 0303 	adc.w	r3, r9, r3
 8008862:	60fb      	str	r3, [r7, #12]
 8008864:	f04f 0200 	mov.w	r2, #0
 8008868:	f04f 0300 	mov.w	r3, #0
 800886c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008870:	4629      	mov	r1, r5
 8008872:	028b      	lsls	r3, r1, #10
 8008874:	4621      	mov	r1, r4
 8008876:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800887a:	4621      	mov	r1, r4
 800887c:	028a      	lsls	r2, r1, #10
 800887e:	4610      	mov	r0, r2
 8008880:	4619      	mov	r1, r3
 8008882:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008886:	2200      	movs	r2, #0
 8008888:	643b      	str	r3, [r7, #64]	; 0x40
 800888a:	647a      	str	r2, [r7, #68]	; 0x44
 800888c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008890:	f7f8 fa1a 	bl	8000cc8 <__aeabi_uldivmod>
 8008894:	4602      	mov	r2, r0
 8008896:	460b      	mov	r3, r1
 8008898:	4613      	mov	r3, r2
 800889a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800889e:	4b60      	ldr	r3, [pc, #384]	; (8008a20 <HAL_RCC_GetSysClockFreq+0x348>)
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	0c1b      	lsrs	r3, r3, #16
 80088a4:	f003 0303 	and.w	r3, r3, #3
 80088a8:	3301      	adds	r3, #1
 80088aa:	005b      	lsls	r3, r3, #1
 80088ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 80088b0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80088b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80088b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80088bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80088c0:	e0a6      	b.n	8008a10 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80088c2:	4b57      	ldr	r3, [pc, #348]	; (8008a20 <HAL_RCC_GetSysClockFreq+0x348>)
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80088ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80088ce:	4b54      	ldr	r3, [pc, #336]	; (8008a20 <HAL_RCC_GetSysClockFreq+0x348>)
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d02a      	beq.n	8008930 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80088da:	4b51      	ldr	r3, [pc, #324]	; (8008a20 <HAL_RCC_GetSysClockFreq+0x348>)
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	099b      	lsrs	r3, r3, #6
 80088e0:	2200      	movs	r2, #0
 80088e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80088e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80088e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80088ec:	2100      	movs	r1, #0
 80088ee:	4b4e      	ldr	r3, [pc, #312]	; (8008a28 <HAL_RCC_GetSysClockFreq+0x350>)
 80088f0:	fb03 f201 	mul.w	r2, r3, r1
 80088f4:	2300      	movs	r3, #0
 80088f6:	fb00 f303 	mul.w	r3, r0, r3
 80088fa:	4413      	add	r3, r2
 80088fc:	4a4a      	ldr	r2, [pc, #296]	; (8008a28 <HAL_RCC_GetSysClockFreq+0x350>)
 80088fe:	fba0 1202 	umull	r1, r2, r0, r2
 8008902:	677a      	str	r2, [r7, #116]	; 0x74
 8008904:	460a      	mov	r2, r1
 8008906:	673a      	str	r2, [r7, #112]	; 0x70
 8008908:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800890a:	4413      	add	r3, r2
 800890c:	677b      	str	r3, [r7, #116]	; 0x74
 800890e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008912:	2200      	movs	r2, #0
 8008914:	633b      	str	r3, [r7, #48]	; 0x30
 8008916:	637a      	str	r2, [r7, #52]	; 0x34
 8008918:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800891c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8008920:	f7f8 f9d2 	bl	8000cc8 <__aeabi_uldivmod>
 8008924:	4602      	mov	r2, r0
 8008926:	460b      	mov	r3, r1
 8008928:	4613      	mov	r3, r2
 800892a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800892e:	e05b      	b.n	80089e8 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008930:	4b3b      	ldr	r3, [pc, #236]	; (8008a20 <HAL_RCC_GetSysClockFreq+0x348>)
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	099b      	lsrs	r3, r3, #6
 8008936:	2200      	movs	r2, #0
 8008938:	62bb      	str	r3, [r7, #40]	; 0x28
 800893a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800893c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800893e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008942:	623b      	str	r3, [r7, #32]
 8008944:	2300      	movs	r3, #0
 8008946:	627b      	str	r3, [r7, #36]	; 0x24
 8008948:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800894c:	4642      	mov	r2, r8
 800894e:	464b      	mov	r3, r9
 8008950:	f04f 0000 	mov.w	r0, #0
 8008954:	f04f 0100 	mov.w	r1, #0
 8008958:	0159      	lsls	r1, r3, #5
 800895a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800895e:	0150      	lsls	r0, r2, #5
 8008960:	4602      	mov	r2, r0
 8008962:	460b      	mov	r3, r1
 8008964:	4641      	mov	r1, r8
 8008966:	ebb2 0a01 	subs.w	sl, r2, r1
 800896a:	4649      	mov	r1, r9
 800896c:	eb63 0b01 	sbc.w	fp, r3, r1
 8008970:	f04f 0200 	mov.w	r2, #0
 8008974:	f04f 0300 	mov.w	r3, #0
 8008978:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800897c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008980:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008984:	ebb2 040a 	subs.w	r4, r2, sl
 8008988:	eb63 050b 	sbc.w	r5, r3, fp
 800898c:	f04f 0200 	mov.w	r2, #0
 8008990:	f04f 0300 	mov.w	r3, #0
 8008994:	00eb      	lsls	r3, r5, #3
 8008996:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800899a:	00e2      	lsls	r2, r4, #3
 800899c:	4614      	mov	r4, r2
 800899e:	461d      	mov	r5, r3
 80089a0:	4643      	mov	r3, r8
 80089a2:	18e3      	adds	r3, r4, r3
 80089a4:	603b      	str	r3, [r7, #0]
 80089a6:	464b      	mov	r3, r9
 80089a8:	eb45 0303 	adc.w	r3, r5, r3
 80089ac:	607b      	str	r3, [r7, #4]
 80089ae:	f04f 0200 	mov.w	r2, #0
 80089b2:	f04f 0300 	mov.w	r3, #0
 80089b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80089ba:	4629      	mov	r1, r5
 80089bc:	028b      	lsls	r3, r1, #10
 80089be:	4621      	mov	r1, r4
 80089c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80089c4:	4621      	mov	r1, r4
 80089c6:	028a      	lsls	r2, r1, #10
 80089c8:	4610      	mov	r0, r2
 80089ca:	4619      	mov	r1, r3
 80089cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80089d0:	2200      	movs	r2, #0
 80089d2:	61bb      	str	r3, [r7, #24]
 80089d4:	61fa      	str	r2, [r7, #28]
 80089d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80089da:	f7f8 f975 	bl	8000cc8 <__aeabi_uldivmod>
 80089de:	4602      	mov	r2, r0
 80089e0:	460b      	mov	r3, r1
 80089e2:	4613      	mov	r3, r2
 80089e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80089e8:	4b0d      	ldr	r3, [pc, #52]	; (8008a20 <HAL_RCC_GetSysClockFreq+0x348>)
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	0f1b      	lsrs	r3, r3, #28
 80089ee:	f003 0307 	and.w	r3, r3, #7
 80089f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80089f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80089fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80089fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8008a06:	e003      	b.n	8008a10 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008a08:	4b06      	ldr	r3, [pc, #24]	; (8008a24 <HAL_RCC_GetSysClockFreq+0x34c>)
 8008a0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8008a0e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008a10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3798      	adds	r7, #152	; 0x98
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a1e:	bf00      	nop
 8008a20:	40023800 	.word	0x40023800
 8008a24:	00f42400 	.word	0x00f42400
 8008a28:	00b71b00 	.word	0x00b71b00

08008a2c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b086      	sub	sp, #24
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d101      	bne.n	8008a3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e28d      	b.n	8008f5a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f003 0301 	and.w	r3, r3, #1
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	f000 8083 	beq.w	8008b52 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008a4c:	4b94      	ldr	r3, [pc, #592]	; (8008ca0 <HAL_RCC_OscConfig+0x274>)
 8008a4e:	689b      	ldr	r3, [r3, #8]
 8008a50:	f003 030c 	and.w	r3, r3, #12
 8008a54:	2b04      	cmp	r3, #4
 8008a56:	d019      	beq.n	8008a8c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008a58:	4b91      	ldr	r3, [pc, #580]	; (8008ca0 <HAL_RCC_OscConfig+0x274>)
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008a60:	2b08      	cmp	r3, #8
 8008a62:	d106      	bne.n	8008a72 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008a64:	4b8e      	ldr	r3, [pc, #568]	; (8008ca0 <HAL_RCC_OscConfig+0x274>)
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a70:	d00c      	beq.n	8008a8c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008a72:	4b8b      	ldr	r3, [pc, #556]	; (8008ca0 <HAL_RCC_OscConfig+0x274>)
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008a7a:	2b0c      	cmp	r3, #12
 8008a7c:	d112      	bne.n	8008aa4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008a7e:	4b88      	ldr	r3, [pc, #544]	; (8008ca0 <HAL_RCC_OscConfig+0x274>)
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a8a:	d10b      	bne.n	8008aa4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a8c:	4b84      	ldr	r3, [pc, #528]	; (8008ca0 <HAL_RCC_OscConfig+0x274>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d05b      	beq.n	8008b50 <HAL_RCC_OscConfig+0x124>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d157      	bne.n	8008b50 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	e25a      	b.n	8008f5a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008aac:	d106      	bne.n	8008abc <HAL_RCC_OscConfig+0x90>
 8008aae:	4b7c      	ldr	r3, [pc, #496]	; (8008ca0 <HAL_RCC_OscConfig+0x274>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a7b      	ldr	r2, [pc, #492]	; (8008ca0 <HAL_RCC_OscConfig+0x274>)
 8008ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ab8:	6013      	str	r3, [r2, #0]
 8008aba:	e01d      	b.n	8008af8 <HAL_RCC_OscConfig+0xcc>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008ac4:	d10c      	bne.n	8008ae0 <HAL_RCC_OscConfig+0xb4>
 8008ac6:	4b76      	ldr	r3, [pc, #472]	; (8008ca0 <HAL_RCC_OscConfig+0x274>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a75      	ldr	r2, [pc, #468]	; (8008ca0 <HAL_RCC_OscConfig+0x274>)
 8008acc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ad0:	6013      	str	r3, [r2, #0]
 8008ad2:	4b73      	ldr	r3, [pc, #460]	; (8008ca0 <HAL_RCC_OscConfig+0x274>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a72      	ldr	r2, [pc, #456]	; (8008ca0 <HAL_RCC_OscConfig+0x274>)
 8008ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008adc:	6013      	str	r3, [r2, #0]
 8008ade:	e00b      	b.n	8008af8 <HAL_RCC_OscConfig+0xcc>
 8008ae0:	4b6f      	ldr	r3, [pc, #444]	; (8008ca0 <HAL_RCC_OscConfig+0x274>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a6e      	ldr	r2, [pc, #440]	; (8008ca0 <HAL_RCC_OscConfig+0x274>)
 8008ae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008aea:	6013      	str	r3, [r2, #0]
 8008aec:	4b6c      	ldr	r3, [pc, #432]	; (8008ca0 <HAL_RCC_OscConfig+0x274>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a6b      	ldr	r2, [pc, #428]	; (8008ca0 <HAL_RCC_OscConfig+0x274>)
 8008af2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008af6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d013      	beq.n	8008b28 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b00:	f7fd fc0a 	bl	8006318 <HAL_GetTick>
 8008b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b06:	e008      	b.n	8008b1a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008b08:	f7fd fc06 	bl	8006318 <HAL_GetTick>
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	1ad3      	subs	r3, r2, r3
 8008b12:	2b64      	cmp	r3, #100	; 0x64
 8008b14:	d901      	bls.n	8008b1a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8008b16:	2303      	movs	r3, #3
 8008b18:	e21f      	b.n	8008f5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b1a:	4b61      	ldr	r3, [pc, #388]	; (8008ca0 <HAL_RCC_OscConfig+0x274>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d0f0      	beq.n	8008b08 <HAL_RCC_OscConfig+0xdc>
 8008b26:	e014      	b.n	8008b52 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b28:	f7fd fbf6 	bl	8006318 <HAL_GetTick>
 8008b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b2e:	e008      	b.n	8008b42 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008b30:	f7fd fbf2 	bl	8006318 <HAL_GetTick>
 8008b34:	4602      	mov	r2, r0
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	1ad3      	subs	r3, r2, r3
 8008b3a:	2b64      	cmp	r3, #100	; 0x64
 8008b3c:	d901      	bls.n	8008b42 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8008b3e:	2303      	movs	r3, #3
 8008b40:	e20b      	b.n	8008f5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b42:	4b57      	ldr	r3, [pc, #348]	; (8008ca0 <HAL_RCC_OscConfig+0x274>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d1f0      	bne.n	8008b30 <HAL_RCC_OscConfig+0x104>
 8008b4e:	e000      	b.n	8008b52 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f003 0302 	and.w	r3, r3, #2
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d06f      	beq.n	8008c3e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008b5e:	4b50      	ldr	r3, [pc, #320]	; (8008ca0 <HAL_RCC_OscConfig+0x274>)
 8008b60:	689b      	ldr	r3, [r3, #8]
 8008b62:	f003 030c 	and.w	r3, r3, #12
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d017      	beq.n	8008b9a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008b6a:	4b4d      	ldr	r3, [pc, #308]	; (8008ca0 <HAL_RCC_OscConfig+0x274>)
 8008b6c:	689b      	ldr	r3, [r3, #8]
 8008b6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008b72:	2b08      	cmp	r3, #8
 8008b74:	d105      	bne.n	8008b82 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008b76:	4b4a      	ldr	r3, [pc, #296]	; (8008ca0 <HAL_RCC_OscConfig+0x274>)
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d00b      	beq.n	8008b9a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008b82:	4b47      	ldr	r3, [pc, #284]	; (8008ca0 <HAL_RCC_OscConfig+0x274>)
 8008b84:	689b      	ldr	r3, [r3, #8]
 8008b86:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008b8a:	2b0c      	cmp	r3, #12
 8008b8c:	d11c      	bne.n	8008bc8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008b8e:	4b44      	ldr	r3, [pc, #272]	; (8008ca0 <HAL_RCC_OscConfig+0x274>)
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d116      	bne.n	8008bc8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008b9a:	4b41      	ldr	r3, [pc, #260]	; (8008ca0 <HAL_RCC_OscConfig+0x274>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f003 0302 	and.w	r3, r3, #2
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d005      	beq.n	8008bb2 <HAL_RCC_OscConfig+0x186>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	68db      	ldr	r3, [r3, #12]
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	d001      	beq.n	8008bb2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	e1d3      	b.n	8008f5a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008bb2:	4b3b      	ldr	r3, [pc, #236]	; (8008ca0 <HAL_RCC_OscConfig+0x274>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	691b      	ldr	r3, [r3, #16]
 8008bbe:	00db      	lsls	r3, r3, #3
 8008bc0:	4937      	ldr	r1, [pc, #220]	; (8008ca0 <HAL_RCC_OscConfig+0x274>)
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008bc6:	e03a      	b.n	8008c3e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	68db      	ldr	r3, [r3, #12]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d020      	beq.n	8008c12 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008bd0:	4b34      	ldr	r3, [pc, #208]	; (8008ca4 <HAL_RCC_OscConfig+0x278>)
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bd6:	f7fd fb9f 	bl	8006318 <HAL_GetTick>
 8008bda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008bdc:	e008      	b.n	8008bf0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008bde:	f7fd fb9b 	bl	8006318 <HAL_GetTick>
 8008be2:	4602      	mov	r2, r0
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	1ad3      	subs	r3, r2, r3
 8008be8:	2b02      	cmp	r3, #2
 8008bea:	d901      	bls.n	8008bf0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8008bec:	2303      	movs	r3, #3
 8008bee:	e1b4      	b.n	8008f5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008bf0:	4b2b      	ldr	r3, [pc, #172]	; (8008ca0 <HAL_RCC_OscConfig+0x274>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f003 0302 	and.w	r3, r3, #2
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d0f0      	beq.n	8008bde <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008bfc:	4b28      	ldr	r3, [pc, #160]	; (8008ca0 <HAL_RCC_OscConfig+0x274>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	691b      	ldr	r3, [r3, #16]
 8008c08:	00db      	lsls	r3, r3, #3
 8008c0a:	4925      	ldr	r1, [pc, #148]	; (8008ca0 <HAL_RCC_OscConfig+0x274>)
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	600b      	str	r3, [r1, #0]
 8008c10:	e015      	b.n	8008c3e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008c12:	4b24      	ldr	r3, [pc, #144]	; (8008ca4 <HAL_RCC_OscConfig+0x278>)
 8008c14:	2200      	movs	r2, #0
 8008c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c18:	f7fd fb7e 	bl	8006318 <HAL_GetTick>
 8008c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c1e:	e008      	b.n	8008c32 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008c20:	f7fd fb7a 	bl	8006318 <HAL_GetTick>
 8008c24:	4602      	mov	r2, r0
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	1ad3      	subs	r3, r2, r3
 8008c2a:	2b02      	cmp	r3, #2
 8008c2c:	d901      	bls.n	8008c32 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008c2e:	2303      	movs	r3, #3
 8008c30:	e193      	b.n	8008f5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c32:	4b1b      	ldr	r3, [pc, #108]	; (8008ca0 <HAL_RCC_OscConfig+0x274>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f003 0302 	and.w	r3, r3, #2
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d1f0      	bne.n	8008c20 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f003 0308 	and.w	r3, r3, #8
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d036      	beq.n	8008cb8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	695b      	ldr	r3, [r3, #20]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d016      	beq.n	8008c80 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008c52:	4b15      	ldr	r3, [pc, #84]	; (8008ca8 <HAL_RCC_OscConfig+0x27c>)
 8008c54:	2201      	movs	r2, #1
 8008c56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c58:	f7fd fb5e 	bl	8006318 <HAL_GetTick>
 8008c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c5e:	e008      	b.n	8008c72 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008c60:	f7fd fb5a 	bl	8006318 <HAL_GetTick>
 8008c64:	4602      	mov	r2, r0
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	1ad3      	subs	r3, r2, r3
 8008c6a:	2b02      	cmp	r3, #2
 8008c6c:	d901      	bls.n	8008c72 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8008c6e:	2303      	movs	r3, #3
 8008c70:	e173      	b.n	8008f5a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c72:	4b0b      	ldr	r3, [pc, #44]	; (8008ca0 <HAL_RCC_OscConfig+0x274>)
 8008c74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c76:	f003 0302 	and.w	r3, r3, #2
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d0f0      	beq.n	8008c60 <HAL_RCC_OscConfig+0x234>
 8008c7e:	e01b      	b.n	8008cb8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008c80:	4b09      	ldr	r3, [pc, #36]	; (8008ca8 <HAL_RCC_OscConfig+0x27c>)
 8008c82:	2200      	movs	r2, #0
 8008c84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c86:	f7fd fb47 	bl	8006318 <HAL_GetTick>
 8008c8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008c8c:	e00e      	b.n	8008cac <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008c8e:	f7fd fb43 	bl	8006318 <HAL_GetTick>
 8008c92:	4602      	mov	r2, r0
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	1ad3      	subs	r3, r2, r3
 8008c98:	2b02      	cmp	r3, #2
 8008c9a:	d907      	bls.n	8008cac <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8008c9c:	2303      	movs	r3, #3
 8008c9e:	e15c      	b.n	8008f5a <HAL_RCC_OscConfig+0x52e>
 8008ca0:	40023800 	.word	0x40023800
 8008ca4:	42470000 	.word	0x42470000
 8008ca8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008cac:	4b8a      	ldr	r3, [pc, #552]	; (8008ed8 <HAL_RCC_OscConfig+0x4ac>)
 8008cae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cb0:	f003 0302 	and.w	r3, r3, #2
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d1ea      	bne.n	8008c8e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f003 0304 	and.w	r3, r3, #4
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	f000 8097 	beq.w	8008df4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008cca:	4b83      	ldr	r3, [pc, #524]	; (8008ed8 <HAL_RCC_OscConfig+0x4ac>)
 8008ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d10f      	bne.n	8008cf6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	60bb      	str	r3, [r7, #8]
 8008cda:	4b7f      	ldr	r3, [pc, #508]	; (8008ed8 <HAL_RCC_OscConfig+0x4ac>)
 8008cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cde:	4a7e      	ldr	r2, [pc, #504]	; (8008ed8 <HAL_RCC_OscConfig+0x4ac>)
 8008ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8008ce6:	4b7c      	ldr	r3, [pc, #496]	; (8008ed8 <HAL_RCC_OscConfig+0x4ac>)
 8008ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cee:	60bb      	str	r3, [r7, #8]
 8008cf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008cf6:	4b79      	ldr	r3, [pc, #484]	; (8008edc <HAL_RCC_OscConfig+0x4b0>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d118      	bne.n	8008d34 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008d02:	4b76      	ldr	r3, [pc, #472]	; (8008edc <HAL_RCC_OscConfig+0x4b0>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a75      	ldr	r2, [pc, #468]	; (8008edc <HAL_RCC_OscConfig+0x4b0>)
 8008d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008d0e:	f7fd fb03 	bl	8006318 <HAL_GetTick>
 8008d12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d14:	e008      	b.n	8008d28 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d16:	f7fd faff 	bl	8006318 <HAL_GetTick>
 8008d1a:	4602      	mov	r2, r0
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	1ad3      	subs	r3, r2, r3
 8008d20:	2b02      	cmp	r3, #2
 8008d22:	d901      	bls.n	8008d28 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8008d24:	2303      	movs	r3, #3
 8008d26:	e118      	b.n	8008f5a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d28:	4b6c      	ldr	r3, [pc, #432]	; (8008edc <HAL_RCC_OscConfig+0x4b0>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d0f0      	beq.n	8008d16 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	689b      	ldr	r3, [r3, #8]
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d106      	bne.n	8008d4a <HAL_RCC_OscConfig+0x31e>
 8008d3c:	4b66      	ldr	r3, [pc, #408]	; (8008ed8 <HAL_RCC_OscConfig+0x4ac>)
 8008d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d40:	4a65      	ldr	r2, [pc, #404]	; (8008ed8 <HAL_RCC_OscConfig+0x4ac>)
 8008d42:	f043 0301 	orr.w	r3, r3, #1
 8008d46:	6713      	str	r3, [r2, #112]	; 0x70
 8008d48:	e01c      	b.n	8008d84 <HAL_RCC_OscConfig+0x358>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	689b      	ldr	r3, [r3, #8]
 8008d4e:	2b05      	cmp	r3, #5
 8008d50:	d10c      	bne.n	8008d6c <HAL_RCC_OscConfig+0x340>
 8008d52:	4b61      	ldr	r3, [pc, #388]	; (8008ed8 <HAL_RCC_OscConfig+0x4ac>)
 8008d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d56:	4a60      	ldr	r2, [pc, #384]	; (8008ed8 <HAL_RCC_OscConfig+0x4ac>)
 8008d58:	f043 0304 	orr.w	r3, r3, #4
 8008d5c:	6713      	str	r3, [r2, #112]	; 0x70
 8008d5e:	4b5e      	ldr	r3, [pc, #376]	; (8008ed8 <HAL_RCC_OscConfig+0x4ac>)
 8008d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d62:	4a5d      	ldr	r2, [pc, #372]	; (8008ed8 <HAL_RCC_OscConfig+0x4ac>)
 8008d64:	f043 0301 	orr.w	r3, r3, #1
 8008d68:	6713      	str	r3, [r2, #112]	; 0x70
 8008d6a:	e00b      	b.n	8008d84 <HAL_RCC_OscConfig+0x358>
 8008d6c:	4b5a      	ldr	r3, [pc, #360]	; (8008ed8 <HAL_RCC_OscConfig+0x4ac>)
 8008d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d70:	4a59      	ldr	r2, [pc, #356]	; (8008ed8 <HAL_RCC_OscConfig+0x4ac>)
 8008d72:	f023 0301 	bic.w	r3, r3, #1
 8008d76:	6713      	str	r3, [r2, #112]	; 0x70
 8008d78:	4b57      	ldr	r3, [pc, #348]	; (8008ed8 <HAL_RCC_OscConfig+0x4ac>)
 8008d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d7c:	4a56      	ldr	r2, [pc, #344]	; (8008ed8 <HAL_RCC_OscConfig+0x4ac>)
 8008d7e:	f023 0304 	bic.w	r3, r3, #4
 8008d82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	689b      	ldr	r3, [r3, #8]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d015      	beq.n	8008db8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d8c:	f7fd fac4 	bl	8006318 <HAL_GetTick>
 8008d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d92:	e00a      	b.n	8008daa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008d94:	f7fd fac0 	bl	8006318 <HAL_GetTick>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	1ad3      	subs	r3, r2, r3
 8008d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d901      	bls.n	8008daa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8008da6:	2303      	movs	r3, #3
 8008da8:	e0d7      	b.n	8008f5a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008daa:	4b4b      	ldr	r3, [pc, #300]	; (8008ed8 <HAL_RCC_OscConfig+0x4ac>)
 8008dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dae:	f003 0302 	and.w	r3, r3, #2
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d0ee      	beq.n	8008d94 <HAL_RCC_OscConfig+0x368>
 8008db6:	e014      	b.n	8008de2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008db8:	f7fd faae 	bl	8006318 <HAL_GetTick>
 8008dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008dbe:	e00a      	b.n	8008dd6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008dc0:	f7fd faaa 	bl	8006318 <HAL_GetTick>
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	1ad3      	subs	r3, r2, r3
 8008dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d901      	bls.n	8008dd6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8008dd2:	2303      	movs	r3, #3
 8008dd4:	e0c1      	b.n	8008f5a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008dd6:	4b40      	ldr	r3, [pc, #256]	; (8008ed8 <HAL_RCC_OscConfig+0x4ac>)
 8008dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dda:	f003 0302 	and.w	r3, r3, #2
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d1ee      	bne.n	8008dc0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008de2:	7dfb      	ldrb	r3, [r7, #23]
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	d105      	bne.n	8008df4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008de8:	4b3b      	ldr	r3, [pc, #236]	; (8008ed8 <HAL_RCC_OscConfig+0x4ac>)
 8008dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dec:	4a3a      	ldr	r2, [pc, #232]	; (8008ed8 <HAL_RCC_OscConfig+0x4ac>)
 8008dee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008df2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	699b      	ldr	r3, [r3, #24]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	f000 80ad 	beq.w	8008f58 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008dfe:	4b36      	ldr	r3, [pc, #216]	; (8008ed8 <HAL_RCC_OscConfig+0x4ac>)
 8008e00:	689b      	ldr	r3, [r3, #8]
 8008e02:	f003 030c 	and.w	r3, r3, #12
 8008e06:	2b08      	cmp	r3, #8
 8008e08:	d060      	beq.n	8008ecc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	699b      	ldr	r3, [r3, #24]
 8008e0e:	2b02      	cmp	r3, #2
 8008e10:	d145      	bne.n	8008e9e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e12:	4b33      	ldr	r3, [pc, #204]	; (8008ee0 <HAL_RCC_OscConfig+0x4b4>)
 8008e14:	2200      	movs	r2, #0
 8008e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e18:	f7fd fa7e 	bl	8006318 <HAL_GetTick>
 8008e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e1e:	e008      	b.n	8008e32 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008e20:	f7fd fa7a 	bl	8006318 <HAL_GetTick>
 8008e24:	4602      	mov	r2, r0
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	1ad3      	subs	r3, r2, r3
 8008e2a:	2b02      	cmp	r3, #2
 8008e2c:	d901      	bls.n	8008e32 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8008e2e:	2303      	movs	r3, #3
 8008e30:	e093      	b.n	8008f5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e32:	4b29      	ldr	r3, [pc, #164]	; (8008ed8 <HAL_RCC_OscConfig+0x4ac>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d1f0      	bne.n	8008e20 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	69da      	ldr	r2, [r3, #28]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6a1b      	ldr	r3, [r3, #32]
 8008e46:	431a      	orrs	r2, r3
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e4c:	019b      	lsls	r3, r3, #6
 8008e4e:	431a      	orrs	r2, r3
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e54:	085b      	lsrs	r3, r3, #1
 8008e56:	3b01      	subs	r3, #1
 8008e58:	041b      	lsls	r3, r3, #16
 8008e5a:	431a      	orrs	r2, r3
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e60:	061b      	lsls	r3, r3, #24
 8008e62:	431a      	orrs	r2, r3
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e68:	071b      	lsls	r3, r3, #28
 8008e6a:	491b      	ldr	r1, [pc, #108]	; (8008ed8 <HAL_RCC_OscConfig+0x4ac>)
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008e70:	4b1b      	ldr	r3, [pc, #108]	; (8008ee0 <HAL_RCC_OscConfig+0x4b4>)
 8008e72:	2201      	movs	r2, #1
 8008e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e76:	f7fd fa4f 	bl	8006318 <HAL_GetTick>
 8008e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e7c:	e008      	b.n	8008e90 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008e7e:	f7fd fa4b 	bl	8006318 <HAL_GetTick>
 8008e82:	4602      	mov	r2, r0
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	1ad3      	subs	r3, r2, r3
 8008e88:	2b02      	cmp	r3, #2
 8008e8a:	d901      	bls.n	8008e90 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8008e8c:	2303      	movs	r3, #3
 8008e8e:	e064      	b.n	8008f5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e90:	4b11      	ldr	r3, [pc, #68]	; (8008ed8 <HAL_RCC_OscConfig+0x4ac>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d0f0      	beq.n	8008e7e <HAL_RCC_OscConfig+0x452>
 8008e9c:	e05c      	b.n	8008f58 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e9e:	4b10      	ldr	r3, [pc, #64]	; (8008ee0 <HAL_RCC_OscConfig+0x4b4>)
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ea4:	f7fd fa38 	bl	8006318 <HAL_GetTick>
 8008ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008eaa:	e008      	b.n	8008ebe <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008eac:	f7fd fa34 	bl	8006318 <HAL_GetTick>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	1ad3      	subs	r3, r2, r3
 8008eb6:	2b02      	cmp	r3, #2
 8008eb8:	d901      	bls.n	8008ebe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8008eba:	2303      	movs	r3, #3
 8008ebc:	e04d      	b.n	8008f5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ebe:	4b06      	ldr	r3, [pc, #24]	; (8008ed8 <HAL_RCC_OscConfig+0x4ac>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d1f0      	bne.n	8008eac <HAL_RCC_OscConfig+0x480>
 8008eca:	e045      	b.n	8008f58 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	699b      	ldr	r3, [r3, #24]
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d107      	bne.n	8008ee4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	e040      	b.n	8008f5a <HAL_RCC_OscConfig+0x52e>
 8008ed8:	40023800 	.word	0x40023800
 8008edc:	40007000 	.word	0x40007000
 8008ee0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008ee4:	4b1f      	ldr	r3, [pc, #124]	; (8008f64 <HAL_RCC_OscConfig+0x538>)
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	699b      	ldr	r3, [r3, #24]
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	d030      	beq.n	8008f54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d129      	bne.n	8008f54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d122      	bne.n	8008f54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008f0e:	68fa      	ldr	r2, [r7, #12]
 8008f10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008f14:	4013      	ands	r3, r2
 8008f16:	687a      	ldr	r2, [r7, #4]
 8008f18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008f1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d119      	bne.n	8008f54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f2a:	085b      	lsrs	r3, r3, #1
 8008f2c:	3b01      	subs	r3, #1
 8008f2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d10f      	bne.n	8008f54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008f40:	429a      	cmp	r2, r3
 8008f42:	d107      	bne.n	8008f54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f4e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d001      	beq.n	8008f58 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8008f54:	2301      	movs	r3, #1
 8008f56:	e000      	b.n	8008f5a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8008f58:	2300      	movs	r3, #0
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3718      	adds	r7, #24
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
 8008f62:	bf00      	nop
 8008f64:	40023800 	.word	0x40023800

08008f68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b082      	sub	sp, #8
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d101      	bne.n	8008f7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008f76:	2301      	movs	r3, #1
 8008f78:	e07b      	b.n	8009072 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d108      	bne.n	8008f94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f8a:	d009      	beq.n	8008fa0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	61da      	str	r2, [r3, #28]
 8008f92:	e005      	b.n	8008fa0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2200      	movs	r2, #0
 8008f98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d106      	bne.n	8008fc0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f7fc fcec 	bl	8005998 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2202      	movs	r2, #2
 8008fc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	681a      	ldr	r2, [r3, #0]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fd6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	689b      	ldr	r3, [r3, #8]
 8008fe4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008fe8:	431a      	orrs	r2, r3
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ff2:	431a      	orrs	r2, r3
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	691b      	ldr	r3, [r3, #16]
 8008ff8:	f003 0302 	and.w	r3, r3, #2
 8008ffc:	431a      	orrs	r2, r3
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	695b      	ldr	r3, [r3, #20]
 8009002:	f003 0301 	and.w	r3, r3, #1
 8009006:	431a      	orrs	r2, r3
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	699b      	ldr	r3, [r3, #24]
 800900c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009010:	431a      	orrs	r2, r3
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	69db      	ldr	r3, [r3, #28]
 8009016:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800901a:	431a      	orrs	r2, r3
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6a1b      	ldr	r3, [r3, #32]
 8009020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009024:	ea42 0103 	orr.w	r1, r2, r3
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800902c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	430a      	orrs	r2, r1
 8009036:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	699b      	ldr	r3, [r3, #24]
 800903c:	0c1b      	lsrs	r3, r3, #16
 800903e:	f003 0104 	and.w	r1, r3, #4
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009046:	f003 0210 	and.w	r2, r3, #16
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	430a      	orrs	r2, r1
 8009050:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	69da      	ldr	r2, [r3, #28]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009060:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2200      	movs	r2, #0
 8009066:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2201      	movs	r2, #1
 800906c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009070:	2300      	movs	r3, #0
}
 8009072:	4618      	mov	r0, r3
 8009074:	3708      	adds	r7, #8
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}

0800907a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800907a:	b580      	push	{r7, lr}
 800907c:	b088      	sub	sp, #32
 800907e:	af00      	add	r7, sp, #0
 8009080:	60f8      	str	r0, [r7, #12]
 8009082:	60b9      	str	r1, [r7, #8]
 8009084:	603b      	str	r3, [r7, #0]
 8009086:	4613      	mov	r3, r2
 8009088:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800908a:	2300      	movs	r3, #0
 800908c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009094:	2b01      	cmp	r3, #1
 8009096:	d101      	bne.n	800909c <HAL_SPI_Transmit+0x22>
 8009098:	2302      	movs	r3, #2
 800909a:	e126      	b.n	80092ea <HAL_SPI_Transmit+0x270>
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	2201      	movs	r2, #1
 80090a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80090a4:	f7fd f938 	bl	8006318 <HAL_GetTick>
 80090a8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80090aa:	88fb      	ldrh	r3, [r7, #6]
 80090ac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80090b4:	b2db      	uxtb	r3, r3
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d002      	beq.n	80090c0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80090ba:	2302      	movs	r3, #2
 80090bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80090be:	e10b      	b.n	80092d8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d002      	beq.n	80090cc <HAL_SPI_Transmit+0x52>
 80090c6:	88fb      	ldrh	r3, [r7, #6]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d102      	bne.n	80090d2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80090cc:	2301      	movs	r3, #1
 80090ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80090d0:	e102      	b.n	80092d8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2203      	movs	r2, #3
 80090d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2200      	movs	r2, #0
 80090de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	68ba      	ldr	r2, [r7, #8]
 80090e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	88fa      	ldrh	r2, [r7, #6]
 80090ea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	88fa      	ldrh	r2, [r7, #6]
 80090f0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2200      	movs	r2, #0
 80090f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2200      	movs	r2, #0
 80090fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2200      	movs	r2, #0
 8009102:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2200      	movs	r2, #0
 8009108:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2200      	movs	r2, #0
 800910e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	689b      	ldr	r3, [r3, #8]
 8009114:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009118:	d10f      	bne.n	800913a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	681a      	ldr	r2, [r3, #0]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009128:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009138:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009144:	2b40      	cmp	r3, #64	; 0x40
 8009146:	d007      	beq.n	8009158 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	681a      	ldr	r2, [r3, #0]
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009156:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	68db      	ldr	r3, [r3, #12]
 800915c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009160:	d14b      	bne.n	80091fa <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d002      	beq.n	8009170 <HAL_SPI_Transmit+0xf6>
 800916a:	8afb      	ldrh	r3, [r7, #22]
 800916c:	2b01      	cmp	r3, #1
 800916e:	d13e      	bne.n	80091ee <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009174:	881a      	ldrh	r2, [r3, #0]
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009180:	1c9a      	adds	r2, r3, #2
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800918a:	b29b      	uxth	r3, r3
 800918c:	3b01      	subs	r3, #1
 800918e:	b29a      	uxth	r2, r3
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009194:	e02b      	b.n	80091ee <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	689b      	ldr	r3, [r3, #8]
 800919c:	f003 0302 	and.w	r3, r3, #2
 80091a0:	2b02      	cmp	r3, #2
 80091a2:	d112      	bne.n	80091ca <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091a8:	881a      	ldrh	r2, [r3, #0]
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091b4:	1c9a      	adds	r2, r3, #2
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091be:	b29b      	uxth	r3, r3
 80091c0:	3b01      	subs	r3, #1
 80091c2:	b29a      	uxth	r2, r3
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	86da      	strh	r2, [r3, #54]	; 0x36
 80091c8:	e011      	b.n	80091ee <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80091ca:	f7fd f8a5 	bl	8006318 <HAL_GetTick>
 80091ce:	4602      	mov	r2, r0
 80091d0:	69bb      	ldr	r3, [r7, #24]
 80091d2:	1ad3      	subs	r3, r2, r3
 80091d4:	683a      	ldr	r2, [r7, #0]
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d803      	bhi.n	80091e2 <HAL_SPI_Transmit+0x168>
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091e0:	d102      	bne.n	80091e8 <HAL_SPI_Transmit+0x16e>
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d102      	bne.n	80091ee <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80091e8:	2303      	movs	r3, #3
 80091ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80091ec:	e074      	b.n	80092d8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d1ce      	bne.n	8009196 <HAL_SPI_Transmit+0x11c>
 80091f8:	e04c      	b.n	8009294 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d002      	beq.n	8009208 <HAL_SPI_Transmit+0x18e>
 8009202:	8afb      	ldrh	r3, [r7, #22]
 8009204:	2b01      	cmp	r3, #1
 8009206:	d140      	bne.n	800928a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	330c      	adds	r3, #12
 8009212:	7812      	ldrb	r2, [r2, #0]
 8009214:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800921a:	1c5a      	adds	r2, r3, #1
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009224:	b29b      	uxth	r3, r3
 8009226:	3b01      	subs	r3, #1
 8009228:	b29a      	uxth	r2, r3
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800922e:	e02c      	b.n	800928a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	689b      	ldr	r3, [r3, #8]
 8009236:	f003 0302 	and.w	r3, r3, #2
 800923a:	2b02      	cmp	r3, #2
 800923c:	d113      	bne.n	8009266 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	330c      	adds	r3, #12
 8009248:	7812      	ldrb	r2, [r2, #0]
 800924a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009250:	1c5a      	adds	r2, r3, #1
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800925a:	b29b      	uxth	r3, r3
 800925c:	3b01      	subs	r3, #1
 800925e:	b29a      	uxth	r2, r3
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	86da      	strh	r2, [r3, #54]	; 0x36
 8009264:	e011      	b.n	800928a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009266:	f7fd f857 	bl	8006318 <HAL_GetTick>
 800926a:	4602      	mov	r2, r0
 800926c:	69bb      	ldr	r3, [r7, #24]
 800926e:	1ad3      	subs	r3, r2, r3
 8009270:	683a      	ldr	r2, [r7, #0]
 8009272:	429a      	cmp	r2, r3
 8009274:	d803      	bhi.n	800927e <HAL_SPI_Transmit+0x204>
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800927c:	d102      	bne.n	8009284 <HAL_SPI_Transmit+0x20a>
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d102      	bne.n	800928a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009284:	2303      	movs	r3, #3
 8009286:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009288:	e026      	b.n	80092d8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800928e:	b29b      	uxth	r3, r3
 8009290:	2b00      	cmp	r3, #0
 8009292:	d1cd      	bne.n	8009230 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009294:	69ba      	ldr	r2, [r7, #24]
 8009296:	6839      	ldr	r1, [r7, #0]
 8009298:	68f8      	ldr	r0, [r7, #12]
 800929a:	f000 fbd9 	bl	8009a50 <SPI_EndRxTxTransaction>
 800929e:	4603      	mov	r3, r0
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d002      	beq.n	80092aa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2220      	movs	r2, #32
 80092a8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	689b      	ldr	r3, [r3, #8]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d10a      	bne.n	80092c8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80092b2:	2300      	movs	r3, #0
 80092b4:	613b      	str	r3, [r7, #16]
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	68db      	ldr	r3, [r3, #12]
 80092bc:	613b      	str	r3, [r7, #16]
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	689b      	ldr	r3, [r3, #8]
 80092c4:	613b      	str	r3, [r7, #16]
 80092c6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d002      	beq.n	80092d6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80092d0:	2301      	movs	r3, #1
 80092d2:	77fb      	strb	r3, [r7, #31]
 80092d4:	e000      	b.n	80092d8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80092d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	2201      	movs	r2, #1
 80092dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2200      	movs	r2, #0
 80092e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80092e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3720      	adds	r7, #32
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}

080092f2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092f2:	b580      	push	{r7, lr}
 80092f4:	b088      	sub	sp, #32
 80092f6:	af02      	add	r7, sp, #8
 80092f8:	60f8      	str	r0, [r7, #12]
 80092fa:	60b9      	str	r1, [r7, #8]
 80092fc:	603b      	str	r3, [r7, #0]
 80092fe:	4613      	mov	r3, r2
 8009300:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009302:	2300      	movs	r3, #0
 8009304:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	685b      	ldr	r3, [r3, #4]
 800930a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800930e:	d112      	bne.n	8009336 <HAL_SPI_Receive+0x44>
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	689b      	ldr	r3, [r3, #8]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d10e      	bne.n	8009336 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2204      	movs	r2, #4
 800931c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009320:	88fa      	ldrh	r2, [r7, #6]
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	9300      	str	r3, [sp, #0]
 8009326:	4613      	mov	r3, r2
 8009328:	68ba      	ldr	r2, [r7, #8]
 800932a:	68b9      	ldr	r1, [r7, #8]
 800932c:	68f8      	ldr	r0, [r7, #12]
 800932e:	f000 f8f1 	bl	8009514 <HAL_SPI_TransmitReceive>
 8009332:	4603      	mov	r3, r0
 8009334:	e0ea      	b.n	800950c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800933c:	2b01      	cmp	r3, #1
 800933e:	d101      	bne.n	8009344 <HAL_SPI_Receive+0x52>
 8009340:	2302      	movs	r3, #2
 8009342:	e0e3      	b.n	800950c <HAL_SPI_Receive+0x21a>
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2201      	movs	r2, #1
 8009348:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800934c:	f7fc ffe4 	bl	8006318 <HAL_GetTick>
 8009350:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009358:	b2db      	uxtb	r3, r3
 800935a:	2b01      	cmp	r3, #1
 800935c:	d002      	beq.n	8009364 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800935e:	2302      	movs	r3, #2
 8009360:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009362:	e0ca      	b.n	80094fa <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d002      	beq.n	8009370 <HAL_SPI_Receive+0x7e>
 800936a:	88fb      	ldrh	r3, [r7, #6]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d102      	bne.n	8009376 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009370:	2301      	movs	r3, #1
 8009372:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009374:	e0c1      	b.n	80094fa <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2204      	movs	r2, #4
 800937a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2200      	movs	r2, #0
 8009382:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	68ba      	ldr	r2, [r7, #8]
 8009388:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	88fa      	ldrh	r2, [r7, #6]
 800938e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	88fa      	ldrh	r2, [r7, #6]
 8009394:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2200      	movs	r2, #0
 800939a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2200      	movs	r2, #0
 80093a0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2200      	movs	r2, #0
 80093a6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2200      	movs	r2, #0
 80093ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2200      	movs	r2, #0
 80093b2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	689b      	ldr	r3, [r3, #8]
 80093b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093bc:	d10f      	bne.n	80093de <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	681a      	ldr	r2, [r3, #0]
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80093dc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093e8:	2b40      	cmp	r3, #64	; 0x40
 80093ea:	d007      	beq.n	80093fc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	681a      	ldr	r2, [r3, #0]
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093fa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	68db      	ldr	r3, [r3, #12]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d162      	bne.n	80094ca <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009404:	e02e      	b.n	8009464 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	689b      	ldr	r3, [r3, #8]
 800940c:	f003 0301 	and.w	r3, r3, #1
 8009410:	2b01      	cmp	r3, #1
 8009412:	d115      	bne.n	8009440 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f103 020c 	add.w	r2, r3, #12
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009420:	7812      	ldrb	r2, [r2, #0]
 8009422:	b2d2      	uxtb	r2, r2
 8009424:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800942a:	1c5a      	adds	r2, r3, #1
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009434:	b29b      	uxth	r3, r3
 8009436:	3b01      	subs	r3, #1
 8009438:	b29a      	uxth	r2, r3
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800943e:	e011      	b.n	8009464 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009440:	f7fc ff6a 	bl	8006318 <HAL_GetTick>
 8009444:	4602      	mov	r2, r0
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	1ad3      	subs	r3, r2, r3
 800944a:	683a      	ldr	r2, [r7, #0]
 800944c:	429a      	cmp	r2, r3
 800944e:	d803      	bhi.n	8009458 <HAL_SPI_Receive+0x166>
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009456:	d102      	bne.n	800945e <HAL_SPI_Receive+0x16c>
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d102      	bne.n	8009464 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800945e:	2303      	movs	r3, #3
 8009460:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009462:	e04a      	b.n	80094fa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009468:	b29b      	uxth	r3, r3
 800946a:	2b00      	cmp	r3, #0
 800946c:	d1cb      	bne.n	8009406 <HAL_SPI_Receive+0x114>
 800946e:	e031      	b.n	80094d4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	689b      	ldr	r3, [r3, #8]
 8009476:	f003 0301 	and.w	r3, r3, #1
 800947a:	2b01      	cmp	r3, #1
 800947c:	d113      	bne.n	80094a6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	68da      	ldr	r2, [r3, #12]
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009488:	b292      	uxth	r2, r2
 800948a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009490:	1c9a      	adds	r2, r3, #2
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800949a:	b29b      	uxth	r3, r3
 800949c:	3b01      	subs	r3, #1
 800949e:	b29a      	uxth	r2, r3
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80094a4:	e011      	b.n	80094ca <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80094a6:	f7fc ff37 	bl	8006318 <HAL_GetTick>
 80094aa:	4602      	mov	r2, r0
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	1ad3      	subs	r3, r2, r3
 80094b0:	683a      	ldr	r2, [r7, #0]
 80094b2:	429a      	cmp	r2, r3
 80094b4:	d803      	bhi.n	80094be <HAL_SPI_Receive+0x1cc>
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094bc:	d102      	bne.n	80094c4 <HAL_SPI_Receive+0x1d2>
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d102      	bne.n	80094ca <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80094c4:	2303      	movs	r3, #3
 80094c6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80094c8:	e017      	b.n	80094fa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d1cd      	bne.n	8009470 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80094d4:	693a      	ldr	r2, [r7, #16]
 80094d6:	6839      	ldr	r1, [r7, #0]
 80094d8:	68f8      	ldr	r0, [r7, #12]
 80094da:	f000 fa53 	bl	8009984 <SPI_EndRxTransaction>
 80094de:	4603      	mov	r3, r0
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d002      	beq.n	80094ea <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2220      	movs	r2, #32
 80094e8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d002      	beq.n	80094f8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80094f2:	2301      	movs	r3, #1
 80094f4:	75fb      	strb	r3, [r7, #23]
 80094f6:	e000      	b.n	80094fa <HAL_SPI_Receive+0x208>
  }

error :
 80094f8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2201      	movs	r2, #1
 80094fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2200      	movs	r2, #0
 8009506:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800950a:	7dfb      	ldrb	r3, [r7, #23]
}
 800950c:	4618      	mov	r0, r3
 800950e:	3718      	adds	r7, #24
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}

08009514 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b08c      	sub	sp, #48	; 0x30
 8009518:	af00      	add	r7, sp, #0
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	60b9      	str	r1, [r7, #8]
 800951e:	607a      	str	r2, [r7, #4]
 8009520:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009522:	2301      	movs	r3, #1
 8009524:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009526:	2300      	movs	r3, #0
 8009528:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009532:	2b01      	cmp	r3, #1
 8009534:	d101      	bne.n	800953a <HAL_SPI_TransmitReceive+0x26>
 8009536:	2302      	movs	r3, #2
 8009538:	e18a      	b.n	8009850 <HAL_SPI_TransmitReceive+0x33c>
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	2201      	movs	r2, #1
 800953e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009542:	f7fc fee9 	bl	8006318 <HAL_GetTick>
 8009546:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800954e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009558:	887b      	ldrh	r3, [r7, #2]
 800955a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800955c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009560:	2b01      	cmp	r3, #1
 8009562:	d00f      	beq.n	8009584 <HAL_SPI_TransmitReceive+0x70>
 8009564:	69fb      	ldr	r3, [r7, #28]
 8009566:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800956a:	d107      	bne.n	800957c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	689b      	ldr	r3, [r3, #8]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d103      	bne.n	800957c <HAL_SPI_TransmitReceive+0x68>
 8009574:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009578:	2b04      	cmp	r3, #4
 800957a:	d003      	beq.n	8009584 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800957c:	2302      	movs	r3, #2
 800957e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009582:	e15b      	b.n	800983c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d005      	beq.n	8009596 <HAL_SPI_TransmitReceive+0x82>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d002      	beq.n	8009596 <HAL_SPI_TransmitReceive+0x82>
 8009590:	887b      	ldrh	r3, [r7, #2]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d103      	bne.n	800959e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009596:	2301      	movs	r3, #1
 8009598:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800959c:	e14e      	b.n	800983c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80095a4:	b2db      	uxtb	r3, r3
 80095a6:	2b04      	cmp	r3, #4
 80095a8:	d003      	beq.n	80095b2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2205      	movs	r2, #5
 80095ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2200      	movs	r2, #0
 80095b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	687a      	ldr	r2, [r7, #4]
 80095bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	887a      	ldrh	r2, [r7, #2]
 80095c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	887a      	ldrh	r2, [r7, #2]
 80095c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	68ba      	ldr	r2, [r7, #8]
 80095ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	887a      	ldrh	r2, [r7, #2]
 80095d4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	887a      	ldrh	r2, [r7, #2]
 80095da:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2200      	movs	r2, #0
 80095e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2200      	movs	r2, #0
 80095e6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095f2:	2b40      	cmp	r3, #64	; 0x40
 80095f4:	d007      	beq.n	8009606 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	681a      	ldr	r2, [r3, #0]
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009604:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	68db      	ldr	r3, [r3, #12]
 800960a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800960e:	d178      	bne.n	8009702 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d002      	beq.n	800961e <HAL_SPI_TransmitReceive+0x10a>
 8009618:	8b7b      	ldrh	r3, [r7, #26]
 800961a:	2b01      	cmp	r3, #1
 800961c:	d166      	bne.n	80096ec <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009622:	881a      	ldrh	r2, [r3, #0]
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800962e:	1c9a      	adds	r2, r3, #2
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009638:	b29b      	uxth	r3, r3
 800963a:	3b01      	subs	r3, #1
 800963c:	b29a      	uxth	r2, r3
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009642:	e053      	b.n	80096ec <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	689b      	ldr	r3, [r3, #8]
 800964a:	f003 0302 	and.w	r3, r3, #2
 800964e:	2b02      	cmp	r3, #2
 8009650:	d11b      	bne.n	800968a <HAL_SPI_TransmitReceive+0x176>
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009656:	b29b      	uxth	r3, r3
 8009658:	2b00      	cmp	r3, #0
 800965a:	d016      	beq.n	800968a <HAL_SPI_TransmitReceive+0x176>
 800965c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800965e:	2b01      	cmp	r3, #1
 8009660:	d113      	bne.n	800968a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009666:	881a      	ldrh	r2, [r3, #0]
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009672:	1c9a      	adds	r2, r3, #2
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800967c:	b29b      	uxth	r3, r3
 800967e:	3b01      	subs	r3, #1
 8009680:	b29a      	uxth	r2, r3
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009686:	2300      	movs	r3, #0
 8009688:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	689b      	ldr	r3, [r3, #8]
 8009690:	f003 0301 	and.w	r3, r3, #1
 8009694:	2b01      	cmp	r3, #1
 8009696:	d119      	bne.n	80096cc <HAL_SPI_TransmitReceive+0x1b8>
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800969c:	b29b      	uxth	r3, r3
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d014      	beq.n	80096cc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	68da      	ldr	r2, [r3, #12]
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ac:	b292      	uxth	r2, r2
 80096ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096b4:	1c9a      	adds	r2, r3, #2
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096be:	b29b      	uxth	r3, r3
 80096c0:	3b01      	subs	r3, #1
 80096c2:	b29a      	uxth	r2, r3
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80096c8:	2301      	movs	r3, #1
 80096ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80096cc:	f7fc fe24 	bl	8006318 <HAL_GetTick>
 80096d0:	4602      	mov	r2, r0
 80096d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d4:	1ad3      	subs	r3, r2, r3
 80096d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80096d8:	429a      	cmp	r2, r3
 80096da:	d807      	bhi.n	80096ec <HAL_SPI_TransmitReceive+0x1d8>
 80096dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096e2:	d003      	beq.n	80096ec <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80096e4:	2303      	movs	r3, #3
 80096e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80096ea:	e0a7      	b.n	800983c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096f0:	b29b      	uxth	r3, r3
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d1a6      	bne.n	8009644 <HAL_SPI_TransmitReceive+0x130>
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096fa:	b29b      	uxth	r3, r3
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d1a1      	bne.n	8009644 <HAL_SPI_TransmitReceive+0x130>
 8009700:	e07c      	b.n	80097fc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	685b      	ldr	r3, [r3, #4]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d002      	beq.n	8009710 <HAL_SPI_TransmitReceive+0x1fc>
 800970a:	8b7b      	ldrh	r3, [r7, #26]
 800970c:	2b01      	cmp	r3, #1
 800970e:	d16b      	bne.n	80097e8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	330c      	adds	r3, #12
 800971a:	7812      	ldrb	r2, [r2, #0]
 800971c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009722:	1c5a      	adds	r2, r3, #1
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800972c:	b29b      	uxth	r3, r3
 800972e:	3b01      	subs	r3, #1
 8009730:	b29a      	uxth	r2, r3
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009736:	e057      	b.n	80097e8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	689b      	ldr	r3, [r3, #8]
 800973e:	f003 0302 	and.w	r3, r3, #2
 8009742:	2b02      	cmp	r3, #2
 8009744:	d11c      	bne.n	8009780 <HAL_SPI_TransmitReceive+0x26c>
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800974a:	b29b      	uxth	r3, r3
 800974c:	2b00      	cmp	r3, #0
 800974e:	d017      	beq.n	8009780 <HAL_SPI_TransmitReceive+0x26c>
 8009750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009752:	2b01      	cmp	r3, #1
 8009754:	d114      	bne.n	8009780 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	330c      	adds	r3, #12
 8009760:	7812      	ldrb	r2, [r2, #0]
 8009762:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009768:	1c5a      	adds	r2, r3, #1
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009772:	b29b      	uxth	r3, r3
 8009774:	3b01      	subs	r3, #1
 8009776:	b29a      	uxth	r2, r3
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800977c:	2300      	movs	r3, #0
 800977e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	689b      	ldr	r3, [r3, #8]
 8009786:	f003 0301 	and.w	r3, r3, #1
 800978a:	2b01      	cmp	r3, #1
 800978c:	d119      	bne.n	80097c2 <HAL_SPI_TransmitReceive+0x2ae>
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009792:	b29b      	uxth	r3, r3
 8009794:	2b00      	cmp	r3, #0
 8009796:	d014      	beq.n	80097c2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	68da      	ldr	r2, [r3, #12]
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097a2:	b2d2      	uxtb	r2, r2
 80097a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097aa:	1c5a      	adds	r2, r3, #1
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097b4:	b29b      	uxth	r3, r3
 80097b6:	3b01      	subs	r3, #1
 80097b8:	b29a      	uxth	r2, r3
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80097be:	2301      	movs	r3, #1
 80097c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80097c2:	f7fc fda9 	bl	8006318 <HAL_GetTick>
 80097c6:	4602      	mov	r2, r0
 80097c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ca:	1ad3      	subs	r3, r2, r3
 80097cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097ce:	429a      	cmp	r2, r3
 80097d0:	d803      	bhi.n	80097da <HAL_SPI_TransmitReceive+0x2c6>
 80097d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097d8:	d102      	bne.n	80097e0 <HAL_SPI_TransmitReceive+0x2cc>
 80097da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d103      	bne.n	80097e8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80097e0:	2303      	movs	r3, #3
 80097e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80097e6:	e029      	b.n	800983c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097ec:	b29b      	uxth	r3, r3
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d1a2      	bne.n	8009738 <HAL_SPI_TransmitReceive+0x224>
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097f6:	b29b      	uxth	r3, r3
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d19d      	bne.n	8009738 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80097fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009800:	68f8      	ldr	r0, [r7, #12]
 8009802:	f000 f925 	bl	8009a50 <SPI_EndRxTxTransaction>
 8009806:	4603      	mov	r3, r0
 8009808:	2b00      	cmp	r3, #0
 800980a:	d006      	beq.n	800981a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800980c:	2301      	movs	r3, #1
 800980e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	2220      	movs	r2, #32
 8009816:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009818:	e010      	b.n	800983c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	689b      	ldr	r3, [r3, #8]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d10b      	bne.n	800983a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009822:	2300      	movs	r3, #0
 8009824:	617b      	str	r3, [r7, #20]
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	68db      	ldr	r3, [r3, #12]
 800982c:	617b      	str	r3, [r7, #20]
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	689b      	ldr	r3, [r3, #8]
 8009834:	617b      	str	r3, [r7, #20]
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	e000      	b.n	800983c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800983a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	2201      	movs	r2, #1
 8009840:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2200      	movs	r2, #0
 8009848:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800984c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009850:	4618      	mov	r0, r3
 8009852:	3730      	adds	r7, #48	; 0x30
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8009858:	b480      	push	{r7}
 800985a:	b083      	sub	sp, #12
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009866:	b2db      	uxtb	r3, r3
}
 8009868:	4618      	mov	r0, r3
 800986a:	370c      	adds	r7, #12
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr

08009874 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b088      	sub	sp, #32
 8009878:	af00      	add	r7, sp, #0
 800987a:	60f8      	str	r0, [r7, #12]
 800987c:	60b9      	str	r1, [r7, #8]
 800987e:	603b      	str	r3, [r7, #0]
 8009880:	4613      	mov	r3, r2
 8009882:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009884:	f7fc fd48 	bl	8006318 <HAL_GetTick>
 8009888:	4602      	mov	r2, r0
 800988a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800988c:	1a9b      	subs	r3, r3, r2
 800988e:	683a      	ldr	r2, [r7, #0]
 8009890:	4413      	add	r3, r2
 8009892:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009894:	f7fc fd40 	bl	8006318 <HAL_GetTick>
 8009898:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800989a:	4b39      	ldr	r3, [pc, #228]	; (8009980 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	015b      	lsls	r3, r3, #5
 80098a0:	0d1b      	lsrs	r3, r3, #20
 80098a2:	69fa      	ldr	r2, [r7, #28]
 80098a4:	fb02 f303 	mul.w	r3, r2, r3
 80098a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80098aa:	e054      	b.n	8009956 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098b2:	d050      	beq.n	8009956 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80098b4:	f7fc fd30 	bl	8006318 <HAL_GetTick>
 80098b8:	4602      	mov	r2, r0
 80098ba:	69bb      	ldr	r3, [r7, #24]
 80098bc:	1ad3      	subs	r3, r2, r3
 80098be:	69fa      	ldr	r2, [r7, #28]
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d902      	bls.n	80098ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80098c4:	69fb      	ldr	r3, [r7, #28]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d13d      	bne.n	8009946 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	685a      	ldr	r2, [r3, #4]
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80098d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80098e2:	d111      	bne.n	8009908 <SPI_WaitFlagStateUntilTimeout+0x94>
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	689b      	ldr	r3, [r3, #8]
 80098e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098ec:	d004      	beq.n	80098f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	689b      	ldr	r3, [r3, #8]
 80098f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098f6:	d107      	bne.n	8009908 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	681a      	ldr	r2, [r3, #0]
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009906:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800990c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009910:	d10f      	bne.n	8009932 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	681a      	ldr	r2, [r3, #0]
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009920:	601a      	str	r2, [r3, #0]
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	681a      	ldr	r2, [r3, #0]
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009930:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2201      	movs	r2, #1
 8009936:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	2200      	movs	r2, #0
 800993e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009942:	2303      	movs	r3, #3
 8009944:	e017      	b.n	8009976 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d101      	bne.n	8009950 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800994c:	2300      	movs	r3, #0
 800994e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	3b01      	subs	r3, #1
 8009954:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	689a      	ldr	r2, [r3, #8]
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	4013      	ands	r3, r2
 8009960:	68ba      	ldr	r2, [r7, #8]
 8009962:	429a      	cmp	r2, r3
 8009964:	bf0c      	ite	eq
 8009966:	2301      	moveq	r3, #1
 8009968:	2300      	movne	r3, #0
 800996a:	b2db      	uxtb	r3, r3
 800996c:	461a      	mov	r2, r3
 800996e:	79fb      	ldrb	r3, [r7, #7]
 8009970:	429a      	cmp	r2, r3
 8009972:	d19b      	bne.n	80098ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009974:	2300      	movs	r3, #0
}
 8009976:	4618      	mov	r0, r3
 8009978:	3720      	adds	r7, #32
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}
 800997e:	bf00      	nop
 8009980:	20000058 	.word	0x20000058

08009984 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b086      	sub	sp, #24
 8009988:	af02      	add	r7, sp, #8
 800998a:	60f8      	str	r0, [r7, #12]
 800998c:	60b9      	str	r1, [r7, #8]
 800998e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009998:	d111      	bne.n	80099be <SPI_EndRxTransaction+0x3a>
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	689b      	ldr	r3, [r3, #8]
 800999e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099a2:	d004      	beq.n	80099ae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	689b      	ldr	r3, [r3, #8]
 80099a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099ac:	d107      	bne.n	80099be <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	681a      	ldr	r2, [r3, #0]
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80099bc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	685b      	ldr	r3, [r3, #4]
 80099c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80099c6:	d12a      	bne.n	8009a1e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	689b      	ldr	r3, [r3, #8]
 80099cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099d0:	d012      	beq.n	80099f8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	9300      	str	r3, [sp, #0]
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	2200      	movs	r2, #0
 80099da:	2180      	movs	r1, #128	; 0x80
 80099dc:	68f8      	ldr	r0, [r7, #12]
 80099de:	f7ff ff49 	bl	8009874 <SPI_WaitFlagStateUntilTimeout>
 80099e2:	4603      	mov	r3, r0
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d02d      	beq.n	8009a44 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099ec:	f043 0220 	orr.w	r2, r3, #32
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80099f4:	2303      	movs	r3, #3
 80099f6:	e026      	b.n	8009a46 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	9300      	str	r3, [sp, #0]
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	2200      	movs	r2, #0
 8009a00:	2101      	movs	r1, #1
 8009a02:	68f8      	ldr	r0, [r7, #12]
 8009a04:	f7ff ff36 	bl	8009874 <SPI_WaitFlagStateUntilTimeout>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d01a      	beq.n	8009a44 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a12:	f043 0220 	orr.w	r2, r3, #32
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009a1a:	2303      	movs	r3, #3
 8009a1c:	e013      	b.n	8009a46 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	9300      	str	r3, [sp, #0]
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	2200      	movs	r2, #0
 8009a26:	2101      	movs	r1, #1
 8009a28:	68f8      	ldr	r0, [r7, #12]
 8009a2a:	f7ff ff23 	bl	8009874 <SPI_WaitFlagStateUntilTimeout>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d007      	beq.n	8009a44 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a38:	f043 0220 	orr.w	r2, r3, #32
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009a40:	2303      	movs	r3, #3
 8009a42:	e000      	b.n	8009a46 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009a44:	2300      	movs	r3, #0
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3710      	adds	r7, #16
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}
	...

08009a50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b088      	sub	sp, #32
 8009a54:	af02      	add	r7, sp, #8
 8009a56:	60f8      	str	r0, [r7, #12]
 8009a58:	60b9      	str	r1, [r7, #8]
 8009a5a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009a5c:	4b1b      	ldr	r3, [pc, #108]	; (8009acc <SPI_EndRxTxTransaction+0x7c>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4a1b      	ldr	r2, [pc, #108]	; (8009ad0 <SPI_EndRxTxTransaction+0x80>)
 8009a62:	fba2 2303 	umull	r2, r3, r2, r3
 8009a66:	0d5b      	lsrs	r3, r3, #21
 8009a68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009a6c:	fb02 f303 	mul.w	r3, r2, r3
 8009a70:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	685b      	ldr	r3, [r3, #4]
 8009a76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a7a:	d112      	bne.n	8009aa2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	9300      	str	r3, [sp, #0]
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	2200      	movs	r2, #0
 8009a84:	2180      	movs	r1, #128	; 0x80
 8009a86:	68f8      	ldr	r0, [r7, #12]
 8009a88:	f7ff fef4 	bl	8009874 <SPI_WaitFlagStateUntilTimeout>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d016      	beq.n	8009ac0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a96:	f043 0220 	orr.w	r2, r3, #32
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009a9e:	2303      	movs	r3, #3
 8009aa0:	e00f      	b.n	8009ac2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d00a      	beq.n	8009abe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	3b01      	subs	r3, #1
 8009aac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	689b      	ldr	r3, [r3, #8]
 8009ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ab8:	2b80      	cmp	r3, #128	; 0x80
 8009aba:	d0f2      	beq.n	8009aa2 <SPI_EndRxTxTransaction+0x52>
 8009abc:	e000      	b.n	8009ac0 <SPI_EndRxTxTransaction+0x70>
        break;
 8009abe:	bf00      	nop
  }

  return HAL_OK;
 8009ac0:	2300      	movs	r3, #0
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3718      	adds	r7, #24
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}
 8009aca:	bf00      	nop
 8009acc:	20000058 	.word	0x20000058
 8009ad0:	165e9f81 	.word	0x165e9f81

08009ad4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b082      	sub	sp, #8
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d101      	bne.n	8009ae6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	e041      	b.n	8009b6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009aec:	b2db      	uxtb	r3, r3
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d106      	bne.n	8009b00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2200      	movs	r2, #0
 8009af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f7fc f832 	bl	8005b64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2202      	movs	r2, #2
 8009b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681a      	ldr	r2, [r3, #0]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	3304      	adds	r3, #4
 8009b10:	4619      	mov	r1, r3
 8009b12:	4610      	mov	r0, r2
 8009b14:	f000 fe20 	bl	800a758 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2201      	movs	r2, #1
 8009b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2201      	movs	r2, #1
 8009b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2201      	movs	r2, #1
 8009b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2201      	movs	r2, #1
 8009b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2201      	movs	r2, #1
 8009b54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2201      	movs	r2, #1
 8009b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b68:	2300      	movs	r3, #0
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3708      	adds	r7, #8
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
	...

08009b74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b085      	sub	sp, #20
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b82:	b2db      	uxtb	r3, r3
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d001      	beq.n	8009b8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009b88:	2301      	movs	r3, #1
 8009b8a:	e04e      	b.n	8009c2a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2202      	movs	r2, #2
 8009b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	68da      	ldr	r2, [r3, #12]
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f042 0201 	orr.w	r2, r2, #1
 8009ba2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4a23      	ldr	r2, [pc, #140]	; (8009c38 <HAL_TIM_Base_Start_IT+0xc4>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d022      	beq.n	8009bf4 <HAL_TIM_Base_Start_IT+0x80>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bb6:	d01d      	beq.n	8009bf4 <HAL_TIM_Base_Start_IT+0x80>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4a1f      	ldr	r2, [pc, #124]	; (8009c3c <HAL_TIM_Base_Start_IT+0xc8>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d018      	beq.n	8009bf4 <HAL_TIM_Base_Start_IT+0x80>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4a1e      	ldr	r2, [pc, #120]	; (8009c40 <HAL_TIM_Base_Start_IT+0xcc>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d013      	beq.n	8009bf4 <HAL_TIM_Base_Start_IT+0x80>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4a1c      	ldr	r2, [pc, #112]	; (8009c44 <HAL_TIM_Base_Start_IT+0xd0>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d00e      	beq.n	8009bf4 <HAL_TIM_Base_Start_IT+0x80>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4a1b      	ldr	r2, [pc, #108]	; (8009c48 <HAL_TIM_Base_Start_IT+0xd4>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d009      	beq.n	8009bf4 <HAL_TIM_Base_Start_IT+0x80>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4a19      	ldr	r2, [pc, #100]	; (8009c4c <HAL_TIM_Base_Start_IT+0xd8>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d004      	beq.n	8009bf4 <HAL_TIM_Base_Start_IT+0x80>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4a18      	ldr	r2, [pc, #96]	; (8009c50 <HAL_TIM_Base_Start_IT+0xdc>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d111      	bne.n	8009c18 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	689b      	ldr	r3, [r3, #8]
 8009bfa:	f003 0307 	and.w	r3, r3, #7
 8009bfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2b06      	cmp	r3, #6
 8009c04:	d010      	beq.n	8009c28 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f042 0201 	orr.w	r2, r2, #1
 8009c14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c16:	e007      	b.n	8009c28 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	681a      	ldr	r2, [r3, #0]
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f042 0201 	orr.w	r2, r2, #1
 8009c26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009c28:	2300      	movs	r3, #0
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3714      	adds	r7, #20
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr
 8009c36:	bf00      	nop
 8009c38:	40010000 	.word	0x40010000
 8009c3c:	40000400 	.word	0x40000400
 8009c40:	40000800 	.word	0x40000800
 8009c44:	40000c00 	.word	0x40000c00
 8009c48:	40010400 	.word	0x40010400
 8009c4c:	40014000 	.word	0x40014000
 8009c50:	40001800 	.word	0x40001800

08009c54 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b083      	sub	sp, #12
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	68da      	ldr	r2, [r3, #12]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f022 0201 	bic.w	r2, r2, #1
 8009c6a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	6a1a      	ldr	r2, [r3, #32]
 8009c72:	f241 1311 	movw	r3, #4369	; 0x1111
 8009c76:	4013      	ands	r3, r2
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d10f      	bne.n	8009c9c <HAL_TIM_Base_Stop_IT+0x48>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	6a1a      	ldr	r2, [r3, #32]
 8009c82:	f240 4344 	movw	r3, #1092	; 0x444
 8009c86:	4013      	ands	r3, r2
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d107      	bne.n	8009c9c <HAL_TIM_Base_Stop_IT+0x48>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	681a      	ldr	r2, [r3, #0]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f022 0201 	bic.w	r2, r2, #1
 8009c9a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009ca4:	2300      	movs	r3, #0
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	370c      	adds	r7, #12
 8009caa:	46bd      	mov	sp, r7
 8009cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb0:	4770      	bx	lr

08009cb2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009cb2:	b580      	push	{r7, lr}
 8009cb4:	b082      	sub	sp, #8
 8009cb6:	af00      	add	r7, sp, #0
 8009cb8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d101      	bne.n	8009cc4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	e041      	b.n	8009d48 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cca:	b2db      	uxtb	r3, r3
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d106      	bne.n	8009cde <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f7fb fea5 	bl	8005a28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2202      	movs	r2, #2
 8009ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681a      	ldr	r2, [r3, #0]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	3304      	adds	r3, #4
 8009cee:	4619      	mov	r1, r3
 8009cf0:	4610      	mov	r0, r2
 8009cf2:	f000 fd31 	bl	800a758 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2201      	movs	r2, #1
 8009d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2201      	movs	r2, #1
 8009d0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2201      	movs	r2, #1
 8009d12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2201      	movs	r2, #1
 8009d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2201      	movs	r2, #1
 8009d22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2201      	movs	r2, #1
 8009d2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2201      	movs	r2, #1
 8009d32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2201      	movs	r2, #1
 8009d3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2201      	movs	r2, #1
 8009d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d46:	2300      	movs	r3, #0
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3708      	adds	r7, #8
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}

08009d50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b084      	sub	sp, #16
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
 8009d58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d109      	bne.n	8009d74 <HAL_TIM_PWM_Start+0x24>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d66:	b2db      	uxtb	r3, r3
 8009d68:	2b01      	cmp	r3, #1
 8009d6a:	bf14      	ite	ne
 8009d6c:	2301      	movne	r3, #1
 8009d6e:	2300      	moveq	r3, #0
 8009d70:	b2db      	uxtb	r3, r3
 8009d72:	e022      	b.n	8009dba <HAL_TIM_PWM_Start+0x6a>
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	2b04      	cmp	r3, #4
 8009d78:	d109      	bne.n	8009d8e <HAL_TIM_PWM_Start+0x3e>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009d80:	b2db      	uxtb	r3, r3
 8009d82:	2b01      	cmp	r3, #1
 8009d84:	bf14      	ite	ne
 8009d86:	2301      	movne	r3, #1
 8009d88:	2300      	moveq	r3, #0
 8009d8a:	b2db      	uxtb	r3, r3
 8009d8c:	e015      	b.n	8009dba <HAL_TIM_PWM_Start+0x6a>
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	2b08      	cmp	r3, #8
 8009d92:	d109      	bne.n	8009da8 <HAL_TIM_PWM_Start+0x58>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009d9a:	b2db      	uxtb	r3, r3
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	bf14      	ite	ne
 8009da0:	2301      	movne	r3, #1
 8009da2:	2300      	moveq	r3, #0
 8009da4:	b2db      	uxtb	r3, r3
 8009da6:	e008      	b.n	8009dba <HAL_TIM_PWM_Start+0x6a>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009dae:	b2db      	uxtb	r3, r3
 8009db0:	2b01      	cmp	r3, #1
 8009db2:	bf14      	ite	ne
 8009db4:	2301      	movne	r3, #1
 8009db6:	2300      	moveq	r3, #0
 8009db8:	b2db      	uxtb	r3, r3
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d001      	beq.n	8009dc2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	e07c      	b.n	8009ebc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d104      	bne.n	8009dd2 <HAL_TIM_PWM_Start+0x82>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2202      	movs	r2, #2
 8009dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009dd0:	e013      	b.n	8009dfa <HAL_TIM_PWM_Start+0xaa>
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	2b04      	cmp	r3, #4
 8009dd6:	d104      	bne.n	8009de2 <HAL_TIM_PWM_Start+0x92>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2202      	movs	r2, #2
 8009ddc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009de0:	e00b      	b.n	8009dfa <HAL_TIM_PWM_Start+0xaa>
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	2b08      	cmp	r3, #8
 8009de6:	d104      	bne.n	8009df2 <HAL_TIM_PWM_Start+0xa2>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2202      	movs	r2, #2
 8009dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009df0:	e003      	b.n	8009dfa <HAL_TIM_PWM_Start+0xaa>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2202      	movs	r2, #2
 8009df6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	2201      	movs	r2, #1
 8009e00:	6839      	ldr	r1, [r7, #0]
 8009e02:	4618      	mov	r0, r3
 8009e04:	f000 fef8 	bl	800abf8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4a2d      	ldr	r2, [pc, #180]	; (8009ec4 <HAL_TIM_PWM_Start+0x174>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d004      	beq.n	8009e1c <HAL_TIM_PWM_Start+0xcc>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	4a2c      	ldr	r2, [pc, #176]	; (8009ec8 <HAL_TIM_PWM_Start+0x178>)
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	d101      	bne.n	8009e20 <HAL_TIM_PWM_Start+0xd0>
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	e000      	b.n	8009e22 <HAL_TIM_PWM_Start+0xd2>
 8009e20:	2300      	movs	r3, #0
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d007      	beq.n	8009e36 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009e34:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4a22      	ldr	r2, [pc, #136]	; (8009ec4 <HAL_TIM_PWM_Start+0x174>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d022      	beq.n	8009e86 <HAL_TIM_PWM_Start+0x136>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e48:	d01d      	beq.n	8009e86 <HAL_TIM_PWM_Start+0x136>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a1f      	ldr	r2, [pc, #124]	; (8009ecc <HAL_TIM_PWM_Start+0x17c>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d018      	beq.n	8009e86 <HAL_TIM_PWM_Start+0x136>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a1d      	ldr	r2, [pc, #116]	; (8009ed0 <HAL_TIM_PWM_Start+0x180>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d013      	beq.n	8009e86 <HAL_TIM_PWM_Start+0x136>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4a1c      	ldr	r2, [pc, #112]	; (8009ed4 <HAL_TIM_PWM_Start+0x184>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d00e      	beq.n	8009e86 <HAL_TIM_PWM_Start+0x136>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4a16      	ldr	r2, [pc, #88]	; (8009ec8 <HAL_TIM_PWM_Start+0x178>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d009      	beq.n	8009e86 <HAL_TIM_PWM_Start+0x136>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a18      	ldr	r2, [pc, #96]	; (8009ed8 <HAL_TIM_PWM_Start+0x188>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d004      	beq.n	8009e86 <HAL_TIM_PWM_Start+0x136>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4a16      	ldr	r2, [pc, #88]	; (8009edc <HAL_TIM_PWM_Start+0x18c>)
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d111      	bne.n	8009eaa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	689b      	ldr	r3, [r3, #8]
 8009e8c:	f003 0307 	and.w	r3, r3, #7
 8009e90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2b06      	cmp	r3, #6
 8009e96:	d010      	beq.n	8009eba <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	681a      	ldr	r2, [r3, #0]
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f042 0201 	orr.w	r2, r2, #1
 8009ea6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ea8:	e007      	b.n	8009eba <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	681a      	ldr	r2, [r3, #0]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f042 0201 	orr.w	r2, r2, #1
 8009eb8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009eba:	2300      	movs	r3, #0
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3710      	adds	r7, #16
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}
 8009ec4:	40010000 	.word	0x40010000
 8009ec8:	40010400 	.word	0x40010400
 8009ecc:	40000400 	.word	0x40000400
 8009ed0:	40000800 	.word	0x40000800
 8009ed4:	40000c00 	.word	0x40000c00
 8009ed8:	40014000 	.word	0x40014000
 8009edc:	40001800 	.word	0x40001800

08009ee0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b084      	sub	sp, #16
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009eea:	2300      	movs	r3, #0
 8009eec:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d109      	bne.n	8009f08 <HAL_TIM_PWM_Start_IT+0x28>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009efa:	b2db      	uxtb	r3, r3
 8009efc:	2b01      	cmp	r3, #1
 8009efe:	bf14      	ite	ne
 8009f00:	2301      	movne	r3, #1
 8009f02:	2300      	moveq	r3, #0
 8009f04:	b2db      	uxtb	r3, r3
 8009f06:	e022      	b.n	8009f4e <HAL_TIM_PWM_Start_IT+0x6e>
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	2b04      	cmp	r3, #4
 8009f0c:	d109      	bne.n	8009f22 <HAL_TIM_PWM_Start_IT+0x42>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009f14:	b2db      	uxtb	r3, r3
 8009f16:	2b01      	cmp	r3, #1
 8009f18:	bf14      	ite	ne
 8009f1a:	2301      	movne	r3, #1
 8009f1c:	2300      	moveq	r3, #0
 8009f1e:	b2db      	uxtb	r3, r3
 8009f20:	e015      	b.n	8009f4e <HAL_TIM_PWM_Start_IT+0x6e>
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	2b08      	cmp	r3, #8
 8009f26:	d109      	bne.n	8009f3c <HAL_TIM_PWM_Start_IT+0x5c>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009f2e:	b2db      	uxtb	r3, r3
 8009f30:	2b01      	cmp	r3, #1
 8009f32:	bf14      	ite	ne
 8009f34:	2301      	movne	r3, #1
 8009f36:	2300      	moveq	r3, #0
 8009f38:	b2db      	uxtb	r3, r3
 8009f3a:	e008      	b.n	8009f4e <HAL_TIM_PWM_Start_IT+0x6e>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f42:	b2db      	uxtb	r3, r3
 8009f44:	2b01      	cmp	r3, #1
 8009f46:	bf14      	ite	ne
 8009f48:	2301      	movne	r3, #1
 8009f4a:	2300      	moveq	r3, #0
 8009f4c:	b2db      	uxtb	r3, r3
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d001      	beq.n	8009f56 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8009f52:	2301      	movs	r3, #1
 8009f54:	e0c7      	b.n	800a0e6 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d104      	bne.n	8009f66 <HAL_TIM_PWM_Start_IT+0x86>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2202      	movs	r2, #2
 8009f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f64:	e013      	b.n	8009f8e <HAL_TIM_PWM_Start_IT+0xae>
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	2b04      	cmp	r3, #4
 8009f6a:	d104      	bne.n	8009f76 <HAL_TIM_PWM_Start_IT+0x96>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2202      	movs	r2, #2
 8009f70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f74:	e00b      	b.n	8009f8e <HAL_TIM_PWM_Start_IT+0xae>
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	2b08      	cmp	r3, #8
 8009f7a:	d104      	bne.n	8009f86 <HAL_TIM_PWM_Start_IT+0xa6>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2202      	movs	r2, #2
 8009f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f84:	e003      	b.n	8009f8e <HAL_TIM_PWM_Start_IT+0xae>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2202      	movs	r2, #2
 8009f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	2b0c      	cmp	r3, #12
 8009f92:	d841      	bhi.n	800a018 <HAL_TIM_PWM_Start_IT+0x138>
 8009f94:	a201      	add	r2, pc, #4	; (adr r2, 8009f9c <HAL_TIM_PWM_Start_IT+0xbc>)
 8009f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f9a:	bf00      	nop
 8009f9c:	08009fd1 	.word	0x08009fd1
 8009fa0:	0800a019 	.word	0x0800a019
 8009fa4:	0800a019 	.word	0x0800a019
 8009fa8:	0800a019 	.word	0x0800a019
 8009fac:	08009fe3 	.word	0x08009fe3
 8009fb0:	0800a019 	.word	0x0800a019
 8009fb4:	0800a019 	.word	0x0800a019
 8009fb8:	0800a019 	.word	0x0800a019
 8009fbc:	08009ff5 	.word	0x08009ff5
 8009fc0:	0800a019 	.word	0x0800a019
 8009fc4:	0800a019 	.word	0x0800a019
 8009fc8:	0800a019 	.word	0x0800a019
 8009fcc:	0800a007 	.word	0x0800a007
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	68da      	ldr	r2, [r3, #12]
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f042 0202 	orr.w	r2, r2, #2
 8009fde:	60da      	str	r2, [r3, #12]
      break;
 8009fe0:	e01d      	b.n	800a01e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	68da      	ldr	r2, [r3, #12]
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f042 0204 	orr.w	r2, r2, #4
 8009ff0:	60da      	str	r2, [r3, #12]
      break;
 8009ff2:	e014      	b.n	800a01e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	68da      	ldr	r2, [r3, #12]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f042 0208 	orr.w	r2, r2, #8
 800a002:	60da      	str	r2, [r3, #12]
      break;
 800a004:	e00b      	b.n	800a01e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	68da      	ldr	r2, [r3, #12]
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f042 0210 	orr.w	r2, r2, #16
 800a014:	60da      	str	r2, [r3, #12]
      break;
 800a016:	e002      	b.n	800a01e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800a018:	2301      	movs	r3, #1
 800a01a:	73fb      	strb	r3, [r7, #15]
      break;
 800a01c:	bf00      	nop
  }

  if (status == HAL_OK)
 800a01e:	7bfb      	ldrb	r3, [r7, #15]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d15f      	bne.n	800a0e4 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	2201      	movs	r2, #1
 800a02a:	6839      	ldr	r1, [r7, #0]
 800a02c:	4618      	mov	r0, r3
 800a02e:	f000 fde3 	bl	800abf8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	4a2e      	ldr	r2, [pc, #184]	; (800a0f0 <HAL_TIM_PWM_Start_IT+0x210>)
 800a038:	4293      	cmp	r3, r2
 800a03a:	d004      	beq.n	800a046 <HAL_TIM_PWM_Start_IT+0x166>
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	4a2c      	ldr	r2, [pc, #176]	; (800a0f4 <HAL_TIM_PWM_Start_IT+0x214>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d101      	bne.n	800a04a <HAL_TIM_PWM_Start_IT+0x16a>
 800a046:	2301      	movs	r3, #1
 800a048:	e000      	b.n	800a04c <HAL_TIM_PWM_Start_IT+0x16c>
 800a04a:	2300      	movs	r3, #0
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d007      	beq.n	800a060 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a05e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4a22      	ldr	r2, [pc, #136]	; (800a0f0 <HAL_TIM_PWM_Start_IT+0x210>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d022      	beq.n	800a0b0 <HAL_TIM_PWM_Start_IT+0x1d0>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a072:	d01d      	beq.n	800a0b0 <HAL_TIM_PWM_Start_IT+0x1d0>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4a1f      	ldr	r2, [pc, #124]	; (800a0f8 <HAL_TIM_PWM_Start_IT+0x218>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d018      	beq.n	800a0b0 <HAL_TIM_PWM_Start_IT+0x1d0>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	4a1e      	ldr	r2, [pc, #120]	; (800a0fc <HAL_TIM_PWM_Start_IT+0x21c>)
 800a084:	4293      	cmp	r3, r2
 800a086:	d013      	beq.n	800a0b0 <HAL_TIM_PWM_Start_IT+0x1d0>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	4a1c      	ldr	r2, [pc, #112]	; (800a100 <HAL_TIM_PWM_Start_IT+0x220>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d00e      	beq.n	800a0b0 <HAL_TIM_PWM_Start_IT+0x1d0>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	4a17      	ldr	r2, [pc, #92]	; (800a0f4 <HAL_TIM_PWM_Start_IT+0x214>)
 800a098:	4293      	cmp	r3, r2
 800a09a:	d009      	beq.n	800a0b0 <HAL_TIM_PWM_Start_IT+0x1d0>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4a18      	ldr	r2, [pc, #96]	; (800a104 <HAL_TIM_PWM_Start_IT+0x224>)
 800a0a2:	4293      	cmp	r3, r2
 800a0a4:	d004      	beq.n	800a0b0 <HAL_TIM_PWM_Start_IT+0x1d0>
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4a17      	ldr	r2, [pc, #92]	; (800a108 <HAL_TIM_PWM_Start_IT+0x228>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d111      	bne.n	800a0d4 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	689b      	ldr	r3, [r3, #8]
 800a0b6:	f003 0307 	and.w	r3, r3, #7
 800a0ba:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	2b06      	cmp	r3, #6
 800a0c0:	d010      	beq.n	800a0e4 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	681a      	ldr	r2, [r3, #0]
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f042 0201 	orr.w	r2, r2, #1
 800a0d0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0d2:	e007      	b.n	800a0e4 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	681a      	ldr	r2, [r3, #0]
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f042 0201 	orr.w	r2, r2, #1
 800a0e2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800a0e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3710      	adds	r7, #16
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
 800a0ee:	bf00      	nop
 800a0f0:	40010000 	.word	0x40010000
 800a0f4:	40010400 	.word	0x40010400
 800a0f8:	40000400 	.word	0x40000400
 800a0fc:	40000800 	.word	0x40000800
 800a100:	40000c00 	.word	0x40000c00
 800a104:	40014000 	.word	0x40014000
 800a108:	40001800 	.word	0x40001800

0800a10c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b086      	sub	sp, #24
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d101      	bne.n	800a120 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a11c:	2301      	movs	r3, #1
 800a11e:	e097      	b.n	800a250 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a126:	b2db      	uxtb	r3, r3
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d106      	bne.n	800a13a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2200      	movs	r2, #0
 800a130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f7fb fc97 	bl	8005a68 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2202      	movs	r2, #2
 800a13e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	689b      	ldr	r3, [r3, #8]
 800a148:	687a      	ldr	r2, [r7, #4]
 800a14a:	6812      	ldr	r2, [r2, #0]
 800a14c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a150:	f023 0307 	bic.w	r3, r3, #7
 800a154:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681a      	ldr	r2, [r3, #0]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	3304      	adds	r3, #4
 800a15e:	4619      	mov	r1, r3
 800a160:	4610      	mov	r0, r2
 800a162:	f000 faf9 	bl	800a758 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	689b      	ldr	r3, [r3, #8]
 800a16c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	699b      	ldr	r3, [r3, #24]
 800a174:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	6a1b      	ldr	r3, [r3, #32]
 800a17c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	697a      	ldr	r2, [r7, #20]
 800a184:	4313      	orrs	r3, r2
 800a186:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a18e:	f023 0303 	bic.w	r3, r3, #3
 800a192:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	689a      	ldr	r2, [r3, #8]
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	699b      	ldr	r3, [r3, #24]
 800a19c:	021b      	lsls	r3, r3, #8
 800a19e:	4313      	orrs	r3, r2
 800a1a0:	693a      	ldr	r2, [r7, #16]
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800a1ac:	f023 030c 	bic.w	r3, r3, #12
 800a1b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a1b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a1bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	68da      	ldr	r2, [r3, #12]
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	69db      	ldr	r3, [r3, #28]
 800a1c6:	021b      	lsls	r3, r3, #8
 800a1c8:	4313      	orrs	r3, r2
 800a1ca:	693a      	ldr	r2, [r7, #16]
 800a1cc:	4313      	orrs	r3, r2
 800a1ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	691b      	ldr	r3, [r3, #16]
 800a1d4:	011a      	lsls	r2, r3, #4
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	6a1b      	ldr	r3, [r3, #32]
 800a1da:	031b      	lsls	r3, r3, #12
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	693a      	ldr	r2, [r7, #16]
 800a1e0:	4313      	orrs	r3, r2
 800a1e2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a1ea:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a1f2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	685a      	ldr	r2, [r3, #4]
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	695b      	ldr	r3, [r3, #20]
 800a1fc:	011b      	lsls	r3, r3, #4
 800a1fe:	4313      	orrs	r3, r2
 800a200:	68fa      	ldr	r2, [r7, #12]
 800a202:	4313      	orrs	r3, r2
 800a204:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	697a      	ldr	r2, [r7, #20]
 800a20c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	693a      	ldr	r2, [r7, #16]
 800a214:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	68fa      	ldr	r2, [r7, #12]
 800a21c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2201      	movs	r2, #1
 800a222:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2201      	movs	r2, #1
 800a22a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2201      	movs	r2, #1
 800a232:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2201      	movs	r2, #1
 800a23a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2201      	movs	r2, #1
 800a242:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2201      	movs	r2, #1
 800a24a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a24e:	2300      	movs	r3, #0
}
 800a250:	4618      	mov	r0, r3
 800a252:	3718      	adds	r7, #24
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}

0800a258 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b084      	sub	sp, #16
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a268:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a270:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a278:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a280:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d110      	bne.n	800a2aa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a288:	7bfb      	ldrb	r3, [r7, #15]
 800a28a:	2b01      	cmp	r3, #1
 800a28c:	d102      	bne.n	800a294 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a28e:	7b7b      	ldrb	r3, [r7, #13]
 800a290:	2b01      	cmp	r3, #1
 800a292:	d001      	beq.n	800a298 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800a294:	2301      	movs	r3, #1
 800a296:	e069      	b.n	800a36c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2202      	movs	r2, #2
 800a29c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2202      	movs	r2, #2
 800a2a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a2a8:	e031      	b.n	800a30e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	2b04      	cmp	r3, #4
 800a2ae:	d110      	bne.n	800a2d2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a2b0:	7bbb      	ldrb	r3, [r7, #14]
 800a2b2:	2b01      	cmp	r3, #1
 800a2b4:	d102      	bne.n	800a2bc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a2b6:	7b3b      	ldrb	r3, [r7, #12]
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d001      	beq.n	800a2c0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800a2bc:	2301      	movs	r3, #1
 800a2be:	e055      	b.n	800a36c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2202      	movs	r2, #2
 800a2c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2202      	movs	r2, #2
 800a2cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a2d0:	e01d      	b.n	800a30e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a2d2:	7bfb      	ldrb	r3, [r7, #15]
 800a2d4:	2b01      	cmp	r3, #1
 800a2d6:	d108      	bne.n	800a2ea <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a2d8:	7bbb      	ldrb	r3, [r7, #14]
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d105      	bne.n	800a2ea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a2de:	7b7b      	ldrb	r3, [r7, #13]
 800a2e0:	2b01      	cmp	r3, #1
 800a2e2:	d102      	bne.n	800a2ea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a2e4:	7b3b      	ldrb	r3, [r7, #12]
 800a2e6:	2b01      	cmp	r3, #1
 800a2e8:	d001      	beq.n	800a2ee <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	e03e      	b.n	800a36c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2202      	movs	r2, #2
 800a2f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2202      	movs	r2, #2
 800a2fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2202      	movs	r2, #2
 800a302:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2202      	movs	r2, #2
 800a30a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d003      	beq.n	800a31c <HAL_TIM_Encoder_Start+0xc4>
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	2b04      	cmp	r3, #4
 800a318:	d008      	beq.n	800a32c <HAL_TIM_Encoder_Start+0xd4>
 800a31a:	e00f      	b.n	800a33c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	2201      	movs	r2, #1
 800a322:	2100      	movs	r1, #0
 800a324:	4618      	mov	r0, r3
 800a326:	f000 fc67 	bl	800abf8 <TIM_CCxChannelCmd>
      break;
 800a32a:	e016      	b.n	800a35a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	2201      	movs	r2, #1
 800a332:	2104      	movs	r1, #4
 800a334:	4618      	mov	r0, r3
 800a336:	f000 fc5f 	bl	800abf8 <TIM_CCxChannelCmd>
      break;
 800a33a:	e00e      	b.n	800a35a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	2201      	movs	r2, #1
 800a342:	2100      	movs	r1, #0
 800a344:	4618      	mov	r0, r3
 800a346:	f000 fc57 	bl	800abf8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	2201      	movs	r2, #1
 800a350:	2104      	movs	r1, #4
 800a352:	4618      	mov	r0, r3
 800a354:	f000 fc50 	bl	800abf8 <TIM_CCxChannelCmd>
      break;
 800a358:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	681a      	ldr	r2, [r3, #0]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f042 0201 	orr.w	r2, r2, #1
 800a368:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a36a:	2300      	movs	r3, #0
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	3710      	adds	r7, #16
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}

0800a374 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b082      	sub	sp, #8
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	691b      	ldr	r3, [r3, #16]
 800a382:	f003 0302 	and.w	r3, r3, #2
 800a386:	2b02      	cmp	r3, #2
 800a388:	d122      	bne.n	800a3d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	68db      	ldr	r3, [r3, #12]
 800a390:	f003 0302 	and.w	r3, r3, #2
 800a394:	2b02      	cmp	r3, #2
 800a396:	d11b      	bne.n	800a3d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f06f 0202 	mvn.w	r2, #2
 800a3a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2201      	movs	r2, #1
 800a3a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	699b      	ldr	r3, [r3, #24]
 800a3ae:	f003 0303 	and.w	r3, r3, #3
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d003      	beq.n	800a3be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f000 f9b0 	bl	800a71c <HAL_TIM_IC_CaptureCallback>
 800a3bc:	e005      	b.n	800a3ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f000 f9a2 	bl	800a708 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f000 f9b3 	bl	800a730 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	691b      	ldr	r3, [r3, #16]
 800a3d6:	f003 0304 	and.w	r3, r3, #4
 800a3da:	2b04      	cmp	r3, #4
 800a3dc:	d122      	bne.n	800a424 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	68db      	ldr	r3, [r3, #12]
 800a3e4:	f003 0304 	and.w	r3, r3, #4
 800a3e8:	2b04      	cmp	r3, #4
 800a3ea:	d11b      	bne.n	800a424 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f06f 0204 	mvn.w	r2, #4
 800a3f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2202      	movs	r2, #2
 800a3fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	699b      	ldr	r3, [r3, #24]
 800a402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a406:	2b00      	cmp	r3, #0
 800a408:	d003      	beq.n	800a412 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f000 f986 	bl	800a71c <HAL_TIM_IC_CaptureCallback>
 800a410:	e005      	b.n	800a41e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f000 f978 	bl	800a708 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f000 f989 	bl	800a730 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2200      	movs	r2, #0
 800a422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	691b      	ldr	r3, [r3, #16]
 800a42a:	f003 0308 	and.w	r3, r3, #8
 800a42e:	2b08      	cmp	r3, #8
 800a430:	d122      	bne.n	800a478 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	68db      	ldr	r3, [r3, #12]
 800a438:	f003 0308 	and.w	r3, r3, #8
 800a43c:	2b08      	cmp	r3, #8
 800a43e:	d11b      	bne.n	800a478 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f06f 0208 	mvn.w	r2, #8
 800a448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2204      	movs	r2, #4
 800a44e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	69db      	ldr	r3, [r3, #28]
 800a456:	f003 0303 	and.w	r3, r3, #3
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d003      	beq.n	800a466 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f000 f95c 	bl	800a71c <HAL_TIM_IC_CaptureCallback>
 800a464:	e005      	b.n	800a472 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f000 f94e 	bl	800a708 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f000 f95f 	bl	800a730 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2200      	movs	r2, #0
 800a476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	691b      	ldr	r3, [r3, #16]
 800a47e:	f003 0310 	and.w	r3, r3, #16
 800a482:	2b10      	cmp	r3, #16
 800a484:	d122      	bne.n	800a4cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	68db      	ldr	r3, [r3, #12]
 800a48c:	f003 0310 	and.w	r3, r3, #16
 800a490:	2b10      	cmp	r3, #16
 800a492:	d11b      	bne.n	800a4cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f06f 0210 	mvn.w	r2, #16
 800a49c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2208      	movs	r2, #8
 800a4a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	69db      	ldr	r3, [r3, #28]
 800a4aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d003      	beq.n	800a4ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f000 f932 	bl	800a71c <HAL_TIM_IC_CaptureCallback>
 800a4b8:	e005      	b.n	800a4c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f000 f924 	bl	800a708 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f000 f935 	bl	800a730 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	691b      	ldr	r3, [r3, #16]
 800a4d2:	f003 0301 	and.w	r3, r3, #1
 800a4d6:	2b01      	cmp	r3, #1
 800a4d8:	d10e      	bne.n	800a4f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	68db      	ldr	r3, [r3, #12]
 800a4e0:	f003 0301 	and.w	r3, r3, #1
 800a4e4:	2b01      	cmp	r3, #1
 800a4e6:	d107      	bne.n	800a4f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f06f 0201 	mvn.w	r2, #1
 800a4f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f7f9 f950 	bl	8003798 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	691b      	ldr	r3, [r3, #16]
 800a4fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a502:	2b80      	cmp	r3, #128	; 0x80
 800a504:	d10e      	bne.n	800a524 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	68db      	ldr	r3, [r3, #12]
 800a50c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a510:	2b80      	cmp	r3, #128	; 0x80
 800a512:	d107      	bne.n	800a524 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a51c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a51e:	6878      	ldr	r0, [r7, #4]
 800a520:	f000 fc16 	bl	800ad50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	691b      	ldr	r3, [r3, #16]
 800a52a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a52e:	2b40      	cmp	r3, #64	; 0x40
 800a530:	d10e      	bne.n	800a550 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	68db      	ldr	r3, [r3, #12]
 800a538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a53c:	2b40      	cmp	r3, #64	; 0x40
 800a53e:	d107      	bne.n	800a550 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f000 f8fa 	bl	800a744 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	691b      	ldr	r3, [r3, #16]
 800a556:	f003 0320 	and.w	r3, r3, #32
 800a55a:	2b20      	cmp	r3, #32
 800a55c:	d10e      	bne.n	800a57c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	68db      	ldr	r3, [r3, #12]
 800a564:	f003 0320 	and.w	r3, r3, #32
 800a568:	2b20      	cmp	r3, #32
 800a56a:	d107      	bne.n	800a57c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f06f 0220 	mvn.w	r2, #32
 800a574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f000 fbe0 	bl	800ad3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a57c:	bf00      	nop
 800a57e:	3708      	adds	r7, #8
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}

0800a584 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b086      	sub	sp, #24
 800a588:	af00      	add	r7, sp, #0
 800a58a:	60f8      	str	r0, [r7, #12]
 800a58c:	60b9      	str	r1, [r7, #8]
 800a58e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a590:	2300      	movs	r3, #0
 800a592:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a59a:	2b01      	cmp	r3, #1
 800a59c:	d101      	bne.n	800a5a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a59e:	2302      	movs	r3, #2
 800a5a0:	e0ae      	b.n	800a700 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2b0c      	cmp	r3, #12
 800a5ae:	f200 809f 	bhi.w	800a6f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a5b2:	a201      	add	r2, pc, #4	; (adr r2, 800a5b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a5b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5b8:	0800a5ed 	.word	0x0800a5ed
 800a5bc:	0800a6f1 	.word	0x0800a6f1
 800a5c0:	0800a6f1 	.word	0x0800a6f1
 800a5c4:	0800a6f1 	.word	0x0800a6f1
 800a5c8:	0800a62d 	.word	0x0800a62d
 800a5cc:	0800a6f1 	.word	0x0800a6f1
 800a5d0:	0800a6f1 	.word	0x0800a6f1
 800a5d4:	0800a6f1 	.word	0x0800a6f1
 800a5d8:	0800a66f 	.word	0x0800a66f
 800a5dc:	0800a6f1 	.word	0x0800a6f1
 800a5e0:	0800a6f1 	.word	0x0800a6f1
 800a5e4:	0800a6f1 	.word	0x0800a6f1
 800a5e8:	0800a6af 	.word	0x0800a6af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	68b9      	ldr	r1, [r7, #8]
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f000 f950 	bl	800a898 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	699a      	ldr	r2, [r3, #24]
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f042 0208 	orr.w	r2, r2, #8
 800a606:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	699a      	ldr	r2, [r3, #24]
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f022 0204 	bic.w	r2, r2, #4
 800a616:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	6999      	ldr	r1, [r3, #24]
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	691a      	ldr	r2, [r3, #16]
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	430a      	orrs	r2, r1
 800a628:	619a      	str	r2, [r3, #24]
      break;
 800a62a:	e064      	b.n	800a6f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	68b9      	ldr	r1, [r7, #8]
 800a632:	4618      	mov	r0, r3
 800a634:	f000 f9a0 	bl	800a978 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	699a      	ldr	r2, [r3, #24]
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a646:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	699a      	ldr	r2, [r3, #24]
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a656:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	6999      	ldr	r1, [r3, #24]
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	691b      	ldr	r3, [r3, #16]
 800a662:	021a      	lsls	r2, r3, #8
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	430a      	orrs	r2, r1
 800a66a:	619a      	str	r2, [r3, #24]
      break;
 800a66c:	e043      	b.n	800a6f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	68b9      	ldr	r1, [r7, #8]
 800a674:	4618      	mov	r0, r3
 800a676:	f000 f9f5 	bl	800aa64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	69da      	ldr	r2, [r3, #28]
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f042 0208 	orr.w	r2, r2, #8
 800a688:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	69da      	ldr	r2, [r3, #28]
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f022 0204 	bic.w	r2, r2, #4
 800a698:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	69d9      	ldr	r1, [r3, #28]
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	691a      	ldr	r2, [r3, #16]
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	430a      	orrs	r2, r1
 800a6aa:	61da      	str	r2, [r3, #28]
      break;
 800a6ac:	e023      	b.n	800a6f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	68b9      	ldr	r1, [r7, #8]
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f000 fa49 	bl	800ab4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	69da      	ldr	r2, [r3, #28]
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a6c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	69da      	ldr	r2, [r3, #28]
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a6d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	69d9      	ldr	r1, [r3, #28]
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	691b      	ldr	r3, [r3, #16]
 800a6e4:	021a      	lsls	r2, r3, #8
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	430a      	orrs	r2, r1
 800a6ec:	61da      	str	r2, [r3, #28]
      break;
 800a6ee:	e002      	b.n	800a6f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	75fb      	strb	r3, [r7, #23]
      break;
 800a6f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a6fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800a700:	4618      	mov	r0, r3
 800a702:	3718      	adds	r7, #24
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}

0800a708 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a708:	b480      	push	{r7}
 800a70a:	b083      	sub	sp, #12
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a710:	bf00      	nop
 800a712:	370c      	adds	r7, #12
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr

0800a71c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b083      	sub	sp, #12
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a724:	bf00      	nop
 800a726:	370c      	adds	r7, #12
 800a728:	46bd      	mov	sp, r7
 800a72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72e:	4770      	bx	lr

0800a730 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a730:	b480      	push	{r7}
 800a732:	b083      	sub	sp, #12
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a738:	bf00      	nop
 800a73a:	370c      	adds	r7, #12
 800a73c:	46bd      	mov	sp, r7
 800a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a742:	4770      	bx	lr

0800a744 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a744:	b480      	push	{r7}
 800a746:	b083      	sub	sp, #12
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a74c:	bf00      	nop
 800a74e:	370c      	adds	r7, #12
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr

0800a758 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a758:	b480      	push	{r7}
 800a75a:	b085      	sub	sp, #20
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
 800a760:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	4a40      	ldr	r2, [pc, #256]	; (800a86c <TIM_Base_SetConfig+0x114>)
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d013      	beq.n	800a798 <TIM_Base_SetConfig+0x40>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a776:	d00f      	beq.n	800a798 <TIM_Base_SetConfig+0x40>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	4a3d      	ldr	r2, [pc, #244]	; (800a870 <TIM_Base_SetConfig+0x118>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d00b      	beq.n	800a798 <TIM_Base_SetConfig+0x40>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	4a3c      	ldr	r2, [pc, #240]	; (800a874 <TIM_Base_SetConfig+0x11c>)
 800a784:	4293      	cmp	r3, r2
 800a786:	d007      	beq.n	800a798 <TIM_Base_SetConfig+0x40>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	4a3b      	ldr	r2, [pc, #236]	; (800a878 <TIM_Base_SetConfig+0x120>)
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d003      	beq.n	800a798 <TIM_Base_SetConfig+0x40>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	4a3a      	ldr	r2, [pc, #232]	; (800a87c <TIM_Base_SetConfig+0x124>)
 800a794:	4293      	cmp	r3, r2
 800a796:	d108      	bne.n	800a7aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a79e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	685b      	ldr	r3, [r3, #4]
 800a7a4:	68fa      	ldr	r2, [r7, #12]
 800a7a6:	4313      	orrs	r3, r2
 800a7a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	4a2f      	ldr	r2, [pc, #188]	; (800a86c <TIM_Base_SetConfig+0x114>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d02b      	beq.n	800a80a <TIM_Base_SetConfig+0xb2>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7b8:	d027      	beq.n	800a80a <TIM_Base_SetConfig+0xb2>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	4a2c      	ldr	r2, [pc, #176]	; (800a870 <TIM_Base_SetConfig+0x118>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d023      	beq.n	800a80a <TIM_Base_SetConfig+0xb2>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	4a2b      	ldr	r2, [pc, #172]	; (800a874 <TIM_Base_SetConfig+0x11c>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d01f      	beq.n	800a80a <TIM_Base_SetConfig+0xb2>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	4a2a      	ldr	r2, [pc, #168]	; (800a878 <TIM_Base_SetConfig+0x120>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d01b      	beq.n	800a80a <TIM_Base_SetConfig+0xb2>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	4a29      	ldr	r2, [pc, #164]	; (800a87c <TIM_Base_SetConfig+0x124>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d017      	beq.n	800a80a <TIM_Base_SetConfig+0xb2>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	4a28      	ldr	r2, [pc, #160]	; (800a880 <TIM_Base_SetConfig+0x128>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d013      	beq.n	800a80a <TIM_Base_SetConfig+0xb2>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	4a27      	ldr	r2, [pc, #156]	; (800a884 <TIM_Base_SetConfig+0x12c>)
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d00f      	beq.n	800a80a <TIM_Base_SetConfig+0xb2>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	4a26      	ldr	r2, [pc, #152]	; (800a888 <TIM_Base_SetConfig+0x130>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d00b      	beq.n	800a80a <TIM_Base_SetConfig+0xb2>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	4a25      	ldr	r2, [pc, #148]	; (800a88c <TIM_Base_SetConfig+0x134>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d007      	beq.n	800a80a <TIM_Base_SetConfig+0xb2>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	4a24      	ldr	r2, [pc, #144]	; (800a890 <TIM_Base_SetConfig+0x138>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d003      	beq.n	800a80a <TIM_Base_SetConfig+0xb2>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	4a23      	ldr	r2, [pc, #140]	; (800a894 <TIM_Base_SetConfig+0x13c>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d108      	bne.n	800a81c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a810:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	68db      	ldr	r3, [r3, #12]
 800a816:	68fa      	ldr	r2, [r7, #12]
 800a818:	4313      	orrs	r3, r2
 800a81a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	695b      	ldr	r3, [r3, #20]
 800a826:	4313      	orrs	r3, r2
 800a828:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	68fa      	ldr	r2, [r7, #12]
 800a82e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	689a      	ldr	r2, [r3, #8]
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	681a      	ldr	r2, [r3, #0]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	4a0a      	ldr	r2, [pc, #40]	; (800a86c <TIM_Base_SetConfig+0x114>)
 800a844:	4293      	cmp	r3, r2
 800a846:	d003      	beq.n	800a850 <TIM_Base_SetConfig+0xf8>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	4a0c      	ldr	r2, [pc, #48]	; (800a87c <TIM_Base_SetConfig+0x124>)
 800a84c:	4293      	cmp	r3, r2
 800a84e:	d103      	bne.n	800a858 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	691a      	ldr	r2, [r3, #16]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2201      	movs	r2, #1
 800a85c:	615a      	str	r2, [r3, #20]
}
 800a85e:	bf00      	nop
 800a860:	3714      	adds	r7, #20
 800a862:	46bd      	mov	sp, r7
 800a864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a868:	4770      	bx	lr
 800a86a:	bf00      	nop
 800a86c:	40010000 	.word	0x40010000
 800a870:	40000400 	.word	0x40000400
 800a874:	40000800 	.word	0x40000800
 800a878:	40000c00 	.word	0x40000c00
 800a87c:	40010400 	.word	0x40010400
 800a880:	40014000 	.word	0x40014000
 800a884:	40014400 	.word	0x40014400
 800a888:	40014800 	.word	0x40014800
 800a88c:	40001800 	.word	0x40001800
 800a890:	40001c00 	.word	0x40001c00
 800a894:	40002000 	.word	0x40002000

0800a898 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a898:	b480      	push	{r7}
 800a89a:	b087      	sub	sp, #28
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
 800a8a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6a1b      	ldr	r3, [r3, #32]
 800a8a6:	f023 0201 	bic.w	r2, r3, #1
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6a1b      	ldr	r3, [r3, #32]
 800a8b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	685b      	ldr	r3, [r3, #4]
 800a8b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	699b      	ldr	r3, [r3, #24]
 800a8be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	f023 0303 	bic.w	r3, r3, #3
 800a8ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	68fa      	ldr	r2, [r7, #12]
 800a8d6:	4313      	orrs	r3, r2
 800a8d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	f023 0302 	bic.w	r3, r3, #2
 800a8e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	689b      	ldr	r3, [r3, #8]
 800a8e6:	697a      	ldr	r2, [r7, #20]
 800a8e8:	4313      	orrs	r3, r2
 800a8ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	4a20      	ldr	r2, [pc, #128]	; (800a970 <TIM_OC1_SetConfig+0xd8>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d003      	beq.n	800a8fc <TIM_OC1_SetConfig+0x64>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	4a1f      	ldr	r2, [pc, #124]	; (800a974 <TIM_OC1_SetConfig+0xdc>)
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d10c      	bne.n	800a916 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	f023 0308 	bic.w	r3, r3, #8
 800a902:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	68db      	ldr	r3, [r3, #12]
 800a908:	697a      	ldr	r2, [r7, #20]
 800a90a:	4313      	orrs	r3, r2
 800a90c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	f023 0304 	bic.w	r3, r3, #4
 800a914:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	4a15      	ldr	r2, [pc, #84]	; (800a970 <TIM_OC1_SetConfig+0xd8>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d003      	beq.n	800a926 <TIM_OC1_SetConfig+0x8e>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	4a14      	ldr	r2, [pc, #80]	; (800a974 <TIM_OC1_SetConfig+0xdc>)
 800a922:	4293      	cmp	r3, r2
 800a924:	d111      	bne.n	800a94a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a926:	693b      	ldr	r3, [r7, #16]
 800a928:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a92c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a92e:	693b      	ldr	r3, [r7, #16]
 800a930:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a934:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	695b      	ldr	r3, [r3, #20]
 800a93a:	693a      	ldr	r2, [r7, #16]
 800a93c:	4313      	orrs	r3, r2
 800a93e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	699b      	ldr	r3, [r3, #24]
 800a944:	693a      	ldr	r2, [r7, #16]
 800a946:	4313      	orrs	r3, r2
 800a948:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	693a      	ldr	r2, [r7, #16]
 800a94e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	68fa      	ldr	r2, [r7, #12]
 800a954:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	685a      	ldr	r2, [r3, #4]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	697a      	ldr	r2, [r7, #20]
 800a962:	621a      	str	r2, [r3, #32]
}
 800a964:	bf00      	nop
 800a966:	371c      	adds	r7, #28
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr
 800a970:	40010000 	.word	0x40010000
 800a974:	40010400 	.word	0x40010400

0800a978 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a978:	b480      	push	{r7}
 800a97a:	b087      	sub	sp, #28
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
 800a980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6a1b      	ldr	r3, [r3, #32]
 800a986:	f023 0210 	bic.w	r2, r3, #16
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6a1b      	ldr	r3, [r3, #32]
 800a992:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	685b      	ldr	r3, [r3, #4]
 800a998:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	699b      	ldr	r3, [r3, #24]
 800a99e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	021b      	lsls	r3, r3, #8
 800a9b6:	68fa      	ldr	r2, [r7, #12]
 800a9b8:	4313      	orrs	r3, r2
 800a9ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	f023 0320 	bic.w	r3, r3, #32
 800a9c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	689b      	ldr	r3, [r3, #8]
 800a9c8:	011b      	lsls	r3, r3, #4
 800a9ca:	697a      	ldr	r2, [r7, #20]
 800a9cc:	4313      	orrs	r3, r2
 800a9ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	4a22      	ldr	r2, [pc, #136]	; (800aa5c <TIM_OC2_SetConfig+0xe4>)
 800a9d4:	4293      	cmp	r3, r2
 800a9d6:	d003      	beq.n	800a9e0 <TIM_OC2_SetConfig+0x68>
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	4a21      	ldr	r2, [pc, #132]	; (800aa60 <TIM_OC2_SetConfig+0xe8>)
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	d10d      	bne.n	800a9fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a9e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	68db      	ldr	r3, [r3, #12]
 800a9ec:	011b      	lsls	r3, r3, #4
 800a9ee:	697a      	ldr	r2, [r7, #20]
 800a9f0:	4313      	orrs	r3, r2
 800a9f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	4a17      	ldr	r2, [pc, #92]	; (800aa5c <TIM_OC2_SetConfig+0xe4>)
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d003      	beq.n	800aa0c <TIM_OC2_SetConfig+0x94>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	4a16      	ldr	r2, [pc, #88]	; (800aa60 <TIM_OC2_SetConfig+0xe8>)
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d113      	bne.n	800aa34 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aa0c:	693b      	ldr	r3, [r7, #16]
 800aa0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aa12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aa1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	695b      	ldr	r3, [r3, #20]
 800aa20:	009b      	lsls	r3, r3, #2
 800aa22:	693a      	ldr	r2, [r7, #16]
 800aa24:	4313      	orrs	r3, r2
 800aa26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	699b      	ldr	r3, [r3, #24]
 800aa2c:	009b      	lsls	r3, r3, #2
 800aa2e:	693a      	ldr	r2, [r7, #16]
 800aa30:	4313      	orrs	r3, r2
 800aa32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	693a      	ldr	r2, [r7, #16]
 800aa38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	68fa      	ldr	r2, [r7, #12]
 800aa3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	685a      	ldr	r2, [r3, #4]
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	697a      	ldr	r2, [r7, #20]
 800aa4c:	621a      	str	r2, [r3, #32]
}
 800aa4e:	bf00      	nop
 800aa50:	371c      	adds	r7, #28
 800aa52:	46bd      	mov	sp, r7
 800aa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa58:	4770      	bx	lr
 800aa5a:	bf00      	nop
 800aa5c:	40010000 	.word	0x40010000
 800aa60:	40010400 	.word	0x40010400

0800aa64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b087      	sub	sp, #28
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6a1b      	ldr	r3, [r3, #32]
 800aa72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6a1b      	ldr	r3, [r3, #32]
 800aa7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	685b      	ldr	r3, [r3, #4]
 800aa84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	69db      	ldr	r3, [r3, #28]
 800aa8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	f023 0303 	bic.w	r3, r3, #3
 800aa9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	68fa      	ldr	r2, [r7, #12]
 800aaa2:	4313      	orrs	r3, r2
 800aaa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aaa6:	697b      	ldr	r3, [r7, #20]
 800aaa8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aaac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	689b      	ldr	r3, [r3, #8]
 800aab2:	021b      	lsls	r3, r3, #8
 800aab4:	697a      	ldr	r2, [r7, #20]
 800aab6:	4313      	orrs	r3, r2
 800aab8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	4a21      	ldr	r2, [pc, #132]	; (800ab44 <TIM_OC3_SetConfig+0xe0>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d003      	beq.n	800aaca <TIM_OC3_SetConfig+0x66>
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	4a20      	ldr	r2, [pc, #128]	; (800ab48 <TIM_OC3_SetConfig+0xe4>)
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d10d      	bne.n	800aae6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aad0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	68db      	ldr	r3, [r3, #12]
 800aad6:	021b      	lsls	r3, r3, #8
 800aad8:	697a      	ldr	r2, [r7, #20]
 800aada:	4313      	orrs	r3, r2
 800aadc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aade:	697b      	ldr	r3, [r7, #20]
 800aae0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aae4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	4a16      	ldr	r2, [pc, #88]	; (800ab44 <TIM_OC3_SetConfig+0xe0>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d003      	beq.n	800aaf6 <TIM_OC3_SetConfig+0x92>
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	4a15      	ldr	r2, [pc, #84]	; (800ab48 <TIM_OC3_SetConfig+0xe4>)
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	d113      	bne.n	800ab1e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aaf6:	693b      	ldr	r3, [r7, #16]
 800aaf8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aafc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aafe:	693b      	ldr	r3, [r7, #16]
 800ab00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ab04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	695b      	ldr	r3, [r3, #20]
 800ab0a:	011b      	lsls	r3, r3, #4
 800ab0c:	693a      	ldr	r2, [r7, #16]
 800ab0e:	4313      	orrs	r3, r2
 800ab10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	699b      	ldr	r3, [r3, #24]
 800ab16:	011b      	lsls	r3, r3, #4
 800ab18:	693a      	ldr	r2, [r7, #16]
 800ab1a:	4313      	orrs	r3, r2
 800ab1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	693a      	ldr	r2, [r7, #16]
 800ab22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	68fa      	ldr	r2, [r7, #12]
 800ab28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	685a      	ldr	r2, [r3, #4]
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	697a      	ldr	r2, [r7, #20]
 800ab36:	621a      	str	r2, [r3, #32]
}
 800ab38:	bf00      	nop
 800ab3a:	371c      	adds	r7, #28
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab42:	4770      	bx	lr
 800ab44:	40010000 	.word	0x40010000
 800ab48:	40010400 	.word	0x40010400

0800ab4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b087      	sub	sp, #28
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6a1b      	ldr	r3, [r3, #32]
 800ab5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6a1b      	ldr	r3, [r3, #32]
 800ab66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	685b      	ldr	r3, [r3, #4]
 800ab6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	69db      	ldr	r3, [r3, #28]
 800ab72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	021b      	lsls	r3, r3, #8
 800ab8a:	68fa      	ldr	r2, [r7, #12]
 800ab8c:	4313      	orrs	r3, r2
 800ab8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ab96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	689b      	ldr	r3, [r3, #8]
 800ab9c:	031b      	lsls	r3, r3, #12
 800ab9e:	693a      	ldr	r2, [r7, #16]
 800aba0:	4313      	orrs	r3, r2
 800aba2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	4a12      	ldr	r2, [pc, #72]	; (800abf0 <TIM_OC4_SetConfig+0xa4>)
 800aba8:	4293      	cmp	r3, r2
 800abaa:	d003      	beq.n	800abb4 <TIM_OC4_SetConfig+0x68>
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	4a11      	ldr	r2, [pc, #68]	; (800abf4 <TIM_OC4_SetConfig+0xa8>)
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d109      	bne.n	800abc8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800abba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	695b      	ldr	r3, [r3, #20]
 800abc0:	019b      	lsls	r3, r3, #6
 800abc2:	697a      	ldr	r2, [r7, #20]
 800abc4:	4313      	orrs	r3, r2
 800abc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	697a      	ldr	r2, [r7, #20]
 800abcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	68fa      	ldr	r2, [r7, #12]
 800abd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	685a      	ldr	r2, [r3, #4]
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	693a      	ldr	r2, [r7, #16]
 800abe0:	621a      	str	r2, [r3, #32]
}
 800abe2:	bf00      	nop
 800abe4:	371c      	adds	r7, #28
 800abe6:	46bd      	mov	sp, r7
 800abe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abec:	4770      	bx	lr
 800abee:	bf00      	nop
 800abf0:	40010000 	.word	0x40010000
 800abf4:	40010400 	.word	0x40010400

0800abf8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800abf8:	b480      	push	{r7}
 800abfa:	b087      	sub	sp, #28
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	60f8      	str	r0, [r7, #12]
 800ac00:	60b9      	str	r1, [r7, #8]
 800ac02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	f003 031f 	and.w	r3, r3, #31
 800ac0a:	2201      	movs	r2, #1
 800ac0c:	fa02 f303 	lsl.w	r3, r2, r3
 800ac10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	6a1a      	ldr	r2, [r3, #32]
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	43db      	mvns	r3, r3
 800ac1a:	401a      	ands	r2, r3
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	6a1a      	ldr	r2, [r3, #32]
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	f003 031f 	and.w	r3, r3, #31
 800ac2a:	6879      	ldr	r1, [r7, #4]
 800ac2c:	fa01 f303 	lsl.w	r3, r1, r3
 800ac30:	431a      	orrs	r2, r3
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	621a      	str	r2, [r3, #32]
}
 800ac36:	bf00      	nop
 800ac38:	371c      	adds	r7, #28
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac40:	4770      	bx	lr
	...

0800ac44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b085      	sub	sp, #20
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
 800ac4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac54:	2b01      	cmp	r3, #1
 800ac56:	d101      	bne.n	800ac5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ac58:	2302      	movs	r3, #2
 800ac5a:	e05a      	b.n	800ad12 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2201      	movs	r2, #1
 800ac60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2202      	movs	r2, #2
 800ac68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	685b      	ldr	r3, [r3, #4]
 800ac72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	689b      	ldr	r3, [r3, #8]
 800ac7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	68fa      	ldr	r2, [r7, #12]
 800ac8a:	4313      	orrs	r3, r2
 800ac8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	68fa      	ldr	r2, [r7, #12]
 800ac94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	4a21      	ldr	r2, [pc, #132]	; (800ad20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d022      	beq.n	800ace6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aca8:	d01d      	beq.n	800ace6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	4a1d      	ldr	r2, [pc, #116]	; (800ad24 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d018      	beq.n	800ace6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	4a1b      	ldr	r2, [pc, #108]	; (800ad28 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	d013      	beq.n	800ace6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	4a1a      	ldr	r2, [pc, #104]	; (800ad2c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800acc4:	4293      	cmp	r3, r2
 800acc6:	d00e      	beq.n	800ace6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	4a18      	ldr	r2, [pc, #96]	; (800ad30 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d009      	beq.n	800ace6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	4a17      	ldr	r2, [pc, #92]	; (800ad34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800acd8:	4293      	cmp	r3, r2
 800acda:	d004      	beq.n	800ace6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	4a15      	ldr	r2, [pc, #84]	; (800ad38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ace2:	4293      	cmp	r3, r2
 800ace4:	d10c      	bne.n	800ad00 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800acec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	685b      	ldr	r3, [r3, #4]
 800acf2:	68ba      	ldr	r2, [r7, #8]
 800acf4:	4313      	orrs	r3, r2
 800acf6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	68ba      	ldr	r2, [r7, #8]
 800acfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2201      	movs	r2, #1
 800ad04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ad10:	2300      	movs	r3, #0
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3714      	adds	r7, #20
 800ad16:	46bd      	mov	sp, r7
 800ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1c:	4770      	bx	lr
 800ad1e:	bf00      	nop
 800ad20:	40010000 	.word	0x40010000
 800ad24:	40000400 	.word	0x40000400
 800ad28:	40000800 	.word	0x40000800
 800ad2c:	40000c00 	.word	0x40000c00
 800ad30:	40010400 	.word	0x40010400
 800ad34:	40014000 	.word	0x40014000
 800ad38:	40001800 	.word	0x40001800

0800ad3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b083      	sub	sp, #12
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ad44:	bf00      	nop
 800ad46:	370c      	adds	r7, #12
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4e:	4770      	bx	lr

0800ad50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ad50:	b480      	push	{r7}
 800ad52:	b083      	sub	sp, #12
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ad58:	bf00      	nop
 800ad5a:	370c      	adds	r7, #12
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad62:	4770      	bx	lr

0800ad64 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800ad68:	4904      	ldr	r1, [pc, #16]	; (800ad7c <MX_FATFS_Init+0x18>)
 800ad6a:	4805      	ldr	r0, [pc, #20]	; (800ad80 <MX_FATFS_Init+0x1c>)
 800ad6c:	f003 f89c 	bl	800dea8 <FATFS_LinkDriver>
 800ad70:	4603      	mov	r3, r0
 800ad72:	461a      	mov	r2, r3
 800ad74:	4b03      	ldr	r3, [pc, #12]	; (800ad84 <MX_FATFS_Init+0x20>)
 800ad76:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ad78:	bf00      	nop
 800ad7a:	bd80      	pop	{r7, pc}
 800ad7c:	20003bac 	.word	0x20003bac
 800ad80:	20000064 	.word	0x20000064
 800ad84:	20003ba8 	.word	0x20003ba8

0800ad88 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ad88:	b480      	push	{r7}
 800ad8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ad8c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ad8e:	4618      	mov	r0, r3
 800ad90:	46bd      	mov	sp, r7
 800ad92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad96:	4770      	bx	lr

0800ad98 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b082      	sub	sp, #8
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	4603      	mov	r3, r0
 800ada0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800ada2:	79fb      	ldrb	r3, [r7, #7]
 800ada4:	4618      	mov	r0, r3
 800ada6:	f7f7 fbad 	bl	8002504 <SD_disk_initialize>
 800adaa:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800adac:	4618      	mov	r0, r3
 800adae:	3708      	adds	r7, #8
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}

0800adb4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b082      	sub	sp, #8
 800adb8:	af00      	add	r7, sp, #0
 800adba:	4603      	mov	r3, r0
 800adbc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 800adbe:	79fb      	ldrb	r3, [r7, #7]
 800adc0:	4618      	mov	r0, r3
 800adc2:	f7f7 fc89 	bl	80026d8 <SD_disk_status>
 800adc6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800adc8:	4618      	mov	r0, r3
 800adca:	3708      	adds	r7, #8
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}

0800add0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b084      	sub	sp, #16
 800add4:	af00      	add	r7, sp, #0
 800add6:	60b9      	str	r1, [r7, #8]
 800add8:	607a      	str	r2, [r7, #4]
 800adda:	603b      	str	r3, [r7, #0]
 800addc:	4603      	mov	r3, r0
 800adde:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 800ade0:	7bf8      	ldrb	r0, [r7, #15]
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	687a      	ldr	r2, [r7, #4]
 800ade6:	68b9      	ldr	r1, [r7, #8]
 800ade8:	f7f7 fc8c 	bl	8002704 <SD_disk_read>
 800adec:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3710      	adds	r7, #16
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}

0800adf6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800adf6:	b580      	push	{r7, lr}
 800adf8:	b084      	sub	sp, #16
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	60b9      	str	r1, [r7, #8]
 800adfe:	607a      	str	r2, [r7, #4]
 800ae00:	603b      	str	r3, [r7, #0]
 800ae02:	4603      	mov	r3, r0
 800ae04:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800ae06:	7bf8      	ldrb	r0, [r7, #15]
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	687a      	ldr	r2, [r7, #4]
 800ae0c:	68b9      	ldr	r1, [r7, #8]
 800ae0e:	f7f7 fce7 	bl	80027e0 <SD_disk_write>
 800ae12:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3710      	adds	r7, #16
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}

0800ae1c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b082      	sub	sp, #8
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	4603      	mov	r3, r0
 800ae24:	603a      	str	r2, [r7, #0]
 800ae26:	71fb      	strb	r3, [r7, #7]
 800ae28:	460b      	mov	r3, r1
 800ae2a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 800ae2c:	79b9      	ldrb	r1, [r7, #6]
 800ae2e:	79fb      	ldrb	r3, [r7, #7]
 800ae30:	683a      	ldr	r2, [r7, #0]
 800ae32:	4618      	mov	r0, r3
 800ae34:	f7f7 fd5e 	bl	80028f4 <SD_disk_ioctl>
 800ae38:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	3708      	adds	r7, #8
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}
	...

0800ae44 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b084      	sub	sp, #16
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ae4e:	79fb      	ldrb	r3, [r7, #7]
 800ae50:	4a08      	ldr	r2, [pc, #32]	; (800ae74 <disk_status+0x30>)
 800ae52:	009b      	lsls	r3, r3, #2
 800ae54:	4413      	add	r3, r2
 800ae56:	685b      	ldr	r3, [r3, #4]
 800ae58:	685b      	ldr	r3, [r3, #4]
 800ae5a:	79fa      	ldrb	r2, [r7, #7]
 800ae5c:	4905      	ldr	r1, [pc, #20]	; (800ae74 <disk_status+0x30>)
 800ae5e:	440a      	add	r2, r1
 800ae60:	7a12      	ldrb	r2, [r2, #8]
 800ae62:	4610      	mov	r0, r2
 800ae64:	4798      	blx	r3
 800ae66:	4603      	mov	r3, r0
 800ae68:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ae6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3710      	adds	r7, #16
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}
 800ae74:	20003dd8 	.word	0x20003dd8

0800ae78 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b084      	sub	sp, #16
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	4603      	mov	r3, r0
 800ae80:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ae82:	2300      	movs	r3, #0
 800ae84:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ae86:	79fb      	ldrb	r3, [r7, #7]
 800ae88:	4a0d      	ldr	r2, [pc, #52]	; (800aec0 <disk_initialize+0x48>)
 800ae8a:	5cd3      	ldrb	r3, [r2, r3]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d111      	bne.n	800aeb4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800ae90:	79fb      	ldrb	r3, [r7, #7]
 800ae92:	4a0b      	ldr	r2, [pc, #44]	; (800aec0 <disk_initialize+0x48>)
 800ae94:	2101      	movs	r1, #1
 800ae96:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ae98:	79fb      	ldrb	r3, [r7, #7]
 800ae9a:	4a09      	ldr	r2, [pc, #36]	; (800aec0 <disk_initialize+0x48>)
 800ae9c:	009b      	lsls	r3, r3, #2
 800ae9e:	4413      	add	r3, r2
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	79fa      	ldrb	r2, [r7, #7]
 800aea6:	4906      	ldr	r1, [pc, #24]	; (800aec0 <disk_initialize+0x48>)
 800aea8:	440a      	add	r2, r1
 800aeaa:	7a12      	ldrb	r2, [r2, #8]
 800aeac:	4610      	mov	r0, r2
 800aeae:	4798      	blx	r3
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800aeb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3710      	adds	r7, #16
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}
 800aebe:	bf00      	nop
 800aec0:	20003dd8 	.word	0x20003dd8

0800aec4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800aec4:	b590      	push	{r4, r7, lr}
 800aec6:	b087      	sub	sp, #28
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	60b9      	str	r1, [r7, #8]
 800aecc:	607a      	str	r2, [r7, #4]
 800aece:	603b      	str	r3, [r7, #0]
 800aed0:	4603      	mov	r3, r0
 800aed2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800aed4:	7bfb      	ldrb	r3, [r7, #15]
 800aed6:	4a0a      	ldr	r2, [pc, #40]	; (800af00 <disk_read+0x3c>)
 800aed8:	009b      	lsls	r3, r3, #2
 800aeda:	4413      	add	r3, r2
 800aedc:	685b      	ldr	r3, [r3, #4]
 800aede:	689c      	ldr	r4, [r3, #8]
 800aee0:	7bfb      	ldrb	r3, [r7, #15]
 800aee2:	4a07      	ldr	r2, [pc, #28]	; (800af00 <disk_read+0x3c>)
 800aee4:	4413      	add	r3, r2
 800aee6:	7a18      	ldrb	r0, [r3, #8]
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	687a      	ldr	r2, [r7, #4]
 800aeec:	68b9      	ldr	r1, [r7, #8]
 800aeee:	47a0      	blx	r4
 800aef0:	4603      	mov	r3, r0
 800aef2:	75fb      	strb	r3, [r7, #23]
  return res;
 800aef4:	7dfb      	ldrb	r3, [r7, #23]
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	371c      	adds	r7, #28
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd90      	pop	{r4, r7, pc}
 800aefe:	bf00      	nop
 800af00:	20003dd8 	.word	0x20003dd8

0800af04 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800af04:	b590      	push	{r4, r7, lr}
 800af06:	b087      	sub	sp, #28
 800af08:	af00      	add	r7, sp, #0
 800af0a:	60b9      	str	r1, [r7, #8]
 800af0c:	607a      	str	r2, [r7, #4]
 800af0e:	603b      	str	r3, [r7, #0]
 800af10:	4603      	mov	r3, r0
 800af12:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800af14:	7bfb      	ldrb	r3, [r7, #15]
 800af16:	4a0a      	ldr	r2, [pc, #40]	; (800af40 <disk_write+0x3c>)
 800af18:	009b      	lsls	r3, r3, #2
 800af1a:	4413      	add	r3, r2
 800af1c:	685b      	ldr	r3, [r3, #4]
 800af1e:	68dc      	ldr	r4, [r3, #12]
 800af20:	7bfb      	ldrb	r3, [r7, #15]
 800af22:	4a07      	ldr	r2, [pc, #28]	; (800af40 <disk_write+0x3c>)
 800af24:	4413      	add	r3, r2
 800af26:	7a18      	ldrb	r0, [r3, #8]
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	687a      	ldr	r2, [r7, #4]
 800af2c:	68b9      	ldr	r1, [r7, #8]
 800af2e:	47a0      	blx	r4
 800af30:	4603      	mov	r3, r0
 800af32:	75fb      	strb	r3, [r7, #23]
  return res;
 800af34:	7dfb      	ldrb	r3, [r7, #23]
}
 800af36:	4618      	mov	r0, r3
 800af38:	371c      	adds	r7, #28
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd90      	pop	{r4, r7, pc}
 800af3e:	bf00      	nop
 800af40:	20003dd8 	.word	0x20003dd8

0800af44 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b084      	sub	sp, #16
 800af48:	af00      	add	r7, sp, #0
 800af4a:	4603      	mov	r3, r0
 800af4c:	603a      	str	r2, [r7, #0]
 800af4e:	71fb      	strb	r3, [r7, #7]
 800af50:	460b      	mov	r3, r1
 800af52:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800af54:	79fb      	ldrb	r3, [r7, #7]
 800af56:	4a09      	ldr	r2, [pc, #36]	; (800af7c <disk_ioctl+0x38>)
 800af58:	009b      	lsls	r3, r3, #2
 800af5a:	4413      	add	r3, r2
 800af5c:	685b      	ldr	r3, [r3, #4]
 800af5e:	691b      	ldr	r3, [r3, #16]
 800af60:	79fa      	ldrb	r2, [r7, #7]
 800af62:	4906      	ldr	r1, [pc, #24]	; (800af7c <disk_ioctl+0x38>)
 800af64:	440a      	add	r2, r1
 800af66:	7a10      	ldrb	r0, [r2, #8]
 800af68:	79b9      	ldrb	r1, [r7, #6]
 800af6a:	683a      	ldr	r2, [r7, #0]
 800af6c:	4798      	blx	r3
 800af6e:	4603      	mov	r3, r0
 800af70:	73fb      	strb	r3, [r7, #15]
  return res;
 800af72:	7bfb      	ldrb	r3, [r7, #15]
}
 800af74:	4618      	mov	r0, r3
 800af76:	3710      	adds	r7, #16
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}
 800af7c:	20003dd8 	.word	0x20003dd8

0800af80 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800af80:	b480      	push	{r7}
 800af82:	b085      	sub	sp, #20
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	3301      	adds	r3, #1
 800af8c:	781b      	ldrb	r3, [r3, #0]
 800af8e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800af90:	89fb      	ldrh	r3, [r7, #14]
 800af92:	021b      	lsls	r3, r3, #8
 800af94:	b21a      	sxth	r2, r3
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	781b      	ldrb	r3, [r3, #0]
 800af9a:	b21b      	sxth	r3, r3
 800af9c:	4313      	orrs	r3, r2
 800af9e:	b21b      	sxth	r3, r3
 800afa0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800afa2:	89fb      	ldrh	r3, [r7, #14]
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	3714      	adds	r7, #20
 800afa8:	46bd      	mov	sp, r7
 800afaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afae:	4770      	bx	lr

0800afb0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800afb0:	b480      	push	{r7}
 800afb2:	b085      	sub	sp, #20
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	3303      	adds	r3, #3
 800afbc:	781b      	ldrb	r3, [r3, #0]
 800afbe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	021b      	lsls	r3, r3, #8
 800afc4:	687a      	ldr	r2, [r7, #4]
 800afc6:	3202      	adds	r2, #2
 800afc8:	7812      	ldrb	r2, [r2, #0]
 800afca:	4313      	orrs	r3, r2
 800afcc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	021b      	lsls	r3, r3, #8
 800afd2:	687a      	ldr	r2, [r7, #4]
 800afd4:	3201      	adds	r2, #1
 800afd6:	7812      	ldrb	r2, [r2, #0]
 800afd8:	4313      	orrs	r3, r2
 800afda:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	021b      	lsls	r3, r3, #8
 800afe0:	687a      	ldr	r2, [r7, #4]
 800afe2:	7812      	ldrb	r2, [r2, #0]
 800afe4:	4313      	orrs	r3, r2
 800afe6:	60fb      	str	r3, [r7, #12]
	return rv;
 800afe8:	68fb      	ldr	r3, [r7, #12]
}
 800afea:	4618      	mov	r0, r3
 800afec:	3714      	adds	r7, #20
 800afee:	46bd      	mov	sp, r7
 800aff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff4:	4770      	bx	lr

0800aff6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800aff6:	b480      	push	{r7}
 800aff8:	b083      	sub	sp, #12
 800affa:	af00      	add	r7, sp, #0
 800affc:	6078      	str	r0, [r7, #4]
 800affe:	460b      	mov	r3, r1
 800b000:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	1c5a      	adds	r2, r3, #1
 800b006:	607a      	str	r2, [r7, #4]
 800b008:	887a      	ldrh	r2, [r7, #2]
 800b00a:	b2d2      	uxtb	r2, r2
 800b00c:	701a      	strb	r2, [r3, #0]
 800b00e:	887b      	ldrh	r3, [r7, #2]
 800b010:	0a1b      	lsrs	r3, r3, #8
 800b012:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	1c5a      	adds	r2, r3, #1
 800b018:	607a      	str	r2, [r7, #4]
 800b01a:	887a      	ldrh	r2, [r7, #2]
 800b01c:	b2d2      	uxtb	r2, r2
 800b01e:	701a      	strb	r2, [r3, #0]
}
 800b020:	bf00      	nop
 800b022:	370c      	adds	r7, #12
 800b024:	46bd      	mov	sp, r7
 800b026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02a:	4770      	bx	lr

0800b02c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b02c:	b480      	push	{r7}
 800b02e:	b083      	sub	sp, #12
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
 800b034:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	1c5a      	adds	r2, r3, #1
 800b03a:	607a      	str	r2, [r7, #4]
 800b03c:	683a      	ldr	r2, [r7, #0]
 800b03e:	b2d2      	uxtb	r2, r2
 800b040:	701a      	strb	r2, [r3, #0]
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	0a1b      	lsrs	r3, r3, #8
 800b046:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	1c5a      	adds	r2, r3, #1
 800b04c:	607a      	str	r2, [r7, #4]
 800b04e:	683a      	ldr	r2, [r7, #0]
 800b050:	b2d2      	uxtb	r2, r2
 800b052:	701a      	strb	r2, [r3, #0]
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	0a1b      	lsrs	r3, r3, #8
 800b058:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	1c5a      	adds	r2, r3, #1
 800b05e:	607a      	str	r2, [r7, #4]
 800b060:	683a      	ldr	r2, [r7, #0]
 800b062:	b2d2      	uxtb	r2, r2
 800b064:	701a      	strb	r2, [r3, #0]
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	0a1b      	lsrs	r3, r3, #8
 800b06a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	1c5a      	adds	r2, r3, #1
 800b070:	607a      	str	r2, [r7, #4]
 800b072:	683a      	ldr	r2, [r7, #0]
 800b074:	b2d2      	uxtb	r2, r2
 800b076:	701a      	strb	r2, [r3, #0]
}
 800b078:	bf00      	nop
 800b07a:	370c      	adds	r7, #12
 800b07c:	46bd      	mov	sp, r7
 800b07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b082:	4770      	bx	lr

0800b084 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b084:	b480      	push	{r7}
 800b086:	b087      	sub	sp, #28
 800b088:	af00      	add	r7, sp, #0
 800b08a:	60f8      	str	r0, [r7, #12]
 800b08c:	60b9      	str	r1, [r7, #8]
 800b08e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d00d      	beq.n	800b0ba <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b09e:	693a      	ldr	r2, [r7, #16]
 800b0a0:	1c53      	adds	r3, r2, #1
 800b0a2:	613b      	str	r3, [r7, #16]
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	1c59      	adds	r1, r3, #1
 800b0a8:	6179      	str	r1, [r7, #20]
 800b0aa:	7812      	ldrb	r2, [r2, #0]
 800b0ac:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	3b01      	subs	r3, #1
 800b0b2:	607b      	str	r3, [r7, #4]
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d1f1      	bne.n	800b09e <mem_cpy+0x1a>
	}
}
 800b0ba:	bf00      	nop
 800b0bc:	371c      	adds	r7, #28
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c4:	4770      	bx	lr

0800b0c6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b0c6:	b480      	push	{r7}
 800b0c8:	b087      	sub	sp, #28
 800b0ca:	af00      	add	r7, sp, #0
 800b0cc:	60f8      	str	r0, [r7, #12]
 800b0ce:	60b9      	str	r1, [r7, #8]
 800b0d0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	1c5a      	adds	r2, r3, #1
 800b0da:	617a      	str	r2, [r7, #20]
 800b0dc:	68ba      	ldr	r2, [r7, #8]
 800b0de:	b2d2      	uxtb	r2, r2
 800b0e0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	3b01      	subs	r3, #1
 800b0e6:	607b      	str	r3, [r7, #4]
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d1f3      	bne.n	800b0d6 <mem_set+0x10>
}
 800b0ee:	bf00      	nop
 800b0f0:	bf00      	nop
 800b0f2:	371c      	adds	r7, #28
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fa:	4770      	bx	lr

0800b0fc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b0fc:	b480      	push	{r7}
 800b0fe:	b089      	sub	sp, #36	; 0x24
 800b100:	af00      	add	r7, sp, #0
 800b102:	60f8      	str	r0, [r7, #12]
 800b104:	60b9      	str	r1, [r7, #8]
 800b106:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	61fb      	str	r3, [r7, #28]
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b110:	2300      	movs	r3, #0
 800b112:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b114:	69fb      	ldr	r3, [r7, #28]
 800b116:	1c5a      	adds	r2, r3, #1
 800b118:	61fa      	str	r2, [r7, #28]
 800b11a:	781b      	ldrb	r3, [r3, #0]
 800b11c:	4619      	mov	r1, r3
 800b11e:	69bb      	ldr	r3, [r7, #24]
 800b120:	1c5a      	adds	r2, r3, #1
 800b122:	61ba      	str	r2, [r7, #24]
 800b124:	781b      	ldrb	r3, [r3, #0]
 800b126:	1acb      	subs	r3, r1, r3
 800b128:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	3b01      	subs	r3, #1
 800b12e:	607b      	str	r3, [r7, #4]
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d002      	beq.n	800b13c <mem_cmp+0x40>
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d0eb      	beq.n	800b114 <mem_cmp+0x18>

	return r;
 800b13c:	697b      	ldr	r3, [r7, #20]
}
 800b13e:	4618      	mov	r0, r3
 800b140:	3724      	adds	r7, #36	; 0x24
 800b142:	46bd      	mov	sp, r7
 800b144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b148:	4770      	bx	lr

0800b14a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b14a:	b480      	push	{r7}
 800b14c:	b083      	sub	sp, #12
 800b14e:	af00      	add	r7, sp, #0
 800b150:	6078      	str	r0, [r7, #4]
 800b152:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b154:	e002      	b.n	800b15c <chk_chr+0x12>
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	3301      	adds	r3, #1
 800b15a:	607b      	str	r3, [r7, #4]
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	781b      	ldrb	r3, [r3, #0]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d005      	beq.n	800b170 <chk_chr+0x26>
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	781b      	ldrb	r3, [r3, #0]
 800b168:	461a      	mov	r2, r3
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	4293      	cmp	r3, r2
 800b16e:	d1f2      	bne.n	800b156 <chk_chr+0xc>
	return *str;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	781b      	ldrb	r3, [r3, #0]
}
 800b174:	4618      	mov	r0, r3
 800b176:	370c      	adds	r7, #12
 800b178:	46bd      	mov	sp, r7
 800b17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17e:	4770      	bx	lr

0800b180 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b180:	b480      	push	{r7}
 800b182:	b085      	sub	sp, #20
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b18a:	2300      	movs	r3, #0
 800b18c:	60bb      	str	r3, [r7, #8]
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	60fb      	str	r3, [r7, #12]
 800b192:	e029      	b.n	800b1e8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b194:	4a27      	ldr	r2, [pc, #156]	; (800b234 <chk_lock+0xb4>)
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	011b      	lsls	r3, r3, #4
 800b19a:	4413      	add	r3, r2
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d01d      	beq.n	800b1de <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b1a2:	4a24      	ldr	r2, [pc, #144]	; (800b234 <chk_lock+0xb4>)
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	011b      	lsls	r3, r3, #4
 800b1a8:	4413      	add	r3, r2
 800b1aa:	681a      	ldr	r2, [r3, #0]
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	429a      	cmp	r2, r3
 800b1b2:	d116      	bne.n	800b1e2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b1b4:	4a1f      	ldr	r2, [pc, #124]	; (800b234 <chk_lock+0xb4>)
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	011b      	lsls	r3, r3, #4
 800b1ba:	4413      	add	r3, r2
 800b1bc:	3304      	adds	r3, #4
 800b1be:	681a      	ldr	r2, [r3, #0]
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	d10c      	bne.n	800b1e2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b1c8:	4a1a      	ldr	r2, [pc, #104]	; (800b234 <chk_lock+0xb4>)
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	011b      	lsls	r3, r3, #4
 800b1ce:	4413      	add	r3, r2
 800b1d0:	3308      	adds	r3, #8
 800b1d2:	681a      	ldr	r2, [r3, #0]
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b1d8:	429a      	cmp	r2, r3
 800b1da:	d102      	bne.n	800b1e2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b1dc:	e007      	b.n	800b1ee <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b1de:	2301      	movs	r3, #1
 800b1e0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	3301      	adds	r3, #1
 800b1e6:	60fb      	str	r3, [r7, #12]
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	2b01      	cmp	r3, #1
 800b1ec:	d9d2      	bls.n	800b194 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	2b02      	cmp	r3, #2
 800b1f2:	d109      	bne.n	800b208 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d102      	bne.n	800b200 <chk_lock+0x80>
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	2b02      	cmp	r3, #2
 800b1fe:	d101      	bne.n	800b204 <chk_lock+0x84>
 800b200:	2300      	movs	r3, #0
 800b202:	e010      	b.n	800b226 <chk_lock+0xa6>
 800b204:	2312      	movs	r3, #18
 800b206:	e00e      	b.n	800b226 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d108      	bne.n	800b220 <chk_lock+0xa0>
 800b20e:	4a09      	ldr	r2, [pc, #36]	; (800b234 <chk_lock+0xb4>)
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	011b      	lsls	r3, r3, #4
 800b214:	4413      	add	r3, r2
 800b216:	330c      	adds	r3, #12
 800b218:	881b      	ldrh	r3, [r3, #0]
 800b21a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b21e:	d101      	bne.n	800b224 <chk_lock+0xa4>
 800b220:	2310      	movs	r3, #16
 800b222:	e000      	b.n	800b226 <chk_lock+0xa6>
 800b224:	2300      	movs	r3, #0
}
 800b226:	4618      	mov	r0, r3
 800b228:	3714      	adds	r7, #20
 800b22a:	46bd      	mov	sp, r7
 800b22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b230:	4770      	bx	lr
 800b232:	bf00      	nop
 800b234:	20003bb8 	.word	0x20003bb8

0800b238 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b238:	b480      	push	{r7}
 800b23a:	b083      	sub	sp, #12
 800b23c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b23e:	2300      	movs	r3, #0
 800b240:	607b      	str	r3, [r7, #4]
 800b242:	e002      	b.n	800b24a <enq_lock+0x12>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	3301      	adds	r3, #1
 800b248:	607b      	str	r3, [r7, #4]
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2b01      	cmp	r3, #1
 800b24e:	d806      	bhi.n	800b25e <enq_lock+0x26>
 800b250:	4a09      	ldr	r2, [pc, #36]	; (800b278 <enq_lock+0x40>)
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	011b      	lsls	r3, r3, #4
 800b256:	4413      	add	r3, r2
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d1f2      	bne.n	800b244 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2b02      	cmp	r3, #2
 800b262:	bf14      	ite	ne
 800b264:	2301      	movne	r3, #1
 800b266:	2300      	moveq	r3, #0
 800b268:	b2db      	uxtb	r3, r3
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	370c      	adds	r7, #12
 800b26e:	46bd      	mov	sp, r7
 800b270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b274:	4770      	bx	lr
 800b276:	bf00      	nop
 800b278:	20003bb8 	.word	0x20003bb8

0800b27c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b085      	sub	sp, #20
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b286:	2300      	movs	r3, #0
 800b288:	60fb      	str	r3, [r7, #12]
 800b28a:	e01f      	b.n	800b2cc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b28c:	4a41      	ldr	r2, [pc, #260]	; (800b394 <inc_lock+0x118>)
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	011b      	lsls	r3, r3, #4
 800b292:	4413      	add	r3, r2
 800b294:	681a      	ldr	r2, [r3, #0]
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	429a      	cmp	r2, r3
 800b29c:	d113      	bne.n	800b2c6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b29e:	4a3d      	ldr	r2, [pc, #244]	; (800b394 <inc_lock+0x118>)
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	011b      	lsls	r3, r3, #4
 800b2a4:	4413      	add	r3, r2
 800b2a6:	3304      	adds	r3, #4
 800b2a8:	681a      	ldr	r2, [r3, #0]
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b2ae:	429a      	cmp	r2, r3
 800b2b0:	d109      	bne.n	800b2c6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b2b2:	4a38      	ldr	r2, [pc, #224]	; (800b394 <inc_lock+0x118>)
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	011b      	lsls	r3, r3, #4
 800b2b8:	4413      	add	r3, r2
 800b2ba:	3308      	adds	r3, #8
 800b2bc:	681a      	ldr	r2, [r3, #0]
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	d006      	beq.n	800b2d4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	3301      	adds	r3, #1
 800b2ca:	60fb      	str	r3, [r7, #12]
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	2b01      	cmp	r3, #1
 800b2d0:	d9dc      	bls.n	800b28c <inc_lock+0x10>
 800b2d2:	e000      	b.n	800b2d6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b2d4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	2b02      	cmp	r3, #2
 800b2da:	d132      	bne.n	800b342 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b2dc:	2300      	movs	r3, #0
 800b2de:	60fb      	str	r3, [r7, #12]
 800b2e0:	e002      	b.n	800b2e8 <inc_lock+0x6c>
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	3301      	adds	r3, #1
 800b2e6:	60fb      	str	r3, [r7, #12]
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	2b01      	cmp	r3, #1
 800b2ec:	d806      	bhi.n	800b2fc <inc_lock+0x80>
 800b2ee:	4a29      	ldr	r2, [pc, #164]	; (800b394 <inc_lock+0x118>)
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	011b      	lsls	r3, r3, #4
 800b2f4:	4413      	add	r3, r2
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d1f2      	bne.n	800b2e2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	2b02      	cmp	r3, #2
 800b300:	d101      	bne.n	800b306 <inc_lock+0x8a>
 800b302:	2300      	movs	r3, #0
 800b304:	e040      	b.n	800b388 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681a      	ldr	r2, [r3, #0]
 800b30a:	4922      	ldr	r1, [pc, #136]	; (800b394 <inc_lock+0x118>)
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	011b      	lsls	r3, r3, #4
 800b310:	440b      	add	r3, r1
 800b312:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	689a      	ldr	r2, [r3, #8]
 800b318:	491e      	ldr	r1, [pc, #120]	; (800b394 <inc_lock+0x118>)
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	011b      	lsls	r3, r3, #4
 800b31e:	440b      	add	r3, r1
 800b320:	3304      	adds	r3, #4
 800b322:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	695a      	ldr	r2, [r3, #20]
 800b328:	491a      	ldr	r1, [pc, #104]	; (800b394 <inc_lock+0x118>)
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	011b      	lsls	r3, r3, #4
 800b32e:	440b      	add	r3, r1
 800b330:	3308      	adds	r3, #8
 800b332:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b334:	4a17      	ldr	r2, [pc, #92]	; (800b394 <inc_lock+0x118>)
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	011b      	lsls	r3, r3, #4
 800b33a:	4413      	add	r3, r2
 800b33c:	330c      	adds	r3, #12
 800b33e:	2200      	movs	r2, #0
 800b340:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d009      	beq.n	800b35c <inc_lock+0xe0>
 800b348:	4a12      	ldr	r2, [pc, #72]	; (800b394 <inc_lock+0x118>)
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	011b      	lsls	r3, r3, #4
 800b34e:	4413      	add	r3, r2
 800b350:	330c      	adds	r3, #12
 800b352:	881b      	ldrh	r3, [r3, #0]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d001      	beq.n	800b35c <inc_lock+0xe0>
 800b358:	2300      	movs	r3, #0
 800b35a:	e015      	b.n	800b388 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d108      	bne.n	800b374 <inc_lock+0xf8>
 800b362:	4a0c      	ldr	r2, [pc, #48]	; (800b394 <inc_lock+0x118>)
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	011b      	lsls	r3, r3, #4
 800b368:	4413      	add	r3, r2
 800b36a:	330c      	adds	r3, #12
 800b36c:	881b      	ldrh	r3, [r3, #0]
 800b36e:	3301      	adds	r3, #1
 800b370:	b29a      	uxth	r2, r3
 800b372:	e001      	b.n	800b378 <inc_lock+0xfc>
 800b374:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b378:	4906      	ldr	r1, [pc, #24]	; (800b394 <inc_lock+0x118>)
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	011b      	lsls	r3, r3, #4
 800b37e:	440b      	add	r3, r1
 800b380:	330c      	adds	r3, #12
 800b382:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	3301      	adds	r3, #1
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3714      	adds	r7, #20
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr
 800b394:	20003bb8 	.word	0x20003bb8

0800b398 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b398:	b480      	push	{r7}
 800b39a:	b085      	sub	sp, #20
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	3b01      	subs	r3, #1
 800b3a4:	607b      	str	r3, [r7, #4]
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2b01      	cmp	r3, #1
 800b3aa:	d825      	bhi.n	800b3f8 <dec_lock+0x60>
		n = Files[i].ctr;
 800b3ac:	4a17      	ldr	r2, [pc, #92]	; (800b40c <dec_lock+0x74>)
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	011b      	lsls	r3, r3, #4
 800b3b2:	4413      	add	r3, r2
 800b3b4:	330c      	adds	r3, #12
 800b3b6:	881b      	ldrh	r3, [r3, #0]
 800b3b8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b3ba:	89fb      	ldrh	r3, [r7, #14]
 800b3bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3c0:	d101      	bne.n	800b3c6 <dec_lock+0x2e>
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b3c6:	89fb      	ldrh	r3, [r7, #14]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d002      	beq.n	800b3d2 <dec_lock+0x3a>
 800b3cc:	89fb      	ldrh	r3, [r7, #14]
 800b3ce:	3b01      	subs	r3, #1
 800b3d0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b3d2:	4a0e      	ldr	r2, [pc, #56]	; (800b40c <dec_lock+0x74>)
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	011b      	lsls	r3, r3, #4
 800b3d8:	4413      	add	r3, r2
 800b3da:	330c      	adds	r3, #12
 800b3dc:	89fa      	ldrh	r2, [r7, #14]
 800b3de:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b3e0:	89fb      	ldrh	r3, [r7, #14]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d105      	bne.n	800b3f2 <dec_lock+0x5a>
 800b3e6:	4a09      	ldr	r2, [pc, #36]	; (800b40c <dec_lock+0x74>)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	011b      	lsls	r3, r3, #4
 800b3ec:	4413      	add	r3, r2
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	737b      	strb	r3, [r7, #13]
 800b3f6:	e001      	b.n	800b3fc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b3f8:	2302      	movs	r3, #2
 800b3fa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b3fc:	7b7b      	ldrb	r3, [r7, #13]
}
 800b3fe:	4618      	mov	r0, r3
 800b400:	3714      	adds	r7, #20
 800b402:	46bd      	mov	sp, r7
 800b404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b408:	4770      	bx	lr
 800b40a:	bf00      	nop
 800b40c:	20003bb8 	.word	0x20003bb8

0800b410 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b410:	b480      	push	{r7}
 800b412:	b085      	sub	sp, #20
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b418:	2300      	movs	r3, #0
 800b41a:	60fb      	str	r3, [r7, #12]
 800b41c:	e010      	b.n	800b440 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b41e:	4a0d      	ldr	r2, [pc, #52]	; (800b454 <clear_lock+0x44>)
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	011b      	lsls	r3, r3, #4
 800b424:	4413      	add	r3, r2
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	687a      	ldr	r2, [r7, #4]
 800b42a:	429a      	cmp	r2, r3
 800b42c:	d105      	bne.n	800b43a <clear_lock+0x2a>
 800b42e:	4a09      	ldr	r2, [pc, #36]	; (800b454 <clear_lock+0x44>)
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	011b      	lsls	r3, r3, #4
 800b434:	4413      	add	r3, r2
 800b436:	2200      	movs	r2, #0
 800b438:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	3301      	adds	r3, #1
 800b43e:	60fb      	str	r3, [r7, #12]
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	2b01      	cmp	r3, #1
 800b444:	d9eb      	bls.n	800b41e <clear_lock+0xe>
	}
}
 800b446:	bf00      	nop
 800b448:	bf00      	nop
 800b44a:	3714      	adds	r7, #20
 800b44c:	46bd      	mov	sp, r7
 800b44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b452:	4770      	bx	lr
 800b454:	20003bb8 	.word	0x20003bb8

0800b458 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b086      	sub	sp, #24
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b460:	2300      	movs	r3, #0
 800b462:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	78db      	ldrb	r3, [r3, #3]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d034      	beq.n	800b4d6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b470:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	7858      	ldrb	r0, [r3, #1]
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b47c:	2301      	movs	r3, #1
 800b47e:	697a      	ldr	r2, [r7, #20]
 800b480:	f7ff fd40 	bl	800af04 <disk_write>
 800b484:	4603      	mov	r3, r0
 800b486:	2b00      	cmp	r3, #0
 800b488:	d002      	beq.n	800b490 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b48a:	2301      	movs	r3, #1
 800b48c:	73fb      	strb	r3, [r7, #15]
 800b48e:	e022      	b.n	800b4d6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2200      	movs	r2, #0
 800b494:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b49a:	697a      	ldr	r2, [r7, #20]
 800b49c:	1ad2      	subs	r2, r2, r3
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4a2:	429a      	cmp	r2, r3
 800b4a4:	d217      	bcs.n	800b4d6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	789b      	ldrb	r3, [r3, #2]
 800b4aa:	613b      	str	r3, [r7, #16]
 800b4ac:	e010      	b.n	800b4d0 <sync_window+0x78>
					wsect += fs->fsize;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4b2:	697a      	ldr	r2, [r7, #20]
 800b4b4:	4413      	add	r3, r2
 800b4b6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	7858      	ldrb	r0, [r3, #1]
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	697a      	ldr	r2, [r7, #20]
 800b4c6:	f7ff fd1d 	bl	800af04 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b4ca:	693b      	ldr	r3, [r7, #16]
 800b4cc:	3b01      	subs	r3, #1
 800b4ce:	613b      	str	r3, [r7, #16]
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	2b01      	cmp	r3, #1
 800b4d4:	d8eb      	bhi.n	800b4ae <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b4d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3718      	adds	r7, #24
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}

0800b4e0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b084      	sub	sp, #16
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
 800b4e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4f2:	683a      	ldr	r2, [r7, #0]
 800b4f4:	429a      	cmp	r2, r3
 800b4f6:	d01b      	beq.n	800b530 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f7ff ffad 	bl	800b458 <sync_window>
 800b4fe:	4603      	mov	r3, r0
 800b500:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b502:	7bfb      	ldrb	r3, [r7, #15]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d113      	bne.n	800b530 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	7858      	ldrb	r0, [r3, #1]
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b512:	2301      	movs	r3, #1
 800b514:	683a      	ldr	r2, [r7, #0]
 800b516:	f7ff fcd5 	bl	800aec4 <disk_read>
 800b51a:	4603      	mov	r3, r0
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d004      	beq.n	800b52a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b520:	f04f 33ff 	mov.w	r3, #4294967295
 800b524:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b526:	2301      	movs	r3, #1
 800b528:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	683a      	ldr	r2, [r7, #0]
 800b52e:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 800b530:	7bfb      	ldrb	r3, [r7, #15]
}
 800b532:	4618      	mov	r0, r3
 800b534:	3710      	adds	r7, #16
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}
	...

0800b53c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b084      	sub	sp, #16
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f7ff ff87 	bl	800b458 <sync_window>
 800b54a:	4603      	mov	r3, r0
 800b54c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b54e:	7bfb      	ldrb	r3, [r7, #15]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d159      	bne.n	800b608 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	781b      	ldrb	r3, [r3, #0]
 800b558:	2b03      	cmp	r3, #3
 800b55a:	d149      	bne.n	800b5f0 <sync_fs+0xb4>
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	791b      	ldrb	r3, [r3, #4]
 800b560:	2b01      	cmp	r3, #1
 800b562:	d145      	bne.n	800b5f0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	899b      	ldrh	r3, [r3, #12]
 800b56e:	461a      	mov	r2, r3
 800b570:	2100      	movs	r1, #0
 800b572:	f7ff fda8 	bl	800b0c6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	333c      	adds	r3, #60	; 0x3c
 800b57a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b57e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b582:	4618      	mov	r0, r3
 800b584:	f7ff fd37 	bl	800aff6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	333c      	adds	r3, #60	; 0x3c
 800b58c:	4921      	ldr	r1, [pc, #132]	; (800b614 <sync_fs+0xd8>)
 800b58e:	4618      	mov	r0, r3
 800b590:	f7ff fd4c 	bl	800b02c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	333c      	adds	r3, #60	; 0x3c
 800b598:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b59c:	491e      	ldr	r1, [pc, #120]	; (800b618 <sync_fs+0xdc>)
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f7ff fd44 	bl	800b02c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	333c      	adds	r3, #60	; 0x3c
 800b5a8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	699b      	ldr	r3, [r3, #24]
 800b5b0:	4619      	mov	r1, r3
 800b5b2:	4610      	mov	r0, r2
 800b5b4:	f7ff fd3a 	bl	800b02c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	333c      	adds	r3, #60	; 0x3c
 800b5bc:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	695b      	ldr	r3, [r3, #20]
 800b5c4:	4619      	mov	r1, r3
 800b5c6:	4610      	mov	r0, r2
 800b5c8:	f7ff fd30 	bl	800b02c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5d0:	1c5a      	adds	r2, r3, #1
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	7858      	ldrb	r0, [r3, #1]
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	f7ff fc8d 	bl	800af04 <disk_write>
			fs->fsi_flag = 0;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	785b      	ldrb	r3, [r3, #1]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	2100      	movs	r1, #0
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f7ff fca3 	bl	800af44 <disk_ioctl>
 800b5fe:	4603      	mov	r3, r0
 800b600:	2b00      	cmp	r3, #0
 800b602:	d001      	beq.n	800b608 <sync_fs+0xcc>
 800b604:	2301      	movs	r3, #1
 800b606:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b608:	7bfb      	ldrb	r3, [r7, #15]
}
 800b60a:	4618      	mov	r0, r3
 800b60c:	3710      	adds	r7, #16
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd80      	pop	{r7, pc}
 800b612:	bf00      	nop
 800b614:	41615252 	.word	0x41615252
 800b618:	61417272 	.word	0x61417272

0800b61c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b61c:	b480      	push	{r7}
 800b61e:	b083      	sub	sp, #12
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
 800b624:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	3b02      	subs	r3, #2
 800b62a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6a1b      	ldr	r3, [r3, #32]
 800b630:	3b02      	subs	r3, #2
 800b632:	683a      	ldr	r2, [r7, #0]
 800b634:	429a      	cmp	r2, r3
 800b636:	d301      	bcc.n	800b63c <clust2sect+0x20>
 800b638:	2300      	movs	r3, #0
 800b63a:	e008      	b.n	800b64e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	895b      	ldrh	r3, [r3, #10]
 800b640:	461a      	mov	r2, r3
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	fb03 f202 	mul.w	r2, r3, r2
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b64c:	4413      	add	r3, r2
}
 800b64e:	4618      	mov	r0, r3
 800b650:	370c      	adds	r7, #12
 800b652:	46bd      	mov	sp, r7
 800b654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b658:	4770      	bx	lr

0800b65a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b65a:	b580      	push	{r7, lr}
 800b65c:	b086      	sub	sp, #24
 800b65e:	af00      	add	r7, sp, #0
 800b660:	6078      	str	r0, [r7, #4]
 800b662:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	2b01      	cmp	r3, #1
 800b66e:	d904      	bls.n	800b67a <get_fat+0x20>
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	6a1b      	ldr	r3, [r3, #32]
 800b674:	683a      	ldr	r2, [r7, #0]
 800b676:	429a      	cmp	r2, r3
 800b678:	d302      	bcc.n	800b680 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b67a:	2301      	movs	r3, #1
 800b67c:	617b      	str	r3, [r7, #20]
 800b67e:	e0bb      	b.n	800b7f8 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b680:	f04f 33ff 	mov.w	r3, #4294967295
 800b684:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b686:	693b      	ldr	r3, [r7, #16]
 800b688:	781b      	ldrb	r3, [r3, #0]
 800b68a:	2b03      	cmp	r3, #3
 800b68c:	f000 8083 	beq.w	800b796 <get_fat+0x13c>
 800b690:	2b03      	cmp	r3, #3
 800b692:	f300 80a7 	bgt.w	800b7e4 <get_fat+0x18a>
 800b696:	2b01      	cmp	r3, #1
 800b698:	d002      	beq.n	800b6a0 <get_fat+0x46>
 800b69a:	2b02      	cmp	r3, #2
 800b69c:	d056      	beq.n	800b74c <get_fat+0xf2>
 800b69e:	e0a1      	b.n	800b7e4 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	60fb      	str	r3, [r7, #12]
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	085b      	lsrs	r3, r3, #1
 800b6a8:	68fa      	ldr	r2, [r7, #12]
 800b6aa:	4413      	add	r3, r2
 800b6ac:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b6ae:	693b      	ldr	r3, [r7, #16]
 800b6b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6b2:	693b      	ldr	r3, [r7, #16]
 800b6b4:	899b      	ldrh	r3, [r3, #12]
 800b6b6:	4619      	mov	r1, r3
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	fbb3 f3f1 	udiv	r3, r3, r1
 800b6be:	4413      	add	r3, r2
 800b6c0:	4619      	mov	r1, r3
 800b6c2:	6938      	ldr	r0, [r7, #16]
 800b6c4:	f7ff ff0c 	bl	800b4e0 <move_window>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	f040 808d 	bne.w	800b7ea <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	1c5a      	adds	r2, r3, #1
 800b6d4:	60fa      	str	r2, [r7, #12]
 800b6d6:	693a      	ldr	r2, [r7, #16]
 800b6d8:	8992      	ldrh	r2, [r2, #12]
 800b6da:	fbb3 f1f2 	udiv	r1, r3, r2
 800b6de:	fb01 f202 	mul.w	r2, r1, r2
 800b6e2:	1a9b      	subs	r3, r3, r2
 800b6e4:	693a      	ldr	r2, [r7, #16]
 800b6e6:	4413      	add	r3, r2
 800b6e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b6ec:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b6ee:	693b      	ldr	r3, [r7, #16]
 800b6f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6f2:	693b      	ldr	r3, [r7, #16]
 800b6f4:	899b      	ldrh	r3, [r3, #12]
 800b6f6:	4619      	mov	r1, r3
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	fbb3 f3f1 	udiv	r3, r3, r1
 800b6fe:	4413      	add	r3, r2
 800b700:	4619      	mov	r1, r3
 800b702:	6938      	ldr	r0, [r7, #16]
 800b704:	f7ff feec 	bl	800b4e0 <move_window>
 800b708:	4603      	mov	r3, r0
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d16f      	bne.n	800b7ee <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b70e:	693b      	ldr	r3, [r7, #16]
 800b710:	899b      	ldrh	r3, [r3, #12]
 800b712:	461a      	mov	r2, r3
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	fbb3 f1f2 	udiv	r1, r3, r2
 800b71a:	fb01 f202 	mul.w	r2, r1, r2
 800b71e:	1a9b      	subs	r3, r3, r2
 800b720:	693a      	ldr	r2, [r7, #16]
 800b722:	4413      	add	r3, r2
 800b724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b728:	021b      	lsls	r3, r3, #8
 800b72a:	461a      	mov	r2, r3
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	4313      	orrs	r3, r2
 800b730:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	f003 0301 	and.w	r3, r3, #1
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d002      	beq.n	800b742 <get_fat+0xe8>
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	091b      	lsrs	r3, r3, #4
 800b740:	e002      	b.n	800b748 <get_fat+0xee>
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b748:	617b      	str	r3, [r7, #20]
			break;
 800b74a:	e055      	b.n	800b7f8 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b74c:	693b      	ldr	r3, [r7, #16]
 800b74e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b750:	693b      	ldr	r3, [r7, #16]
 800b752:	899b      	ldrh	r3, [r3, #12]
 800b754:	085b      	lsrs	r3, r3, #1
 800b756:	b29b      	uxth	r3, r3
 800b758:	4619      	mov	r1, r3
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	fbb3 f3f1 	udiv	r3, r3, r1
 800b760:	4413      	add	r3, r2
 800b762:	4619      	mov	r1, r3
 800b764:	6938      	ldr	r0, [r7, #16]
 800b766:	f7ff febb 	bl	800b4e0 <move_window>
 800b76a:	4603      	mov	r3, r0
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d140      	bne.n	800b7f2 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b770:	693b      	ldr	r3, [r7, #16]
 800b772:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	005b      	lsls	r3, r3, #1
 800b77a:	693a      	ldr	r2, [r7, #16]
 800b77c:	8992      	ldrh	r2, [r2, #12]
 800b77e:	fbb3 f0f2 	udiv	r0, r3, r2
 800b782:	fb00 f202 	mul.w	r2, r0, r2
 800b786:	1a9b      	subs	r3, r3, r2
 800b788:	440b      	add	r3, r1
 800b78a:	4618      	mov	r0, r3
 800b78c:	f7ff fbf8 	bl	800af80 <ld_word>
 800b790:	4603      	mov	r3, r0
 800b792:	617b      	str	r3, [r7, #20]
			break;
 800b794:	e030      	b.n	800b7f8 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b796:	693b      	ldr	r3, [r7, #16]
 800b798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b79a:	693b      	ldr	r3, [r7, #16]
 800b79c:	899b      	ldrh	r3, [r3, #12]
 800b79e:	089b      	lsrs	r3, r3, #2
 800b7a0:	b29b      	uxth	r3, r3
 800b7a2:	4619      	mov	r1, r3
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	fbb3 f3f1 	udiv	r3, r3, r1
 800b7aa:	4413      	add	r3, r2
 800b7ac:	4619      	mov	r1, r3
 800b7ae:	6938      	ldr	r0, [r7, #16]
 800b7b0:	f7ff fe96 	bl	800b4e0 <move_window>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d11d      	bne.n	800b7f6 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b7ba:	693b      	ldr	r3, [r7, #16]
 800b7bc:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	009b      	lsls	r3, r3, #2
 800b7c4:	693a      	ldr	r2, [r7, #16]
 800b7c6:	8992      	ldrh	r2, [r2, #12]
 800b7c8:	fbb3 f0f2 	udiv	r0, r3, r2
 800b7cc:	fb00 f202 	mul.w	r2, r0, r2
 800b7d0:	1a9b      	subs	r3, r3, r2
 800b7d2:	440b      	add	r3, r1
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f7ff fbeb 	bl	800afb0 <ld_dword>
 800b7da:	4603      	mov	r3, r0
 800b7dc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b7e0:	617b      	str	r3, [r7, #20]
			break;
 800b7e2:	e009      	b.n	800b7f8 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	617b      	str	r3, [r7, #20]
 800b7e8:	e006      	b.n	800b7f8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b7ea:	bf00      	nop
 800b7ec:	e004      	b.n	800b7f8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b7ee:	bf00      	nop
 800b7f0:	e002      	b.n	800b7f8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b7f2:	bf00      	nop
 800b7f4:	e000      	b.n	800b7f8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b7f6:	bf00      	nop
		}
	}

	return val;
 800b7f8:	697b      	ldr	r3, [r7, #20]
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3718      	adds	r7, #24
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}

0800b802 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b802:	b590      	push	{r4, r7, lr}
 800b804:	b089      	sub	sp, #36	; 0x24
 800b806:	af00      	add	r7, sp, #0
 800b808:	60f8      	str	r0, [r7, #12]
 800b80a:	60b9      	str	r1, [r7, #8]
 800b80c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b80e:	2302      	movs	r3, #2
 800b810:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	2b01      	cmp	r3, #1
 800b816:	f240 8109 	bls.w	800ba2c <put_fat+0x22a>
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	6a1b      	ldr	r3, [r3, #32]
 800b81e:	68ba      	ldr	r2, [r7, #8]
 800b820:	429a      	cmp	r2, r3
 800b822:	f080 8103 	bcs.w	800ba2c <put_fat+0x22a>
		switch (fs->fs_type) {
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	781b      	ldrb	r3, [r3, #0]
 800b82a:	2b03      	cmp	r3, #3
 800b82c:	f000 80b6 	beq.w	800b99c <put_fat+0x19a>
 800b830:	2b03      	cmp	r3, #3
 800b832:	f300 80fb 	bgt.w	800ba2c <put_fat+0x22a>
 800b836:	2b01      	cmp	r3, #1
 800b838:	d003      	beq.n	800b842 <put_fat+0x40>
 800b83a:	2b02      	cmp	r3, #2
 800b83c:	f000 8083 	beq.w	800b946 <put_fat+0x144>
 800b840:	e0f4      	b.n	800ba2c <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	61bb      	str	r3, [r7, #24]
 800b846:	69bb      	ldr	r3, [r7, #24]
 800b848:	085b      	lsrs	r3, r3, #1
 800b84a:	69ba      	ldr	r2, [r7, #24]
 800b84c:	4413      	add	r3, r2
 800b84e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	899b      	ldrh	r3, [r3, #12]
 800b858:	4619      	mov	r1, r3
 800b85a:	69bb      	ldr	r3, [r7, #24]
 800b85c:	fbb3 f3f1 	udiv	r3, r3, r1
 800b860:	4413      	add	r3, r2
 800b862:	4619      	mov	r1, r3
 800b864:	68f8      	ldr	r0, [r7, #12]
 800b866:	f7ff fe3b 	bl	800b4e0 <move_window>
 800b86a:	4603      	mov	r3, r0
 800b86c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b86e:	7ffb      	ldrb	r3, [r7, #31]
 800b870:	2b00      	cmp	r3, #0
 800b872:	f040 80d4 	bne.w	800ba1e <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b87c:	69bb      	ldr	r3, [r7, #24]
 800b87e:	1c5a      	adds	r2, r3, #1
 800b880:	61ba      	str	r2, [r7, #24]
 800b882:	68fa      	ldr	r2, [r7, #12]
 800b884:	8992      	ldrh	r2, [r2, #12]
 800b886:	fbb3 f0f2 	udiv	r0, r3, r2
 800b88a:	fb00 f202 	mul.w	r2, r0, r2
 800b88e:	1a9b      	subs	r3, r3, r2
 800b890:	440b      	add	r3, r1
 800b892:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	f003 0301 	and.w	r3, r3, #1
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d00d      	beq.n	800b8ba <put_fat+0xb8>
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	781b      	ldrb	r3, [r3, #0]
 800b8a2:	b25b      	sxtb	r3, r3
 800b8a4:	f003 030f 	and.w	r3, r3, #15
 800b8a8:	b25a      	sxtb	r2, r3
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	b2db      	uxtb	r3, r3
 800b8ae:	011b      	lsls	r3, r3, #4
 800b8b0:	b25b      	sxtb	r3, r3
 800b8b2:	4313      	orrs	r3, r2
 800b8b4:	b25b      	sxtb	r3, r3
 800b8b6:	b2db      	uxtb	r3, r3
 800b8b8:	e001      	b.n	800b8be <put_fat+0xbc>
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	b2db      	uxtb	r3, r3
 800b8be:	697a      	ldr	r2, [r7, #20]
 800b8c0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	2201      	movs	r2, #1
 800b8c6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	899b      	ldrh	r3, [r3, #12]
 800b8d0:	4619      	mov	r1, r3
 800b8d2:	69bb      	ldr	r3, [r7, #24]
 800b8d4:	fbb3 f3f1 	udiv	r3, r3, r1
 800b8d8:	4413      	add	r3, r2
 800b8da:	4619      	mov	r1, r3
 800b8dc:	68f8      	ldr	r0, [r7, #12]
 800b8de:	f7ff fdff 	bl	800b4e0 <move_window>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b8e6:	7ffb      	ldrb	r3, [r7, #31]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	f040 809a 	bne.w	800ba22 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	899b      	ldrh	r3, [r3, #12]
 800b8f8:	461a      	mov	r2, r3
 800b8fa:	69bb      	ldr	r3, [r7, #24]
 800b8fc:	fbb3 f0f2 	udiv	r0, r3, r2
 800b900:	fb00 f202 	mul.w	r2, r0, r2
 800b904:	1a9b      	subs	r3, r3, r2
 800b906:	440b      	add	r3, r1
 800b908:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	f003 0301 	and.w	r3, r3, #1
 800b910:	2b00      	cmp	r3, #0
 800b912:	d003      	beq.n	800b91c <put_fat+0x11a>
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	091b      	lsrs	r3, r3, #4
 800b918:	b2db      	uxtb	r3, r3
 800b91a:	e00e      	b.n	800b93a <put_fat+0x138>
 800b91c:	697b      	ldr	r3, [r7, #20]
 800b91e:	781b      	ldrb	r3, [r3, #0]
 800b920:	b25b      	sxtb	r3, r3
 800b922:	f023 030f 	bic.w	r3, r3, #15
 800b926:	b25a      	sxtb	r2, r3
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	0a1b      	lsrs	r3, r3, #8
 800b92c:	b25b      	sxtb	r3, r3
 800b92e:	f003 030f 	and.w	r3, r3, #15
 800b932:	b25b      	sxtb	r3, r3
 800b934:	4313      	orrs	r3, r2
 800b936:	b25b      	sxtb	r3, r3
 800b938:	b2db      	uxtb	r3, r3
 800b93a:	697a      	ldr	r2, [r7, #20]
 800b93c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	2201      	movs	r2, #1
 800b942:	70da      	strb	r2, [r3, #3]
			break;
 800b944:	e072      	b.n	800ba2c <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	899b      	ldrh	r3, [r3, #12]
 800b94e:	085b      	lsrs	r3, r3, #1
 800b950:	b29b      	uxth	r3, r3
 800b952:	4619      	mov	r1, r3
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	fbb3 f3f1 	udiv	r3, r3, r1
 800b95a:	4413      	add	r3, r2
 800b95c:	4619      	mov	r1, r3
 800b95e:	68f8      	ldr	r0, [r7, #12]
 800b960:	f7ff fdbe 	bl	800b4e0 <move_window>
 800b964:	4603      	mov	r3, r0
 800b966:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b968:	7ffb      	ldrb	r3, [r7, #31]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d15b      	bne.n	800ba26 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	005b      	lsls	r3, r3, #1
 800b978:	68fa      	ldr	r2, [r7, #12]
 800b97a:	8992      	ldrh	r2, [r2, #12]
 800b97c:	fbb3 f0f2 	udiv	r0, r3, r2
 800b980:	fb00 f202 	mul.w	r2, r0, r2
 800b984:	1a9b      	subs	r3, r3, r2
 800b986:	440b      	add	r3, r1
 800b988:	687a      	ldr	r2, [r7, #4]
 800b98a:	b292      	uxth	r2, r2
 800b98c:	4611      	mov	r1, r2
 800b98e:	4618      	mov	r0, r3
 800b990:	f7ff fb31 	bl	800aff6 <st_word>
			fs->wflag = 1;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	2201      	movs	r2, #1
 800b998:	70da      	strb	r2, [r3, #3]
			break;
 800b99a:	e047      	b.n	800ba2c <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	899b      	ldrh	r3, [r3, #12]
 800b9a4:	089b      	lsrs	r3, r3, #2
 800b9a6:	b29b      	uxth	r3, r3
 800b9a8:	4619      	mov	r1, r3
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	fbb3 f3f1 	udiv	r3, r3, r1
 800b9b0:	4413      	add	r3, r2
 800b9b2:	4619      	mov	r1, r3
 800b9b4:	68f8      	ldr	r0, [r7, #12]
 800b9b6:	f7ff fd93 	bl	800b4e0 <move_window>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b9be:	7ffb      	ldrb	r3, [r7, #31]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d132      	bne.n	800ba2a <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b9d0:	68bb      	ldr	r3, [r7, #8]
 800b9d2:	009b      	lsls	r3, r3, #2
 800b9d4:	68fa      	ldr	r2, [r7, #12]
 800b9d6:	8992      	ldrh	r2, [r2, #12]
 800b9d8:	fbb3 f0f2 	udiv	r0, r3, r2
 800b9dc:	fb00 f202 	mul.w	r2, r0, r2
 800b9e0:	1a9b      	subs	r3, r3, r2
 800b9e2:	440b      	add	r3, r1
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f7ff fae3 	bl	800afb0 <ld_dword>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b9f0:	4323      	orrs	r3, r4
 800b9f2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	009b      	lsls	r3, r3, #2
 800b9fe:	68fa      	ldr	r2, [r7, #12]
 800ba00:	8992      	ldrh	r2, [r2, #12]
 800ba02:	fbb3 f0f2 	udiv	r0, r3, r2
 800ba06:	fb00 f202 	mul.w	r2, r0, r2
 800ba0a:	1a9b      	subs	r3, r3, r2
 800ba0c:	440b      	add	r3, r1
 800ba0e:	6879      	ldr	r1, [r7, #4]
 800ba10:	4618      	mov	r0, r3
 800ba12:	f7ff fb0b 	bl	800b02c <st_dword>
			fs->wflag = 1;
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	2201      	movs	r2, #1
 800ba1a:	70da      	strb	r2, [r3, #3]
			break;
 800ba1c:	e006      	b.n	800ba2c <put_fat+0x22a>
			if (res != FR_OK) break;
 800ba1e:	bf00      	nop
 800ba20:	e004      	b.n	800ba2c <put_fat+0x22a>
			if (res != FR_OK) break;
 800ba22:	bf00      	nop
 800ba24:	e002      	b.n	800ba2c <put_fat+0x22a>
			if (res != FR_OK) break;
 800ba26:	bf00      	nop
 800ba28:	e000      	b.n	800ba2c <put_fat+0x22a>
			if (res != FR_OK) break;
 800ba2a:	bf00      	nop
		}
	}
	return res;
 800ba2c:	7ffb      	ldrb	r3, [r7, #31]
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3724      	adds	r7, #36	; 0x24
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd90      	pop	{r4, r7, pc}

0800ba36 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ba36:	b580      	push	{r7, lr}
 800ba38:	b088      	sub	sp, #32
 800ba3a:	af00      	add	r7, sp, #0
 800ba3c:	60f8      	str	r0, [r7, #12]
 800ba3e:	60b9      	str	r1, [r7, #8]
 800ba40:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ba42:	2300      	movs	r3, #0
 800ba44:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	2b01      	cmp	r3, #1
 800ba50:	d904      	bls.n	800ba5c <remove_chain+0x26>
 800ba52:	69bb      	ldr	r3, [r7, #24]
 800ba54:	6a1b      	ldr	r3, [r3, #32]
 800ba56:	68ba      	ldr	r2, [r7, #8]
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	d301      	bcc.n	800ba60 <remove_chain+0x2a>
 800ba5c:	2302      	movs	r3, #2
 800ba5e:	e04b      	b.n	800baf8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d00c      	beq.n	800ba80 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ba66:	f04f 32ff 	mov.w	r2, #4294967295
 800ba6a:	6879      	ldr	r1, [r7, #4]
 800ba6c:	69b8      	ldr	r0, [r7, #24]
 800ba6e:	f7ff fec8 	bl	800b802 <put_fat>
 800ba72:	4603      	mov	r3, r0
 800ba74:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ba76:	7ffb      	ldrb	r3, [r7, #31]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d001      	beq.n	800ba80 <remove_chain+0x4a>
 800ba7c:	7ffb      	ldrb	r3, [r7, #31]
 800ba7e:	e03b      	b.n	800baf8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ba80:	68b9      	ldr	r1, [r7, #8]
 800ba82:	68f8      	ldr	r0, [r7, #12]
 800ba84:	f7ff fde9 	bl	800b65a <get_fat>
 800ba88:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d031      	beq.n	800baf4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ba90:	697b      	ldr	r3, [r7, #20]
 800ba92:	2b01      	cmp	r3, #1
 800ba94:	d101      	bne.n	800ba9a <remove_chain+0x64>
 800ba96:	2302      	movs	r3, #2
 800ba98:	e02e      	b.n	800baf8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ba9a:	697b      	ldr	r3, [r7, #20]
 800ba9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baa0:	d101      	bne.n	800baa6 <remove_chain+0x70>
 800baa2:	2301      	movs	r3, #1
 800baa4:	e028      	b.n	800baf8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800baa6:	2200      	movs	r2, #0
 800baa8:	68b9      	ldr	r1, [r7, #8]
 800baaa:	69b8      	ldr	r0, [r7, #24]
 800baac:	f7ff fea9 	bl	800b802 <put_fat>
 800bab0:	4603      	mov	r3, r0
 800bab2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800bab4:	7ffb      	ldrb	r3, [r7, #31]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d001      	beq.n	800babe <remove_chain+0x88>
 800baba:	7ffb      	ldrb	r3, [r7, #31]
 800babc:	e01c      	b.n	800baf8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800babe:	69bb      	ldr	r3, [r7, #24]
 800bac0:	699a      	ldr	r2, [r3, #24]
 800bac2:	69bb      	ldr	r3, [r7, #24]
 800bac4:	6a1b      	ldr	r3, [r3, #32]
 800bac6:	3b02      	subs	r3, #2
 800bac8:	429a      	cmp	r2, r3
 800baca:	d20b      	bcs.n	800bae4 <remove_chain+0xae>
			fs->free_clst++;
 800bacc:	69bb      	ldr	r3, [r7, #24]
 800bace:	699b      	ldr	r3, [r3, #24]
 800bad0:	1c5a      	adds	r2, r3, #1
 800bad2:	69bb      	ldr	r3, [r7, #24]
 800bad4:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800bad6:	69bb      	ldr	r3, [r7, #24]
 800bad8:	791b      	ldrb	r3, [r3, #4]
 800bada:	f043 0301 	orr.w	r3, r3, #1
 800bade:	b2da      	uxtb	r2, r3
 800bae0:	69bb      	ldr	r3, [r7, #24]
 800bae2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800bae4:	697b      	ldr	r3, [r7, #20]
 800bae6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800bae8:	69bb      	ldr	r3, [r7, #24]
 800baea:	6a1b      	ldr	r3, [r3, #32]
 800baec:	68ba      	ldr	r2, [r7, #8]
 800baee:	429a      	cmp	r2, r3
 800baf0:	d3c6      	bcc.n	800ba80 <remove_chain+0x4a>
 800baf2:	e000      	b.n	800baf6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800baf4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800baf6:	2300      	movs	r3, #0
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	3720      	adds	r7, #32
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}

0800bb00 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b088      	sub	sp, #32
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
 800bb08:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d10d      	bne.n	800bb32 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800bb16:	693b      	ldr	r3, [r7, #16]
 800bb18:	695b      	ldr	r3, [r3, #20]
 800bb1a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800bb1c:	69bb      	ldr	r3, [r7, #24]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d004      	beq.n	800bb2c <create_chain+0x2c>
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	6a1b      	ldr	r3, [r3, #32]
 800bb26:	69ba      	ldr	r2, [r7, #24]
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	d31b      	bcc.n	800bb64 <create_chain+0x64>
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	61bb      	str	r3, [r7, #24]
 800bb30:	e018      	b.n	800bb64 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800bb32:	6839      	ldr	r1, [r7, #0]
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f7ff fd90 	bl	800b65a <get_fat>
 800bb3a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	2b01      	cmp	r3, #1
 800bb40:	d801      	bhi.n	800bb46 <create_chain+0x46>
 800bb42:	2301      	movs	r3, #1
 800bb44:	e070      	b.n	800bc28 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb4c:	d101      	bne.n	800bb52 <create_chain+0x52>
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	e06a      	b.n	800bc28 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	6a1b      	ldr	r3, [r3, #32]
 800bb56:	68fa      	ldr	r2, [r7, #12]
 800bb58:	429a      	cmp	r2, r3
 800bb5a:	d201      	bcs.n	800bb60 <create_chain+0x60>
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	e063      	b.n	800bc28 <create_chain+0x128>
		scl = clst;
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800bb64:	69bb      	ldr	r3, [r7, #24]
 800bb66:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800bb68:	69fb      	ldr	r3, [r7, #28]
 800bb6a:	3301      	adds	r3, #1
 800bb6c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	6a1b      	ldr	r3, [r3, #32]
 800bb72:	69fa      	ldr	r2, [r7, #28]
 800bb74:	429a      	cmp	r2, r3
 800bb76:	d307      	bcc.n	800bb88 <create_chain+0x88>
				ncl = 2;
 800bb78:	2302      	movs	r3, #2
 800bb7a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800bb7c:	69fa      	ldr	r2, [r7, #28]
 800bb7e:	69bb      	ldr	r3, [r7, #24]
 800bb80:	429a      	cmp	r2, r3
 800bb82:	d901      	bls.n	800bb88 <create_chain+0x88>
 800bb84:	2300      	movs	r3, #0
 800bb86:	e04f      	b.n	800bc28 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800bb88:	69f9      	ldr	r1, [r7, #28]
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f7ff fd65 	bl	800b65a <get_fat>
 800bb90:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d00e      	beq.n	800bbb6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	2b01      	cmp	r3, #1
 800bb9c:	d003      	beq.n	800bba6 <create_chain+0xa6>
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bba4:	d101      	bne.n	800bbaa <create_chain+0xaa>
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	e03e      	b.n	800bc28 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800bbaa:	69fa      	ldr	r2, [r7, #28]
 800bbac:	69bb      	ldr	r3, [r7, #24]
 800bbae:	429a      	cmp	r2, r3
 800bbb0:	d1da      	bne.n	800bb68 <create_chain+0x68>
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	e038      	b.n	800bc28 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800bbb6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800bbb8:	f04f 32ff 	mov.w	r2, #4294967295
 800bbbc:	69f9      	ldr	r1, [r7, #28]
 800bbbe:	6938      	ldr	r0, [r7, #16]
 800bbc0:	f7ff fe1f 	bl	800b802 <put_fat>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800bbc8:	7dfb      	ldrb	r3, [r7, #23]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d109      	bne.n	800bbe2 <create_chain+0xe2>
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d006      	beq.n	800bbe2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800bbd4:	69fa      	ldr	r2, [r7, #28]
 800bbd6:	6839      	ldr	r1, [r7, #0]
 800bbd8:	6938      	ldr	r0, [r7, #16]
 800bbda:	f7ff fe12 	bl	800b802 <put_fat>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800bbe2:	7dfb      	ldrb	r3, [r7, #23]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d116      	bne.n	800bc16 <create_chain+0x116>
		fs->last_clst = ncl;
 800bbe8:	693b      	ldr	r3, [r7, #16]
 800bbea:	69fa      	ldr	r2, [r7, #28]
 800bbec:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800bbee:	693b      	ldr	r3, [r7, #16]
 800bbf0:	699a      	ldr	r2, [r3, #24]
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	6a1b      	ldr	r3, [r3, #32]
 800bbf6:	3b02      	subs	r3, #2
 800bbf8:	429a      	cmp	r2, r3
 800bbfa:	d804      	bhi.n	800bc06 <create_chain+0x106>
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	699b      	ldr	r3, [r3, #24]
 800bc00:	1e5a      	subs	r2, r3, #1
 800bc02:	693b      	ldr	r3, [r7, #16]
 800bc04:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800bc06:	693b      	ldr	r3, [r7, #16]
 800bc08:	791b      	ldrb	r3, [r3, #4]
 800bc0a:	f043 0301 	orr.w	r3, r3, #1
 800bc0e:	b2da      	uxtb	r2, r3
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	711a      	strb	r2, [r3, #4]
 800bc14:	e007      	b.n	800bc26 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800bc16:	7dfb      	ldrb	r3, [r7, #23]
 800bc18:	2b01      	cmp	r3, #1
 800bc1a:	d102      	bne.n	800bc22 <create_chain+0x122>
 800bc1c:	f04f 33ff 	mov.w	r3, #4294967295
 800bc20:	e000      	b.n	800bc24 <create_chain+0x124>
 800bc22:	2301      	movs	r3, #1
 800bc24:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800bc26:	69fb      	ldr	r3, [r7, #28]
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	3720      	adds	r7, #32
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}

0800bc30 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800bc30:	b480      	push	{r7}
 800bc32:	b087      	sub	sp, #28
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc44:	3304      	adds	r3, #4
 800bc46:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	899b      	ldrh	r3, [r3, #12]
 800bc4c:	461a      	mov	r2, r3
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	fbb3 f3f2 	udiv	r3, r3, r2
 800bc54:	68fa      	ldr	r2, [r7, #12]
 800bc56:	8952      	ldrh	r2, [r2, #10]
 800bc58:	fbb3 f3f2 	udiv	r3, r3, r2
 800bc5c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bc5e:	693b      	ldr	r3, [r7, #16]
 800bc60:	1d1a      	adds	r2, r3, #4
 800bc62:	613a      	str	r2, [r7, #16]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d101      	bne.n	800bc72 <clmt_clust+0x42>
 800bc6e:	2300      	movs	r3, #0
 800bc70:	e010      	b.n	800bc94 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800bc72:	697a      	ldr	r2, [r7, #20]
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	429a      	cmp	r2, r3
 800bc78:	d307      	bcc.n	800bc8a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800bc7a:	697a      	ldr	r2, [r7, #20]
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	1ad3      	subs	r3, r2, r3
 800bc80:	617b      	str	r3, [r7, #20]
 800bc82:	693b      	ldr	r3, [r7, #16]
 800bc84:	3304      	adds	r3, #4
 800bc86:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bc88:	e7e9      	b.n	800bc5e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800bc8a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800bc8c:	693b      	ldr	r3, [r7, #16]
 800bc8e:	681a      	ldr	r2, [r3, #0]
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	4413      	add	r3, r2
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	371c      	adds	r7, #28
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9e:	4770      	bx	lr

0800bca0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b086      	sub	sp, #24
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
 800bca8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bcb6:	d204      	bcs.n	800bcc2 <dir_sdi+0x22>
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	f003 031f 	and.w	r3, r3, #31
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d001      	beq.n	800bcc6 <dir_sdi+0x26>
		return FR_INT_ERR;
 800bcc2:	2302      	movs	r3, #2
 800bcc4:	e071      	b.n	800bdaa <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	683a      	ldr	r2, [r7, #0]
 800bcca:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	689b      	ldr	r3, [r3, #8]
 800bcd0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800bcd2:	697b      	ldr	r3, [r7, #20]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d106      	bne.n	800bce6 <dir_sdi+0x46>
 800bcd8:	693b      	ldr	r3, [r7, #16]
 800bcda:	781b      	ldrb	r3, [r3, #0]
 800bcdc:	2b02      	cmp	r3, #2
 800bcde:	d902      	bls.n	800bce6 <dir_sdi+0x46>
		clst = fs->dirbase;
 800bce0:	693b      	ldr	r3, [r7, #16]
 800bce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bce4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800bce6:	697b      	ldr	r3, [r7, #20]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d10c      	bne.n	800bd06 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	095b      	lsrs	r3, r3, #5
 800bcf0:	693a      	ldr	r2, [r7, #16]
 800bcf2:	8912      	ldrh	r2, [r2, #8]
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	d301      	bcc.n	800bcfc <dir_sdi+0x5c>
 800bcf8:	2302      	movs	r3, #2
 800bcfa:	e056      	b.n	800bdaa <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	61da      	str	r2, [r3, #28]
 800bd04:	e02d      	b.n	800bd62 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800bd06:	693b      	ldr	r3, [r7, #16]
 800bd08:	895b      	ldrh	r3, [r3, #10]
 800bd0a:	461a      	mov	r2, r3
 800bd0c:	693b      	ldr	r3, [r7, #16]
 800bd0e:	899b      	ldrh	r3, [r3, #12]
 800bd10:	fb02 f303 	mul.w	r3, r2, r3
 800bd14:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bd16:	e019      	b.n	800bd4c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	6979      	ldr	r1, [r7, #20]
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	f7ff fc9c 	bl	800b65a <get_fat>
 800bd22:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bd24:	697b      	ldr	r3, [r7, #20]
 800bd26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd2a:	d101      	bne.n	800bd30 <dir_sdi+0x90>
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	e03c      	b.n	800bdaa <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800bd30:	697b      	ldr	r3, [r7, #20]
 800bd32:	2b01      	cmp	r3, #1
 800bd34:	d904      	bls.n	800bd40 <dir_sdi+0xa0>
 800bd36:	693b      	ldr	r3, [r7, #16]
 800bd38:	6a1b      	ldr	r3, [r3, #32]
 800bd3a:	697a      	ldr	r2, [r7, #20]
 800bd3c:	429a      	cmp	r2, r3
 800bd3e:	d301      	bcc.n	800bd44 <dir_sdi+0xa4>
 800bd40:	2302      	movs	r3, #2
 800bd42:	e032      	b.n	800bdaa <dir_sdi+0x10a>
			ofs -= csz;
 800bd44:	683a      	ldr	r2, [r7, #0]
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	1ad3      	subs	r3, r2, r3
 800bd4a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bd4c:	683a      	ldr	r2, [r7, #0]
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	429a      	cmp	r2, r3
 800bd52:	d2e1      	bcs.n	800bd18 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800bd54:	6979      	ldr	r1, [r7, #20]
 800bd56:	6938      	ldr	r0, [r7, #16]
 800bd58:	f7ff fc60 	bl	800b61c <clust2sect>
 800bd5c:	4602      	mov	r2, r0
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	697a      	ldr	r2, [r7, #20]
 800bd66:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	69db      	ldr	r3, [r3, #28]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d101      	bne.n	800bd74 <dir_sdi+0xd4>
 800bd70:	2302      	movs	r3, #2
 800bd72:	e01a      	b.n	800bdaa <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	69da      	ldr	r2, [r3, #28]
 800bd78:	693b      	ldr	r3, [r7, #16]
 800bd7a:	899b      	ldrh	r3, [r3, #12]
 800bd7c:	4619      	mov	r1, r3
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	fbb3 f3f1 	udiv	r3, r3, r1
 800bd84:	441a      	add	r2, r3
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800bd8a:	693b      	ldr	r3, [r7, #16]
 800bd8c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	899b      	ldrh	r3, [r3, #12]
 800bd94:	461a      	mov	r2, r3
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	fbb3 f0f2 	udiv	r0, r3, r2
 800bd9c:	fb00 f202 	mul.w	r2, r0, r2
 800bda0:	1a9b      	subs	r3, r3, r2
 800bda2:	18ca      	adds	r2, r1, r3
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bda8:	2300      	movs	r3, #0
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3718      	adds	r7, #24
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}

0800bdb2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800bdb2:	b580      	push	{r7, lr}
 800bdb4:	b086      	sub	sp, #24
 800bdb6:	af00      	add	r7, sp, #0
 800bdb8:	6078      	str	r0, [r7, #4]
 800bdba:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	695b      	ldr	r3, [r3, #20]
 800bdc6:	3320      	adds	r3, #32
 800bdc8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	69db      	ldr	r3, [r3, #28]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d003      	beq.n	800bdda <dir_next+0x28>
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bdd8:	d301      	bcc.n	800bdde <dir_next+0x2c>
 800bdda:	2304      	movs	r3, #4
 800bddc:	e0bb      	b.n	800bf56 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	899b      	ldrh	r3, [r3, #12]
 800bde2:	461a      	mov	r2, r3
 800bde4:	68bb      	ldr	r3, [r7, #8]
 800bde6:	fbb3 f1f2 	udiv	r1, r3, r2
 800bdea:	fb01 f202 	mul.w	r2, r1, r2
 800bdee:	1a9b      	subs	r3, r3, r2
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	f040 809d 	bne.w	800bf30 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	69db      	ldr	r3, [r3, #28]
 800bdfa:	1c5a      	adds	r2, r3, #1
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	699b      	ldr	r3, [r3, #24]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d10b      	bne.n	800be20 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	095b      	lsrs	r3, r3, #5
 800be0c:	68fa      	ldr	r2, [r7, #12]
 800be0e:	8912      	ldrh	r2, [r2, #8]
 800be10:	4293      	cmp	r3, r2
 800be12:	f0c0 808d 	bcc.w	800bf30 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2200      	movs	r2, #0
 800be1a:	61da      	str	r2, [r3, #28]
 800be1c:	2304      	movs	r3, #4
 800be1e:	e09a      	b.n	800bf56 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	899b      	ldrh	r3, [r3, #12]
 800be24:	461a      	mov	r2, r3
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	fbb3 f3f2 	udiv	r3, r3, r2
 800be2c:	68fa      	ldr	r2, [r7, #12]
 800be2e:	8952      	ldrh	r2, [r2, #10]
 800be30:	3a01      	subs	r2, #1
 800be32:	4013      	ands	r3, r2
 800be34:	2b00      	cmp	r3, #0
 800be36:	d17b      	bne.n	800bf30 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800be38:	687a      	ldr	r2, [r7, #4]
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	699b      	ldr	r3, [r3, #24]
 800be3e:	4619      	mov	r1, r3
 800be40:	4610      	mov	r0, r2
 800be42:	f7ff fc0a 	bl	800b65a <get_fat>
 800be46:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800be48:	697b      	ldr	r3, [r7, #20]
 800be4a:	2b01      	cmp	r3, #1
 800be4c:	d801      	bhi.n	800be52 <dir_next+0xa0>
 800be4e:	2302      	movs	r3, #2
 800be50:	e081      	b.n	800bf56 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800be52:	697b      	ldr	r3, [r7, #20]
 800be54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be58:	d101      	bne.n	800be5e <dir_next+0xac>
 800be5a:	2301      	movs	r3, #1
 800be5c:	e07b      	b.n	800bf56 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	6a1b      	ldr	r3, [r3, #32]
 800be62:	697a      	ldr	r2, [r7, #20]
 800be64:	429a      	cmp	r2, r3
 800be66:	d359      	bcc.n	800bf1c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d104      	bne.n	800be78 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2200      	movs	r2, #0
 800be72:	61da      	str	r2, [r3, #28]
 800be74:	2304      	movs	r3, #4
 800be76:	e06e      	b.n	800bf56 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800be78:	687a      	ldr	r2, [r7, #4]
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	699b      	ldr	r3, [r3, #24]
 800be7e:	4619      	mov	r1, r3
 800be80:	4610      	mov	r0, r2
 800be82:	f7ff fe3d 	bl	800bb00 <create_chain>
 800be86:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800be88:	697b      	ldr	r3, [r7, #20]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d101      	bne.n	800be92 <dir_next+0xe0>
 800be8e:	2307      	movs	r3, #7
 800be90:	e061      	b.n	800bf56 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800be92:	697b      	ldr	r3, [r7, #20]
 800be94:	2b01      	cmp	r3, #1
 800be96:	d101      	bne.n	800be9c <dir_next+0xea>
 800be98:	2302      	movs	r3, #2
 800be9a:	e05c      	b.n	800bf56 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800be9c:	697b      	ldr	r3, [r7, #20]
 800be9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bea2:	d101      	bne.n	800bea8 <dir_next+0xf6>
 800bea4:	2301      	movs	r3, #1
 800bea6:	e056      	b.n	800bf56 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800bea8:	68f8      	ldr	r0, [r7, #12]
 800beaa:	f7ff fad5 	bl	800b458 <sync_window>
 800beae:	4603      	mov	r3, r0
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d001      	beq.n	800beb8 <dir_next+0x106>
 800beb4:	2301      	movs	r3, #1
 800beb6:	e04e      	b.n	800bf56 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	899b      	ldrh	r3, [r3, #12]
 800bec2:	461a      	mov	r2, r3
 800bec4:	2100      	movs	r1, #0
 800bec6:	f7ff f8fe 	bl	800b0c6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800beca:	2300      	movs	r3, #0
 800becc:	613b      	str	r3, [r7, #16]
 800bece:	6979      	ldr	r1, [r7, #20]
 800bed0:	68f8      	ldr	r0, [r7, #12]
 800bed2:	f7ff fba3 	bl	800b61c <clust2sect>
 800bed6:	4602      	mov	r2, r0
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	639a      	str	r2, [r3, #56]	; 0x38
 800bedc:	e012      	b.n	800bf04 <dir_next+0x152>
						fs->wflag = 1;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	2201      	movs	r2, #1
 800bee2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800bee4:	68f8      	ldr	r0, [r7, #12]
 800bee6:	f7ff fab7 	bl	800b458 <sync_window>
 800beea:	4603      	mov	r3, r0
 800beec:	2b00      	cmp	r3, #0
 800beee:	d001      	beq.n	800bef4 <dir_next+0x142>
 800bef0:	2301      	movs	r3, #1
 800bef2:	e030      	b.n	800bf56 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bef4:	693b      	ldr	r3, [r7, #16]
 800bef6:	3301      	adds	r3, #1
 800bef8:	613b      	str	r3, [r7, #16]
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800befe:	1c5a      	adds	r2, r3, #1
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	639a      	str	r2, [r3, #56]	; 0x38
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	895b      	ldrh	r3, [r3, #10]
 800bf08:	461a      	mov	r2, r3
 800bf0a:	693b      	ldr	r3, [r7, #16]
 800bf0c:	4293      	cmp	r3, r2
 800bf0e:	d3e6      	bcc.n	800bede <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf14:	693b      	ldr	r3, [r7, #16]
 800bf16:	1ad2      	subs	r2, r2, r3
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	697a      	ldr	r2, [r7, #20]
 800bf20:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800bf22:	6979      	ldr	r1, [r7, #20]
 800bf24:	68f8      	ldr	r0, [r7, #12]
 800bf26:	f7ff fb79 	bl	800b61c <clust2sect>
 800bf2a:	4602      	mov	r2, r0
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	68ba      	ldr	r2, [r7, #8]
 800bf34:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	899b      	ldrh	r3, [r3, #12]
 800bf40:	461a      	mov	r2, r3
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	fbb3 f0f2 	udiv	r0, r3, r2
 800bf48:	fb00 f202 	mul.w	r2, r0, r2
 800bf4c:	1a9b      	subs	r3, r3, r2
 800bf4e:	18ca      	adds	r2, r1, r3
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bf54:	2300      	movs	r3, #0
}
 800bf56:	4618      	mov	r0, r3
 800bf58:	3718      	adds	r7, #24
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}

0800bf5e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800bf5e:	b580      	push	{r7, lr}
 800bf60:	b086      	sub	sp, #24
 800bf62:	af00      	add	r7, sp, #0
 800bf64:	6078      	str	r0, [r7, #4]
 800bf66:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800bf6e:	2100      	movs	r1, #0
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f7ff fe95 	bl	800bca0 <dir_sdi>
 800bf76:	4603      	mov	r3, r0
 800bf78:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bf7a:	7dfb      	ldrb	r3, [r7, #23]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d12b      	bne.n	800bfd8 <dir_alloc+0x7a>
		n = 0;
 800bf80:	2300      	movs	r3, #0
 800bf82:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	69db      	ldr	r3, [r3, #28]
 800bf88:	4619      	mov	r1, r3
 800bf8a:	68f8      	ldr	r0, [r7, #12]
 800bf8c:	f7ff faa8 	bl	800b4e0 <move_window>
 800bf90:	4603      	mov	r3, r0
 800bf92:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bf94:	7dfb      	ldrb	r3, [r7, #23]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d11d      	bne.n	800bfd6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6a1b      	ldr	r3, [r3, #32]
 800bf9e:	781b      	ldrb	r3, [r3, #0]
 800bfa0:	2be5      	cmp	r3, #229	; 0xe5
 800bfa2:	d004      	beq.n	800bfae <dir_alloc+0x50>
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	6a1b      	ldr	r3, [r3, #32]
 800bfa8:	781b      	ldrb	r3, [r3, #0]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d107      	bne.n	800bfbe <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	3301      	adds	r3, #1
 800bfb2:	613b      	str	r3, [r7, #16]
 800bfb4:	693a      	ldr	r2, [r7, #16]
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	429a      	cmp	r2, r3
 800bfba:	d102      	bne.n	800bfc2 <dir_alloc+0x64>
 800bfbc:	e00c      	b.n	800bfd8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800bfc2:	2101      	movs	r1, #1
 800bfc4:	6878      	ldr	r0, [r7, #4]
 800bfc6:	f7ff fef4 	bl	800bdb2 <dir_next>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800bfce:	7dfb      	ldrb	r3, [r7, #23]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d0d7      	beq.n	800bf84 <dir_alloc+0x26>
 800bfd4:	e000      	b.n	800bfd8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800bfd6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800bfd8:	7dfb      	ldrb	r3, [r7, #23]
 800bfda:	2b04      	cmp	r3, #4
 800bfdc:	d101      	bne.n	800bfe2 <dir_alloc+0x84>
 800bfde:	2307      	movs	r3, #7
 800bfe0:	75fb      	strb	r3, [r7, #23]
	return res;
 800bfe2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	3718      	adds	r7, #24
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}

0800bfec <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b084      	sub	sp, #16
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
 800bff4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	331a      	adds	r3, #26
 800bffa:	4618      	mov	r0, r3
 800bffc:	f7fe ffc0 	bl	800af80 <ld_word>
 800c000:	4603      	mov	r3, r0
 800c002:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	781b      	ldrb	r3, [r3, #0]
 800c008:	2b03      	cmp	r3, #3
 800c00a:	d109      	bne.n	800c020 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	3314      	adds	r3, #20
 800c010:	4618      	mov	r0, r3
 800c012:	f7fe ffb5 	bl	800af80 <ld_word>
 800c016:	4603      	mov	r3, r0
 800c018:	041b      	lsls	r3, r3, #16
 800c01a:	68fa      	ldr	r2, [r7, #12]
 800c01c:	4313      	orrs	r3, r2
 800c01e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c020:	68fb      	ldr	r3, [r7, #12]
}
 800c022:	4618      	mov	r0, r3
 800c024:	3710      	adds	r7, #16
 800c026:	46bd      	mov	sp, r7
 800c028:	bd80      	pop	{r7, pc}

0800c02a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c02a:	b580      	push	{r7, lr}
 800c02c:	b084      	sub	sp, #16
 800c02e:	af00      	add	r7, sp, #0
 800c030:	60f8      	str	r0, [r7, #12]
 800c032:	60b9      	str	r1, [r7, #8]
 800c034:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c036:	68bb      	ldr	r3, [r7, #8]
 800c038:	331a      	adds	r3, #26
 800c03a:	687a      	ldr	r2, [r7, #4]
 800c03c:	b292      	uxth	r2, r2
 800c03e:	4611      	mov	r1, r2
 800c040:	4618      	mov	r0, r3
 800c042:	f7fe ffd8 	bl	800aff6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	781b      	ldrb	r3, [r3, #0]
 800c04a:	2b03      	cmp	r3, #3
 800c04c:	d109      	bne.n	800c062 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c04e:	68bb      	ldr	r3, [r7, #8]
 800c050:	f103 0214 	add.w	r2, r3, #20
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	0c1b      	lsrs	r3, r3, #16
 800c058:	b29b      	uxth	r3, r3
 800c05a:	4619      	mov	r1, r3
 800c05c:	4610      	mov	r0, r2
 800c05e:	f7fe ffca 	bl	800aff6 <st_word>
	}
}
 800c062:	bf00      	nop
 800c064:	3710      	adds	r7, #16
 800c066:	46bd      	mov	sp, r7
 800c068:	bd80      	pop	{r7, pc}
	...

0800c06c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800c06c:	b590      	push	{r4, r7, lr}
 800c06e:	b087      	sub	sp, #28
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
 800c074:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	331a      	adds	r3, #26
 800c07a:	4618      	mov	r0, r3
 800c07c:	f7fe ff80 	bl	800af80 <ld_word>
 800c080:	4603      	mov	r3, r0
 800c082:	2b00      	cmp	r3, #0
 800c084:	d001      	beq.n	800c08a <cmp_lfn+0x1e>
 800c086:	2300      	movs	r3, #0
 800c088:	e059      	b.n	800c13e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	781b      	ldrb	r3, [r3, #0]
 800c08e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c092:	1e5a      	subs	r2, r3, #1
 800c094:	4613      	mov	r3, r2
 800c096:	005b      	lsls	r3, r3, #1
 800c098:	4413      	add	r3, r2
 800c09a:	009b      	lsls	r3, r3, #2
 800c09c:	4413      	add	r3, r2
 800c09e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	81fb      	strh	r3, [r7, #14]
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	613b      	str	r3, [r7, #16]
 800c0a8:	e033      	b.n	800c112 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c0aa:	4a27      	ldr	r2, [pc, #156]	; (800c148 <cmp_lfn+0xdc>)
 800c0ac:	693b      	ldr	r3, [r7, #16]
 800c0ae:	4413      	add	r3, r2
 800c0b0:	781b      	ldrb	r3, [r3, #0]
 800c0b2:	461a      	mov	r2, r3
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	4413      	add	r3, r2
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	f7fe ff61 	bl	800af80 <ld_word>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c0c2:	89fb      	ldrh	r3, [r7, #14]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d01a      	beq.n	800c0fe <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800c0c8:	697b      	ldr	r3, [r7, #20]
 800c0ca:	2bfe      	cmp	r3, #254	; 0xfe
 800c0cc:	d812      	bhi.n	800c0f4 <cmp_lfn+0x88>
 800c0ce:	89bb      	ldrh	r3, [r7, #12]
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f001 ff35 	bl	800df40 <ff_wtoupper>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	461c      	mov	r4, r3
 800c0da:	697b      	ldr	r3, [r7, #20]
 800c0dc:	1c5a      	adds	r2, r3, #1
 800c0de:	617a      	str	r2, [r7, #20]
 800c0e0:	005b      	lsls	r3, r3, #1
 800c0e2:	687a      	ldr	r2, [r7, #4]
 800c0e4:	4413      	add	r3, r2
 800c0e6:	881b      	ldrh	r3, [r3, #0]
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f001 ff29 	bl	800df40 <ff_wtoupper>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	429c      	cmp	r4, r3
 800c0f2:	d001      	beq.n	800c0f8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	e022      	b.n	800c13e <cmp_lfn+0xd2>
			}
			wc = uc;
 800c0f8:	89bb      	ldrh	r3, [r7, #12]
 800c0fa:	81fb      	strh	r3, [r7, #14]
 800c0fc:	e006      	b.n	800c10c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c0fe:	89bb      	ldrh	r3, [r7, #12]
 800c100:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c104:	4293      	cmp	r3, r2
 800c106:	d001      	beq.n	800c10c <cmp_lfn+0xa0>
 800c108:	2300      	movs	r3, #0
 800c10a:	e018      	b.n	800c13e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c10c:	693b      	ldr	r3, [r7, #16]
 800c10e:	3301      	adds	r3, #1
 800c110:	613b      	str	r3, [r7, #16]
 800c112:	693b      	ldr	r3, [r7, #16]
 800c114:	2b0c      	cmp	r3, #12
 800c116:	d9c8      	bls.n	800c0aa <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	781b      	ldrb	r3, [r3, #0]
 800c11c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c120:	2b00      	cmp	r3, #0
 800c122:	d00b      	beq.n	800c13c <cmp_lfn+0xd0>
 800c124:	89fb      	ldrh	r3, [r7, #14]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d008      	beq.n	800c13c <cmp_lfn+0xd0>
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	005b      	lsls	r3, r3, #1
 800c12e:	687a      	ldr	r2, [r7, #4]
 800c130:	4413      	add	r3, r2
 800c132:	881b      	ldrh	r3, [r3, #0]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d001      	beq.n	800c13c <cmp_lfn+0xd0>
 800c138:	2300      	movs	r3, #0
 800c13a:	e000      	b.n	800c13e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800c13c:	2301      	movs	r3, #1
}
 800c13e:	4618      	mov	r0, r3
 800c140:	371c      	adds	r7, #28
 800c142:	46bd      	mov	sp, r7
 800c144:	bd90      	pop	{r4, r7, pc}
 800c146:	bf00      	nop
 800c148:	080142dc 	.word	0x080142dc

0800c14c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b088      	sub	sp, #32
 800c150:	af00      	add	r7, sp, #0
 800c152:	60f8      	str	r0, [r7, #12]
 800c154:	60b9      	str	r1, [r7, #8]
 800c156:	4611      	mov	r1, r2
 800c158:	461a      	mov	r2, r3
 800c15a:	460b      	mov	r3, r1
 800c15c:	71fb      	strb	r3, [r7, #7]
 800c15e:	4613      	mov	r3, r2
 800c160:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800c162:	68bb      	ldr	r3, [r7, #8]
 800c164:	330d      	adds	r3, #13
 800c166:	79ba      	ldrb	r2, [r7, #6]
 800c168:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	330b      	adds	r3, #11
 800c16e:	220f      	movs	r2, #15
 800c170:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800c172:	68bb      	ldr	r3, [r7, #8]
 800c174:	330c      	adds	r3, #12
 800c176:	2200      	movs	r2, #0
 800c178:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	331a      	adds	r3, #26
 800c17e:	2100      	movs	r1, #0
 800c180:	4618      	mov	r0, r3
 800c182:	f7fe ff38 	bl	800aff6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800c186:	79fb      	ldrb	r3, [r7, #7]
 800c188:	1e5a      	subs	r2, r3, #1
 800c18a:	4613      	mov	r3, r2
 800c18c:	005b      	lsls	r3, r3, #1
 800c18e:	4413      	add	r3, r2
 800c190:	009b      	lsls	r3, r3, #2
 800c192:	4413      	add	r3, r2
 800c194:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800c196:	2300      	movs	r3, #0
 800c198:	82fb      	strh	r3, [r7, #22]
 800c19a:	2300      	movs	r3, #0
 800c19c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800c19e:	8afb      	ldrh	r3, [r7, #22]
 800c1a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c1a4:	4293      	cmp	r3, r2
 800c1a6:	d007      	beq.n	800c1b8 <put_lfn+0x6c>
 800c1a8:	69fb      	ldr	r3, [r7, #28]
 800c1aa:	1c5a      	adds	r2, r3, #1
 800c1ac:	61fa      	str	r2, [r7, #28]
 800c1ae:	005b      	lsls	r3, r3, #1
 800c1b0:	68fa      	ldr	r2, [r7, #12]
 800c1b2:	4413      	add	r3, r2
 800c1b4:	881b      	ldrh	r3, [r3, #0]
 800c1b6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800c1b8:	4a17      	ldr	r2, [pc, #92]	; (800c218 <put_lfn+0xcc>)
 800c1ba:	69bb      	ldr	r3, [r7, #24]
 800c1bc:	4413      	add	r3, r2
 800c1be:	781b      	ldrb	r3, [r3, #0]
 800c1c0:	461a      	mov	r2, r3
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	4413      	add	r3, r2
 800c1c6:	8afa      	ldrh	r2, [r7, #22]
 800c1c8:	4611      	mov	r1, r2
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	f7fe ff13 	bl	800aff6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800c1d0:	8afb      	ldrh	r3, [r7, #22]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d102      	bne.n	800c1dc <put_lfn+0x90>
 800c1d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c1da:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800c1dc:	69bb      	ldr	r3, [r7, #24]
 800c1de:	3301      	adds	r3, #1
 800c1e0:	61bb      	str	r3, [r7, #24]
 800c1e2:	69bb      	ldr	r3, [r7, #24]
 800c1e4:	2b0c      	cmp	r3, #12
 800c1e6:	d9da      	bls.n	800c19e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800c1e8:	8afb      	ldrh	r3, [r7, #22]
 800c1ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c1ee:	4293      	cmp	r3, r2
 800c1f0:	d006      	beq.n	800c200 <put_lfn+0xb4>
 800c1f2:	69fb      	ldr	r3, [r7, #28]
 800c1f4:	005b      	lsls	r3, r3, #1
 800c1f6:	68fa      	ldr	r2, [r7, #12]
 800c1f8:	4413      	add	r3, r2
 800c1fa:	881b      	ldrh	r3, [r3, #0]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d103      	bne.n	800c208 <put_lfn+0xbc>
 800c200:	79fb      	ldrb	r3, [r7, #7]
 800c202:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c206:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	79fa      	ldrb	r2, [r7, #7]
 800c20c:	701a      	strb	r2, [r3, #0]
}
 800c20e:	bf00      	nop
 800c210:	3720      	adds	r7, #32
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}
 800c216:	bf00      	nop
 800c218:	080142dc 	.word	0x080142dc

0800c21c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b08c      	sub	sp, #48	; 0x30
 800c220:	af00      	add	r7, sp, #0
 800c222:	60f8      	str	r0, [r7, #12]
 800c224:	60b9      	str	r1, [r7, #8]
 800c226:	607a      	str	r2, [r7, #4]
 800c228:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800c22a:	220b      	movs	r2, #11
 800c22c:	68b9      	ldr	r1, [r7, #8]
 800c22e:	68f8      	ldr	r0, [r7, #12]
 800c230:	f7fe ff28 	bl	800b084 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	2b05      	cmp	r3, #5
 800c238:	d92b      	bls.n	800c292 <gen_numname+0x76>
		sr = seq;
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800c23e:	e022      	b.n	800c286 <gen_numname+0x6a>
			wc = *lfn++;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	1c9a      	adds	r2, r3, #2
 800c244:	607a      	str	r2, [r7, #4]
 800c246:	881b      	ldrh	r3, [r3, #0]
 800c248:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800c24a:	2300      	movs	r3, #0
 800c24c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c24e:	e017      	b.n	800c280 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800c250:	69fb      	ldr	r3, [r7, #28]
 800c252:	005a      	lsls	r2, r3, #1
 800c254:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c256:	f003 0301 	and.w	r3, r3, #1
 800c25a:	4413      	add	r3, r2
 800c25c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800c25e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c260:	085b      	lsrs	r3, r3, #1
 800c262:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800c264:	69fb      	ldr	r3, [r7, #28]
 800c266:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d005      	beq.n	800c27a <gen_numname+0x5e>
 800c26e:	69fb      	ldr	r3, [r7, #28]
 800c270:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800c274:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800c278:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800c27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c27c:	3301      	adds	r3, #1
 800c27e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c282:	2b0f      	cmp	r3, #15
 800c284:	d9e4      	bls.n	800c250 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	881b      	ldrh	r3, [r3, #0]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d1d8      	bne.n	800c240 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800c28e:	69fb      	ldr	r3, [r7, #28]
 800c290:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800c292:	2307      	movs	r3, #7
 800c294:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	b2db      	uxtb	r3, r3
 800c29a:	f003 030f 	and.w	r3, r3, #15
 800c29e:	b2db      	uxtb	r3, r3
 800c2a0:	3330      	adds	r3, #48	; 0x30
 800c2a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800c2a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c2aa:	2b39      	cmp	r3, #57	; 0x39
 800c2ac:	d904      	bls.n	800c2b8 <gen_numname+0x9c>
 800c2ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c2b2:	3307      	adds	r3, #7
 800c2b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800c2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ba:	1e5a      	subs	r2, r3, #1
 800c2bc:	62ba      	str	r2, [r7, #40]	; 0x28
 800c2be:	3330      	adds	r3, #48	; 0x30
 800c2c0:	443b      	add	r3, r7
 800c2c2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c2c6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	091b      	lsrs	r3, r3, #4
 800c2ce:	603b      	str	r3, [r7, #0]
	} while (seq);
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d1df      	bne.n	800c296 <gen_numname+0x7a>
	ns[i] = '~';
 800c2d6:	f107 0214 	add.w	r2, r7, #20
 800c2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2dc:	4413      	add	r3, r2
 800c2de:	227e      	movs	r2, #126	; 0x7e
 800c2e0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	627b      	str	r3, [r7, #36]	; 0x24
 800c2e6:	e002      	b.n	800c2ee <gen_numname+0xd2>
 800c2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ea:	3301      	adds	r3, #1
 800c2ec:	627b      	str	r3, [r7, #36]	; 0x24
 800c2ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2f2:	429a      	cmp	r2, r3
 800c2f4:	d205      	bcs.n	800c302 <gen_numname+0xe6>
 800c2f6:	68fa      	ldr	r2, [r7, #12]
 800c2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2fa:	4413      	add	r3, r2
 800c2fc:	781b      	ldrb	r3, [r3, #0]
 800c2fe:	2b20      	cmp	r3, #32
 800c300:	d1f2      	bne.n	800c2e8 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c304:	2b07      	cmp	r3, #7
 800c306:	d807      	bhi.n	800c318 <gen_numname+0xfc>
 800c308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c30a:	1c5a      	adds	r2, r3, #1
 800c30c:	62ba      	str	r2, [r7, #40]	; 0x28
 800c30e:	3330      	adds	r3, #48	; 0x30
 800c310:	443b      	add	r3, r7
 800c312:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800c316:	e000      	b.n	800c31a <gen_numname+0xfe>
 800c318:	2120      	movs	r1, #32
 800c31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c31c:	1c5a      	adds	r2, r3, #1
 800c31e:	627a      	str	r2, [r7, #36]	; 0x24
 800c320:	68fa      	ldr	r2, [r7, #12]
 800c322:	4413      	add	r3, r2
 800c324:	460a      	mov	r2, r1
 800c326:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800c328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c32a:	2b07      	cmp	r3, #7
 800c32c:	d9e9      	bls.n	800c302 <gen_numname+0xe6>
}
 800c32e:	bf00      	nop
 800c330:	bf00      	nop
 800c332:	3730      	adds	r7, #48	; 0x30
 800c334:	46bd      	mov	sp, r7
 800c336:	bd80      	pop	{r7, pc}

0800c338 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800c338:	b480      	push	{r7}
 800c33a:	b085      	sub	sp, #20
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800c340:	2300      	movs	r3, #0
 800c342:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800c344:	230b      	movs	r3, #11
 800c346:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c348:	7bfb      	ldrb	r3, [r7, #15]
 800c34a:	b2da      	uxtb	r2, r3
 800c34c:	0852      	lsrs	r2, r2, #1
 800c34e:	01db      	lsls	r3, r3, #7
 800c350:	4313      	orrs	r3, r2
 800c352:	b2da      	uxtb	r2, r3
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	1c59      	adds	r1, r3, #1
 800c358:	6079      	str	r1, [r7, #4]
 800c35a:	781b      	ldrb	r3, [r3, #0]
 800c35c:	4413      	add	r3, r2
 800c35e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	3b01      	subs	r3, #1
 800c364:	60bb      	str	r3, [r7, #8]
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d1ed      	bne.n	800c348 <sum_sfn+0x10>
	return sum;
 800c36c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c36e:	4618      	mov	r0, r3
 800c370:	3714      	adds	r7, #20
 800c372:	46bd      	mov	sp, r7
 800c374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c378:	4770      	bx	lr

0800c37a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c37a:	b580      	push	{r7, lr}
 800c37c:	b086      	sub	sp, #24
 800c37e:	af00      	add	r7, sp, #0
 800c380:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c388:	2100      	movs	r1, #0
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f7ff fc88 	bl	800bca0 <dir_sdi>
 800c390:	4603      	mov	r3, r0
 800c392:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c394:	7dfb      	ldrb	r3, [r7, #23]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d001      	beq.n	800c39e <dir_find+0x24>
 800c39a:	7dfb      	ldrb	r3, [r7, #23]
 800c39c:	e0a9      	b.n	800c4f2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c39e:	23ff      	movs	r3, #255	; 0xff
 800c3a0:	753b      	strb	r3, [r7, #20]
 800c3a2:	7d3b      	ldrb	r3, [r7, #20]
 800c3a4:	757b      	strb	r3, [r7, #21]
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	f04f 32ff 	mov.w	r2, #4294967295
 800c3ac:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	69db      	ldr	r3, [r3, #28]
 800c3b2:	4619      	mov	r1, r3
 800c3b4:	6938      	ldr	r0, [r7, #16]
 800c3b6:	f7ff f893 	bl	800b4e0 <move_window>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c3be:	7dfb      	ldrb	r3, [r7, #23]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	f040 8090 	bne.w	800c4e6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6a1b      	ldr	r3, [r3, #32]
 800c3ca:	781b      	ldrb	r3, [r3, #0]
 800c3cc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c3ce:	7dbb      	ldrb	r3, [r7, #22]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d102      	bne.n	800c3da <dir_find+0x60>
 800c3d4:	2304      	movs	r3, #4
 800c3d6:	75fb      	strb	r3, [r7, #23]
 800c3d8:	e08a      	b.n	800c4f0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	6a1b      	ldr	r3, [r3, #32]
 800c3de:	330b      	adds	r3, #11
 800c3e0:	781b      	ldrb	r3, [r3, #0]
 800c3e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c3e6:	73fb      	strb	r3, [r7, #15]
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	7bfa      	ldrb	r2, [r7, #15]
 800c3ec:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800c3ee:	7dbb      	ldrb	r3, [r7, #22]
 800c3f0:	2be5      	cmp	r3, #229	; 0xe5
 800c3f2:	d007      	beq.n	800c404 <dir_find+0x8a>
 800c3f4:	7bfb      	ldrb	r3, [r7, #15]
 800c3f6:	f003 0308 	and.w	r3, r3, #8
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d009      	beq.n	800c412 <dir_find+0x98>
 800c3fe:	7bfb      	ldrb	r3, [r7, #15]
 800c400:	2b0f      	cmp	r3, #15
 800c402:	d006      	beq.n	800c412 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c404:	23ff      	movs	r3, #255	; 0xff
 800c406:	757b      	strb	r3, [r7, #21]
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f04f 32ff 	mov.w	r2, #4294967295
 800c40e:	631a      	str	r2, [r3, #48]	; 0x30
 800c410:	e05e      	b.n	800c4d0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800c412:	7bfb      	ldrb	r3, [r7, #15]
 800c414:	2b0f      	cmp	r3, #15
 800c416:	d136      	bne.n	800c486 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c41e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c422:	2b00      	cmp	r3, #0
 800c424:	d154      	bne.n	800c4d0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800c426:	7dbb      	ldrb	r3, [r7, #22]
 800c428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d00d      	beq.n	800c44c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	6a1b      	ldr	r3, [r3, #32]
 800c434:	7b5b      	ldrb	r3, [r3, #13]
 800c436:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800c438:	7dbb      	ldrb	r3, [r7, #22]
 800c43a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c43e:	75bb      	strb	r3, [r7, #22]
 800c440:	7dbb      	ldrb	r3, [r7, #22]
 800c442:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	695a      	ldr	r2, [r3, #20]
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c44c:	7dba      	ldrb	r2, [r7, #22]
 800c44e:	7d7b      	ldrb	r3, [r7, #21]
 800c450:	429a      	cmp	r2, r3
 800c452:	d115      	bne.n	800c480 <dir_find+0x106>
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	6a1b      	ldr	r3, [r3, #32]
 800c458:	330d      	adds	r3, #13
 800c45a:	781b      	ldrb	r3, [r3, #0]
 800c45c:	7d3a      	ldrb	r2, [r7, #20]
 800c45e:	429a      	cmp	r2, r3
 800c460:	d10e      	bne.n	800c480 <dir_find+0x106>
 800c462:	693b      	ldr	r3, [r7, #16]
 800c464:	691a      	ldr	r2, [r3, #16]
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	6a1b      	ldr	r3, [r3, #32]
 800c46a:	4619      	mov	r1, r3
 800c46c:	4610      	mov	r0, r2
 800c46e:	f7ff fdfd 	bl	800c06c <cmp_lfn>
 800c472:	4603      	mov	r3, r0
 800c474:	2b00      	cmp	r3, #0
 800c476:	d003      	beq.n	800c480 <dir_find+0x106>
 800c478:	7d7b      	ldrb	r3, [r7, #21]
 800c47a:	3b01      	subs	r3, #1
 800c47c:	b2db      	uxtb	r3, r3
 800c47e:	e000      	b.n	800c482 <dir_find+0x108>
 800c480:	23ff      	movs	r3, #255	; 0xff
 800c482:	757b      	strb	r3, [r7, #21]
 800c484:	e024      	b.n	800c4d0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c486:	7d7b      	ldrb	r3, [r7, #21]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d109      	bne.n	800c4a0 <dir_find+0x126>
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	6a1b      	ldr	r3, [r3, #32]
 800c490:	4618      	mov	r0, r3
 800c492:	f7ff ff51 	bl	800c338 <sum_sfn>
 800c496:	4603      	mov	r3, r0
 800c498:	461a      	mov	r2, r3
 800c49a:	7d3b      	ldrb	r3, [r7, #20]
 800c49c:	4293      	cmp	r3, r2
 800c49e:	d024      	beq.n	800c4ea <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c4a6:	f003 0301 	and.w	r3, r3, #1
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d10a      	bne.n	800c4c4 <dir_find+0x14a>
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	6a18      	ldr	r0, [r3, #32]
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	3324      	adds	r3, #36	; 0x24
 800c4b6:	220b      	movs	r2, #11
 800c4b8:	4619      	mov	r1, r3
 800c4ba:	f7fe fe1f 	bl	800b0fc <mem_cmp>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d014      	beq.n	800c4ee <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c4c4:	23ff      	movs	r3, #255	; 0xff
 800c4c6:	757b      	strb	r3, [r7, #21]
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f04f 32ff 	mov.w	r2, #4294967295
 800c4ce:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c4d0:	2100      	movs	r1, #0
 800c4d2:	6878      	ldr	r0, [r7, #4]
 800c4d4:	f7ff fc6d 	bl	800bdb2 <dir_next>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c4dc:	7dfb      	ldrb	r3, [r7, #23]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	f43f af65 	beq.w	800c3ae <dir_find+0x34>
 800c4e4:	e004      	b.n	800c4f0 <dir_find+0x176>
		if (res != FR_OK) break;
 800c4e6:	bf00      	nop
 800c4e8:	e002      	b.n	800c4f0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c4ea:	bf00      	nop
 800c4ec:	e000      	b.n	800c4f0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c4ee:	bf00      	nop

	return res;
 800c4f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	3718      	adds	r7, #24
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}
	...

0800c4fc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b08c      	sub	sp, #48	; 0x30
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c510:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800c514:	2b00      	cmp	r3, #0
 800c516:	d001      	beq.n	800c51c <dir_register+0x20>
 800c518:	2306      	movs	r3, #6
 800c51a:	e0e0      	b.n	800c6de <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800c51c:	2300      	movs	r3, #0
 800c51e:	627b      	str	r3, [r7, #36]	; 0x24
 800c520:	e002      	b.n	800c528 <dir_register+0x2c>
 800c522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c524:	3301      	adds	r3, #1
 800c526:	627b      	str	r3, [r7, #36]	; 0x24
 800c528:	69fb      	ldr	r3, [r7, #28]
 800c52a:	691a      	ldr	r2, [r3, #16]
 800c52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c52e:	005b      	lsls	r3, r3, #1
 800c530:	4413      	add	r3, r2
 800c532:	881b      	ldrh	r3, [r3, #0]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d1f4      	bne.n	800c522 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800c53e:	f107 030c 	add.w	r3, r7, #12
 800c542:	220c      	movs	r2, #12
 800c544:	4618      	mov	r0, r3
 800c546:	f7fe fd9d 	bl	800b084 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800c54a:	7dfb      	ldrb	r3, [r7, #23]
 800c54c:	f003 0301 	and.w	r3, r3, #1
 800c550:	2b00      	cmp	r3, #0
 800c552:	d032      	beq.n	800c5ba <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2240      	movs	r2, #64	; 0x40
 800c558:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800c55c:	2301      	movs	r3, #1
 800c55e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c560:	e016      	b.n	800c590 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800c568:	69fb      	ldr	r3, [r7, #28]
 800c56a:	691a      	ldr	r2, [r3, #16]
 800c56c:	f107 010c 	add.w	r1, r7, #12
 800c570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c572:	f7ff fe53 	bl	800c21c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	f7ff feff 	bl	800c37a <dir_find>
 800c57c:	4603      	mov	r3, r0
 800c57e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800c582:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c586:	2b00      	cmp	r3, #0
 800c588:	d106      	bne.n	800c598 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800c58a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c58c:	3301      	adds	r3, #1
 800c58e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c592:	2b63      	cmp	r3, #99	; 0x63
 800c594:	d9e5      	bls.n	800c562 <dir_register+0x66>
 800c596:	e000      	b.n	800c59a <dir_register+0x9e>
			if (res != FR_OK) break;
 800c598:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800c59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c59c:	2b64      	cmp	r3, #100	; 0x64
 800c59e:	d101      	bne.n	800c5a4 <dir_register+0xa8>
 800c5a0:	2307      	movs	r3, #7
 800c5a2:	e09c      	b.n	800c6de <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800c5a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c5a8:	2b04      	cmp	r3, #4
 800c5aa:	d002      	beq.n	800c5b2 <dir_register+0xb6>
 800c5ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c5b0:	e095      	b.n	800c6de <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800c5b2:	7dfa      	ldrb	r2, [r7, #23]
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800c5ba:	7dfb      	ldrb	r3, [r7, #23]
 800c5bc:	f003 0302 	and.w	r3, r3, #2
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d007      	beq.n	800c5d4 <dir_register+0xd8>
 800c5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5c6:	330c      	adds	r3, #12
 800c5c8:	4a47      	ldr	r2, [pc, #284]	; (800c6e8 <dir_register+0x1ec>)
 800c5ca:	fba2 2303 	umull	r2, r3, r2, r3
 800c5ce:	089b      	lsrs	r3, r3, #2
 800c5d0:	3301      	adds	r3, #1
 800c5d2:	e000      	b.n	800c5d6 <dir_register+0xda>
 800c5d4:	2301      	movs	r3, #1
 800c5d6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800c5d8:	6a39      	ldr	r1, [r7, #32]
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	f7ff fcbf 	bl	800bf5e <dir_alloc>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800c5e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d148      	bne.n	800c680 <dir_register+0x184>
 800c5ee:	6a3b      	ldr	r3, [r7, #32]
 800c5f0:	3b01      	subs	r3, #1
 800c5f2:	623b      	str	r3, [r7, #32]
 800c5f4:	6a3b      	ldr	r3, [r7, #32]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d042      	beq.n	800c680 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	695a      	ldr	r2, [r3, #20]
 800c5fe:	6a3b      	ldr	r3, [r7, #32]
 800c600:	015b      	lsls	r3, r3, #5
 800c602:	1ad3      	subs	r3, r2, r3
 800c604:	4619      	mov	r1, r3
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f7ff fb4a 	bl	800bca0 <dir_sdi>
 800c60c:	4603      	mov	r3, r0
 800c60e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800c612:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c616:	2b00      	cmp	r3, #0
 800c618:	d132      	bne.n	800c680 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	3324      	adds	r3, #36	; 0x24
 800c61e:	4618      	mov	r0, r3
 800c620:	f7ff fe8a 	bl	800c338 <sum_sfn>
 800c624:	4603      	mov	r3, r0
 800c626:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	69db      	ldr	r3, [r3, #28]
 800c62c:	4619      	mov	r1, r3
 800c62e:	69f8      	ldr	r0, [r7, #28]
 800c630:	f7fe ff56 	bl	800b4e0 <move_window>
 800c634:	4603      	mov	r3, r0
 800c636:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800c63a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d11d      	bne.n	800c67e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800c642:	69fb      	ldr	r3, [r7, #28]
 800c644:	6918      	ldr	r0, [r3, #16]
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	6a19      	ldr	r1, [r3, #32]
 800c64a:	6a3b      	ldr	r3, [r7, #32]
 800c64c:	b2da      	uxtb	r2, r3
 800c64e:	7efb      	ldrb	r3, [r7, #27]
 800c650:	f7ff fd7c 	bl	800c14c <put_lfn>
				fs->wflag = 1;
 800c654:	69fb      	ldr	r3, [r7, #28]
 800c656:	2201      	movs	r2, #1
 800c658:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800c65a:	2100      	movs	r1, #0
 800c65c:	6878      	ldr	r0, [r7, #4]
 800c65e:	f7ff fba8 	bl	800bdb2 <dir_next>
 800c662:	4603      	mov	r3, r0
 800c664:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800c668:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d107      	bne.n	800c680 <dir_register+0x184>
 800c670:	6a3b      	ldr	r3, [r7, #32]
 800c672:	3b01      	subs	r3, #1
 800c674:	623b      	str	r3, [r7, #32]
 800c676:	6a3b      	ldr	r3, [r7, #32]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d1d5      	bne.n	800c628 <dir_register+0x12c>
 800c67c:	e000      	b.n	800c680 <dir_register+0x184>
				if (res != FR_OK) break;
 800c67e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c680:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c684:	2b00      	cmp	r3, #0
 800c686:	d128      	bne.n	800c6da <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	69db      	ldr	r3, [r3, #28]
 800c68c:	4619      	mov	r1, r3
 800c68e:	69f8      	ldr	r0, [r7, #28]
 800c690:	f7fe ff26 	bl	800b4e0 <move_window>
 800c694:	4603      	mov	r3, r0
 800c696:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800c69a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d11b      	bne.n	800c6da <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	6a1b      	ldr	r3, [r3, #32]
 800c6a6:	2220      	movs	r2, #32
 800c6a8:	2100      	movs	r1, #0
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f7fe fd0b 	bl	800b0c6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	6a18      	ldr	r0, [r3, #32]
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	3324      	adds	r3, #36	; 0x24
 800c6b8:	220b      	movs	r2, #11
 800c6ba:	4619      	mov	r1, r3
 800c6bc:	f7fe fce2 	bl	800b084 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	6a1b      	ldr	r3, [r3, #32]
 800c6ca:	330c      	adds	r3, #12
 800c6cc:	f002 0218 	and.w	r2, r2, #24
 800c6d0:	b2d2      	uxtb	r2, r2
 800c6d2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800c6d4:	69fb      	ldr	r3, [r7, #28]
 800c6d6:	2201      	movs	r2, #1
 800c6d8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c6da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	3730      	adds	r7, #48	; 0x30
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}
 800c6e6:	bf00      	nop
 800c6e8:	4ec4ec4f 	.word	0x4ec4ec4f

0800c6ec <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b08a      	sub	sp, #40	; 0x28
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
 800c6f4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	613b      	str	r3, [r7, #16]
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	691b      	ldr	r3, [r3, #16]
 800c702:	60fb      	str	r3, [r7, #12]
 800c704:	2300      	movs	r3, #0
 800c706:	617b      	str	r3, [r7, #20]
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800c70c:	69bb      	ldr	r3, [r7, #24]
 800c70e:	1c5a      	adds	r2, r3, #1
 800c710:	61ba      	str	r2, [r7, #24]
 800c712:	693a      	ldr	r2, [r7, #16]
 800c714:	4413      	add	r3, r2
 800c716:	781b      	ldrb	r3, [r3, #0]
 800c718:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800c71a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c71c:	2b1f      	cmp	r3, #31
 800c71e:	d940      	bls.n	800c7a2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800c720:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c722:	2b2f      	cmp	r3, #47	; 0x2f
 800c724:	d006      	beq.n	800c734 <create_name+0x48>
 800c726:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c728:	2b5c      	cmp	r3, #92	; 0x5c
 800c72a:	d110      	bne.n	800c74e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c72c:	e002      	b.n	800c734 <create_name+0x48>
 800c72e:	69bb      	ldr	r3, [r7, #24]
 800c730:	3301      	adds	r3, #1
 800c732:	61bb      	str	r3, [r7, #24]
 800c734:	693a      	ldr	r2, [r7, #16]
 800c736:	69bb      	ldr	r3, [r7, #24]
 800c738:	4413      	add	r3, r2
 800c73a:	781b      	ldrb	r3, [r3, #0]
 800c73c:	2b2f      	cmp	r3, #47	; 0x2f
 800c73e:	d0f6      	beq.n	800c72e <create_name+0x42>
 800c740:	693a      	ldr	r2, [r7, #16]
 800c742:	69bb      	ldr	r3, [r7, #24]
 800c744:	4413      	add	r3, r2
 800c746:	781b      	ldrb	r3, [r3, #0]
 800c748:	2b5c      	cmp	r3, #92	; 0x5c
 800c74a:	d0f0      	beq.n	800c72e <create_name+0x42>
			break;
 800c74c:	e02a      	b.n	800c7a4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c74e:	697b      	ldr	r3, [r7, #20]
 800c750:	2bfe      	cmp	r3, #254	; 0xfe
 800c752:	d901      	bls.n	800c758 <create_name+0x6c>
 800c754:	2306      	movs	r3, #6
 800c756:	e1ca      	b.n	800caee <create_name+0x402>
#if !_LFN_UNICODE
		w &= 0xFF;
 800c758:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c75a:	b2db      	uxtb	r3, r3
 800c75c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c75e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c760:	2101      	movs	r1, #1
 800c762:	4618      	mov	r0, r3
 800c764:	f001 fbb0 	bl	800dec8 <ff_convert>
 800c768:	4603      	mov	r3, r0
 800c76a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c76c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d101      	bne.n	800c776 <create_name+0x8a>
 800c772:	2306      	movs	r3, #6
 800c774:	e1bb      	b.n	800caee <create_name+0x402>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c776:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c778:	2b7f      	cmp	r3, #127	; 0x7f
 800c77a:	d809      	bhi.n	800c790 <create_name+0xa4>
 800c77c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c77e:	4619      	mov	r1, r3
 800c780:	489f      	ldr	r0, [pc, #636]	; (800ca00 <create_name+0x314>)
 800c782:	f7fe fce2 	bl	800b14a <chk_chr>
 800c786:	4603      	mov	r3, r0
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d001      	beq.n	800c790 <create_name+0xa4>
 800c78c:	2306      	movs	r3, #6
 800c78e:	e1ae      	b.n	800caee <create_name+0x402>
		lfn[di++] = w;					/* Store the Unicode character */
 800c790:	697b      	ldr	r3, [r7, #20]
 800c792:	1c5a      	adds	r2, r3, #1
 800c794:	617a      	str	r2, [r7, #20]
 800c796:	005b      	lsls	r3, r3, #1
 800c798:	68fa      	ldr	r2, [r7, #12]
 800c79a:	4413      	add	r3, r2
 800c79c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c79e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800c7a0:	e7b4      	b.n	800c70c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800c7a2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c7a4:	693a      	ldr	r2, [r7, #16]
 800c7a6:	69bb      	ldr	r3, [r7, #24]
 800c7a8:	441a      	add	r2, r3
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c7ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c7b0:	2b1f      	cmp	r3, #31
 800c7b2:	d801      	bhi.n	800c7b8 <create_name+0xcc>
 800c7b4:	2304      	movs	r3, #4
 800c7b6:	e000      	b.n	800c7ba <create_name+0xce>
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 800c7be:	697b      	ldr	r3, [r7, #20]
 800c7c0:	2b01      	cmp	r3, #1
 800c7c2:	d109      	bne.n	800c7d8 <create_name+0xec>
 800c7c4:	697b      	ldr	r3, [r7, #20]
 800c7c6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c7ca:	3b01      	subs	r3, #1
 800c7cc:	005b      	lsls	r3, r3, #1
 800c7ce:	68fa      	ldr	r2, [r7, #12]
 800c7d0:	4413      	add	r3, r2
 800c7d2:	881b      	ldrh	r3, [r3, #0]
 800c7d4:	2b2e      	cmp	r3, #46	; 0x2e
 800c7d6:	d016      	beq.n	800c806 <create_name+0x11a>
 800c7d8:	697b      	ldr	r3, [r7, #20]
 800c7da:	2b02      	cmp	r3, #2
 800c7dc:	d14e      	bne.n	800c87c <create_name+0x190>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 800c7de:	697b      	ldr	r3, [r7, #20]
 800c7e0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c7e4:	3b01      	subs	r3, #1
 800c7e6:	005b      	lsls	r3, r3, #1
 800c7e8:	68fa      	ldr	r2, [r7, #12]
 800c7ea:	4413      	add	r3, r2
 800c7ec:	881b      	ldrh	r3, [r3, #0]
 800c7ee:	2b2e      	cmp	r3, #46	; 0x2e
 800c7f0:	d144      	bne.n	800c87c <create_name+0x190>
 800c7f2:	697b      	ldr	r3, [r7, #20]
 800c7f4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c7f8:	3b02      	subs	r3, #2
 800c7fa:	005b      	lsls	r3, r3, #1
 800c7fc:	68fa      	ldr	r2, [r7, #12]
 800c7fe:	4413      	add	r3, r2
 800c800:	881b      	ldrh	r3, [r3, #0]
 800c802:	2b2e      	cmp	r3, #46	; 0x2e
 800c804:	d13a      	bne.n	800c87c <create_name+0x190>
		lfn[di] = 0;
 800c806:	697b      	ldr	r3, [r7, #20]
 800c808:	005b      	lsls	r3, r3, #1
 800c80a:	68fa      	ldr	r2, [r7, #12]
 800c80c:	4413      	add	r3, r2
 800c80e:	2200      	movs	r2, #0
 800c810:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 800c812:	2300      	movs	r3, #0
 800c814:	623b      	str	r3, [r7, #32]
 800c816:	e00f      	b.n	800c838 <create_name+0x14c>
			dp->fn[i] = (i < di) ? '.' : ' ';
 800c818:	6a3a      	ldr	r2, [r7, #32]
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	429a      	cmp	r2, r3
 800c81e:	d201      	bcs.n	800c824 <create_name+0x138>
 800c820:	212e      	movs	r1, #46	; 0x2e
 800c822:	e000      	b.n	800c826 <create_name+0x13a>
 800c824:	2120      	movs	r1, #32
 800c826:	687a      	ldr	r2, [r7, #4]
 800c828:	6a3b      	ldr	r3, [r7, #32]
 800c82a:	4413      	add	r3, r2
 800c82c:	3324      	adds	r3, #36	; 0x24
 800c82e:	460a      	mov	r2, r1
 800c830:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 800c832:	6a3b      	ldr	r3, [r7, #32]
 800c834:	3301      	adds	r3, #1
 800c836:	623b      	str	r3, [r7, #32]
 800c838:	6a3b      	ldr	r3, [r7, #32]
 800c83a:	2b0a      	cmp	r3, #10
 800c83c:	d9ec      	bls.n	800c818 <create_name+0x12c>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 800c83e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c842:	f043 0320 	orr.w	r3, r3, #32
 800c846:	b2d9      	uxtb	r1, r3
 800c848:	687a      	ldr	r2, [r7, #4]
 800c84a:	6a3b      	ldr	r3, [r7, #32]
 800c84c:	4413      	add	r3, r2
 800c84e:	3324      	adds	r3, #36	; 0x24
 800c850:	460a      	mov	r2, r1
 800c852:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800c854:	2300      	movs	r3, #0
 800c856:	e14a      	b.n	800caee <create_name+0x402>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c85e:	3b01      	subs	r3, #1
 800c860:	005b      	lsls	r3, r3, #1
 800c862:	68fa      	ldr	r2, [r7, #12]
 800c864:	4413      	add	r3, r2
 800c866:	881b      	ldrh	r3, [r3, #0]
 800c868:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800c86a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c86c:	2b20      	cmp	r3, #32
 800c86e:	d002      	beq.n	800c876 <create_name+0x18a>
 800c870:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c872:	2b2e      	cmp	r3, #46	; 0x2e
 800c874:	d106      	bne.n	800c884 <create_name+0x198>
		di--;
 800c876:	697b      	ldr	r3, [r7, #20]
 800c878:	3b01      	subs	r3, #1
 800c87a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c87c:	697b      	ldr	r3, [r7, #20]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d1ea      	bne.n	800c858 <create_name+0x16c>
 800c882:	e000      	b.n	800c886 <create_name+0x19a>
		if (w != ' ' && w != '.') break;
 800c884:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800c886:	697b      	ldr	r3, [r7, #20]
 800c888:	005b      	lsls	r3, r3, #1
 800c88a:	68fa      	ldr	r2, [r7, #12]
 800c88c:	4413      	add	r3, r2
 800c88e:	2200      	movs	r2, #0
 800c890:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800c892:	697b      	ldr	r3, [r7, #20]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d101      	bne.n	800c89c <create_name+0x1b0>
 800c898:	2306      	movs	r3, #6
 800c89a:	e128      	b.n	800caee <create_name+0x402>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	3324      	adds	r3, #36	; 0x24
 800c8a0:	220b      	movs	r2, #11
 800c8a2:	2120      	movs	r1, #32
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	f7fe fc0e 	bl	800b0c6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	61bb      	str	r3, [r7, #24]
 800c8ae:	e002      	b.n	800c8b6 <create_name+0x1ca>
 800c8b0:	69bb      	ldr	r3, [r7, #24]
 800c8b2:	3301      	adds	r3, #1
 800c8b4:	61bb      	str	r3, [r7, #24]
 800c8b6:	69bb      	ldr	r3, [r7, #24]
 800c8b8:	005b      	lsls	r3, r3, #1
 800c8ba:	68fa      	ldr	r2, [r7, #12]
 800c8bc:	4413      	add	r3, r2
 800c8be:	881b      	ldrh	r3, [r3, #0]
 800c8c0:	2b20      	cmp	r3, #32
 800c8c2:	d0f5      	beq.n	800c8b0 <create_name+0x1c4>
 800c8c4:	69bb      	ldr	r3, [r7, #24]
 800c8c6:	005b      	lsls	r3, r3, #1
 800c8c8:	68fa      	ldr	r2, [r7, #12]
 800c8ca:	4413      	add	r3, r2
 800c8cc:	881b      	ldrh	r3, [r3, #0]
 800c8ce:	2b2e      	cmp	r3, #46	; 0x2e
 800c8d0:	d0ee      	beq.n	800c8b0 <create_name+0x1c4>
	if (si) cf |= NS_LOSS | NS_LFN;
 800c8d2:	69bb      	ldr	r3, [r7, #24]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d009      	beq.n	800c8ec <create_name+0x200>
 800c8d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8dc:	f043 0303 	orr.w	r3, r3, #3
 800c8e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800c8e4:	e002      	b.n	800c8ec <create_name+0x200>
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	3b01      	subs	r3, #1
 800c8ea:	617b      	str	r3, [r7, #20]
 800c8ec:	697b      	ldr	r3, [r7, #20]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d009      	beq.n	800c906 <create_name+0x21a>
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c8f8:	3b01      	subs	r3, #1
 800c8fa:	005b      	lsls	r3, r3, #1
 800c8fc:	68fa      	ldr	r2, [r7, #12]
 800c8fe:	4413      	add	r3, r2
 800c900:	881b      	ldrh	r3, [r3, #0]
 800c902:	2b2e      	cmp	r3, #46	; 0x2e
 800c904:	d1ef      	bne.n	800c8e6 <create_name+0x1fa>

	i = b = 0; ni = 8;
 800c906:	2300      	movs	r3, #0
 800c908:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c90c:	2300      	movs	r3, #0
 800c90e:	623b      	str	r3, [r7, #32]
 800c910:	2308      	movs	r3, #8
 800c912:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800c914:	69bb      	ldr	r3, [r7, #24]
 800c916:	1c5a      	adds	r2, r3, #1
 800c918:	61ba      	str	r2, [r7, #24]
 800c91a:	005b      	lsls	r3, r3, #1
 800c91c:	68fa      	ldr	r2, [r7, #12]
 800c91e:	4413      	add	r3, r2
 800c920:	881b      	ldrh	r3, [r3, #0]
 800c922:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800c924:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c926:	2b00      	cmp	r3, #0
 800c928:	f000 8097 	beq.w	800ca5a <create_name+0x36e>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c92c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c92e:	2b20      	cmp	r3, #32
 800c930:	d006      	beq.n	800c940 <create_name+0x254>
 800c932:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c934:	2b2e      	cmp	r3, #46	; 0x2e
 800c936:	d10a      	bne.n	800c94e <create_name+0x262>
 800c938:	69ba      	ldr	r2, [r7, #24]
 800c93a:	697b      	ldr	r3, [r7, #20]
 800c93c:	429a      	cmp	r2, r3
 800c93e:	d006      	beq.n	800c94e <create_name+0x262>
			cf |= NS_LOSS | NS_LFN; continue;
 800c940:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c944:	f043 0303 	orr.w	r3, r3, #3
 800c948:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c94c:	e084      	b.n	800ca58 <create_name+0x36c>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c94e:	6a3a      	ldr	r2, [r7, #32]
 800c950:	69fb      	ldr	r3, [r7, #28]
 800c952:	429a      	cmp	r2, r3
 800c954:	d203      	bcs.n	800c95e <create_name+0x272>
 800c956:	69ba      	ldr	r2, [r7, #24]
 800c958:	697b      	ldr	r3, [r7, #20]
 800c95a:	429a      	cmp	r2, r3
 800c95c:	d123      	bne.n	800c9a6 <create_name+0x2ba>
			if (ni == 11) {				/* Long extension */
 800c95e:	69fb      	ldr	r3, [r7, #28]
 800c960:	2b0b      	cmp	r3, #11
 800c962:	d106      	bne.n	800c972 <create_name+0x286>
				cf |= NS_LOSS | NS_LFN; break;
 800c964:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c968:	f043 0303 	orr.w	r3, r3, #3
 800c96c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c970:	e076      	b.n	800ca60 <create_name+0x374>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800c972:	69ba      	ldr	r2, [r7, #24]
 800c974:	697b      	ldr	r3, [r7, #20]
 800c976:	429a      	cmp	r2, r3
 800c978:	d005      	beq.n	800c986 <create_name+0x29a>
 800c97a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c97e:	f043 0303 	orr.w	r3, r3, #3
 800c982:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800c986:	69ba      	ldr	r2, [r7, #24]
 800c988:	697b      	ldr	r3, [r7, #20]
 800c98a:	429a      	cmp	r2, r3
 800c98c:	d867      	bhi.n	800ca5e <create_name+0x372>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800c98e:	697b      	ldr	r3, [r7, #20]
 800c990:	61bb      	str	r3, [r7, #24]
 800c992:	2308      	movs	r3, #8
 800c994:	623b      	str	r3, [r7, #32]
 800c996:	230b      	movs	r3, #11
 800c998:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800c99a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c99e:	009b      	lsls	r3, r3, #2
 800c9a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c9a4:	e058      	b.n	800ca58 <create_name+0x36c>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800c9a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c9a8:	2b7f      	cmp	r3, #127	; 0x7f
 800c9aa:	d914      	bls.n	800c9d6 <create_name+0x2ea>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800c9ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c9ae:	2100      	movs	r1, #0
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f001 fa89 	bl	800dec8 <ff_convert>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c9ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d004      	beq.n	800c9ca <create_name+0x2de>
 800c9c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c9c2:	3b80      	subs	r3, #128	; 0x80
 800c9c4:	4a0f      	ldr	r2, [pc, #60]	; (800ca04 <create_name+0x318>)
 800c9c6:	5cd3      	ldrb	r3, [r2, r3]
 800c9c8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800c9ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9ce:	f043 0302 	orr.w	r3, r3, #2
 800c9d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c9d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d007      	beq.n	800c9ec <create_name+0x300>
 800c9dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c9de:	4619      	mov	r1, r3
 800c9e0:	4809      	ldr	r0, [pc, #36]	; (800ca08 <create_name+0x31c>)
 800c9e2:	f7fe fbb2 	bl	800b14a <chk_chr>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d00f      	beq.n	800ca0c <create_name+0x320>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c9ec:	235f      	movs	r3, #95	; 0x5f
 800c9ee:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c9f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9f4:	f043 0303 	orr.w	r3, r3, #3
 800c9f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c9fc:	e022      	b.n	800ca44 <create_name+0x358>
 800c9fe:	bf00      	nop
 800ca00:	08013c00 	.word	0x08013c00
 800ca04:	0801425c 	.word	0x0801425c
 800ca08:	08013c0c 	.word	0x08013c0c
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800ca0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca0e:	2b40      	cmp	r3, #64	; 0x40
 800ca10:	d909      	bls.n	800ca26 <create_name+0x33a>
 800ca12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca14:	2b5a      	cmp	r3, #90	; 0x5a
 800ca16:	d806      	bhi.n	800ca26 <create_name+0x33a>
					b |= 2;
 800ca18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ca1c:	f043 0302 	orr.w	r3, r3, #2
 800ca20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ca24:	e00e      	b.n	800ca44 <create_name+0x358>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800ca26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca28:	2b60      	cmp	r3, #96	; 0x60
 800ca2a:	d90b      	bls.n	800ca44 <create_name+0x358>
 800ca2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca2e:	2b7a      	cmp	r3, #122	; 0x7a
 800ca30:	d808      	bhi.n	800ca44 <create_name+0x358>
						b |= 1; w -= 0x20;
 800ca32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ca36:	f043 0301 	orr.w	r3, r3, #1
 800ca3a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ca3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca40:	3b20      	subs	r3, #32
 800ca42:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800ca44:	6a3b      	ldr	r3, [r7, #32]
 800ca46:	1c5a      	adds	r2, r3, #1
 800ca48:	623a      	str	r2, [r7, #32]
 800ca4a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ca4c:	b2d1      	uxtb	r1, r2
 800ca4e:	687a      	ldr	r2, [r7, #4]
 800ca50:	4413      	add	r3, r2
 800ca52:	460a      	mov	r2, r1
 800ca54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800ca58:	e75c      	b.n	800c914 <create_name+0x228>
		if (!w) break;					/* Break on end of the LFN */
 800ca5a:	bf00      	nop
 800ca5c:	e000      	b.n	800ca60 <create_name+0x374>
			if (si > di) break;			/* No extension */
 800ca5e:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ca66:	2be5      	cmp	r3, #229	; 0xe5
 800ca68:	d103      	bne.n	800ca72 <create_name+0x386>
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	2205      	movs	r2, #5
 800ca6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800ca72:	69fb      	ldr	r3, [r7, #28]
 800ca74:	2b08      	cmp	r3, #8
 800ca76:	d104      	bne.n	800ca82 <create_name+0x396>
 800ca78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ca7c:	009b      	lsls	r3, r3, #2
 800ca7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800ca82:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ca86:	f003 030c 	and.w	r3, r3, #12
 800ca8a:	2b0c      	cmp	r3, #12
 800ca8c:	d005      	beq.n	800ca9a <create_name+0x3ae>
 800ca8e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ca92:	f003 0303 	and.w	r3, r3, #3
 800ca96:	2b03      	cmp	r3, #3
 800ca98:	d105      	bne.n	800caa6 <create_name+0x3ba>
 800ca9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca9e:	f043 0302 	orr.w	r3, r3, #2
 800caa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800caa6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800caaa:	f003 0302 	and.w	r3, r3, #2
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d117      	bne.n	800cae2 <create_name+0x3f6>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800cab2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cab6:	f003 0303 	and.w	r3, r3, #3
 800caba:	2b01      	cmp	r3, #1
 800cabc:	d105      	bne.n	800caca <create_name+0x3de>
 800cabe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cac2:	f043 0310 	orr.w	r3, r3, #16
 800cac6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800caca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cace:	f003 030c 	and.w	r3, r3, #12
 800cad2:	2b04      	cmp	r3, #4
 800cad4:	d105      	bne.n	800cae2 <create_name+0x3f6>
 800cad6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cada:	f043 0308 	orr.w	r3, r3, #8
 800cade:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cae8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800caec:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800caee:	4618      	mov	r0, r3
 800caf0:	3728      	adds	r7, #40	; 0x28
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}
 800caf6:	bf00      	nop

0800caf8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b086      	sub	sp, #24
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
 800cb00:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800cb06:	693b      	ldr	r3, [r7, #16]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	781b      	ldrb	r3, [r3, #0]
 800cb10:	2b2f      	cmp	r3, #47	; 0x2f
 800cb12:	d00b      	beq.n	800cb2c <follow_path+0x34>
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	781b      	ldrb	r3, [r3, #0]
 800cb18:	2b5c      	cmp	r3, #92	; 0x5c
 800cb1a:	d007      	beq.n	800cb2c <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	69da      	ldr	r2, [r3, #28]
 800cb20:	693b      	ldr	r3, [r7, #16]
 800cb22:	609a      	str	r2, [r3, #8]
 800cb24:	e00d      	b.n	800cb42 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	3301      	adds	r3, #1
 800cb2a:	603b      	str	r3, [r7, #0]
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	781b      	ldrb	r3, [r3, #0]
 800cb30:	2b2f      	cmp	r3, #47	; 0x2f
 800cb32:	d0f8      	beq.n	800cb26 <follow_path+0x2e>
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	781b      	ldrb	r3, [r3, #0]
 800cb38:	2b5c      	cmp	r3, #92	; 0x5c
 800cb3a:	d0f4      	beq.n	800cb26 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 800cb3c:	693b      	ldr	r3, [r7, #16]
 800cb3e:	2200      	movs	r2, #0
 800cb40:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	781b      	ldrb	r3, [r3, #0]
 800cb46:	2b1f      	cmp	r3, #31
 800cb48:	d80a      	bhi.n	800cb60 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	2280      	movs	r2, #128	; 0x80
 800cb4e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800cb52:	2100      	movs	r1, #0
 800cb54:	6878      	ldr	r0, [r7, #4]
 800cb56:	f7ff f8a3 	bl	800bca0 <dir_sdi>
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	75fb      	strb	r3, [r7, #23]
 800cb5e:	e05b      	b.n	800cc18 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cb60:	463b      	mov	r3, r7
 800cb62:	4619      	mov	r1, r3
 800cb64:	6878      	ldr	r0, [r7, #4]
 800cb66:	f7ff fdc1 	bl	800c6ec <create_name>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cb6e:	7dfb      	ldrb	r3, [r7, #23]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d14c      	bne.n	800cc0e <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f7ff fc00 	bl	800c37a <dir_find>
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cb84:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800cb86:	7dfb      	ldrb	r3, [r7, #23]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d01b      	beq.n	800cbc4 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800cb8c:	7dfb      	ldrb	r3, [r7, #23]
 800cb8e:	2b04      	cmp	r3, #4
 800cb90:	d13f      	bne.n	800cc12 <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 800cb92:	7afb      	ldrb	r3, [r7, #11]
 800cb94:	f003 0320 	and.w	r3, r3, #32
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d00b      	beq.n	800cbb4 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800cb9c:	7afb      	ldrb	r3, [r7, #11]
 800cb9e:	f003 0304 	and.w	r3, r3, #4
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d031      	beq.n	800cc0a <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2280      	movs	r2, #128	; 0x80
 800cbaa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 800cbae:	2300      	movs	r3, #0
 800cbb0:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 800cbb2:	e02e      	b.n	800cc12 <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800cbb4:	7afb      	ldrb	r3, [r7, #11]
 800cbb6:	f003 0304 	and.w	r3, r3, #4
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d129      	bne.n	800cc12 <follow_path+0x11a>
 800cbbe:	2305      	movs	r3, #5
 800cbc0:	75fb      	strb	r3, [r7, #23]
				break;
 800cbc2:	e026      	b.n	800cc12 <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cbc4:	7afb      	ldrb	r3, [r7, #11]
 800cbc6:	f003 0304 	and.w	r3, r3, #4
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d123      	bne.n	800cc16 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800cbce:	693b      	ldr	r3, [r7, #16]
 800cbd0:	799b      	ldrb	r3, [r3, #6]
 800cbd2:	f003 0310 	and.w	r3, r3, #16
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d102      	bne.n	800cbe0 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 800cbda:	2305      	movs	r3, #5
 800cbdc:	75fb      	strb	r3, [r7, #23]
 800cbde:	e01b      	b.n	800cc18 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	695b      	ldr	r3, [r3, #20]
 800cbea:	68fa      	ldr	r2, [r7, #12]
 800cbec:	8992      	ldrh	r2, [r2, #12]
 800cbee:	fbb3 f0f2 	udiv	r0, r3, r2
 800cbf2:	fb00 f202 	mul.w	r2, r0, r2
 800cbf6:	1a9b      	subs	r3, r3, r2
 800cbf8:	440b      	add	r3, r1
 800cbfa:	4619      	mov	r1, r3
 800cbfc:	68f8      	ldr	r0, [r7, #12]
 800cbfe:	f7ff f9f5 	bl	800bfec <ld_clust>
 800cc02:	4602      	mov	r2, r0
 800cc04:	693b      	ldr	r3, [r7, #16]
 800cc06:	609a      	str	r2, [r3, #8]
 800cc08:	e7aa      	b.n	800cb60 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800cc0a:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cc0c:	e7a8      	b.n	800cb60 <follow_path+0x68>
			if (res != FR_OK) break;
 800cc0e:	bf00      	nop
 800cc10:	e002      	b.n	800cc18 <follow_path+0x120>
				break;
 800cc12:	bf00      	nop
 800cc14:	e000      	b.n	800cc18 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cc16:	bf00      	nop
			}
		}
	}

	return res;
 800cc18:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	3718      	adds	r7, #24
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bd80      	pop	{r7, pc}

0800cc22 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800cc22:	b480      	push	{r7}
 800cc24:	b087      	sub	sp, #28
 800cc26:	af00      	add	r7, sp, #0
 800cc28:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800cc2a:	f04f 33ff 	mov.w	r3, #4294967295
 800cc2e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d031      	beq.n	800cc9c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	617b      	str	r3, [r7, #20]
 800cc3e:	e002      	b.n	800cc46 <get_ldnumber+0x24>
 800cc40:	697b      	ldr	r3, [r7, #20]
 800cc42:	3301      	adds	r3, #1
 800cc44:	617b      	str	r3, [r7, #20]
 800cc46:	697b      	ldr	r3, [r7, #20]
 800cc48:	781b      	ldrb	r3, [r3, #0]
 800cc4a:	2b1f      	cmp	r3, #31
 800cc4c:	d903      	bls.n	800cc56 <get_ldnumber+0x34>
 800cc4e:	697b      	ldr	r3, [r7, #20]
 800cc50:	781b      	ldrb	r3, [r3, #0]
 800cc52:	2b3a      	cmp	r3, #58	; 0x3a
 800cc54:	d1f4      	bne.n	800cc40 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800cc56:	697b      	ldr	r3, [r7, #20]
 800cc58:	781b      	ldrb	r3, [r3, #0]
 800cc5a:	2b3a      	cmp	r3, #58	; 0x3a
 800cc5c:	d11c      	bne.n	800cc98 <get_ldnumber+0x76>
			tp = *path;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	1c5a      	adds	r2, r3, #1
 800cc68:	60fa      	str	r2, [r7, #12]
 800cc6a:	781b      	ldrb	r3, [r3, #0]
 800cc6c:	3b30      	subs	r3, #48	; 0x30
 800cc6e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800cc70:	68bb      	ldr	r3, [r7, #8]
 800cc72:	2b09      	cmp	r3, #9
 800cc74:	d80e      	bhi.n	800cc94 <get_ldnumber+0x72>
 800cc76:	68fa      	ldr	r2, [r7, #12]
 800cc78:	697b      	ldr	r3, [r7, #20]
 800cc7a:	429a      	cmp	r2, r3
 800cc7c:	d10a      	bne.n	800cc94 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800cc7e:	68bb      	ldr	r3, [r7, #8]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d107      	bne.n	800cc94 <get_ldnumber+0x72>
					vol = (int)i;
 800cc84:	68bb      	ldr	r3, [r7, #8]
 800cc86:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800cc88:	697b      	ldr	r3, [r7, #20]
 800cc8a:	3301      	adds	r3, #1
 800cc8c:	617b      	str	r3, [r7, #20]
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	697a      	ldr	r2, [r7, #20]
 800cc92:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800cc94:	693b      	ldr	r3, [r7, #16]
 800cc96:	e002      	b.n	800cc9e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800cc98:	2300      	movs	r3, #0
 800cc9a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800cc9c:	693b      	ldr	r3, [r7, #16]
}
 800cc9e:	4618      	mov	r0, r3
 800cca0:	371c      	adds	r7, #28
 800cca2:	46bd      	mov	sp, r7
 800cca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca8:	4770      	bx	lr
	...

0800ccac <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b082      	sub	sp, #8
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
 800ccb4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	2200      	movs	r2, #0
 800ccba:	70da      	strb	r2, [r3, #3]
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f04f 32ff 	mov.w	r2, #4294967295
 800ccc2:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ccc4:	6839      	ldr	r1, [r7, #0]
 800ccc6:	6878      	ldr	r0, [r7, #4]
 800ccc8:	f7fe fc0a 	bl	800b4e0 <move_window>
 800cccc:	4603      	mov	r3, r0
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d001      	beq.n	800ccd6 <check_fs+0x2a>
 800ccd2:	2304      	movs	r3, #4
 800ccd4:	e038      	b.n	800cd48 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	333c      	adds	r3, #60	; 0x3c
 800ccda:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ccde:	4618      	mov	r0, r3
 800cce0:	f7fe f94e 	bl	800af80 <ld_word>
 800cce4:	4603      	mov	r3, r0
 800cce6:	461a      	mov	r2, r3
 800cce8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ccec:	429a      	cmp	r2, r3
 800ccee:	d001      	beq.n	800ccf4 <check_fs+0x48>
 800ccf0:	2303      	movs	r3, #3
 800ccf2:	e029      	b.n	800cd48 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ccfa:	2be9      	cmp	r3, #233	; 0xe9
 800ccfc:	d009      	beq.n	800cd12 <check_fs+0x66>
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd04:	2beb      	cmp	r3, #235	; 0xeb
 800cd06:	d11e      	bne.n	800cd46 <check_fs+0x9a>
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cd0e:	2b90      	cmp	r3, #144	; 0x90
 800cd10:	d119      	bne.n	800cd46 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	333c      	adds	r3, #60	; 0x3c
 800cd16:	3336      	adds	r3, #54	; 0x36
 800cd18:	4618      	mov	r0, r3
 800cd1a:	f7fe f949 	bl	800afb0 <ld_dword>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cd24:	4a0a      	ldr	r2, [pc, #40]	; (800cd50 <check_fs+0xa4>)
 800cd26:	4293      	cmp	r3, r2
 800cd28:	d101      	bne.n	800cd2e <check_fs+0x82>
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	e00c      	b.n	800cd48 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	333c      	adds	r3, #60	; 0x3c
 800cd32:	3352      	adds	r3, #82	; 0x52
 800cd34:	4618      	mov	r0, r3
 800cd36:	f7fe f93b 	bl	800afb0 <ld_dword>
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	4a05      	ldr	r2, [pc, #20]	; (800cd54 <check_fs+0xa8>)
 800cd3e:	4293      	cmp	r3, r2
 800cd40:	d101      	bne.n	800cd46 <check_fs+0x9a>
 800cd42:	2300      	movs	r3, #0
 800cd44:	e000      	b.n	800cd48 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800cd46:	2302      	movs	r3, #2
}
 800cd48:	4618      	mov	r0, r3
 800cd4a:	3708      	adds	r7, #8
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	bd80      	pop	{r7, pc}
 800cd50:	00544146 	.word	0x00544146
 800cd54:	33544146 	.word	0x33544146

0800cd58 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b096      	sub	sp, #88	; 0x58
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	60f8      	str	r0, [r7, #12]
 800cd60:	60b9      	str	r1, [r7, #8]
 800cd62:	4613      	mov	r3, r2
 800cd64:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800cd66:	68bb      	ldr	r3, [r7, #8]
 800cd68:	2200      	movs	r2, #0
 800cd6a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800cd6c:	68f8      	ldr	r0, [r7, #12]
 800cd6e:	f7ff ff58 	bl	800cc22 <get_ldnumber>
 800cd72:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800cd74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	da01      	bge.n	800cd7e <find_volume+0x26>
 800cd7a:	230b      	movs	r3, #11
 800cd7c:	e268      	b.n	800d250 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800cd7e:	4a9f      	ldr	r2, [pc, #636]	; (800cffc <find_volume+0x2a4>)
 800cd80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd86:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800cd88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d101      	bne.n	800cd92 <find_volume+0x3a>
 800cd8e:	230c      	movs	r3, #12
 800cd90:	e25e      	b.n	800d250 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800cd92:	68bb      	ldr	r3, [r7, #8]
 800cd94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd96:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800cd98:	79fb      	ldrb	r3, [r7, #7]
 800cd9a:	f023 0301 	bic.w	r3, r3, #1
 800cd9e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800cda0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cda2:	781b      	ldrb	r3, [r3, #0]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d01a      	beq.n	800cdde <find_volume+0x86>
		stat = disk_status(fs->drv);
 800cda8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdaa:	785b      	ldrb	r3, [r3, #1]
 800cdac:	4618      	mov	r0, r3
 800cdae:	f7fe f849 	bl	800ae44 <disk_status>
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800cdb8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cdbc:	f003 0301 	and.w	r3, r3, #1
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d10c      	bne.n	800cdde <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800cdc4:	79fb      	ldrb	r3, [r7, #7]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d007      	beq.n	800cdda <find_volume+0x82>
 800cdca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cdce:	f003 0304 	and.w	r3, r3, #4
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d001      	beq.n	800cdda <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800cdd6:	230a      	movs	r3, #10
 800cdd8:	e23a      	b.n	800d250 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 800cdda:	2300      	movs	r3, #0
 800cddc:	e238      	b.n	800d250 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800cdde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cde0:	2200      	movs	r2, #0
 800cde2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800cde4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cde6:	b2da      	uxtb	r2, r3
 800cde8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdea:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800cdec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdee:	785b      	ldrb	r3, [r3, #1]
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	f7fe f841 	bl	800ae78 <disk_initialize>
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800cdfc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ce00:	f003 0301 	and.w	r3, r3, #1
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d001      	beq.n	800ce0c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ce08:	2303      	movs	r3, #3
 800ce0a:	e221      	b.n	800d250 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ce0c:	79fb      	ldrb	r3, [r7, #7]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d007      	beq.n	800ce22 <find_volume+0xca>
 800ce12:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ce16:	f003 0304 	and.w	r3, r3, #4
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d001      	beq.n	800ce22 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ce1e:	230a      	movs	r3, #10
 800ce20:	e216      	b.n	800d250 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800ce22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce24:	7858      	ldrb	r0, [r3, #1]
 800ce26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce28:	330c      	adds	r3, #12
 800ce2a:	461a      	mov	r2, r3
 800ce2c:	2102      	movs	r1, #2
 800ce2e:	f7fe f889 	bl	800af44 <disk_ioctl>
 800ce32:	4603      	mov	r3, r0
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d001      	beq.n	800ce3c <find_volume+0xe4>
 800ce38:	2301      	movs	r3, #1
 800ce3a:	e209      	b.n	800d250 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800ce3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce3e:	899b      	ldrh	r3, [r3, #12]
 800ce40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce44:	d80d      	bhi.n	800ce62 <find_volume+0x10a>
 800ce46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce48:	899b      	ldrh	r3, [r3, #12]
 800ce4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ce4e:	d308      	bcc.n	800ce62 <find_volume+0x10a>
 800ce50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce52:	899b      	ldrh	r3, [r3, #12]
 800ce54:	461a      	mov	r2, r3
 800ce56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce58:	899b      	ldrh	r3, [r3, #12]
 800ce5a:	3b01      	subs	r3, #1
 800ce5c:	4013      	ands	r3, r2
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d001      	beq.n	800ce66 <find_volume+0x10e>
 800ce62:	2301      	movs	r3, #1
 800ce64:	e1f4      	b.n	800d250 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ce66:	2300      	movs	r3, #0
 800ce68:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ce6a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ce6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ce6e:	f7ff ff1d 	bl	800ccac <check_fs>
 800ce72:	4603      	mov	r3, r0
 800ce74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ce78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ce7c:	2b02      	cmp	r3, #2
 800ce7e:	d149      	bne.n	800cf14 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ce80:	2300      	movs	r3, #0
 800ce82:	643b      	str	r3, [r7, #64]	; 0x40
 800ce84:	e01e      	b.n	800cec4 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ce86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce88:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800ce8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce8e:	011b      	lsls	r3, r3, #4
 800ce90:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ce94:	4413      	add	r3, r2
 800ce96:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ce98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce9a:	3304      	adds	r3, #4
 800ce9c:	781b      	ldrb	r3, [r3, #0]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d006      	beq.n	800ceb0 <find_volume+0x158>
 800cea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cea4:	3308      	adds	r3, #8
 800cea6:	4618      	mov	r0, r3
 800cea8:	f7fe f882 	bl	800afb0 <ld_dword>
 800ceac:	4602      	mov	r2, r0
 800ceae:	e000      	b.n	800ceb2 <find_volume+0x15a>
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ceb4:	009b      	lsls	r3, r3, #2
 800ceb6:	3358      	adds	r3, #88	; 0x58
 800ceb8:	443b      	add	r3, r7
 800ceba:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cebe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cec0:	3301      	adds	r3, #1
 800cec2:	643b      	str	r3, [r7, #64]	; 0x40
 800cec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cec6:	2b03      	cmp	r3, #3
 800cec8:	d9dd      	bls.n	800ce86 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ceca:	2300      	movs	r3, #0
 800cecc:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800cece:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d002      	beq.n	800ceda <find_volume+0x182>
 800ced4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ced6:	3b01      	subs	r3, #1
 800ced8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ceda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cedc:	009b      	lsls	r3, r3, #2
 800cede:	3358      	adds	r3, #88	; 0x58
 800cee0:	443b      	add	r3, r7
 800cee2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800cee6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cee8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d005      	beq.n	800cefa <find_volume+0x1a2>
 800ceee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cef0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cef2:	f7ff fedb 	bl	800ccac <check_fs>
 800cef6:	4603      	mov	r3, r0
 800cef8:	e000      	b.n	800cefc <find_volume+0x1a4>
 800cefa:	2303      	movs	r3, #3
 800cefc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cf00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cf04:	2b01      	cmp	r3, #1
 800cf06:	d905      	bls.n	800cf14 <find_volume+0x1bc>
 800cf08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf0a:	3301      	adds	r3, #1
 800cf0c:	643b      	str	r3, [r7, #64]	; 0x40
 800cf0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf10:	2b03      	cmp	r3, #3
 800cf12:	d9e2      	bls.n	800ceda <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cf14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cf18:	2b04      	cmp	r3, #4
 800cf1a:	d101      	bne.n	800cf20 <find_volume+0x1c8>
 800cf1c:	2301      	movs	r3, #1
 800cf1e:	e197      	b.n	800d250 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cf20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cf24:	2b01      	cmp	r3, #1
 800cf26:	d901      	bls.n	800cf2c <find_volume+0x1d4>
 800cf28:	230d      	movs	r3, #13
 800cf2a:	e191      	b.n	800d250 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cf2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf2e:	333c      	adds	r3, #60	; 0x3c
 800cf30:	330b      	adds	r3, #11
 800cf32:	4618      	mov	r0, r3
 800cf34:	f7fe f824 	bl	800af80 <ld_word>
 800cf38:	4603      	mov	r3, r0
 800cf3a:	461a      	mov	r2, r3
 800cf3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf3e:	899b      	ldrh	r3, [r3, #12]
 800cf40:	429a      	cmp	r2, r3
 800cf42:	d001      	beq.n	800cf48 <find_volume+0x1f0>
 800cf44:	230d      	movs	r3, #13
 800cf46:	e183      	b.n	800d250 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cf48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf4a:	333c      	adds	r3, #60	; 0x3c
 800cf4c:	3316      	adds	r3, #22
 800cf4e:	4618      	mov	r0, r3
 800cf50:	f7fe f816 	bl	800af80 <ld_word>
 800cf54:	4603      	mov	r3, r0
 800cf56:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cf58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d106      	bne.n	800cf6c <find_volume+0x214>
 800cf5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf60:	333c      	adds	r3, #60	; 0x3c
 800cf62:	3324      	adds	r3, #36	; 0x24
 800cf64:	4618      	mov	r0, r3
 800cf66:	f7fe f823 	bl	800afb0 <ld_dword>
 800cf6a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800cf6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cf70:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cf72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf74:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800cf78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf7a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cf7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf7e:	789b      	ldrb	r3, [r3, #2]
 800cf80:	2b01      	cmp	r3, #1
 800cf82:	d005      	beq.n	800cf90 <find_volume+0x238>
 800cf84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf86:	789b      	ldrb	r3, [r3, #2]
 800cf88:	2b02      	cmp	r3, #2
 800cf8a:	d001      	beq.n	800cf90 <find_volume+0x238>
 800cf8c:	230d      	movs	r3, #13
 800cf8e:	e15f      	b.n	800d250 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cf90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf92:	789b      	ldrb	r3, [r3, #2]
 800cf94:	461a      	mov	r2, r3
 800cf96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf98:	fb02 f303 	mul.w	r3, r2, r3
 800cf9c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cf9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfa0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800cfa4:	b29a      	uxth	r2, r3
 800cfa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfa8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800cfaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfac:	895b      	ldrh	r3, [r3, #10]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d008      	beq.n	800cfc4 <find_volume+0x26c>
 800cfb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfb4:	895b      	ldrh	r3, [r3, #10]
 800cfb6:	461a      	mov	r2, r3
 800cfb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfba:	895b      	ldrh	r3, [r3, #10]
 800cfbc:	3b01      	subs	r3, #1
 800cfbe:	4013      	ands	r3, r2
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d001      	beq.n	800cfc8 <find_volume+0x270>
 800cfc4:	230d      	movs	r3, #13
 800cfc6:	e143      	b.n	800d250 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cfc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfca:	333c      	adds	r3, #60	; 0x3c
 800cfcc:	3311      	adds	r3, #17
 800cfce:	4618      	mov	r0, r3
 800cfd0:	f7fd ffd6 	bl	800af80 <ld_word>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	461a      	mov	r2, r3
 800cfd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfda:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cfdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfde:	891b      	ldrh	r3, [r3, #8]
 800cfe0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cfe2:	8992      	ldrh	r2, [r2, #12]
 800cfe4:	0952      	lsrs	r2, r2, #5
 800cfe6:	b292      	uxth	r2, r2
 800cfe8:	fbb3 f1f2 	udiv	r1, r3, r2
 800cfec:	fb01 f202 	mul.w	r2, r1, r2
 800cff0:	1a9b      	subs	r3, r3, r2
 800cff2:	b29b      	uxth	r3, r3
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d003      	beq.n	800d000 <find_volume+0x2a8>
 800cff8:	230d      	movs	r3, #13
 800cffa:	e129      	b.n	800d250 <find_volume+0x4f8>
 800cffc:	20003bb0 	.word	0x20003bb0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d002:	333c      	adds	r3, #60	; 0x3c
 800d004:	3313      	adds	r3, #19
 800d006:	4618      	mov	r0, r3
 800d008:	f7fd ffba 	bl	800af80 <ld_word>
 800d00c:	4603      	mov	r3, r0
 800d00e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d010:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d012:	2b00      	cmp	r3, #0
 800d014:	d106      	bne.n	800d024 <find_volume+0x2cc>
 800d016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d018:	333c      	adds	r3, #60	; 0x3c
 800d01a:	3320      	adds	r3, #32
 800d01c:	4618      	mov	r0, r3
 800d01e:	f7fd ffc7 	bl	800afb0 <ld_dword>
 800d022:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d026:	333c      	adds	r3, #60	; 0x3c
 800d028:	330e      	adds	r3, #14
 800d02a:	4618      	mov	r0, r3
 800d02c:	f7fd ffa8 	bl	800af80 <ld_word>
 800d030:	4603      	mov	r3, r0
 800d032:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d034:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d036:	2b00      	cmp	r3, #0
 800d038:	d101      	bne.n	800d03e <find_volume+0x2e6>
 800d03a:	230d      	movs	r3, #13
 800d03c:	e108      	b.n	800d250 <find_volume+0x4f8>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d03e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d042:	4413      	add	r3, r2
 800d044:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d046:	8911      	ldrh	r1, [r2, #8]
 800d048:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d04a:	8992      	ldrh	r2, [r2, #12]
 800d04c:	0952      	lsrs	r2, r2, #5
 800d04e:	b292      	uxth	r2, r2
 800d050:	fbb1 f2f2 	udiv	r2, r1, r2
 800d054:	b292      	uxth	r2, r2
 800d056:	4413      	add	r3, r2
 800d058:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d05a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d05e:	429a      	cmp	r2, r3
 800d060:	d201      	bcs.n	800d066 <find_volume+0x30e>
 800d062:	230d      	movs	r3, #13
 800d064:	e0f4      	b.n	800d250 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d066:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d06a:	1ad3      	subs	r3, r2, r3
 800d06c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d06e:	8952      	ldrh	r2, [r2, #10]
 800d070:	fbb3 f3f2 	udiv	r3, r3, r2
 800d074:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d101      	bne.n	800d080 <find_volume+0x328>
 800d07c:	230d      	movs	r3, #13
 800d07e:	e0e7      	b.n	800d250 <find_volume+0x4f8>
		fmt = FS_FAT32;
 800d080:	2303      	movs	r3, #3
 800d082:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d088:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d08c:	4293      	cmp	r3, r2
 800d08e:	d802      	bhi.n	800d096 <find_volume+0x33e>
 800d090:	2302      	movs	r3, #2
 800d092:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d098:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d09c:	4293      	cmp	r3, r2
 800d09e:	d802      	bhi.n	800d0a6 <find_volume+0x34e>
 800d0a0:	2301      	movs	r3, #1
 800d0a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0a8:	1c9a      	adds	r2, r3, #2
 800d0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0ac:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800d0ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d0b2:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d0b4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d0b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0b8:	441a      	add	r2, r3
 800d0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0bc:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800d0be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0c2:	441a      	add	r2, r3
 800d0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0c6:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800d0c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d0cc:	2b03      	cmp	r3, #3
 800d0ce:	d11e      	bne.n	800d10e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d0d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0d2:	333c      	adds	r3, #60	; 0x3c
 800d0d4:	332a      	adds	r3, #42	; 0x2a
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	f7fd ff52 	bl	800af80 <ld_word>
 800d0dc:	4603      	mov	r3, r0
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d001      	beq.n	800d0e6 <find_volume+0x38e>
 800d0e2:	230d      	movs	r3, #13
 800d0e4:	e0b4      	b.n	800d250 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d0e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0e8:	891b      	ldrh	r3, [r3, #8]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d001      	beq.n	800d0f2 <find_volume+0x39a>
 800d0ee:	230d      	movs	r3, #13
 800d0f0:	e0ae      	b.n	800d250 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d0f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0f4:	333c      	adds	r3, #60	; 0x3c
 800d0f6:	332c      	adds	r3, #44	; 0x2c
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	f7fd ff59 	bl	800afb0 <ld_dword>
 800d0fe:	4602      	mov	r2, r0
 800d100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d102:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d106:	6a1b      	ldr	r3, [r3, #32]
 800d108:	009b      	lsls	r3, r3, #2
 800d10a:	647b      	str	r3, [r7, #68]	; 0x44
 800d10c:	e01f      	b.n	800d14e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d10e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d110:	891b      	ldrh	r3, [r3, #8]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d101      	bne.n	800d11a <find_volume+0x3c2>
 800d116:	230d      	movs	r3, #13
 800d118:	e09a      	b.n	800d250 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d11a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d11c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d11e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d120:	441a      	add	r2, r3
 800d122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d124:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d126:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d12a:	2b02      	cmp	r3, #2
 800d12c:	d103      	bne.n	800d136 <find_volume+0x3de>
 800d12e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d130:	6a1b      	ldr	r3, [r3, #32]
 800d132:	005b      	lsls	r3, r3, #1
 800d134:	e00a      	b.n	800d14c <find_volume+0x3f4>
 800d136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d138:	6a1a      	ldr	r2, [r3, #32]
 800d13a:	4613      	mov	r3, r2
 800d13c:	005b      	lsls	r3, r3, #1
 800d13e:	4413      	add	r3, r2
 800d140:	085a      	lsrs	r2, r3, #1
 800d142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d144:	6a1b      	ldr	r3, [r3, #32]
 800d146:	f003 0301 	and.w	r3, r3, #1
 800d14a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d14c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d14e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d150:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d154:	899b      	ldrh	r3, [r3, #12]
 800d156:	4619      	mov	r1, r3
 800d158:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d15a:	440b      	add	r3, r1
 800d15c:	3b01      	subs	r3, #1
 800d15e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d160:	8989      	ldrh	r1, [r1, #12]
 800d162:	fbb3 f3f1 	udiv	r3, r3, r1
 800d166:	429a      	cmp	r2, r3
 800d168:	d201      	bcs.n	800d16e <find_volume+0x416>
 800d16a:	230d      	movs	r3, #13
 800d16c:	e070      	b.n	800d250 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d170:	f04f 32ff 	mov.w	r2, #4294967295
 800d174:	619a      	str	r2, [r3, #24]
 800d176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d178:	699a      	ldr	r2, [r3, #24]
 800d17a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d17c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800d17e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d180:	2280      	movs	r2, #128	; 0x80
 800d182:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d184:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d188:	2b03      	cmp	r3, #3
 800d18a:	d149      	bne.n	800d220 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d18e:	333c      	adds	r3, #60	; 0x3c
 800d190:	3330      	adds	r3, #48	; 0x30
 800d192:	4618      	mov	r0, r3
 800d194:	f7fd fef4 	bl	800af80 <ld_word>
 800d198:	4603      	mov	r3, r0
 800d19a:	2b01      	cmp	r3, #1
 800d19c:	d140      	bne.n	800d220 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d19e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1a0:	3301      	adds	r3, #1
 800d1a2:	4619      	mov	r1, r3
 800d1a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d1a6:	f7fe f99b 	bl	800b4e0 <move_window>
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d137      	bne.n	800d220 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800d1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d1b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1b8:	333c      	adds	r3, #60	; 0x3c
 800d1ba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f7fd fede 	bl	800af80 <ld_word>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	461a      	mov	r2, r3
 800d1c8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d1cc:	429a      	cmp	r2, r3
 800d1ce:	d127      	bne.n	800d220 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1d2:	333c      	adds	r3, #60	; 0x3c
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	f7fd feeb 	bl	800afb0 <ld_dword>
 800d1da:	4603      	mov	r3, r0
 800d1dc:	4a1e      	ldr	r2, [pc, #120]	; (800d258 <find_volume+0x500>)
 800d1de:	4293      	cmp	r3, r2
 800d1e0:	d11e      	bne.n	800d220 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d1e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1e4:	333c      	adds	r3, #60	; 0x3c
 800d1e6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	f7fd fee0 	bl	800afb0 <ld_dword>
 800d1f0:	4603      	mov	r3, r0
 800d1f2:	4a1a      	ldr	r2, [pc, #104]	; (800d25c <find_volume+0x504>)
 800d1f4:	4293      	cmp	r3, r2
 800d1f6:	d113      	bne.n	800d220 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1fa:	333c      	adds	r3, #60	; 0x3c
 800d1fc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d200:	4618      	mov	r0, r3
 800d202:	f7fd fed5 	bl	800afb0 <ld_dword>
 800d206:	4602      	mov	r2, r0
 800d208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d20a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d20c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d20e:	333c      	adds	r3, #60	; 0x3c
 800d210:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d214:	4618      	mov	r0, r3
 800d216:	f7fd fecb 	bl	800afb0 <ld_dword>
 800d21a:	4602      	mov	r2, r0
 800d21c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d21e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d222:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d226:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d228:	4b0d      	ldr	r3, [pc, #52]	; (800d260 <find_volume+0x508>)
 800d22a:	881b      	ldrh	r3, [r3, #0]
 800d22c:	3301      	adds	r3, #1
 800d22e:	b29a      	uxth	r2, r3
 800d230:	4b0b      	ldr	r3, [pc, #44]	; (800d260 <find_volume+0x508>)
 800d232:	801a      	strh	r2, [r3, #0]
 800d234:	4b0a      	ldr	r3, [pc, #40]	; (800d260 <find_volume+0x508>)
 800d236:	881a      	ldrh	r2, [r3, #0]
 800d238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d23a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800d23c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d23e:	4a09      	ldr	r2, [pc, #36]	; (800d264 <find_volume+0x50c>)
 800d240:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 800d242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d244:	2200      	movs	r2, #0
 800d246:	61da      	str	r2, [r3, #28]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d248:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d24a:	f7fe f8e1 	bl	800b410 <clear_lock>
#endif
	return FR_OK;
 800d24e:	2300      	movs	r3, #0
}
 800d250:	4618      	mov	r0, r3
 800d252:	3758      	adds	r7, #88	; 0x58
 800d254:	46bd      	mov	sp, r7
 800d256:	bd80      	pop	{r7, pc}
 800d258:	41615252 	.word	0x41615252
 800d25c:	61417272 	.word	0x61417272
 800d260:	20003bb4 	.word	0x20003bb4
 800d264:	20003bd8 	.word	0x20003bd8

0800d268 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b084      	sub	sp, #16
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
 800d270:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d272:	2309      	movs	r3, #9
 800d274:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d01c      	beq.n	800d2b6 <validate+0x4e>
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d018      	beq.n	800d2b6 <validate+0x4e>
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	781b      	ldrb	r3, [r3, #0]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d013      	beq.n	800d2b6 <validate+0x4e>
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	889a      	ldrh	r2, [r3, #4]
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	88db      	ldrh	r3, [r3, #6]
 800d298:	429a      	cmp	r2, r3
 800d29a:	d10c      	bne.n	800d2b6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	785b      	ldrb	r3, [r3, #1]
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f7fd fdce 	bl	800ae44 <disk_status>
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	f003 0301 	and.w	r3, r3, #1
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d101      	bne.n	800d2b6 <validate+0x4e>
			res = FR_OK;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d2b6:	7bfb      	ldrb	r3, [r7, #15]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d102      	bne.n	800d2c2 <validate+0x5a>
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	e000      	b.n	800d2c4 <validate+0x5c>
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	683a      	ldr	r2, [r7, #0]
 800d2c6:	6013      	str	r3, [r2, #0]
	return res;
 800d2c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	3710      	adds	r7, #16
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bd80      	pop	{r7, pc}
	...

0800d2d4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b088      	sub	sp, #32
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	60f8      	str	r0, [r7, #12]
 800d2dc:	60b9      	str	r1, [r7, #8]
 800d2de:	4613      	mov	r3, r2
 800d2e0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d2e2:	68bb      	ldr	r3, [r7, #8]
 800d2e4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d2e6:	f107 0310 	add.w	r3, r7, #16
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	f7ff fc99 	bl	800cc22 <get_ldnumber>
 800d2f0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d2f2:	69fb      	ldr	r3, [r7, #28]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	da01      	bge.n	800d2fc <f_mount+0x28>
 800d2f8:	230b      	movs	r3, #11
 800d2fa:	e02b      	b.n	800d354 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d2fc:	4a17      	ldr	r2, [pc, #92]	; (800d35c <f_mount+0x88>)
 800d2fe:	69fb      	ldr	r3, [r7, #28]
 800d300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d304:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d306:	69bb      	ldr	r3, [r7, #24]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d005      	beq.n	800d318 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d30c:	69b8      	ldr	r0, [r7, #24]
 800d30e:	f7fe f87f 	bl	800b410 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d312:	69bb      	ldr	r3, [r7, #24]
 800d314:	2200      	movs	r2, #0
 800d316:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d002      	beq.n	800d324 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	2200      	movs	r2, #0
 800d322:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d324:	68fa      	ldr	r2, [r7, #12]
 800d326:	490d      	ldr	r1, [pc, #52]	; (800d35c <f_mount+0x88>)
 800d328:	69fb      	ldr	r3, [r7, #28]
 800d32a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d002      	beq.n	800d33a <f_mount+0x66>
 800d334:	79fb      	ldrb	r3, [r7, #7]
 800d336:	2b01      	cmp	r3, #1
 800d338:	d001      	beq.n	800d33e <f_mount+0x6a>
 800d33a:	2300      	movs	r3, #0
 800d33c:	e00a      	b.n	800d354 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d33e:	f107 010c 	add.w	r1, r7, #12
 800d342:	f107 0308 	add.w	r3, r7, #8
 800d346:	2200      	movs	r2, #0
 800d348:	4618      	mov	r0, r3
 800d34a:	f7ff fd05 	bl	800cd58 <find_volume>
 800d34e:	4603      	mov	r3, r0
 800d350:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d352:	7dfb      	ldrb	r3, [r7, #23]
}
 800d354:	4618      	mov	r0, r3
 800d356:	3720      	adds	r7, #32
 800d358:	46bd      	mov	sp, r7
 800d35a:	bd80      	pop	{r7, pc}
 800d35c:	20003bb0 	.word	0x20003bb0

0800d360 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b09a      	sub	sp, #104	; 0x68
 800d364:	af00      	add	r7, sp, #0
 800d366:	60f8      	str	r0, [r7, #12]
 800d368:	60b9      	str	r1, [r7, #8]
 800d36a:	4613      	mov	r3, r2
 800d36c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d101      	bne.n	800d378 <f_open+0x18>
 800d374:	2309      	movs	r3, #9
 800d376:	e1bb      	b.n	800d6f0 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d378:	79fb      	ldrb	r3, [r7, #7]
 800d37a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d37e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d380:	79fa      	ldrb	r2, [r7, #7]
 800d382:	f107 0114 	add.w	r1, r7, #20
 800d386:	f107 0308 	add.w	r3, r7, #8
 800d38a:	4618      	mov	r0, r3
 800d38c:	f7ff fce4 	bl	800cd58 <find_volume>
 800d390:	4603      	mov	r3, r0
 800d392:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800d396:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	f040 819f 	bne.w	800d6de <f_open+0x37e>
		dj.obj.fs = fs;
 800d3a0:	697b      	ldr	r3, [r7, #20]
 800d3a2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d3a4:	68ba      	ldr	r2, [r7, #8]
 800d3a6:	f107 0318 	add.w	r3, r7, #24
 800d3aa:	4611      	mov	r1, r2
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	f7ff fba3 	bl	800caf8 <follow_path>
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d3b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d11a      	bne.n	800d3f6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d3c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d3c4:	b25b      	sxtb	r3, r3
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	da03      	bge.n	800d3d2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800d3ca:	2306      	movs	r3, #6
 800d3cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d3d0:	e011      	b.n	800d3f6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d3d2:	79fb      	ldrb	r3, [r7, #7]
 800d3d4:	f023 0301 	bic.w	r3, r3, #1
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	bf14      	ite	ne
 800d3dc:	2301      	movne	r3, #1
 800d3de:	2300      	moveq	r3, #0
 800d3e0:	b2db      	uxtb	r3, r3
 800d3e2:	461a      	mov	r2, r3
 800d3e4:	f107 0318 	add.w	r3, r7, #24
 800d3e8:	4611      	mov	r1, r2
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	f7fd fec8 	bl	800b180 <chk_lock>
 800d3f0:	4603      	mov	r3, r0
 800d3f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d3f6:	79fb      	ldrb	r3, [r7, #7]
 800d3f8:	f003 031c 	and.w	r3, r3, #28
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d07f      	beq.n	800d500 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800d400:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d404:	2b00      	cmp	r3, #0
 800d406:	d017      	beq.n	800d438 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d408:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d40c:	2b04      	cmp	r3, #4
 800d40e:	d10e      	bne.n	800d42e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d410:	f7fd ff12 	bl	800b238 <enq_lock>
 800d414:	4603      	mov	r3, r0
 800d416:	2b00      	cmp	r3, #0
 800d418:	d006      	beq.n	800d428 <f_open+0xc8>
 800d41a:	f107 0318 	add.w	r3, r7, #24
 800d41e:	4618      	mov	r0, r3
 800d420:	f7ff f86c 	bl	800c4fc <dir_register>
 800d424:	4603      	mov	r3, r0
 800d426:	e000      	b.n	800d42a <f_open+0xca>
 800d428:	2312      	movs	r3, #18
 800d42a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d42e:	79fb      	ldrb	r3, [r7, #7]
 800d430:	f043 0308 	orr.w	r3, r3, #8
 800d434:	71fb      	strb	r3, [r7, #7]
 800d436:	e010      	b.n	800d45a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d438:	7fbb      	ldrb	r3, [r7, #30]
 800d43a:	f003 0311 	and.w	r3, r3, #17
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d003      	beq.n	800d44a <f_open+0xea>
					res = FR_DENIED;
 800d442:	2307      	movs	r3, #7
 800d444:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d448:	e007      	b.n	800d45a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d44a:	79fb      	ldrb	r3, [r7, #7]
 800d44c:	f003 0304 	and.w	r3, r3, #4
 800d450:	2b00      	cmp	r3, #0
 800d452:	d002      	beq.n	800d45a <f_open+0xfa>
 800d454:	2308      	movs	r3, #8
 800d456:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d45a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d168      	bne.n	800d534 <f_open+0x1d4>
 800d462:	79fb      	ldrb	r3, [r7, #7]
 800d464:	f003 0308 	and.w	r3, r3, #8
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d063      	beq.n	800d534 <f_open+0x1d4>
				dw = GET_FATTIME();
 800d46c:	f7fd fc8c 	bl	800ad88 <get_fattime>
 800d470:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d474:	330e      	adds	r3, #14
 800d476:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d478:	4618      	mov	r0, r3
 800d47a:	f7fd fdd7 	bl	800b02c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d480:	3316      	adds	r3, #22
 800d482:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d484:	4618      	mov	r0, r3
 800d486:	f7fd fdd1 	bl	800b02c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d48c:	330b      	adds	r3, #11
 800d48e:	2220      	movs	r2, #32
 800d490:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d492:	697b      	ldr	r3, [r7, #20]
 800d494:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d496:	4611      	mov	r1, r2
 800d498:	4618      	mov	r0, r3
 800d49a:	f7fe fda7 	bl	800bfec <ld_clust>
 800d49e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d4a0:	697b      	ldr	r3, [r7, #20]
 800d4a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	f7fe fdbf 	bl	800c02a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d4ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4ae:	331c      	adds	r3, #28
 800d4b0:	2100      	movs	r1, #0
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	f7fd fdba 	bl	800b02c <st_dword>
					fs->wflag = 1;
 800d4b8:	697b      	ldr	r3, [r7, #20]
 800d4ba:	2201      	movs	r2, #1
 800d4bc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d4be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d037      	beq.n	800d534 <f_open+0x1d4>
						dw = fs->winsect;
 800d4c4:	697b      	ldr	r3, [r7, #20]
 800d4c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4c8:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800d4ca:	f107 0318 	add.w	r3, r7, #24
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	f7fe faaf 	bl	800ba36 <remove_chain>
 800d4d8:	4603      	mov	r3, r0
 800d4da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800d4de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d126      	bne.n	800d534 <f_open+0x1d4>
							res = move_window(fs, dw);
 800d4e6:	697b      	ldr	r3, [r7, #20]
 800d4e8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	f7fd fff8 	bl	800b4e0 <move_window>
 800d4f0:	4603      	mov	r3, r0
 800d4f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d4f6:	697b      	ldr	r3, [r7, #20]
 800d4f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d4fa:	3a01      	subs	r2, #1
 800d4fc:	615a      	str	r2, [r3, #20]
 800d4fe:	e019      	b.n	800d534 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d500:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d504:	2b00      	cmp	r3, #0
 800d506:	d115      	bne.n	800d534 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d508:	7fbb      	ldrb	r3, [r7, #30]
 800d50a:	f003 0310 	and.w	r3, r3, #16
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d003      	beq.n	800d51a <f_open+0x1ba>
					res = FR_NO_FILE;
 800d512:	2304      	movs	r3, #4
 800d514:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d518:	e00c      	b.n	800d534 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d51a:	79fb      	ldrb	r3, [r7, #7]
 800d51c:	f003 0302 	and.w	r3, r3, #2
 800d520:	2b00      	cmp	r3, #0
 800d522:	d007      	beq.n	800d534 <f_open+0x1d4>
 800d524:	7fbb      	ldrb	r3, [r7, #30]
 800d526:	f003 0301 	and.w	r3, r3, #1
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d002      	beq.n	800d534 <f_open+0x1d4>
						res = FR_DENIED;
 800d52e:	2307      	movs	r3, #7
 800d530:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800d534:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d128      	bne.n	800d58e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d53c:	79fb      	ldrb	r3, [r7, #7]
 800d53e:	f003 0308 	and.w	r3, r3, #8
 800d542:	2b00      	cmp	r3, #0
 800d544:	d003      	beq.n	800d54e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800d546:	79fb      	ldrb	r3, [r7, #7]
 800d548:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d54c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d54e:	697b      	ldr	r3, [r7, #20]
 800d550:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800d556:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d55c:	79fb      	ldrb	r3, [r7, #7]
 800d55e:	f023 0301 	bic.w	r3, r3, #1
 800d562:	2b00      	cmp	r3, #0
 800d564:	bf14      	ite	ne
 800d566:	2301      	movne	r3, #1
 800d568:	2300      	moveq	r3, #0
 800d56a:	b2db      	uxtb	r3, r3
 800d56c:	461a      	mov	r2, r3
 800d56e:	f107 0318 	add.w	r3, r7, #24
 800d572:	4611      	mov	r1, r2
 800d574:	4618      	mov	r0, r3
 800d576:	f7fd fe81 	bl	800b27c <inc_lock>
 800d57a:	4602      	mov	r2, r0
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	691b      	ldr	r3, [r3, #16]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d102      	bne.n	800d58e <f_open+0x22e>
 800d588:	2302      	movs	r3, #2
 800d58a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d58e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d592:	2b00      	cmp	r3, #0
 800d594:	f040 80a3 	bne.w	800d6de <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d598:	697b      	ldr	r3, [r7, #20]
 800d59a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d59c:	4611      	mov	r1, r2
 800d59e:	4618      	mov	r0, r3
 800d5a0:	f7fe fd24 	bl	800bfec <ld_clust>
 800d5a4:	4602      	mov	r2, r0
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d5aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ac:	331c      	adds	r3, #28
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	f7fd fcfe 	bl	800afb0 <ld_dword>
 800d5b4:	4602      	mov	r2, r0
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	2200      	movs	r2, #0
 800d5be:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d5c0:	697a      	ldr	r2, [r7, #20]
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d5c6:	697b      	ldr	r3, [r7, #20]
 800d5c8:	88da      	ldrh	r2, [r3, #6]
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	79fa      	ldrb	r2, [r7, #7]
 800d5d2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	2200      	movs	r2, #0
 800d5de:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	3330      	adds	r3, #48	; 0x30
 800d5ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d5ee:	2100      	movs	r1, #0
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	f7fd fd68 	bl	800b0c6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d5f6:	79fb      	ldrb	r3, [r7, #7]
 800d5f8:	f003 0320 	and.w	r3, r3, #32
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d06e      	beq.n	800d6de <f_open+0x37e>
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	68db      	ldr	r3, [r3, #12]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d06a      	beq.n	800d6de <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	68da      	ldr	r2, [r3, #12]
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d610:	697b      	ldr	r3, [r7, #20]
 800d612:	895b      	ldrh	r3, [r3, #10]
 800d614:	461a      	mov	r2, r3
 800d616:	697b      	ldr	r3, [r7, #20]
 800d618:	899b      	ldrh	r3, [r3, #12]
 800d61a:	fb02 f303 	mul.w	r3, r2, r3
 800d61e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	689b      	ldr	r3, [r3, #8]
 800d624:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	68db      	ldr	r3, [r3, #12]
 800d62a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d62c:	e016      	b.n	800d65c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d632:	4618      	mov	r0, r3
 800d634:	f7fe f811 	bl	800b65a <get_fat>
 800d638:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800d63a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d63c:	2b01      	cmp	r3, #1
 800d63e:	d802      	bhi.n	800d646 <f_open+0x2e6>
 800d640:	2302      	movs	r3, #2
 800d642:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d646:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d64c:	d102      	bne.n	800d654 <f_open+0x2f4>
 800d64e:	2301      	movs	r3, #1
 800d650:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d654:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d656:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d658:	1ad3      	subs	r3, r2, r3
 800d65a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d65c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d660:	2b00      	cmp	r3, #0
 800d662:	d103      	bne.n	800d66c <f_open+0x30c>
 800d664:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d666:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d668:	429a      	cmp	r2, r3
 800d66a:	d8e0      	bhi.n	800d62e <f_open+0x2ce>
				}
				fp->clust = clst;
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d670:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d672:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d676:	2b00      	cmp	r3, #0
 800d678:	d131      	bne.n	800d6de <f_open+0x37e>
 800d67a:	697b      	ldr	r3, [r7, #20]
 800d67c:	899b      	ldrh	r3, [r3, #12]
 800d67e:	461a      	mov	r2, r3
 800d680:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d682:	fbb3 f1f2 	udiv	r1, r3, r2
 800d686:	fb01 f202 	mul.w	r2, r1, r2
 800d68a:	1a9b      	subs	r3, r3, r2
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d026      	beq.n	800d6de <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d690:	697b      	ldr	r3, [r7, #20]
 800d692:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d694:	4618      	mov	r0, r3
 800d696:	f7fd ffc1 	bl	800b61c <clust2sect>
 800d69a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800d69c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d103      	bne.n	800d6aa <f_open+0x34a>
						res = FR_INT_ERR;
 800d6a2:	2302      	movs	r3, #2
 800d6a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d6a8:	e019      	b.n	800d6de <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d6aa:	697b      	ldr	r3, [r7, #20]
 800d6ac:	899b      	ldrh	r3, [r3, #12]
 800d6ae:	461a      	mov	r2, r3
 800d6b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d6b2:	fbb3 f2f2 	udiv	r2, r3, r2
 800d6b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6b8:	441a      	add	r2, r3
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d6be:	697b      	ldr	r3, [r7, #20]
 800d6c0:	7858      	ldrb	r0, [r3, #1]
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	6a1a      	ldr	r2, [r3, #32]
 800d6cc:	2301      	movs	r3, #1
 800d6ce:	f7fd fbf9 	bl	800aec4 <disk_read>
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d002      	beq.n	800d6de <f_open+0x37e>
 800d6d8:	2301      	movs	r3, #1
 800d6da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d6de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d002      	beq.n	800d6ec <f_open+0x38c>
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d6ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	3768      	adds	r7, #104	; 0x68
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	bd80      	pop	{r7, pc}

0800d6f8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b08c      	sub	sp, #48	; 0x30
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	60f8      	str	r0, [r7, #12]
 800d700:	60b9      	str	r1, [r7, #8]
 800d702:	607a      	str	r2, [r7, #4]
 800d704:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d706:	68bb      	ldr	r3, [r7, #8]
 800d708:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d70a:	683b      	ldr	r3, [r7, #0]
 800d70c:	2200      	movs	r2, #0
 800d70e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	f107 0210 	add.w	r2, r7, #16
 800d716:	4611      	mov	r1, r2
 800d718:	4618      	mov	r0, r3
 800d71a:	f7ff fda5 	bl	800d268 <validate>
 800d71e:	4603      	mov	r3, r0
 800d720:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d724:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d107      	bne.n	800d73c <f_write+0x44>
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	7d5b      	ldrb	r3, [r3, #21]
 800d730:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d734:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d002      	beq.n	800d742 <f_write+0x4a>
 800d73c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d740:	e16a      	b.n	800da18 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	7d1b      	ldrb	r3, [r3, #20]
 800d746:	f003 0302 	and.w	r3, r3, #2
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d101      	bne.n	800d752 <f_write+0x5a>
 800d74e:	2307      	movs	r3, #7
 800d750:	e162      	b.n	800da18 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	699a      	ldr	r2, [r3, #24]
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	441a      	add	r2, r3
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	699b      	ldr	r3, [r3, #24]
 800d75e:	429a      	cmp	r2, r3
 800d760:	f080 814c 	bcs.w	800d9fc <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	699b      	ldr	r3, [r3, #24]
 800d768:	43db      	mvns	r3, r3
 800d76a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d76c:	e146      	b.n	800d9fc <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	699b      	ldr	r3, [r3, #24]
 800d772:	693a      	ldr	r2, [r7, #16]
 800d774:	8992      	ldrh	r2, [r2, #12]
 800d776:	fbb3 f1f2 	udiv	r1, r3, r2
 800d77a:	fb01 f202 	mul.w	r2, r1, r2
 800d77e:	1a9b      	subs	r3, r3, r2
 800d780:	2b00      	cmp	r3, #0
 800d782:	f040 80f1 	bne.w	800d968 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	699b      	ldr	r3, [r3, #24]
 800d78a:	693a      	ldr	r2, [r7, #16]
 800d78c:	8992      	ldrh	r2, [r2, #12]
 800d78e:	fbb3 f3f2 	udiv	r3, r3, r2
 800d792:	693a      	ldr	r2, [r7, #16]
 800d794:	8952      	ldrh	r2, [r2, #10]
 800d796:	3a01      	subs	r2, #1
 800d798:	4013      	ands	r3, r2
 800d79a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d79c:	69bb      	ldr	r3, [r7, #24]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d143      	bne.n	800d82a <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	699b      	ldr	r3, [r3, #24]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d10c      	bne.n	800d7c4 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	689b      	ldr	r3, [r3, #8]
 800d7ae:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d11a      	bne.n	800d7ec <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	2100      	movs	r1, #0
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	f7fe f9a0 	bl	800bb00 <create_chain>
 800d7c0:	62b8      	str	r0, [r7, #40]	; 0x28
 800d7c2:	e013      	b.n	800d7ec <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d007      	beq.n	800d7dc <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	699b      	ldr	r3, [r3, #24]
 800d7d0:	4619      	mov	r1, r3
 800d7d2:	68f8      	ldr	r0, [r7, #12]
 800d7d4:	f7fe fa2c 	bl	800bc30 <clmt_clust>
 800d7d8:	62b8      	str	r0, [r7, #40]	; 0x28
 800d7da:	e007      	b.n	800d7ec <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d7dc:	68fa      	ldr	r2, [r7, #12]
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	69db      	ldr	r3, [r3, #28]
 800d7e2:	4619      	mov	r1, r3
 800d7e4:	4610      	mov	r0, r2
 800d7e6:	f7fe f98b 	bl	800bb00 <create_chain>
 800d7ea:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	f000 8109 	beq.w	800da06 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d7f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7f6:	2b01      	cmp	r3, #1
 800d7f8:	d104      	bne.n	800d804 <f_write+0x10c>
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	2202      	movs	r2, #2
 800d7fe:	755a      	strb	r2, [r3, #21]
 800d800:	2302      	movs	r3, #2
 800d802:	e109      	b.n	800da18 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d80a:	d104      	bne.n	800d816 <f_write+0x11e>
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	2201      	movs	r2, #1
 800d810:	755a      	strb	r2, [r3, #21]
 800d812:	2301      	movs	r3, #1
 800d814:	e100      	b.n	800da18 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d81a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	689b      	ldr	r3, [r3, #8]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d102      	bne.n	800d82a <f_write+0x132>
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d828:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	7d1b      	ldrb	r3, [r3, #20]
 800d82e:	b25b      	sxtb	r3, r3
 800d830:	2b00      	cmp	r3, #0
 800d832:	da18      	bge.n	800d866 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d834:	693b      	ldr	r3, [r7, #16]
 800d836:	7858      	ldrb	r0, [r3, #1]
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	6a1a      	ldr	r2, [r3, #32]
 800d842:	2301      	movs	r3, #1
 800d844:	f7fd fb5e 	bl	800af04 <disk_write>
 800d848:	4603      	mov	r3, r0
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d004      	beq.n	800d858 <f_write+0x160>
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	2201      	movs	r2, #1
 800d852:	755a      	strb	r2, [r3, #21]
 800d854:	2301      	movs	r3, #1
 800d856:	e0df      	b.n	800da18 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	7d1b      	ldrb	r3, [r3, #20]
 800d85c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d860:	b2da      	uxtb	r2, r3
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d866:	693a      	ldr	r2, [r7, #16]
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	69db      	ldr	r3, [r3, #28]
 800d86c:	4619      	mov	r1, r3
 800d86e:	4610      	mov	r0, r2
 800d870:	f7fd fed4 	bl	800b61c <clust2sect>
 800d874:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d876:	697b      	ldr	r3, [r7, #20]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d104      	bne.n	800d886 <f_write+0x18e>
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	2202      	movs	r2, #2
 800d880:	755a      	strb	r2, [r3, #21]
 800d882:	2302      	movs	r3, #2
 800d884:	e0c8      	b.n	800da18 <f_write+0x320>
			sect += csect;
 800d886:	697a      	ldr	r2, [r7, #20]
 800d888:	69bb      	ldr	r3, [r7, #24]
 800d88a:	4413      	add	r3, r2
 800d88c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d88e:	693b      	ldr	r3, [r7, #16]
 800d890:	899b      	ldrh	r3, [r3, #12]
 800d892:	461a      	mov	r2, r3
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	fbb3 f3f2 	udiv	r3, r3, r2
 800d89a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d89c:	6a3b      	ldr	r3, [r7, #32]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d043      	beq.n	800d92a <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d8a2:	69ba      	ldr	r2, [r7, #24]
 800d8a4:	6a3b      	ldr	r3, [r7, #32]
 800d8a6:	4413      	add	r3, r2
 800d8a8:	693a      	ldr	r2, [r7, #16]
 800d8aa:	8952      	ldrh	r2, [r2, #10]
 800d8ac:	4293      	cmp	r3, r2
 800d8ae:	d905      	bls.n	800d8bc <f_write+0x1c4>
					cc = fs->csize - csect;
 800d8b0:	693b      	ldr	r3, [r7, #16]
 800d8b2:	895b      	ldrh	r3, [r3, #10]
 800d8b4:	461a      	mov	r2, r3
 800d8b6:	69bb      	ldr	r3, [r7, #24]
 800d8b8:	1ad3      	subs	r3, r2, r3
 800d8ba:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d8bc:	693b      	ldr	r3, [r7, #16]
 800d8be:	7858      	ldrb	r0, [r3, #1]
 800d8c0:	6a3b      	ldr	r3, [r7, #32]
 800d8c2:	697a      	ldr	r2, [r7, #20]
 800d8c4:	69f9      	ldr	r1, [r7, #28]
 800d8c6:	f7fd fb1d 	bl	800af04 <disk_write>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d004      	beq.n	800d8da <f_write+0x1e2>
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	2201      	movs	r2, #1
 800d8d4:	755a      	strb	r2, [r3, #21]
 800d8d6:	2301      	movs	r3, #1
 800d8d8:	e09e      	b.n	800da18 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	6a1a      	ldr	r2, [r3, #32]
 800d8de:	697b      	ldr	r3, [r7, #20]
 800d8e0:	1ad3      	subs	r3, r2, r3
 800d8e2:	6a3a      	ldr	r2, [r7, #32]
 800d8e4:	429a      	cmp	r2, r3
 800d8e6:	d918      	bls.n	800d91a <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	6a1a      	ldr	r2, [r3, #32]
 800d8f2:	697b      	ldr	r3, [r7, #20]
 800d8f4:	1ad3      	subs	r3, r2, r3
 800d8f6:	693a      	ldr	r2, [r7, #16]
 800d8f8:	8992      	ldrh	r2, [r2, #12]
 800d8fa:	fb02 f303 	mul.w	r3, r2, r3
 800d8fe:	69fa      	ldr	r2, [r7, #28]
 800d900:	18d1      	adds	r1, r2, r3
 800d902:	693b      	ldr	r3, [r7, #16]
 800d904:	899b      	ldrh	r3, [r3, #12]
 800d906:	461a      	mov	r2, r3
 800d908:	f7fd fbbc 	bl	800b084 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	7d1b      	ldrb	r3, [r3, #20]
 800d910:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d914:	b2da      	uxtb	r2, r3
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d91a:	693b      	ldr	r3, [r7, #16]
 800d91c:	899b      	ldrh	r3, [r3, #12]
 800d91e:	461a      	mov	r2, r3
 800d920:	6a3b      	ldr	r3, [r7, #32]
 800d922:	fb02 f303 	mul.w	r3, r2, r3
 800d926:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800d928:	e04b      	b.n	800d9c2 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	6a1b      	ldr	r3, [r3, #32]
 800d92e:	697a      	ldr	r2, [r7, #20]
 800d930:	429a      	cmp	r2, r3
 800d932:	d016      	beq.n	800d962 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	699a      	ldr	r2, [r3, #24]
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d93c:	429a      	cmp	r2, r3
 800d93e:	d210      	bcs.n	800d962 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d940:	693b      	ldr	r3, [r7, #16]
 800d942:	7858      	ldrb	r0, [r3, #1]
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d94a:	2301      	movs	r3, #1
 800d94c:	697a      	ldr	r2, [r7, #20]
 800d94e:	f7fd fab9 	bl	800aec4 <disk_read>
 800d952:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d954:	2b00      	cmp	r3, #0
 800d956:	d004      	beq.n	800d962 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	2201      	movs	r2, #1
 800d95c:	755a      	strb	r2, [r3, #21]
 800d95e:	2301      	movs	r3, #1
 800d960:	e05a      	b.n	800da18 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	697a      	ldr	r2, [r7, #20]
 800d966:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d968:	693b      	ldr	r3, [r7, #16]
 800d96a:	899b      	ldrh	r3, [r3, #12]
 800d96c:	4618      	mov	r0, r3
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	699b      	ldr	r3, [r3, #24]
 800d972:	693a      	ldr	r2, [r7, #16]
 800d974:	8992      	ldrh	r2, [r2, #12]
 800d976:	fbb3 f1f2 	udiv	r1, r3, r2
 800d97a:	fb01 f202 	mul.w	r2, r1, r2
 800d97e:	1a9b      	subs	r3, r3, r2
 800d980:	1ac3      	subs	r3, r0, r3
 800d982:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	429a      	cmp	r2, r3
 800d98a:	d901      	bls.n	800d990 <f_write+0x298>
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	699b      	ldr	r3, [r3, #24]
 800d99a:	693a      	ldr	r2, [r7, #16]
 800d99c:	8992      	ldrh	r2, [r2, #12]
 800d99e:	fbb3 f0f2 	udiv	r0, r3, r2
 800d9a2:	fb00 f202 	mul.w	r2, r0, r2
 800d9a6:	1a9b      	subs	r3, r3, r2
 800d9a8:	440b      	add	r3, r1
 800d9aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9ac:	69f9      	ldr	r1, [r7, #28]
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f7fd fb68 	bl	800b084 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	7d1b      	ldrb	r3, [r3, #20]
 800d9b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d9bc:	b2da      	uxtb	r2, r3
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d9c2:	69fa      	ldr	r2, [r7, #28]
 800d9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c6:	4413      	add	r3, r2
 800d9c8:	61fb      	str	r3, [r7, #28]
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	699a      	ldr	r2, [r3, #24]
 800d9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9d0:	441a      	add	r2, r3
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	619a      	str	r2, [r3, #24]
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	68da      	ldr	r2, [r3, #12]
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	699b      	ldr	r3, [r3, #24]
 800d9de:	429a      	cmp	r2, r3
 800d9e0:	bf38      	it	cc
 800d9e2:	461a      	movcc	r2, r3
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	60da      	str	r2, [r3, #12]
 800d9e8:	683b      	ldr	r3, [r7, #0]
 800d9ea:	681a      	ldr	r2, [r3, #0]
 800d9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ee:	441a      	add	r2, r3
 800d9f0:	683b      	ldr	r3, [r7, #0]
 800d9f2:	601a      	str	r2, [r3, #0]
 800d9f4:	687a      	ldr	r2, [r7, #4]
 800d9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9f8:	1ad3      	subs	r3, r2, r3
 800d9fa:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	f47f aeb5 	bne.w	800d76e <f_write+0x76>
 800da04:	e000      	b.n	800da08 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800da06:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	7d1b      	ldrb	r3, [r3, #20]
 800da0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da10:	b2da      	uxtb	r2, r3
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800da16:	2300      	movs	r3, #0
}
 800da18:	4618      	mov	r0, r3
 800da1a:	3730      	adds	r7, #48	; 0x30
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd80      	pop	{r7, pc}

0800da20 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800da20:	b580      	push	{r7, lr}
 800da22:	b086      	sub	sp, #24
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	f107 0208 	add.w	r2, r7, #8
 800da2e:	4611      	mov	r1, r2
 800da30:	4618      	mov	r0, r3
 800da32:	f7ff fc19 	bl	800d268 <validate>
 800da36:	4603      	mov	r3, r0
 800da38:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800da3a:	7dfb      	ldrb	r3, [r7, #23]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d168      	bne.n	800db12 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	7d1b      	ldrb	r3, [r3, #20]
 800da44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d062      	beq.n	800db12 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	7d1b      	ldrb	r3, [r3, #20]
 800da50:	b25b      	sxtb	r3, r3
 800da52:	2b00      	cmp	r3, #0
 800da54:	da15      	bge.n	800da82 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800da56:	68bb      	ldr	r3, [r7, #8]
 800da58:	7858      	ldrb	r0, [r3, #1]
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	6a1a      	ldr	r2, [r3, #32]
 800da64:	2301      	movs	r3, #1
 800da66:	f7fd fa4d 	bl	800af04 <disk_write>
 800da6a:	4603      	mov	r3, r0
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d001      	beq.n	800da74 <f_sync+0x54>
 800da70:	2301      	movs	r3, #1
 800da72:	e04f      	b.n	800db14 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	7d1b      	ldrb	r3, [r3, #20]
 800da78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da7c:	b2da      	uxtb	r2, r3
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800da82:	f7fd f981 	bl	800ad88 <get_fattime>
 800da86:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800da88:	68ba      	ldr	r2, [r7, #8]
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da8e:	4619      	mov	r1, r3
 800da90:	4610      	mov	r0, r2
 800da92:	f7fd fd25 	bl	800b4e0 <move_window>
 800da96:	4603      	mov	r3, r0
 800da98:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800da9a:	7dfb      	ldrb	r3, [r7, #23]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d138      	bne.n	800db12 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daa4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	330b      	adds	r3, #11
 800daaa:	781a      	ldrb	r2, [r3, #0]
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	330b      	adds	r3, #11
 800dab0:	f042 0220 	orr.w	r2, r2, #32
 800dab4:	b2d2      	uxtb	r2, r2
 800dab6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	6818      	ldr	r0, [r3, #0]
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	689b      	ldr	r3, [r3, #8]
 800dac0:	461a      	mov	r2, r3
 800dac2:	68f9      	ldr	r1, [r7, #12]
 800dac4:	f7fe fab1 	bl	800c02a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	f103 021c 	add.w	r2, r3, #28
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	68db      	ldr	r3, [r3, #12]
 800dad2:	4619      	mov	r1, r3
 800dad4:	4610      	mov	r0, r2
 800dad6:	f7fd faa9 	bl	800b02c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	3316      	adds	r3, #22
 800dade:	6939      	ldr	r1, [r7, #16]
 800dae0:	4618      	mov	r0, r3
 800dae2:	f7fd faa3 	bl	800b02c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	3312      	adds	r3, #18
 800daea:	2100      	movs	r1, #0
 800daec:	4618      	mov	r0, r3
 800daee:	f7fd fa82 	bl	800aff6 <st_word>
					fs->wflag = 1;
 800daf2:	68bb      	ldr	r3, [r7, #8]
 800daf4:	2201      	movs	r2, #1
 800daf6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800daf8:	68bb      	ldr	r3, [r7, #8]
 800dafa:	4618      	mov	r0, r3
 800dafc:	f7fd fd1e 	bl	800b53c <sync_fs>
 800db00:	4603      	mov	r3, r0
 800db02:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	7d1b      	ldrb	r3, [r3, #20]
 800db08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db0c:	b2da      	uxtb	r2, r3
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800db12:	7dfb      	ldrb	r3, [r7, #23]
}
 800db14:	4618      	mov	r0, r3
 800db16:	3718      	adds	r7, #24
 800db18:	46bd      	mov	sp, r7
 800db1a:	bd80      	pop	{r7, pc}

0800db1c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b084      	sub	sp, #16
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800db24:	6878      	ldr	r0, [r7, #4]
 800db26:	f7ff ff7b 	bl	800da20 <f_sync>
 800db2a:	4603      	mov	r3, r0
 800db2c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800db2e:	7bfb      	ldrb	r3, [r7, #15]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d118      	bne.n	800db66 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f107 0208 	add.w	r2, r7, #8
 800db3a:	4611      	mov	r1, r2
 800db3c:	4618      	mov	r0, r3
 800db3e:	f7ff fb93 	bl	800d268 <validate>
 800db42:	4603      	mov	r3, r0
 800db44:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800db46:	7bfb      	ldrb	r3, [r7, #15]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d10c      	bne.n	800db66 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	691b      	ldr	r3, [r3, #16]
 800db50:	4618      	mov	r0, r3
 800db52:	f7fd fc21 	bl	800b398 <dec_lock>
 800db56:	4603      	mov	r3, r0
 800db58:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800db5a:	7bfb      	ldrb	r3, [r7, #15]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d102      	bne.n	800db66 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2200      	movs	r2, #0
 800db64:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800db66:	7bfb      	ldrb	r3, [r7, #15]
}
 800db68:	4618      	mov	r0, r3
 800db6a:	3710      	adds	r7, #16
 800db6c:	46bd      	mov	sp, r7
 800db6e:	bd80      	pop	{r7, pc}

0800db70 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b092      	sub	sp, #72	; 0x48
 800db74:	af00      	add	r7, sp, #0
 800db76:	60f8      	str	r0, [r7, #12]
 800db78:	60b9      	str	r1, [r7, #8]
 800db7a:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800db7c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800db80:	f107 030c 	add.w	r3, r7, #12
 800db84:	2200      	movs	r2, #0
 800db86:	4618      	mov	r0, r3
 800db88:	f7ff f8e6 	bl	800cd58 <find_volume>
 800db8c:	4603      	mov	r3, r0
 800db8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800db92:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800db96:	2b00      	cmp	r3, #0
 800db98:	f040 8099 	bne.w	800dcce <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800db9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800dba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dba4:	699a      	ldr	r2, [r3, #24]
 800dba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dba8:	6a1b      	ldr	r3, [r3, #32]
 800dbaa:	3b02      	subs	r3, #2
 800dbac:	429a      	cmp	r2, r3
 800dbae:	d804      	bhi.n	800dbba <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800dbb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbb2:	699a      	ldr	r2, [r3, #24]
 800dbb4:	68bb      	ldr	r3, [r7, #8]
 800dbb6:	601a      	str	r2, [r3, #0]
 800dbb8:	e089      	b.n	800dcce <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800dbba:	2300      	movs	r3, #0
 800dbbc:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800dbbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbc0:	781b      	ldrb	r3, [r3, #0]
 800dbc2:	2b01      	cmp	r3, #1
 800dbc4:	d128      	bne.n	800dc18 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800dbc6:	2302      	movs	r3, #2
 800dbc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dbca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbcc:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800dbce:	f107 0314 	add.w	r3, r7, #20
 800dbd2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	f7fd fd40 	bl	800b65a <get_fat>
 800dbda:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800dbdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbe2:	d103      	bne.n	800dbec <f_getfree+0x7c>
 800dbe4:	2301      	movs	r3, #1
 800dbe6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800dbea:	e063      	b.n	800dcb4 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800dbec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbee:	2b01      	cmp	r3, #1
 800dbf0:	d103      	bne.n	800dbfa <f_getfree+0x8a>
 800dbf2:	2302      	movs	r3, #2
 800dbf4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800dbf8:	e05c      	b.n	800dcb4 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800dbfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d102      	bne.n	800dc06 <f_getfree+0x96>
 800dc00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc02:	3301      	adds	r3, #1
 800dc04:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800dc06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc08:	3301      	adds	r3, #1
 800dc0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dc0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc0e:	6a1b      	ldr	r3, [r3, #32]
 800dc10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dc12:	429a      	cmp	r2, r3
 800dc14:	d3db      	bcc.n	800dbce <f_getfree+0x5e>
 800dc16:	e04d      	b.n	800dcb4 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800dc18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc1a:	6a1b      	ldr	r3, [r3, #32]
 800dc1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dc1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc22:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800dc24:	2300      	movs	r3, #0
 800dc26:	637b      	str	r3, [r7, #52]	; 0x34
 800dc28:	2300      	movs	r3, #0
 800dc2a:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800dc2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d113      	bne.n	800dc5a <f_getfree+0xea>
							res = move_window(fs, sect++);
 800dc32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc36:	1c5a      	adds	r2, r3, #1
 800dc38:	63ba      	str	r2, [r7, #56]	; 0x38
 800dc3a:	4619      	mov	r1, r3
 800dc3c:	f7fd fc50 	bl	800b4e0 <move_window>
 800dc40:	4603      	mov	r3, r0
 800dc42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800dc46:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d131      	bne.n	800dcb2 <f_getfree+0x142>
							p = fs->win;
 800dc4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc50:	333c      	adds	r3, #60	; 0x3c
 800dc52:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800dc54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc56:	899b      	ldrh	r3, [r3, #12]
 800dc58:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800dc5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc5c:	781b      	ldrb	r3, [r3, #0]
 800dc5e:	2b02      	cmp	r3, #2
 800dc60:	d10f      	bne.n	800dc82 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800dc62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dc64:	f7fd f98c 	bl	800af80 <ld_word>
 800dc68:	4603      	mov	r3, r0
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d102      	bne.n	800dc74 <f_getfree+0x104>
 800dc6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc70:	3301      	adds	r3, #1
 800dc72:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800dc74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc76:	3302      	adds	r3, #2
 800dc78:	633b      	str	r3, [r7, #48]	; 0x30
 800dc7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc7c:	3b02      	subs	r3, #2
 800dc7e:	637b      	str	r3, [r7, #52]	; 0x34
 800dc80:	e010      	b.n	800dca4 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800dc82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dc84:	f7fd f994 	bl	800afb0 <ld_dword>
 800dc88:	4603      	mov	r3, r0
 800dc8a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d102      	bne.n	800dc98 <f_getfree+0x128>
 800dc92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc94:	3301      	adds	r3, #1
 800dc96:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800dc98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc9a:	3304      	adds	r3, #4
 800dc9c:	633b      	str	r3, [r7, #48]	; 0x30
 800dc9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dca0:	3b04      	subs	r3, #4
 800dca2:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800dca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dca6:	3b01      	subs	r3, #1
 800dca8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dcaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d1bd      	bne.n	800dc2c <f_getfree+0xbc>
 800dcb0:	e000      	b.n	800dcb4 <f_getfree+0x144>
							if (res != FR_OK) break;
 800dcb2:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800dcb4:	68bb      	ldr	r3, [r7, #8]
 800dcb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dcb8:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800dcba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcbc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dcbe:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800dcc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcc2:	791a      	ldrb	r2, [r3, #4]
 800dcc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcc6:	f042 0201 	orr.w	r2, r2, #1
 800dcca:	b2d2      	uxtb	r2, r2
 800dccc:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800dcce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	3748      	adds	r7, #72	; 0x48
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	bd80      	pop	{r7, pc}

0800dcda <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800dcda:	b580      	push	{r7, lr}
 800dcdc:	b084      	sub	sp, #16
 800dcde:	af00      	add	r7, sp, #0
 800dce0:	6078      	str	r0, [r7, #4]
 800dce2:	460b      	mov	r3, r1
 800dce4:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800dce6:	78fb      	ldrb	r3, [r7, #3]
 800dce8:	2b0a      	cmp	r3, #10
 800dcea:	d103      	bne.n	800dcf4 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800dcec:	210d      	movs	r1, #13
 800dcee:	6878      	ldr	r0, [r7, #4]
 800dcf0:	f7ff fff3 	bl	800dcda <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	685b      	ldr	r3, [r3, #4]
 800dcf8:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	db25      	blt.n	800dd4c <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	1c5a      	adds	r2, r3, #1
 800dd04:	60fa      	str	r2, [r7, #12]
 800dd06:	687a      	ldr	r2, [r7, #4]
 800dd08:	4413      	add	r3, r2
 800dd0a:	78fa      	ldrb	r2, [r7, #3]
 800dd0c:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	2b3c      	cmp	r3, #60	; 0x3c
 800dd12:	dd12      	ble.n	800dd3a <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	6818      	ldr	r0, [r3, #0]
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	f103 010c 	add.w	r1, r3, #12
 800dd1e:	68fa      	ldr	r2, [r7, #12]
 800dd20:	f107 0308 	add.w	r3, r7, #8
 800dd24:	f7ff fce8 	bl	800d6f8 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800dd28:	68ba      	ldr	r2, [r7, #8]
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	429a      	cmp	r2, r3
 800dd2e:	d101      	bne.n	800dd34 <putc_bfd+0x5a>
 800dd30:	2300      	movs	r3, #0
 800dd32:	e001      	b.n	800dd38 <putc_bfd+0x5e>
 800dd34:	f04f 33ff 	mov.w	r3, #4294967295
 800dd38:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	68fa      	ldr	r2, [r7, #12]
 800dd3e:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	689b      	ldr	r3, [r3, #8]
 800dd44:	1c5a      	adds	r2, r3, #1
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	609a      	str	r2, [r3, #8]
 800dd4a:	e000      	b.n	800dd4e <putc_bfd+0x74>
	if (i < 0) return;
 800dd4c:	bf00      	nop
}
 800dd4e:	3710      	adds	r7, #16
 800dd50:	46bd      	mov	sp, r7
 800dd52:	bd80      	pop	{r7, pc}

0800dd54 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b084      	sub	sp, #16
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	685b      	ldr	r3, [r3, #4]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	db16      	blt.n	800dd92 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	6818      	ldr	r0, [r3, #0]
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	f103 010c 	add.w	r1, r3, #12
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	685b      	ldr	r3, [r3, #4]
 800dd72:	461a      	mov	r2, r3
 800dd74:	f107 030c 	add.w	r3, r7, #12
 800dd78:	f7ff fcbe 	bl	800d6f8 <f_write>
 800dd7c:	4603      	mov	r3, r0
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d107      	bne.n	800dd92 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	685b      	ldr	r3, [r3, #4]
 800dd86:	68fa      	ldr	r2, [r7, #12]
 800dd88:	4293      	cmp	r3, r2
 800dd8a:	d102      	bne.n	800dd92 <putc_flush+0x3e>
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	689b      	ldr	r3, [r3, #8]
 800dd90:	e001      	b.n	800dd96 <putc_flush+0x42>
	return EOF;
 800dd92:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dd96:	4618      	mov	r0, r3
 800dd98:	3710      	adds	r7, #16
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	bd80      	pop	{r7, pc}

0800dd9e <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800dd9e:	b480      	push	{r7}
 800dda0:	b083      	sub	sp, #12
 800dda2:	af00      	add	r7, sp, #0
 800dda4:	6078      	str	r0, [r7, #4]
 800dda6:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	683a      	ldr	r2, [r7, #0]
 800ddac:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	605a      	str	r2, [r3, #4]
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	685a      	ldr	r2, [r3, #4]
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	609a      	str	r2, [r3, #8]
}
 800ddbc:	bf00      	nop
 800ddbe:	370c      	adds	r7, #12
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc6:	4770      	bx	lr

0800ddc8 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b096      	sub	sp, #88	; 0x58
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
 800ddd0:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800ddd2:	f107 030c 	add.w	r3, r7, #12
 800ddd6:	6839      	ldr	r1, [r7, #0]
 800ddd8:	4618      	mov	r0, r3
 800ddda:	f7ff ffe0 	bl	800dd9e <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800ddde:	e009      	b.n	800ddf4 <f_puts+0x2c>
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	1c5a      	adds	r2, r3, #1
 800dde4:	607a      	str	r2, [r7, #4]
 800dde6:	781a      	ldrb	r2, [r3, #0]
 800dde8:	f107 030c 	add.w	r3, r7, #12
 800ddec:	4611      	mov	r1, r2
 800ddee:	4618      	mov	r0, r3
 800ddf0:	f7ff ff73 	bl	800dcda <putc_bfd>
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	781b      	ldrb	r3, [r3, #0]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d1f1      	bne.n	800dde0 <f_puts+0x18>
	return putc_flush(&pb);
 800ddfc:	f107 030c 	add.w	r3, r7, #12
 800de00:	4618      	mov	r0, r3
 800de02:	f7ff ffa7 	bl	800dd54 <putc_flush>
 800de06:	4603      	mov	r3, r0
}
 800de08:	4618      	mov	r0, r3
 800de0a:	3758      	adds	r7, #88	; 0x58
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bd80      	pop	{r7, pc}

0800de10 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800de10:	b480      	push	{r7}
 800de12:	b087      	sub	sp, #28
 800de14:	af00      	add	r7, sp, #0
 800de16:	60f8      	str	r0, [r7, #12]
 800de18:	60b9      	str	r1, [r7, #8]
 800de1a:	4613      	mov	r3, r2
 800de1c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800de1e:	2301      	movs	r3, #1
 800de20:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800de22:	2300      	movs	r3, #0
 800de24:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800de26:	4b1f      	ldr	r3, [pc, #124]	; (800dea4 <FATFS_LinkDriverEx+0x94>)
 800de28:	7a5b      	ldrb	r3, [r3, #9]
 800de2a:	b2db      	uxtb	r3, r3
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d131      	bne.n	800de94 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800de30:	4b1c      	ldr	r3, [pc, #112]	; (800dea4 <FATFS_LinkDriverEx+0x94>)
 800de32:	7a5b      	ldrb	r3, [r3, #9]
 800de34:	b2db      	uxtb	r3, r3
 800de36:	461a      	mov	r2, r3
 800de38:	4b1a      	ldr	r3, [pc, #104]	; (800dea4 <FATFS_LinkDriverEx+0x94>)
 800de3a:	2100      	movs	r1, #0
 800de3c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800de3e:	4b19      	ldr	r3, [pc, #100]	; (800dea4 <FATFS_LinkDriverEx+0x94>)
 800de40:	7a5b      	ldrb	r3, [r3, #9]
 800de42:	b2db      	uxtb	r3, r3
 800de44:	4a17      	ldr	r2, [pc, #92]	; (800dea4 <FATFS_LinkDriverEx+0x94>)
 800de46:	009b      	lsls	r3, r3, #2
 800de48:	4413      	add	r3, r2
 800de4a:	68fa      	ldr	r2, [r7, #12]
 800de4c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800de4e:	4b15      	ldr	r3, [pc, #84]	; (800dea4 <FATFS_LinkDriverEx+0x94>)
 800de50:	7a5b      	ldrb	r3, [r3, #9]
 800de52:	b2db      	uxtb	r3, r3
 800de54:	461a      	mov	r2, r3
 800de56:	4b13      	ldr	r3, [pc, #76]	; (800dea4 <FATFS_LinkDriverEx+0x94>)
 800de58:	4413      	add	r3, r2
 800de5a:	79fa      	ldrb	r2, [r7, #7]
 800de5c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800de5e:	4b11      	ldr	r3, [pc, #68]	; (800dea4 <FATFS_LinkDriverEx+0x94>)
 800de60:	7a5b      	ldrb	r3, [r3, #9]
 800de62:	b2db      	uxtb	r3, r3
 800de64:	1c5a      	adds	r2, r3, #1
 800de66:	b2d1      	uxtb	r1, r2
 800de68:	4a0e      	ldr	r2, [pc, #56]	; (800dea4 <FATFS_LinkDriverEx+0x94>)
 800de6a:	7251      	strb	r1, [r2, #9]
 800de6c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800de6e:	7dbb      	ldrb	r3, [r7, #22]
 800de70:	3330      	adds	r3, #48	; 0x30
 800de72:	b2da      	uxtb	r2, r3
 800de74:	68bb      	ldr	r3, [r7, #8]
 800de76:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800de78:	68bb      	ldr	r3, [r7, #8]
 800de7a:	3301      	adds	r3, #1
 800de7c:	223a      	movs	r2, #58	; 0x3a
 800de7e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800de80:	68bb      	ldr	r3, [r7, #8]
 800de82:	3302      	adds	r3, #2
 800de84:	222f      	movs	r2, #47	; 0x2f
 800de86:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800de88:	68bb      	ldr	r3, [r7, #8]
 800de8a:	3303      	adds	r3, #3
 800de8c:	2200      	movs	r2, #0
 800de8e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800de90:	2300      	movs	r3, #0
 800de92:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800de94:	7dfb      	ldrb	r3, [r7, #23]
}
 800de96:	4618      	mov	r0, r3
 800de98:	371c      	adds	r7, #28
 800de9a:	46bd      	mov	sp, r7
 800de9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea0:	4770      	bx	lr
 800dea2:	bf00      	nop
 800dea4:	20003dd8 	.word	0x20003dd8

0800dea8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b082      	sub	sp, #8
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
 800deb0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800deb2:	2200      	movs	r2, #0
 800deb4:	6839      	ldr	r1, [r7, #0]
 800deb6:	6878      	ldr	r0, [r7, #4]
 800deb8:	f7ff ffaa 	bl	800de10 <FATFS_LinkDriverEx>
 800debc:	4603      	mov	r3, r0
}
 800debe:	4618      	mov	r0, r3
 800dec0:	3708      	adds	r7, #8
 800dec2:	46bd      	mov	sp, r7
 800dec4:	bd80      	pop	{r7, pc}
	...

0800dec8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800dec8:	b480      	push	{r7}
 800deca:	b085      	sub	sp, #20
 800decc:	af00      	add	r7, sp, #0
 800dece:	4603      	mov	r3, r0
 800ded0:	6039      	str	r1, [r7, #0]
 800ded2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800ded4:	88fb      	ldrh	r3, [r7, #6]
 800ded6:	2b7f      	cmp	r3, #127	; 0x7f
 800ded8:	d802      	bhi.n	800dee0 <ff_convert+0x18>
		c = chr;
 800deda:	88fb      	ldrh	r3, [r7, #6]
 800dedc:	81fb      	strh	r3, [r7, #14]
 800dede:	e025      	b.n	800df2c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800dee0:	683b      	ldr	r3, [r7, #0]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d00b      	beq.n	800defe <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800dee6:	88fb      	ldrh	r3, [r7, #6]
 800dee8:	2bff      	cmp	r3, #255	; 0xff
 800deea:	d805      	bhi.n	800def8 <ff_convert+0x30>
 800deec:	88fb      	ldrh	r3, [r7, #6]
 800deee:	3b80      	subs	r3, #128	; 0x80
 800def0:	4a12      	ldr	r2, [pc, #72]	; (800df3c <ff_convert+0x74>)
 800def2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800def6:	e000      	b.n	800defa <ff_convert+0x32>
 800def8:	2300      	movs	r3, #0
 800defa:	81fb      	strh	r3, [r7, #14]
 800defc:	e016      	b.n	800df2c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800defe:	2300      	movs	r3, #0
 800df00:	81fb      	strh	r3, [r7, #14]
 800df02:	e009      	b.n	800df18 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800df04:	89fb      	ldrh	r3, [r7, #14]
 800df06:	4a0d      	ldr	r2, [pc, #52]	; (800df3c <ff_convert+0x74>)
 800df08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800df0c:	88fa      	ldrh	r2, [r7, #6]
 800df0e:	429a      	cmp	r2, r3
 800df10:	d006      	beq.n	800df20 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800df12:	89fb      	ldrh	r3, [r7, #14]
 800df14:	3301      	adds	r3, #1
 800df16:	81fb      	strh	r3, [r7, #14]
 800df18:	89fb      	ldrh	r3, [r7, #14]
 800df1a:	2b7f      	cmp	r3, #127	; 0x7f
 800df1c:	d9f2      	bls.n	800df04 <ff_convert+0x3c>
 800df1e:	e000      	b.n	800df22 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800df20:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800df22:	89fb      	ldrh	r3, [r7, #14]
 800df24:	3380      	adds	r3, #128	; 0x80
 800df26:	b29b      	uxth	r3, r3
 800df28:	b2db      	uxtb	r3, r3
 800df2a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800df2c:	89fb      	ldrh	r3, [r7, #14]
}
 800df2e:	4618      	mov	r0, r3
 800df30:	3714      	adds	r7, #20
 800df32:	46bd      	mov	sp, r7
 800df34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df38:	4770      	bx	lr
 800df3a:	bf00      	nop
 800df3c:	080142ec 	.word	0x080142ec

0800df40 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800df40:	b480      	push	{r7}
 800df42:	b087      	sub	sp, #28
 800df44:	af00      	add	r7, sp, #0
 800df46:	4603      	mov	r3, r0
 800df48:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800df4a:	88fb      	ldrh	r3, [r7, #6]
 800df4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800df50:	d201      	bcs.n	800df56 <ff_wtoupper+0x16>
 800df52:	4b3e      	ldr	r3, [pc, #248]	; (800e04c <ff_wtoupper+0x10c>)
 800df54:	e000      	b.n	800df58 <ff_wtoupper+0x18>
 800df56:	4b3e      	ldr	r3, [pc, #248]	; (800e050 <ff_wtoupper+0x110>)
 800df58:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800df5a:	697b      	ldr	r3, [r7, #20]
 800df5c:	1c9a      	adds	r2, r3, #2
 800df5e:	617a      	str	r2, [r7, #20]
 800df60:	881b      	ldrh	r3, [r3, #0]
 800df62:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800df64:	8a7b      	ldrh	r3, [r7, #18]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d068      	beq.n	800e03c <ff_wtoupper+0xfc>
 800df6a:	88fa      	ldrh	r2, [r7, #6]
 800df6c:	8a7b      	ldrh	r3, [r7, #18]
 800df6e:	429a      	cmp	r2, r3
 800df70:	d364      	bcc.n	800e03c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800df72:	697b      	ldr	r3, [r7, #20]
 800df74:	1c9a      	adds	r2, r3, #2
 800df76:	617a      	str	r2, [r7, #20]
 800df78:	881b      	ldrh	r3, [r3, #0]
 800df7a:	823b      	strh	r3, [r7, #16]
 800df7c:	8a3b      	ldrh	r3, [r7, #16]
 800df7e:	0a1b      	lsrs	r3, r3, #8
 800df80:	81fb      	strh	r3, [r7, #14]
 800df82:	8a3b      	ldrh	r3, [r7, #16]
 800df84:	b2db      	uxtb	r3, r3
 800df86:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800df88:	88fa      	ldrh	r2, [r7, #6]
 800df8a:	8a79      	ldrh	r1, [r7, #18]
 800df8c:	8a3b      	ldrh	r3, [r7, #16]
 800df8e:	440b      	add	r3, r1
 800df90:	429a      	cmp	r2, r3
 800df92:	da49      	bge.n	800e028 <ff_wtoupper+0xe8>
			switch (cmd) {
 800df94:	89fb      	ldrh	r3, [r7, #14]
 800df96:	2b08      	cmp	r3, #8
 800df98:	d84f      	bhi.n	800e03a <ff_wtoupper+0xfa>
 800df9a:	a201      	add	r2, pc, #4	; (adr r2, 800dfa0 <ff_wtoupper+0x60>)
 800df9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfa0:	0800dfc5 	.word	0x0800dfc5
 800dfa4:	0800dfd7 	.word	0x0800dfd7
 800dfa8:	0800dfed 	.word	0x0800dfed
 800dfac:	0800dff5 	.word	0x0800dff5
 800dfb0:	0800dffd 	.word	0x0800dffd
 800dfb4:	0800e005 	.word	0x0800e005
 800dfb8:	0800e00d 	.word	0x0800e00d
 800dfbc:	0800e015 	.word	0x0800e015
 800dfc0:	0800e01d 	.word	0x0800e01d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800dfc4:	88fa      	ldrh	r2, [r7, #6]
 800dfc6:	8a7b      	ldrh	r3, [r7, #18]
 800dfc8:	1ad3      	subs	r3, r2, r3
 800dfca:	005b      	lsls	r3, r3, #1
 800dfcc:	697a      	ldr	r2, [r7, #20]
 800dfce:	4413      	add	r3, r2
 800dfd0:	881b      	ldrh	r3, [r3, #0]
 800dfd2:	80fb      	strh	r3, [r7, #6]
 800dfd4:	e027      	b.n	800e026 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800dfd6:	88fa      	ldrh	r2, [r7, #6]
 800dfd8:	8a7b      	ldrh	r3, [r7, #18]
 800dfda:	1ad3      	subs	r3, r2, r3
 800dfdc:	b29b      	uxth	r3, r3
 800dfde:	f003 0301 	and.w	r3, r3, #1
 800dfe2:	b29b      	uxth	r3, r3
 800dfe4:	88fa      	ldrh	r2, [r7, #6]
 800dfe6:	1ad3      	subs	r3, r2, r3
 800dfe8:	80fb      	strh	r3, [r7, #6]
 800dfea:	e01c      	b.n	800e026 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800dfec:	88fb      	ldrh	r3, [r7, #6]
 800dfee:	3b10      	subs	r3, #16
 800dff0:	80fb      	strh	r3, [r7, #6]
 800dff2:	e018      	b.n	800e026 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800dff4:	88fb      	ldrh	r3, [r7, #6]
 800dff6:	3b20      	subs	r3, #32
 800dff8:	80fb      	strh	r3, [r7, #6]
 800dffa:	e014      	b.n	800e026 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800dffc:	88fb      	ldrh	r3, [r7, #6]
 800dffe:	3b30      	subs	r3, #48	; 0x30
 800e000:	80fb      	strh	r3, [r7, #6]
 800e002:	e010      	b.n	800e026 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800e004:	88fb      	ldrh	r3, [r7, #6]
 800e006:	3b1a      	subs	r3, #26
 800e008:	80fb      	strh	r3, [r7, #6]
 800e00a:	e00c      	b.n	800e026 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800e00c:	88fb      	ldrh	r3, [r7, #6]
 800e00e:	3308      	adds	r3, #8
 800e010:	80fb      	strh	r3, [r7, #6]
 800e012:	e008      	b.n	800e026 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800e014:	88fb      	ldrh	r3, [r7, #6]
 800e016:	3b50      	subs	r3, #80	; 0x50
 800e018:	80fb      	strh	r3, [r7, #6]
 800e01a:	e004      	b.n	800e026 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800e01c:	88fb      	ldrh	r3, [r7, #6]
 800e01e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800e022:	80fb      	strh	r3, [r7, #6]
 800e024:	bf00      	nop
			}
			break;
 800e026:	e008      	b.n	800e03a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800e028:	89fb      	ldrh	r3, [r7, #14]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d195      	bne.n	800df5a <ff_wtoupper+0x1a>
 800e02e:	8a3b      	ldrh	r3, [r7, #16]
 800e030:	005b      	lsls	r3, r3, #1
 800e032:	697a      	ldr	r2, [r7, #20]
 800e034:	4413      	add	r3, r2
 800e036:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800e038:	e78f      	b.n	800df5a <ff_wtoupper+0x1a>
			break;
 800e03a:	bf00      	nop
	}

	return chr;
 800e03c:	88fb      	ldrh	r3, [r7, #6]
}
 800e03e:	4618      	mov	r0, r3
 800e040:	371c      	adds	r7, #28
 800e042:	46bd      	mov	sp, r7
 800e044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e048:	4770      	bx	lr
 800e04a:	bf00      	nop
 800e04c:	080143ec 	.word	0x080143ec
 800e050:	080145e0 	.word	0x080145e0

0800e054 <cos>:
 800e054:	b530      	push	{r4, r5, lr}
 800e056:	4d20      	ldr	r5, [pc, #128]	; (800e0d8 <cos+0x84>)
 800e058:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800e05c:	42ac      	cmp	r4, r5
 800e05e:	b087      	sub	sp, #28
 800e060:	4602      	mov	r2, r0
 800e062:	460b      	mov	r3, r1
 800e064:	dc06      	bgt.n	800e074 <cos+0x20>
 800e066:	2200      	movs	r2, #0
 800e068:	2300      	movs	r3, #0
 800e06a:	b007      	add	sp, #28
 800e06c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e070:	f000 b882 	b.w	800e178 <__kernel_cos>
 800e074:	4d19      	ldr	r5, [pc, #100]	; (800e0dc <cos+0x88>)
 800e076:	42ac      	cmp	r4, r5
 800e078:	dd03      	ble.n	800e082 <cos+0x2e>
 800e07a:	f7f2 f925 	bl	80002c8 <__aeabi_dsub>
 800e07e:	b007      	add	sp, #28
 800e080:	bd30      	pop	{r4, r5, pc}
 800e082:	aa02      	add	r2, sp, #8
 800e084:	f000 f9f0 	bl	800e468 <__ieee754_rem_pio2>
 800e088:	f000 0003 	and.w	r0, r0, #3
 800e08c:	2801      	cmp	r0, #1
 800e08e:	d009      	beq.n	800e0a4 <cos+0x50>
 800e090:	2802      	cmp	r0, #2
 800e092:	d011      	beq.n	800e0b8 <cos+0x64>
 800e094:	b9b8      	cbnz	r0, 800e0c6 <cos+0x72>
 800e096:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e09a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e09e:	f000 f86b 	bl	800e178 <__kernel_cos>
 800e0a2:	e7ec      	b.n	800e07e <cos+0x2a>
 800e0a4:	9000      	str	r0, [sp, #0]
 800e0a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e0aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e0ae:	f000 f923 	bl	800e2f8 <__kernel_sin>
 800e0b2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800e0b6:	e7e2      	b.n	800e07e <cos+0x2a>
 800e0b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e0bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e0c0:	f000 f85a 	bl	800e178 <__kernel_cos>
 800e0c4:	e7f5      	b.n	800e0b2 <cos+0x5e>
 800e0c6:	2301      	movs	r3, #1
 800e0c8:	9300      	str	r3, [sp, #0]
 800e0ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e0ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e0d2:	f000 f911 	bl	800e2f8 <__kernel_sin>
 800e0d6:	e7d2      	b.n	800e07e <cos+0x2a>
 800e0d8:	3fe921fb 	.word	0x3fe921fb
 800e0dc:	7fefffff 	.word	0x7fefffff

0800e0e0 <fabs>:
 800e0e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e0e4:	4619      	mov	r1, r3
 800e0e6:	4770      	bx	lr

0800e0e8 <sin>:
 800e0e8:	b530      	push	{r4, r5, lr}
 800e0ea:	4d20      	ldr	r5, [pc, #128]	; (800e16c <sin+0x84>)
 800e0ec:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800e0f0:	42ac      	cmp	r4, r5
 800e0f2:	b087      	sub	sp, #28
 800e0f4:	4602      	mov	r2, r0
 800e0f6:	460b      	mov	r3, r1
 800e0f8:	dc06      	bgt.n	800e108 <sin+0x20>
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	9300      	str	r3, [sp, #0]
 800e0fe:	2200      	movs	r2, #0
 800e100:	2300      	movs	r3, #0
 800e102:	f000 f8f9 	bl	800e2f8 <__kernel_sin>
 800e106:	e004      	b.n	800e112 <sin+0x2a>
 800e108:	4d19      	ldr	r5, [pc, #100]	; (800e170 <sin+0x88>)
 800e10a:	42ac      	cmp	r4, r5
 800e10c:	dd03      	ble.n	800e116 <sin+0x2e>
 800e10e:	f7f2 f8db 	bl	80002c8 <__aeabi_dsub>
 800e112:	b007      	add	sp, #28
 800e114:	bd30      	pop	{r4, r5, pc}
 800e116:	aa02      	add	r2, sp, #8
 800e118:	f000 f9a6 	bl	800e468 <__ieee754_rem_pio2>
 800e11c:	f000 0003 	and.w	r0, r0, #3
 800e120:	2801      	cmp	r0, #1
 800e122:	d009      	beq.n	800e138 <sin+0x50>
 800e124:	2802      	cmp	r0, #2
 800e126:	d00e      	beq.n	800e146 <sin+0x5e>
 800e128:	b9c0      	cbnz	r0, 800e15c <sin+0x74>
 800e12a:	2301      	movs	r3, #1
 800e12c:	9300      	str	r3, [sp, #0]
 800e12e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e132:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e136:	e7e4      	b.n	800e102 <sin+0x1a>
 800e138:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e13c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e140:	f000 f81a 	bl	800e178 <__kernel_cos>
 800e144:	e7e5      	b.n	800e112 <sin+0x2a>
 800e146:	2301      	movs	r3, #1
 800e148:	9300      	str	r3, [sp, #0]
 800e14a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e14e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e152:	f000 f8d1 	bl	800e2f8 <__kernel_sin>
 800e156:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800e15a:	e7da      	b.n	800e112 <sin+0x2a>
 800e15c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e160:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e164:	f000 f808 	bl	800e178 <__kernel_cos>
 800e168:	e7f5      	b.n	800e156 <sin+0x6e>
 800e16a:	bf00      	nop
 800e16c:	3fe921fb 	.word	0x3fe921fb
 800e170:	7fefffff 	.word	0x7fefffff
 800e174:	00000000 	.word	0x00000000

0800e178 <__kernel_cos>:
 800e178:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e17c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e180:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800e184:	ed2d 8b02 	vpush	{d8}
 800e188:	4680      	mov	r8, r0
 800e18a:	ec43 2b18 	vmov	d8, r2, r3
 800e18e:	4689      	mov	r9, r1
 800e190:	da04      	bge.n	800e19c <__kernel_cos+0x24>
 800e192:	f7f2 fd01 	bl	8000b98 <__aeabi_d2iz>
 800e196:	2800      	cmp	r0, #0
 800e198:	f000 8087 	beq.w	800e2aa <__kernel_cos+0x132>
 800e19c:	4642      	mov	r2, r8
 800e19e:	464b      	mov	r3, r9
 800e1a0:	4640      	mov	r0, r8
 800e1a2:	4649      	mov	r1, r9
 800e1a4:	f7f2 fa48 	bl	8000638 <__aeabi_dmul>
 800e1a8:	4b4d      	ldr	r3, [pc, #308]	; (800e2e0 <__kernel_cos+0x168>)
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	4604      	mov	r4, r0
 800e1ae:	460d      	mov	r5, r1
 800e1b0:	f7f2 fa42 	bl	8000638 <__aeabi_dmul>
 800e1b4:	a33e      	add	r3, pc, #248	; (adr r3, 800e2b0 <__kernel_cos+0x138>)
 800e1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ba:	4682      	mov	sl, r0
 800e1bc:	468b      	mov	fp, r1
 800e1be:	4620      	mov	r0, r4
 800e1c0:	4629      	mov	r1, r5
 800e1c2:	f7f2 fa39 	bl	8000638 <__aeabi_dmul>
 800e1c6:	a33c      	add	r3, pc, #240	; (adr r3, 800e2b8 <__kernel_cos+0x140>)
 800e1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1cc:	f7f2 f87e 	bl	80002cc <__adddf3>
 800e1d0:	4622      	mov	r2, r4
 800e1d2:	462b      	mov	r3, r5
 800e1d4:	f7f2 fa30 	bl	8000638 <__aeabi_dmul>
 800e1d8:	a339      	add	r3, pc, #228	; (adr r3, 800e2c0 <__kernel_cos+0x148>)
 800e1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1de:	f7f2 f873 	bl	80002c8 <__aeabi_dsub>
 800e1e2:	4622      	mov	r2, r4
 800e1e4:	462b      	mov	r3, r5
 800e1e6:	f7f2 fa27 	bl	8000638 <__aeabi_dmul>
 800e1ea:	a337      	add	r3, pc, #220	; (adr r3, 800e2c8 <__kernel_cos+0x150>)
 800e1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1f0:	f7f2 f86c 	bl	80002cc <__adddf3>
 800e1f4:	4622      	mov	r2, r4
 800e1f6:	462b      	mov	r3, r5
 800e1f8:	f7f2 fa1e 	bl	8000638 <__aeabi_dmul>
 800e1fc:	a334      	add	r3, pc, #208	; (adr r3, 800e2d0 <__kernel_cos+0x158>)
 800e1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e202:	f7f2 f861 	bl	80002c8 <__aeabi_dsub>
 800e206:	4622      	mov	r2, r4
 800e208:	462b      	mov	r3, r5
 800e20a:	f7f2 fa15 	bl	8000638 <__aeabi_dmul>
 800e20e:	a332      	add	r3, pc, #200	; (adr r3, 800e2d8 <__kernel_cos+0x160>)
 800e210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e214:	f7f2 f85a 	bl	80002cc <__adddf3>
 800e218:	4622      	mov	r2, r4
 800e21a:	462b      	mov	r3, r5
 800e21c:	f7f2 fa0c 	bl	8000638 <__aeabi_dmul>
 800e220:	4622      	mov	r2, r4
 800e222:	462b      	mov	r3, r5
 800e224:	f7f2 fa08 	bl	8000638 <__aeabi_dmul>
 800e228:	ec53 2b18 	vmov	r2, r3, d8
 800e22c:	4604      	mov	r4, r0
 800e22e:	460d      	mov	r5, r1
 800e230:	4640      	mov	r0, r8
 800e232:	4649      	mov	r1, r9
 800e234:	f7f2 fa00 	bl	8000638 <__aeabi_dmul>
 800e238:	460b      	mov	r3, r1
 800e23a:	4602      	mov	r2, r0
 800e23c:	4629      	mov	r1, r5
 800e23e:	4620      	mov	r0, r4
 800e240:	f7f2 f842 	bl	80002c8 <__aeabi_dsub>
 800e244:	4b27      	ldr	r3, [pc, #156]	; (800e2e4 <__kernel_cos+0x16c>)
 800e246:	429e      	cmp	r6, r3
 800e248:	4680      	mov	r8, r0
 800e24a:	4689      	mov	r9, r1
 800e24c:	dc0f      	bgt.n	800e26e <__kernel_cos+0xf6>
 800e24e:	4602      	mov	r2, r0
 800e250:	460b      	mov	r3, r1
 800e252:	4650      	mov	r0, sl
 800e254:	4659      	mov	r1, fp
 800e256:	f7f2 f837 	bl	80002c8 <__aeabi_dsub>
 800e25a:	460b      	mov	r3, r1
 800e25c:	4922      	ldr	r1, [pc, #136]	; (800e2e8 <__kernel_cos+0x170>)
 800e25e:	4602      	mov	r2, r0
 800e260:	2000      	movs	r0, #0
 800e262:	f7f2 f831 	bl	80002c8 <__aeabi_dsub>
 800e266:	ecbd 8b02 	vpop	{d8}
 800e26a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e26e:	4b1f      	ldr	r3, [pc, #124]	; (800e2ec <__kernel_cos+0x174>)
 800e270:	491d      	ldr	r1, [pc, #116]	; (800e2e8 <__kernel_cos+0x170>)
 800e272:	429e      	cmp	r6, r3
 800e274:	bfcc      	ite	gt
 800e276:	4d1e      	ldrgt	r5, [pc, #120]	; (800e2f0 <__kernel_cos+0x178>)
 800e278:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800e27c:	2400      	movs	r4, #0
 800e27e:	4622      	mov	r2, r4
 800e280:	462b      	mov	r3, r5
 800e282:	2000      	movs	r0, #0
 800e284:	f7f2 f820 	bl	80002c8 <__aeabi_dsub>
 800e288:	4622      	mov	r2, r4
 800e28a:	4606      	mov	r6, r0
 800e28c:	460f      	mov	r7, r1
 800e28e:	462b      	mov	r3, r5
 800e290:	4650      	mov	r0, sl
 800e292:	4659      	mov	r1, fp
 800e294:	f7f2 f818 	bl	80002c8 <__aeabi_dsub>
 800e298:	4642      	mov	r2, r8
 800e29a:	464b      	mov	r3, r9
 800e29c:	f7f2 f814 	bl	80002c8 <__aeabi_dsub>
 800e2a0:	4602      	mov	r2, r0
 800e2a2:	460b      	mov	r3, r1
 800e2a4:	4630      	mov	r0, r6
 800e2a6:	4639      	mov	r1, r7
 800e2a8:	e7db      	b.n	800e262 <__kernel_cos+0xea>
 800e2aa:	490f      	ldr	r1, [pc, #60]	; (800e2e8 <__kernel_cos+0x170>)
 800e2ac:	2000      	movs	r0, #0
 800e2ae:	e7da      	b.n	800e266 <__kernel_cos+0xee>
 800e2b0:	be8838d4 	.word	0xbe8838d4
 800e2b4:	bda8fae9 	.word	0xbda8fae9
 800e2b8:	bdb4b1c4 	.word	0xbdb4b1c4
 800e2bc:	3e21ee9e 	.word	0x3e21ee9e
 800e2c0:	809c52ad 	.word	0x809c52ad
 800e2c4:	3e927e4f 	.word	0x3e927e4f
 800e2c8:	19cb1590 	.word	0x19cb1590
 800e2cc:	3efa01a0 	.word	0x3efa01a0
 800e2d0:	16c15177 	.word	0x16c15177
 800e2d4:	3f56c16c 	.word	0x3f56c16c
 800e2d8:	5555554c 	.word	0x5555554c
 800e2dc:	3fa55555 	.word	0x3fa55555
 800e2e0:	3fe00000 	.word	0x3fe00000
 800e2e4:	3fd33332 	.word	0x3fd33332
 800e2e8:	3ff00000 	.word	0x3ff00000
 800e2ec:	3fe90000 	.word	0x3fe90000
 800e2f0:	3fd20000 	.word	0x3fd20000
 800e2f4:	00000000 	.word	0x00000000

0800e2f8 <__kernel_sin>:
 800e2f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2fc:	461f      	mov	r7, r3
 800e2fe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e302:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e306:	ed2d 8b04 	vpush	{d8-d9}
 800e30a:	4604      	mov	r4, r0
 800e30c:	460d      	mov	r5, r1
 800e30e:	4616      	mov	r6, r2
 800e310:	da03      	bge.n	800e31a <__kernel_sin+0x22>
 800e312:	f7f2 fc41 	bl	8000b98 <__aeabi_d2iz>
 800e316:	2800      	cmp	r0, #0
 800e318:	d051      	beq.n	800e3be <__kernel_sin+0xc6>
 800e31a:	4622      	mov	r2, r4
 800e31c:	462b      	mov	r3, r5
 800e31e:	4620      	mov	r0, r4
 800e320:	4629      	mov	r1, r5
 800e322:	f7f2 f989 	bl	8000638 <__aeabi_dmul>
 800e326:	4682      	mov	sl, r0
 800e328:	468b      	mov	fp, r1
 800e32a:	4602      	mov	r2, r0
 800e32c:	460b      	mov	r3, r1
 800e32e:	4620      	mov	r0, r4
 800e330:	4629      	mov	r1, r5
 800e332:	f7f2 f981 	bl	8000638 <__aeabi_dmul>
 800e336:	a341      	add	r3, pc, #260	; (adr r3, 800e43c <__kernel_sin+0x144>)
 800e338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e33c:	4680      	mov	r8, r0
 800e33e:	4689      	mov	r9, r1
 800e340:	4650      	mov	r0, sl
 800e342:	4659      	mov	r1, fp
 800e344:	f7f2 f978 	bl	8000638 <__aeabi_dmul>
 800e348:	a33e      	add	r3, pc, #248	; (adr r3, 800e444 <__kernel_sin+0x14c>)
 800e34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e34e:	f7f1 ffbb 	bl	80002c8 <__aeabi_dsub>
 800e352:	4652      	mov	r2, sl
 800e354:	465b      	mov	r3, fp
 800e356:	f7f2 f96f 	bl	8000638 <__aeabi_dmul>
 800e35a:	a33c      	add	r3, pc, #240	; (adr r3, 800e44c <__kernel_sin+0x154>)
 800e35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e360:	f7f1 ffb4 	bl	80002cc <__adddf3>
 800e364:	4652      	mov	r2, sl
 800e366:	465b      	mov	r3, fp
 800e368:	f7f2 f966 	bl	8000638 <__aeabi_dmul>
 800e36c:	a339      	add	r3, pc, #228	; (adr r3, 800e454 <__kernel_sin+0x15c>)
 800e36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e372:	f7f1 ffa9 	bl	80002c8 <__aeabi_dsub>
 800e376:	4652      	mov	r2, sl
 800e378:	465b      	mov	r3, fp
 800e37a:	f7f2 f95d 	bl	8000638 <__aeabi_dmul>
 800e37e:	a337      	add	r3, pc, #220	; (adr r3, 800e45c <__kernel_sin+0x164>)
 800e380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e384:	f7f1 ffa2 	bl	80002cc <__adddf3>
 800e388:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e38a:	ec41 0b18 	vmov	d8, r0, r1
 800e38e:	b9e3      	cbnz	r3, 800e3ca <__kernel_sin+0xd2>
 800e390:	4602      	mov	r2, r0
 800e392:	460b      	mov	r3, r1
 800e394:	4650      	mov	r0, sl
 800e396:	4659      	mov	r1, fp
 800e398:	f7f2 f94e 	bl	8000638 <__aeabi_dmul>
 800e39c:	a324      	add	r3, pc, #144	; (adr r3, 800e430 <__kernel_sin+0x138>)
 800e39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3a2:	f7f1 ff91 	bl	80002c8 <__aeabi_dsub>
 800e3a6:	4642      	mov	r2, r8
 800e3a8:	464b      	mov	r3, r9
 800e3aa:	f7f2 f945 	bl	8000638 <__aeabi_dmul>
 800e3ae:	4602      	mov	r2, r0
 800e3b0:	460b      	mov	r3, r1
 800e3b2:	4620      	mov	r0, r4
 800e3b4:	4629      	mov	r1, r5
 800e3b6:	f7f1 ff89 	bl	80002cc <__adddf3>
 800e3ba:	4604      	mov	r4, r0
 800e3bc:	460d      	mov	r5, r1
 800e3be:	ecbd 8b04 	vpop	{d8-d9}
 800e3c2:	4620      	mov	r0, r4
 800e3c4:	4629      	mov	r1, r5
 800e3c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3ca:	4b1b      	ldr	r3, [pc, #108]	; (800e438 <__kernel_sin+0x140>)
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	4630      	mov	r0, r6
 800e3d0:	4639      	mov	r1, r7
 800e3d2:	f7f2 f931 	bl	8000638 <__aeabi_dmul>
 800e3d6:	ec53 2b18 	vmov	r2, r3, d8
 800e3da:	ec41 0b19 	vmov	d9, r0, r1
 800e3de:	4640      	mov	r0, r8
 800e3e0:	4649      	mov	r1, r9
 800e3e2:	f7f2 f929 	bl	8000638 <__aeabi_dmul>
 800e3e6:	4602      	mov	r2, r0
 800e3e8:	460b      	mov	r3, r1
 800e3ea:	ec51 0b19 	vmov	r0, r1, d9
 800e3ee:	f7f1 ff6b 	bl	80002c8 <__aeabi_dsub>
 800e3f2:	4652      	mov	r2, sl
 800e3f4:	465b      	mov	r3, fp
 800e3f6:	f7f2 f91f 	bl	8000638 <__aeabi_dmul>
 800e3fa:	4632      	mov	r2, r6
 800e3fc:	463b      	mov	r3, r7
 800e3fe:	f7f1 ff63 	bl	80002c8 <__aeabi_dsub>
 800e402:	a30b      	add	r3, pc, #44	; (adr r3, 800e430 <__kernel_sin+0x138>)
 800e404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e408:	4606      	mov	r6, r0
 800e40a:	460f      	mov	r7, r1
 800e40c:	4640      	mov	r0, r8
 800e40e:	4649      	mov	r1, r9
 800e410:	f7f2 f912 	bl	8000638 <__aeabi_dmul>
 800e414:	4602      	mov	r2, r0
 800e416:	460b      	mov	r3, r1
 800e418:	4630      	mov	r0, r6
 800e41a:	4639      	mov	r1, r7
 800e41c:	f7f1 ff56 	bl	80002cc <__adddf3>
 800e420:	4602      	mov	r2, r0
 800e422:	460b      	mov	r3, r1
 800e424:	4620      	mov	r0, r4
 800e426:	4629      	mov	r1, r5
 800e428:	f7f1 ff4e 	bl	80002c8 <__aeabi_dsub>
 800e42c:	e7c5      	b.n	800e3ba <__kernel_sin+0xc2>
 800e42e:	bf00      	nop
 800e430:	55555549 	.word	0x55555549
 800e434:	3fc55555 	.word	0x3fc55555
 800e438:	3fe00000 	.word	0x3fe00000
 800e43c:	5acfd57c 	.word	0x5acfd57c
 800e440:	3de5d93a 	.word	0x3de5d93a
 800e444:	8a2b9ceb 	.word	0x8a2b9ceb
 800e448:	3e5ae5e6 	.word	0x3e5ae5e6
 800e44c:	57b1fe7d 	.word	0x57b1fe7d
 800e450:	3ec71de3 	.word	0x3ec71de3
 800e454:	19c161d5 	.word	0x19c161d5
 800e458:	3f2a01a0 	.word	0x3f2a01a0
 800e45c:	1110f8a6 	.word	0x1110f8a6
 800e460:	3f811111 	.word	0x3f811111
 800e464:	00000000 	.word	0x00000000

0800e468 <__ieee754_rem_pio2>:
 800e468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e46c:	ed2d 8b02 	vpush	{d8}
 800e470:	4bc7      	ldr	r3, [pc, #796]	; (800e790 <__ieee754_rem_pio2+0x328>)
 800e472:	b08b      	sub	sp, #44	; 0x2c
 800e474:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800e478:	4598      	cmp	r8, r3
 800e47a:	4604      	mov	r4, r0
 800e47c:	460d      	mov	r5, r1
 800e47e:	4692      	mov	sl, r2
 800e480:	9102      	str	r1, [sp, #8]
 800e482:	dc08      	bgt.n	800e496 <__ieee754_rem_pio2+0x2e>
 800e484:	e9c2 4500 	strd	r4, r5, [r2]
 800e488:	2300      	movs	r3, #0
 800e48a:	2200      	movs	r2, #0
 800e48c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800e490:	f04f 0b00 	mov.w	fp, #0
 800e494:	e025      	b.n	800e4e2 <__ieee754_rem_pio2+0x7a>
 800e496:	4bbf      	ldr	r3, [pc, #764]	; (800e794 <__ieee754_rem_pio2+0x32c>)
 800e498:	4598      	cmp	r8, r3
 800e49a:	dc75      	bgt.n	800e588 <__ieee754_rem_pio2+0x120>
 800e49c:	9b02      	ldr	r3, [sp, #8]
 800e49e:	4ebe      	ldr	r6, [pc, #760]	; (800e798 <__ieee754_rem_pio2+0x330>)
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	a3ad      	add	r3, pc, #692	; (adr r3, 800e758 <__ieee754_rem_pio2+0x2f0>)
 800e4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4a8:	dd39      	ble.n	800e51e <__ieee754_rem_pio2+0xb6>
 800e4aa:	f7f1 ff0d 	bl	80002c8 <__aeabi_dsub>
 800e4ae:	45b0      	cmp	r8, r6
 800e4b0:	4604      	mov	r4, r0
 800e4b2:	460d      	mov	r5, r1
 800e4b4:	d01b      	beq.n	800e4ee <__ieee754_rem_pio2+0x86>
 800e4b6:	a3aa      	add	r3, pc, #680	; (adr r3, 800e760 <__ieee754_rem_pio2+0x2f8>)
 800e4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4bc:	f7f1 ff04 	bl	80002c8 <__aeabi_dsub>
 800e4c0:	4602      	mov	r2, r0
 800e4c2:	460b      	mov	r3, r1
 800e4c4:	e9ca 2300 	strd	r2, r3, [sl]
 800e4c8:	4620      	mov	r0, r4
 800e4ca:	4629      	mov	r1, r5
 800e4cc:	f7f1 fefc 	bl	80002c8 <__aeabi_dsub>
 800e4d0:	a3a3      	add	r3, pc, #652	; (adr r3, 800e760 <__ieee754_rem_pio2+0x2f8>)
 800e4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4d6:	f7f1 fef7 	bl	80002c8 <__aeabi_dsub>
 800e4da:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e4de:	f04f 0b01 	mov.w	fp, #1
 800e4e2:	4658      	mov	r0, fp
 800e4e4:	b00b      	add	sp, #44	; 0x2c
 800e4e6:	ecbd 8b02 	vpop	{d8}
 800e4ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4ee:	a39e      	add	r3, pc, #632	; (adr r3, 800e768 <__ieee754_rem_pio2+0x300>)
 800e4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4f4:	f7f1 fee8 	bl	80002c8 <__aeabi_dsub>
 800e4f8:	a39d      	add	r3, pc, #628	; (adr r3, 800e770 <__ieee754_rem_pio2+0x308>)
 800e4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4fe:	4604      	mov	r4, r0
 800e500:	460d      	mov	r5, r1
 800e502:	f7f1 fee1 	bl	80002c8 <__aeabi_dsub>
 800e506:	4602      	mov	r2, r0
 800e508:	460b      	mov	r3, r1
 800e50a:	e9ca 2300 	strd	r2, r3, [sl]
 800e50e:	4620      	mov	r0, r4
 800e510:	4629      	mov	r1, r5
 800e512:	f7f1 fed9 	bl	80002c8 <__aeabi_dsub>
 800e516:	a396      	add	r3, pc, #600	; (adr r3, 800e770 <__ieee754_rem_pio2+0x308>)
 800e518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e51c:	e7db      	b.n	800e4d6 <__ieee754_rem_pio2+0x6e>
 800e51e:	f7f1 fed5 	bl	80002cc <__adddf3>
 800e522:	45b0      	cmp	r8, r6
 800e524:	4604      	mov	r4, r0
 800e526:	460d      	mov	r5, r1
 800e528:	d016      	beq.n	800e558 <__ieee754_rem_pio2+0xf0>
 800e52a:	a38d      	add	r3, pc, #564	; (adr r3, 800e760 <__ieee754_rem_pio2+0x2f8>)
 800e52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e530:	f7f1 fecc 	bl	80002cc <__adddf3>
 800e534:	4602      	mov	r2, r0
 800e536:	460b      	mov	r3, r1
 800e538:	e9ca 2300 	strd	r2, r3, [sl]
 800e53c:	4620      	mov	r0, r4
 800e53e:	4629      	mov	r1, r5
 800e540:	f7f1 fec2 	bl	80002c8 <__aeabi_dsub>
 800e544:	a386      	add	r3, pc, #536	; (adr r3, 800e760 <__ieee754_rem_pio2+0x2f8>)
 800e546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e54a:	f7f1 febf 	bl	80002cc <__adddf3>
 800e54e:	f04f 3bff 	mov.w	fp, #4294967295
 800e552:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e556:	e7c4      	b.n	800e4e2 <__ieee754_rem_pio2+0x7a>
 800e558:	a383      	add	r3, pc, #524	; (adr r3, 800e768 <__ieee754_rem_pio2+0x300>)
 800e55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e55e:	f7f1 feb5 	bl	80002cc <__adddf3>
 800e562:	a383      	add	r3, pc, #524	; (adr r3, 800e770 <__ieee754_rem_pio2+0x308>)
 800e564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e568:	4604      	mov	r4, r0
 800e56a:	460d      	mov	r5, r1
 800e56c:	f7f1 feae 	bl	80002cc <__adddf3>
 800e570:	4602      	mov	r2, r0
 800e572:	460b      	mov	r3, r1
 800e574:	e9ca 2300 	strd	r2, r3, [sl]
 800e578:	4620      	mov	r0, r4
 800e57a:	4629      	mov	r1, r5
 800e57c:	f7f1 fea4 	bl	80002c8 <__aeabi_dsub>
 800e580:	a37b      	add	r3, pc, #492	; (adr r3, 800e770 <__ieee754_rem_pio2+0x308>)
 800e582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e586:	e7e0      	b.n	800e54a <__ieee754_rem_pio2+0xe2>
 800e588:	4b84      	ldr	r3, [pc, #528]	; (800e79c <__ieee754_rem_pio2+0x334>)
 800e58a:	4598      	cmp	r8, r3
 800e58c:	f300 80d5 	bgt.w	800e73a <__ieee754_rem_pio2+0x2d2>
 800e590:	f7ff fda6 	bl	800e0e0 <fabs>
 800e594:	a378      	add	r3, pc, #480	; (adr r3, 800e778 <__ieee754_rem_pio2+0x310>)
 800e596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e59a:	4604      	mov	r4, r0
 800e59c:	460d      	mov	r5, r1
 800e59e:	f7f2 f84b 	bl	8000638 <__aeabi_dmul>
 800e5a2:	4b7f      	ldr	r3, [pc, #508]	; (800e7a0 <__ieee754_rem_pio2+0x338>)
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	f7f1 fe91 	bl	80002cc <__adddf3>
 800e5aa:	f7f2 faf5 	bl	8000b98 <__aeabi_d2iz>
 800e5ae:	4683      	mov	fp, r0
 800e5b0:	f7f1 ffd8 	bl	8000564 <__aeabi_i2d>
 800e5b4:	4602      	mov	r2, r0
 800e5b6:	460b      	mov	r3, r1
 800e5b8:	ec43 2b18 	vmov	d8, r2, r3
 800e5bc:	a366      	add	r3, pc, #408	; (adr r3, 800e758 <__ieee754_rem_pio2+0x2f0>)
 800e5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5c2:	f7f2 f839 	bl	8000638 <__aeabi_dmul>
 800e5c6:	4602      	mov	r2, r0
 800e5c8:	460b      	mov	r3, r1
 800e5ca:	4620      	mov	r0, r4
 800e5cc:	4629      	mov	r1, r5
 800e5ce:	f7f1 fe7b 	bl	80002c8 <__aeabi_dsub>
 800e5d2:	a363      	add	r3, pc, #396	; (adr r3, 800e760 <__ieee754_rem_pio2+0x2f8>)
 800e5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5d8:	4606      	mov	r6, r0
 800e5da:	460f      	mov	r7, r1
 800e5dc:	ec51 0b18 	vmov	r0, r1, d8
 800e5e0:	f7f2 f82a 	bl	8000638 <__aeabi_dmul>
 800e5e4:	f1bb 0f1f 	cmp.w	fp, #31
 800e5e8:	4604      	mov	r4, r0
 800e5ea:	460d      	mov	r5, r1
 800e5ec:	dc0d      	bgt.n	800e60a <__ieee754_rem_pio2+0x1a2>
 800e5ee:	4b6d      	ldr	r3, [pc, #436]	; (800e7a4 <__ieee754_rem_pio2+0x33c>)
 800e5f0:	f10b 32ff 	add.w	r2, fp, #4294967295
 800e5f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5f8:	4543      	cmp	r3, r8
 800e5fa:	d006      	beq.n	800e60a <__ieee754_rem_pio2+0x1a2>
 800e5fc:	4622      	mov	r2, r4
 800e5fe:	462b      	mov	r3, r5
 800e600:	4630      	mov	r0, r6
 800e602:	4639      	mov	r1, r7
 800e604:	f7f1 fe60 	bl	80002c8 <__aeabi_dsub>
 800e608:	e00e      	b.n	800e628 <__ieee754_rem_pio2+0x1c0>
 800e60a:	462b      	mov	r3, r5
 800e60c:	4622      	mov	r2, r4
 800e60e:	4630      	mov	r0, r6
 800e610:	4639      	mov	r1, r7
 800e612:	f7f1 fe59 	bl	80002c8 <__aeabi_dsub>
 800e616:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e61a:	9303      	str	r3, [sp, #12]
 800e61c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e620:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800e624:	2b10      	cmp	r3, #16
 800e626:	dc02      	bgt.n	800e62e <__ieee754_rem_pio2+0x1c6>
 800e628:	e9ca 0100 	strd	r0, r1, [sl]
 800e62c:	e039      	b.n	800e6a2 <__ieee754_rem_pio2+0x23a>
 800e62e:	a34e      	add	r3, pc, #312	; (adr r3, 800e768 <__ieee754_rem_pio2+0x300>)
 800e630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e634:	ec51 0b18 	vmov	r0, r1, d8
 800e638:	f7f1 fffe 	bl	8000638 <__aeabi_dmul>
 800e63c:	4604      	mov	r4, r0
 800e63e:	460d      	mov	r5, r1
 800e640:	4602      	mov	r2, r0
 800e642:	460b      	mov	r3, r1
 800e644:	4630      	mov	r0, r6
 800e646:	4639      	mov	r1, r7
 800e648:	f7f1 fe3e 	bl	80002c8 <__aeabi_dsub>
 800e64c:	4602      	mov	r2, r0
 800e64e:	460b      	mov	r3, r1
 800e650:	4680      	mov	r8, r0
 800e652:	4689      	mov	r9, r1
 800e654:	4630      	mov	r0, r6
 800e656:	4639      	mov	r1, r7
 800e658:	f7f1 fe36 	bl	80002c8 <__aeabi_dsub>
 800e65c:	4622      	mov	r2, r4
 800e65e:	462b      	mov	r3, r5
 800e660:	f7f1 fe32 	bl	80002c8 <__aeabi_dsub>
 800e664:	a342      	add	r3, pc, #264	; (adr r3, 800e770 <__ieee754_rem_pio2+0x308>)
 800e666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e66a:	4604      	mov	r4, r0
 800e66c:	460d      	mov	r5, r1
 800e66e:	ec51 0b18 	vmov	r0, r1, d8
 800e672:	f7f1 ffe1 	bl	8000638 <__aeabi_dmul>
 800e676:	4622      	mov	r2, r4
 800e678:	462b      	mov	r3, r5
 800e67a:	f7f1 fe25 	bl	80002c8 <__aeabi_dsub>
 800e67e:	4602      	mov	r2, r0
 800e680:	460b      	mov	r3, r1
 800e682:	4604      	mov	r4, r0
 800e684:	460d      	mov	r5, r1
 800e686:	4640      	mov	r0, r8
 800e688:	4649      	mov	r1, r9
 800e68a:	f7f1 fe1d 	bl	80002c8 <__aeabi_dsub>
 800e68e:	9a03      	ldr	r2, [sp, #12]
 800e690:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e694:	1ad3      	subs	r3, r2, r3
 800e696:	2b31      	cmp	r3, #49	; 0x31
 800e698:	dc24      	bgt.n	800e6e4 <__ieee754_rem_pio2+0x27c>
 800e69a:	e9ca 0100 	strd	r0, r1, [sl]
 800e69e:	4646      	mov	r6, r8
 800e6a0:	464f      	mov	r7, r9
 800e6a2:	e9da 8900 	ldrd	r8, r9, [sl]
 800e6a6:	4630      	mov	r0, r6
 800e6a8:	4642      	mov	r2, r8
 800e6aa:	464b      	mov	r3, r9
 800e6ac:	4639      	mov	r1, r7
 800e6ae:	f7f1 fe0b 	bl	80002c8 <__aeabi_dsub>
 800e6b2:	462b      	mov	r3, r5
 800e6b4:	4622      	mov	r2, r4
 800e6b6:	f7f1 fe07 	bl	80002c8 <__aeabi_dsub>
 800e6ba:	9b02      	ldr	r3, [sp, #8]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e6c2:	f6bf af0e 	bge.w	800e4e2 <__ieee754_rem_pio2+0x7a>
 800e6c6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e6ca:	f8ca 3004 	str.w	r3, [sl, #4]
 800e6ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e6d2:	f8ca 8000 	str.w	r8, [sl]
 800e6d6:	f8ca 0008 	str.w	r0, [sl, #8]
 800e6da:	f8ca 300c 	str.w	r3, [sl, #12]
 800e6de:	f1cb 0b00 	rsb	fp, fp, #0
 800e6e2:	e6fe      	b.n	800e4e2 <__ieee754_rem_pio2+0x7a>
 800e6e4:	a326      	add	r3, pc, #152	; (adr r3, 800e780 <__ieee754_rem_pio2+0x318>)
 800e6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ea:	ec51 0b18 	vmov	r0, r1, d8
 800e6ee:	f7f1 ffa3 	bl	8000638 <__aeabi_dmul>
 800e6f2:	4604      	mov	r4, r0
 800e6f4:	460d      	mov	r5, r1
 800e6f6:	4602      	mov	r2, r0
 800e6f8:	460b      	mov	r3, r1
 800e6fa:	4640      	mov	r0, r8
 800e6fc:	4649      	mov	r1, r9
 800e6fe:	f7f1 fde3 	bl	80002c8 <__aeabi_dsub>
 800e702:	4602      	mov	r2, r0
 800e704:	460b      	mov	r3, r1
 800e706:	4606      	mov	r6, r0
 800e708:	460f      	mov	r7, r1
 800e70a:	4640      	mov	r0, r8
 800e70c:	4649      	mov	r1, r9
 800e70e:	f7f1 fddb 	bl	80002c8 <__aeabi_dsub>
 800e712:	4622      	mov	r2, r4
 800e714:	462b      	mov	r3, r5
 800e716:	f7f1 fdd7 	bl	80002c8 <__aeabi_dsub>
 800e71a:	a31b      	add	r3, pc, #108	; (adr r3, 800e788 <__ieee754_rem_pio2+0x320>)
 800e71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e720:	4604      	mov	r4, r0
 800e722:	460d      	mov	r5, r1
 800e724:	ec51 0b18 	vmov	r0, r1, d8
 800e728:	f7f1 ff86 	bl	8000638 <__aeabi_dmul>
 800e72c:	4622      	mov	r2, r4
 800e72e:	462b      	mov	r3, r5
 800e730:	f7f1 fdca 	bl	80002c8 <__aeabi_dsub>
 800e734:	4604      	mov	r4, r0
 800e736:	460d      	mov	r5, r1
 800e738:	e760      	b.n	800e5fc <__ieee754_rem_pio2+0x194>
 800e73a:	4b1b      	ldr	r3, [pc, #108]	; (800e7a8 <__ieee754_rem_pio2+0x340>)
 800e73c:	4598      	cmp	r8, r3
 800e73e:	dd35      	ble.n	800e7ac <__ieee754_rem_pio2+0x344>
 800e740:	4602      	mov	r2, r0
 800e742:	460b      	mov	r3, r1
 800e744:	f7f1 fdc0 	bl	80002c8 <__aeabi_dsub>
 800e748:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e74c:	e9ca 0100 	strd	r0, r1, [sl]
 800e750:	e69e      	b.n	800e490 <__ieee754_rem_pio2+0x28>
 800e752:	bf00      	nop
 800e754:	f3af 8000 	nop.w
 800e758:	54400000 	.word	0x54400000
 800e75c:	3ff921fb 	.word	0x3ff921fb
 800e760:	1a626331 	.word	0x1a626331
 800e764:	3dd0b461 	.word	0x3dd0b461
 800e768:	1a600000 	.word	0x1a600000
 800e76c:	3dd0b461 	.word	0x3dd0b461
 800e770:	2e037073 	.word	0x2e037073
 800e774:	3ba3198a 	.word	0x3ba3198a
 800e778:	6dc9c883 	.word	0x6dc9c883
 800e77c:	3fe45f30 	.word	0x3fe45f30
 800e780:	2e000000 	.word	0x2e000000
 800e784:	3ba3198a 	.word	0x3ba3198a
 800e788:	252049c1 	.word	0x252049c1
 800e78c:	397b839a 	.word	0x397b839a
 800e790:	3fe921fb 	.word	0x3fe921fb
 800e794:	4002d97b 	.word	0x4002d97b
 800e798:	3ff921fb 	.word	0x3ff921fb
 800e79c:	413921fb 	.word	0x413921fb
 800e7a0:	3fe00000 	.word	0x3fe00000
 800e7a4:	0801469c 	.word	0x0801469c
 800e7a8:	7fefffff 	.word	0x7fefffff
 800e7ac:	ea4f 5628 	mov.w	r6, r8, asr #20
 800e7b0:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800e7b4:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800e7b8:	460d      	mov	r5, r1
 800e7ba:	f7f2 f9ed 	bl	8000b98 <__aeabi_d2iz>
 800e7be:	f7f1 fed1 	bl	8000564 <__aeabi_i2d>
 800e7c2:	4602      	mov	r2, r0
 800e7c4:	460b      	mov	r3, r1
 800e7c6:	4620      	mov	r0, r4
 800e7c8:	4629      	mov	r1, r5
 800e7ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e7ce:	f7f1 fd7b 	bl	80002c8 <__aeabi_dsub>
 800e7d2:	4b21      	ldr	r3, [pc, #132]	; (800e858 <__ieee754_rem_pio2+0x3f0>)
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	f7f1 ff2f 	bl	8000638 <__aeabi_dmul>
 800e7da:	460d      	mov	r5, r1
 800e7dc:	4604      	mov	r4, r0
 800e7de:	f7f2 f9db 	bl	8000b98 <__aeabi_d2iz>
 800e7e2:	f7f1 febf 	bl	8000564 <__aeabi_i2d>
 800e7e6:	4602      	mov	r2, r0
 800e7e8:	460b      	mov	r3, r1
 800e7ea:	4620      	mov	r0, r4
 800e7ec:	4629      	mov	r1, r5
 800e7ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e7f2:	f7f1 fd69 	bl	80002c8 <__aeabi_dsub>
 800e7f6:	4b18      	ldr	r3, [pc, #96]	; (800e858 <__ieee754_rem_pio2+0x3f0>)
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	f7f1 ff1d 	bl	8000638 <__aeabi_dmul>
 800e7fe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e802:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800e806:	2703      	movs	r7, #3
 800e808:	2400      	movs	r4, #0
 800e80a:	2500      	movs	r5, #0
 800e80c:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800e810:	4622      	mov	r2, r4
 800e812:	462b      	mov	r3, r5
 800e814:	46b9      	mov	r9, r7
 800e816:	3f01      	subs	r7, #1
 800e818:	f7f2 f976 	bl	8000b08 <__aeabi_dcmpeq>
 800e81c:	2800      	cmp	r0, #0
 800e81e:	d1f5      	bne.n	800e80c <__ieee754_rem_pio2+0x3a4>
 800e820:	4b0e      	ldr	r3, [pc, #56]	; (800e85c <__ieee754_rem_pio2+0x3f4>)
 800e822:	9301      	str	r3, [sp, #4]
 800e824:	2302      	movs	r3, #2
 800e826:	9300      	str	r3, [sp, #0]
 800e828:	4632      	mov	r2, r6
 800e82a:	464b      	mov	r3, r9
 800e82c:	4651      	mov	r1, sl
 800e82e:	a804      	add	r0, sp, #16
 800e830:	f000 f816 	bl	800e860 <__kernel_rem_pio2>
 800e834:	9b02      	ldr	r3, [sp, #8]
 800e836:	2b00      	cmp	r3, #0
 800e838:	4683      	mov	fp, r0
 800e83a:	f6bf ae52 	bge.w	800e4e2 <__ieee754_rem_pio2+0x7a>
 800e83e:	e9da 2100 	ldrd	r2, r1, [sl]
 800e842:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e846:	e9ca 2300 	strd	r2, r3, [sl]
 800e84a:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800e84e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e852:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800e856:	e742      	b.n	800e6de <__ieee754_rem_pio2+0x276>
 800e858:	41700000 	.word	0x41700000
 800e85c:	0801471c 	.word	0x0801471c

0800e860 <__kernel_rem_pio2>:
 800e860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e864:	ed2d 8b02 	vpush	{d8}
 800e868:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800e86c:	f112 0f14 	cmn.w	r2, #20
 800e870:	9306      	str	r3, [sp, #24]
 800e872:	9104      	str	r1, [sp, #16]
 800e874:	4bc0      	ldr	r3, [pc, #768]	; (800eb78 <__kernel_rem_pio2+0x318>)
 800e876:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800e878:	9009      	str	r0, [sp, #36]	; 0x24
 800e87a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e87e:	9300      	str	r3, [sp, #0]
 800e880:	9b06      	ldr	r3, [sp, #24]
 800e882:	f103 33ff 	add.w	r3, r3, #4294967295
 800e886:	bfa8      	it	ge
 800e888:	1ed4      	subge	r4, r2, #3
 800e88a:	9305      	str	r3, [sp, #20]
 800e88c:	bfb2      	itee	lt
 800e88e:	2400      	movlt	r4, #0
 800e890:	2318      	movge	r3, #24
 800e892:	fb94 f4f3 	sdivge	r4, r4, r3
 800e896:	f06f 0317 	mvn.w	r3, #23
 800e89a:	fb04 3303 	mla	r3, r4, r3, r3
 800e89e:	eb03 0a02 	add.w	sl, r3, r2
 800e8a2:	9b00      	ldr	r3, [sp, #0]
 800e8a4:	9a05      	ldr	r2, [sp, #20]
 800e8a6:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800eb70 <__kernel_rem_pio2+0x310>
 800e8aa:	eb03 0802 	add.w	r8, r3, r2
 800e8ae:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e8b0:	1aa7      	subs	r7, r4, r2
 800e8b2:	ae20      	add	r6, sp, #128	; 0x80
 800e8b4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e8b8:	2500      	movs	r5, #0
 800e8ba:	4545      	cmp	r5, r8
 800e8bc:	dd13      	ble.n	800e8e6 <__kernel_rem_pio2+0x86>
 800e8be:	9b06      	ldr	r3, [sp, #24]
 800e8c0:	aa20      	add	r2, sp, #128	; 0x80
 800e8c2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e8c6:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800e8ca:	f04f 0800 	mov.w	r8, #0
 800e8ce:	9b00      	ldr	r3, [sp, #0]
 800e8d0:	4598      	cmp	r8, r3
 800e8d2:	dc31      	bgt.n	800e938 <__kernel_rem_pio2+0xd8>
 800e8d4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800eb70 <__kernel_rem_pio2+0x310>
 800e8d8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800e8dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e8e0:	462f      	mov	r7, r5
 800e8e2:	2600      	movs	r6, #0
 800e8e4:	e01b      	b.n	800e91e <__kernel_rem_pio2+0xbe>
 800e8e6:	42ef      	cmn	r7, r5
 800e8e8:	d407      	bmi.n	800e8fa <__kernel_rem_pio2+0x9a>
 800e8ea:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e8ee:	f7f1 fe39 	bl	8000564 <__aeabi_i2d>
 800e8f2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e8f6:	3501      	adds	r5, #1
 800e8f8:	e7df      	b.n	800e8ba <__kernel_rem_pio2+0x5a>
 800e8fa:	ec51 0b18 	vmov	r0, r1, d8
 800e8fe:	e7f8      	b.n	800e8f2 <__kernel_rem_pio2+0x92>
 800e900:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e904:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e908:	f7f1 fe96 	bl	8000638 <__aeabi_dmul>
 800e90c:	4602      	mov	r2, r0
 800e90e:	460b      	mov	r3, r1
 800e910:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e914:	f7f1 fcda 	bl	80002cc <__adddf3>
 800e918:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e91c:	3601      	adds	r6, #1
 800e91e:	9b05      	ldr	r3, [sp, #20]
 800e920:	429e      	cmp	r6, r3
 800e922:	f1a7 0708 	sub.w	r7, r7, #8
 800e926:	ddeb      	ble.n	800e900 <__kernel_rem_pio2+0xa0>
 800e928:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e92c:	f108 0801 	add.w	r8, r8, #1
 800e930:	ecab 7b02 	vstmia	fp!, {d7}
 800e934:	3508      	adds	r5, #8
 800e936:	e7ca      	b.n	800e8ce <__kernel_rem_pio2+0x6e>
 800e938:	9b00      	ldr	r3, [sp, #0]
 800e93a:	aa0c      	add	r2, sp, #48	; 0x30
 800e93c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e940:	930b      	str	r3, [sp, #44]	; 0x2c
 800e942:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e944:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e948:	9c00      	ldr	r4, [sp, #0]
 800e94a:	930a      	str	r3, [sp, #40]	; 0x28
 800e94c:	00e3      	lsls	r3, r4, #3
 800e94e:	9308      	str	r3, [sp, #32]
 800e950:	ab98      	add	r3, sp, #608	; 0x260
 800e952:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e956:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800e95a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800e95e:	ab70      	add	r3, sp, #448	; 0x1c0
 800e960:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800e964:	46c3      	mov	fp, r8
 800e966:	46a1      	mov	r9, r4
 800e968:	f1b9 0f00 	cmp.w	r9, #0
 800e96c:	f1a5 0508 	sub.w	r5, r5, #8
 800e970:	dc70      	bgt.n	800ea54 <__kernel_rem_pio2+0x1f4>
 800e972:	4652      	mov	r2, sl
 800e974:	4630      	mov	r0, r6
 800e976:	4639      	mov	r1, r7
 800e978:	f000 fab6 	bl	800eee8 <scalbn>
 800e97c:	2200      	movs	r2, #0
 800e97e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e982:	4606      	mov	r6, r0
 800e984:	460f      	mov	r7, r1
 800e986:	f7f1 fe57 	bl	8000638 <__aeabi_dmul>
 800e98a:	f000 fb25 	bl	800efd8 <floor>
 800e98e:	4b7b      	ldr	r3, [pc, #492]	; (800eb7c <__kernel_rem_pio2+0x31c>)
 800e990:	2200      	movs	r2, #0
 800e992:	f7f1 fe51 	bl	8000638 <__aeabi_dmul>
 800e996:	4602      	mov	r2, r0
 800e998:	460b      	mov	r3, r1
 800e99a:	4630      	mov	r0, r6
 800e99c:	4639      	mov	r1, r7
 800e99e:	f7f1 fc93 	bl	80002c8 <__aeabi_dsub>
 800e9a2:	460f      	mov	r7, r1
 800e9a4:	4606      	mov	r6, r0
 800e9a6:	f7f2 f8f7 	bl	8000b98 <__aeabi_d2iz>
 800e9aa:	9002      	str	r0, [sp, #8]
 800e9ac:	f7f1 fdda 	bl	8000564 <__aeabi_i2d>
 800e9b0:	4602      	mov	r2, r0
 800e9b2:	460b      	mov	r3, r1
 800e9b4:	4630      	mov	r0, r6
 800e9b6:	4639      	mov	r1, r7
 800e9b8:	f7f1 fc86 	bl	80002c8 <__aeabi_dsub>
 800e9bc:	f1ba 0f00 	cmp.w	sl, #0
 800e9c0:	4606      	mov	r6, r0
 800e9c2:	460f      	mov	r7, r1
 800e9c4:	dd6d      	ble.n	800eaa2 <__kernel_rem_pio2+0x242>
 800e9c6:	1e61      	subs	r1, r4, #1
 800e9c8:	ab0c      	add	r3, sp, #48	; 0x30
 800e9ca:	9d02      	ldr	r5, [sp, #8]
 800e9cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e9d0:	f1ca 0018 	rsb	r0, sl, #24
 800e9d4:	fa43 f200 	asr.w	r2, r3, r0
 800e9d8:	4415      	add	r5, r2
 800e9da:	4082      	lsls	r2, r0
 800e9dc:	1a9b      	subs	r3, r3, r2
 800e9de:	aa0c      	add	r2, sp, #48	; 0x30
 800e9e0:	9502      	str	r5, [sp, #8]
 800e9e2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800e9e6:	f1ca 0217 	rsb	r2, sl, #23
 800e9ea:	fa43 fb02 	asr.w	fp, r3, r2
 800e9ee:	f1bb 0f00 	cmp.w	fp, #0
 800e9f2:	dd65      	ble.n	800eac0 <__kernel_rem_pio2+0x260>
 800e9f4:	9b02      	ldr	r3, [sp, #8]
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	3301      	adds	r3, #1
 800e9fa:	9302      	str	r3, [sp, #8]
 800e9fc:	4615      	mov	r5, r2
 800e9fe:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ea02:	4294      	cmp	r4, r2
 800ea04:	f300 809f 	bgt.w	800eb46 <__kernel_rem_pio2+0x2e6>
 800ea08:	f1ba 0f00 	cmp.w	sl, #0
 800ea0c:	dd07      	ble.n	800ea1e <__kernel_rem_pio2+0x1be>
 800ea0e:	f1ba 0f01 	cmp.w	sl, #1
 800ea12:	f000 80bf 	beq.w	800eb94 <__kernel_rem_pio2+0x334>
 800ea16:	f1ba 0f02 	cmp.w	sl, #2
 800ea1a:	f000 80c5 	beq.w	800eba8 <__kernel_rem_pio2+0x348>
 800ea1e:	f1bb 0f02 	cmp.w	fp, #2
 800ea22:	d14d      	bne.n	800eac0 <__kernel_rem_pio2+0x260>
 800ea24:	4632      	mov	r2, r6
 800ea26:	463b      	mov	r3, r7
 800ea28:	4955      	ldr	r1, [pc, #340]	; (800eb80 <__kernel_rem_pio2+0x320>)
 800ea2a:	2000      	movs	r0, #0
 800ea2c:	f7f1 fc4c 	bl	80002c8 <__aeabi_dsub>
 800ea30:	4606      	mov	r6, r0
 800ea32:	460f      	mov	r7, r1
 800ea34:	2d00      	cmp	r5, #0
 800ea36:	d043      	beq.n	800eac0 <__kernel_rem_pio2+0x260>
 800ea38:	4652      	mov	r2, sl
 800ea3a:	4951      	ldr	r1, [pc, #324]	; (800eb80 <__kernel_rem_pio2+0x320>)
 800ea3c:	2000      	movs	r0, #0
 800ea3e:	f000 fa53 	bl	800eee8 <scalbn>
 800ea42:	4602      	mov	r2, r0
 800ea44:	460b      	mov	r3, r1
 800ea46:	4630      	mov	r0, r6
 800ea48:	4639      	mov	r1, r7
 800ea4a:	f7f1 fc3d 	bl	80002c8 <__aeabi_dsub>
 800ea4e:	4606      	mov	r6, r0
 800ea50:	460f      	mov	r7, r1
 800ea52:	e035      	b.n	800eac0 <__kernel_rem_pio2+0x260>
 800ea54:	4b4b      	ldr	r3, [pc, #300]	; (800eb84 <__kernel_rem_pio2+0x324>)
 800ea56:	2200      	movs	r2, #0
 800ea58:	4630      	mov	r0, r6
 800ea5a:	4639      	mov	r1, r7
 800ea5c:	f7f1 fdec 	bl	8000638 <__aeabi_dmul>
 800ea60:	f7f2 f89a 	bl	8000b98 <__aeabi_d2iz>
 800ea64:	f7f1 fd7e 	bl	8000564 <__aeabi_i2d>
 800ea68:	4602      	mov	r2, r0
 800ea6a:	460b      	mov	r3, r1
 800ea6c:	ec43 2b18 	vmov	d8, r2, r3
 800ea70:	4b45      	ldr	r3, [pc, #276]	; (800eb88 <__kernel_rem_pio2+0x328>)
 800ea72:	2200      	movs	r2, #0
 800ea74:	f7f1 fde0 	bl	8000638 <__aeabi_dmul>
 800ea78:	4602      	mov	r2, r0
 800ea7a:	460b      	mov	r3, r1
 800ea7c:	4630      	mov	r0, r6
 800ea7e:	4639      	mov	r1, r7
 800ea80:	f7f1 fc22 	bl	80002c8 <__aeabi_dsub>
 800ea84:	f7f2 f888 	bl	8000b98 <__aeabi_d2iz>
 800ea88:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ea8c:	f84b 0b04 	str.w	r0, [fp], #4
 800ea90:	ec51 0b18 	vmov	r0, r1, d8
 800ea94:	f7f1 fc1a 	bl	80002cc <__adddf3>
 800ea98:	f109 39ff 	add.w	r9, r9, #4294967295
 800ea9c:	4606      	mov	r6, r0
 800ea9e:	460f      	mov	r7, r1
 800eaa0:	e762      	b.n	800e968 <__kernel_rem_pio2+0x108>
 800eaa2:	d106      	bne.n	800eab2 <__kernel_rem_pio2+0x252>
 800eaa4:	1e63      	subs	r3, r4, #1
 800eaa6:	aa0c      	add	r2, sp, #48	; 0x30
 800eaa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eaac:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800eab0:	e79d      	b.n	800e9ee <__kernel_rem_pio2+0x18e>
 800eab2:	4b36      	ldr	r3, [pc, #216]	; (800eb8c <__kernel_rem_pio2+0x32c>)
 800eab4:	2200      	movs	r2, #0
 800eab6:	f7f2 f845 	bl	8000b44 <__aeabi_dcmpge>
 800eaba:	2800      	cmp	r0, #0
 800eabc:	d140      	bne.n	800eb40 <__kernel_rem_pio2+0x2e0>
 800eabe:	4683      	mov	fp, r0
 800eac0:	2200      	movs	r2, #0
 800eac2:	2300      	movs	r3, #0
 800eac4:	4630      	mov	r0, r6
 800eac6:	4639      	mov	r1, r7
 800eac8:	f7f2 f81e 	bl	8000b08 <__aeabi_dcmpeq>
 800eacc:	2800      	cmp	r0, #0
 800eace:	f000 80bf 	beq.w	800ec50 <__kernel_rem_pio2+0x3f0>
 800ead2:	1e65      	subs	r5, r4, #1
 800ead4:	462b      	mov	r3, r5
 800ead6:	2200      	movs	r2, #0
 800ead8:	9900      	ldr	r1, [sp, #0]
 800eada:	428b      	cmp	r3, r1
 800eadc:	da6b      	bge.n	800ebb6 <__kernel_rem_pio2+0x356>
 800eade:	2a00      	cmp	r2, #0
 800eae0:	f000 8088 	beq.w	800ebf4 <__kernel_rem_pio2+0x394>
 800eae4:	ab0c      	add	r3, sp, #48	; 0x30
 800eae6:	f1aa 0a18 	sub.w	sl, sl, #24
 800eaea:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	f000 80ac 	beq.w	800ec4c <__kernel_rem_pio2+0x3ec>
 800eaf4:	4652      	mov	r2, sl
 800eaf6:	4922      	ldr	r1, [pc, #136]	; (800eb80 <__kernel_rem_pio2+0x320>)
 800eaf8:	f8df 9088 	ldr.w	r9, [pc, #136]	; 800eb84 <__kernel_rem_pio2+0x324>
 800eafc:	2000      	movs	r0, #0
 800eafe:	f000 f9f3 	bl	800eee8 <scalbn>
 800eb02:	1c6b      	adds	r3, r5, #1
 800eb04:	00da      	lsls	r2, r3, #3
 800eb06:	9205      	str	r2, [sp, #20]
 800eb08:	aa70      	add	r2, sp, #448	; 0x1c0
 800eb0a:	4606      	mov	r6, r0
 800eb0c:	460f      	mov	r7, r1
 800eb0e:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800eb12:	462c      	mov	r4, r5
 800eb14:	f04f 0800 	mov.w	r8, #0
 800eb18:	2c00      	cmp	r4, #0
 800eb1a:	f280 80cf 	bge.w	800ecbc <__kernel_rem_pio2+0x45c>
 800eb1e:	462c      	mov	r4, r5
 800eb20:	2c00      	cmp	r4, #0
 800eb22:	f2c0 80fd 	blt.w	800ed20 <__kernel_rem_pio2+0x4c0>
 800eb26:	4b1a      	ldr	r3, [pc, #104]	; (800eb90 <__kernel_rem_pio2+0x330>)
 800eb28:	461e      	mov	r6, r3
 800eb2a:	ab70      	add	r3, sp, #448	; 0x1c0
 800eb2c:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800eb30:	1b2b      	subs	r3, r5, r4
 800eb32:	f04f 0900 	mov.w	r9, #0
 800eb36:	f04f 0a00 	mov.w	sl, #0
 800eb3a:	2700      	movs	r7, #0
 800eb3c:	9306      	str	r3, [sp, #24]
 800eb3e:	e0e1      	b.n	800ed04 <__kernel_rem_pio2+0x4a4>
 800eb40:	f04f 0b02 	mov.w	fp, #2
 800eb44:	e756      	b.n	800e9f4 <__kernel_rem_pio2+0x194>
 800eb46:	f8d8 3000 	ldr.w	r3, [r8]
 800eb4a:	b955      	cbnz	r5, 800eb62 <__kernel_rem_pio2+0x302>
 800eb4c:	b123      	cbz	r3, 800eb58 <__kernel_rem_pio2+0x2f8>
 800eb4e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800eb52:	f8c8 3000 	str.w	r3, [r8]
 800eb56:	2301      	movs	r3, #1
 800eb58:	3201      	adds	r2, #1
 800eb5a:	f108 0804 	add.w	r8, r8, #4
 800eb5e:	461d      	mov	r5, r3
 800eb60:	e74f      	b.n	800ea02 <__kernel_rem_pio2+0x1a2>
 800eb62:	1acb      	subs	r3, r1, r3
 800eb64:	f8c8 3000 	str.w	r3, [r8]
 800eb68:	462b      	mov	r3, r5
 800eb6a:	e7f5      	b.n	800eb58 <__kernel_rem_pio2+0x2f8>
 800eb6c:	f3af 8000 	nop.w
	...
 800eb78:	08014868 	.word	0x08014868
 800eb7c:	40200000 	.word	0x40200000
 800eb80:	3ff00000 	.word	0x3ff00000
 800eb84:	3e700000 	.word	0x3e700000
 800eb88:	41700000 	.word	0x41700000
 800eb8c:	3fe00000 	.word	0x3fe00000
 800eb90:	08014828 	.word	0x08014828
 800eb94:	1e62      	subs	r2, r4, #1
 800eb96:	ab0c      	add	r3, sp, #48	; 0x30
 800eb98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb9c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800eba0:	a90c      	add	r1, sp, #48	; 0x30
 800eba2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800eba6:	e73a      	b.n	800ea1e <__kernel_rem_pio2+0x1be>
 800eba8:	1e62      	subs	r2, r4, #1
 800ebaa:	ab0c      	add	r3, sp, #48	; 0x30
 800ebac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebb0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ebb4:	e7f4      	b.n	800eba0 <__kernel_rem_pio2+0x340>
 800ebb6:	a90c      	add	r1, sp, #48	; 0x30
 800ebb8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ebbc:	3b01      	subs	r3, #1
 800ebbe:	430a      	orrs	r2, r1
 800ebc0:	e78a      	b.n	800ead8 <__kernel_rem_pio2+0x278>
 800ebc2:	3301      	adds	r3, #1
 800ebc4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800ebc8:	2900      	cmp	r1, #0
 800ebca:	d0fa      	beq.n	800ebc2 <__kernel_rem_pio2+0x362>
 800ebcc:	9a08      	ldr	r2, [sp, #32]
 800ebce:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800ebd2:	446a      	add	r2, sp
 800ebd4:	3a98      	subs	r2, #152	; 0x98
 800ebd6:	9208      	str	r2, [sp, #32]
 800ebd8:	9a06      	ldr	r2, [sp, #24]
 800ebda:	a920      	add	r1, sp, #128	; 0x80
 800ebdc:	18a2      	adds	r2, r4, r2
 800ebde:	18e3      	adds	r3, r4, r3
 800ebe0:	f104 0801 	add.w	r8, r4, #1
 800ebe4:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800ebe8:	9302      	str	r3, [sp, #8]
 800ebea:	9b02      	ldr	r3, [sp, #8]
 800ebec:	4543      	cmp	r3, r8
 800ebee:	da04      	bge.n	800ebfa <__kernel_rem_pio2+0x39a>
 800ebf0:	461c      	mov	r4, r3
 800ebf2:	e6ab      	b.n	800e94c <__kernel_rem_pio2+0xec>
 800ebf4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ebf6:	2301      	movs	r3, #1
 800ebf8:	e7e4      	b.n	800ebc4 <__kernel_rem_pio2+0x364>
 800ebfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebfc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800ec00:	f7f1 fcb0 	bl	8000564 <__aeabi_i2d>
 800ec04:	e8e5 0102 	strd	r0, r1, [r5], #8
 800ec08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec0a:	46ab      	mov	fp, r5
 800ec0c:	461c      	mov	r4, r3
 800ec0e:	f04f 0900 	mov.w	r9, #0
 800ec12:	2600      	movs	r6, #0
 800ec14:	2700      	movs	r7, #0
 800ec16:	9b05      	ldr	r3, [sp, #20]
 800ec18:	4599      	cmp	r9, r3
 800ec1a:	dd06      	ble.n	800ec2a <__kernel_rem_pio2+0x3ca>
 800ec1c:	9b08      	ldr	r3, [sp, #32]
 800ec1e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800ec22:	f108 0801 	add.w	r8, r8, #1
 800ec26:	9308      	str	r3, [sp, #32]
 800ec28:	e7df      	b.n	800ebea <__kernel_rem_pio2+0x38a>
 800ec2a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800ec2e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ec32:	f7f1 fd01 	bl	8000638 <__aeabi_dmul>
 800ec36:	4602      	mov	r2, r0
 800ec38:	460b      	mov	r3, r1
 800ec3a:	4630      	mov	r0, r6
 800ec3c:	4639      	mov	r1, r7
 800ec3e:	f7f1 fb45 	bl	80002cc <__adddf3>
 800ec42:	f109 0901 	add.w	r9, r9, #1
 800ec46:	4606      	mov	r6, r0
 800ec48:	460f      	mov	r7, r1
 800ec4a:	e7e4      	b.n	800ec16 <__kernel_rem_pio2+0x3b6>
 800ec4c:	3d01      	subs	r5, #1
 800ec4e:	e749      	b.n	800eae4 <__kernel_rem_pio2+0x284>
 800ec50:	f1ca 0200 	rsb	r2, sl, #0
 800ec54:	4630      	mov	r0, r6
 800ec56:	4639      	mov	r1, r7
 800ec58:	f000 f946 	bl	800eee8 <scalbn>
 800ec5c:	4b9f      	ldr	r3, [pc, #636]	; (800eedc <__kernel_rem_pio2+0x67c>)
 800ec5e:	2200      	movs	r2, #0
 800ec60:	4606      	mov	r6, r0
 800ec62:	460f      	mov	r7, r1
 800ec64:	f7f1 ff6e 	bl	8000b44 <__aeabi_dcmpge>
 800ec68:	b1f8      	cbz	r0, 800ecaa <__kernel_rem_pio2+0x44a>
 800ec6a:	4b9d      	ldr	r3, [pc, #628]	; (800eee0 <__kernel_rem_pio2+0x680>)
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	4630      	mov	r0, r6
 800ec70:	4639      	mov	r1, r7
 800ec72:	f7f1 fce1 	bl	8000638 <__aeabi_dmul>
 800ec76:	f7f1 ff8f 	bl	8000b98 <__aeabi_d2iz>
 800ec7a:	4680      	mov	r8, r0
 800ec7c:	f7f1 fc72 	bl	8000564 <__aeabi_i2d>
 800ec80:	4b96      	ldr	r3, [pc, #600]	; (800eedc <__kernel_rem_pio2+0x67c>)
 800ec82:	2200      	movs	r2, #0
 800ec84:	f7f1 fcd8 	bl	8000638 <__aeabi_dmul>
 800ec88:	460b      	mov	r3, r1
 800ec8a:	4602      	mov	r2, r0
 800ec8c:	4639      	mov	r1, r7
 800ec8e:	4630      	mov	r0, r6
 800ec90:	f7f1 fb1a 	bl	80002c8 <__aeabi_dsub>
 800ec94:	f7f1 ff80 	bl	8000b98 <__aeabi_d2iz>
 800ec98:	1c65      	adds	r5, r4, #1
 800ec9a:	ab0c      	add	r3, sp, #48	; 0x30
 800ec9c:	f10a 0a18 	add.w	sl, sl, #24
 800eca0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800eca4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800eca8:	e724      	b.n	800eaf4 <__kernel_rem_pio2+0x294>
 800ecaa:	4630      	mov	r0, r6
 800ecac:	4639      	mov	r1, r7
 800ecae:	f7f1 ff73 	bl	8000b98 <__aeabi_d2iz>
 800ecb2:	ab0c      	add	r3, sp, #48	; 0x30
 800ecb4:	4625      	mov	r5, r4
 800ecb6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ecba:	e71b      	b.n	800eaf4 <__kernel_rem_pio2+0x294>
 800ecbc:	ab0c      	add	r3, sp, #48	; 0x30
 800ecbe:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800ecc2:	f7f1 fc4f 	bl	8000564 <__aeabi_i2d>
 800ecc6:	4632      	mov	r2, r6
 800ecc8:	463b      	mov	r3, r7
 800ecca:	f7f1 fcb5 	bl	8000638 <__aeabi_dmul>
 800ecce:	4642      	mov	r2, r8
 800ecd0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800ecd4:	464b      	mov	r3, r9
 800ecd6:	4630      	mov	r0, r6
 800ecd8:	4639      	mov	r1, r7
 800ecda:	f7f1 fcad 	bl	8000638 <__aeabi_dmul>
 800ecde:	3c01      	subs	r4, #1
 800ece0:	4606      	mov	r6, r0
 800ece2:	460f      	mov	r7, r1
 800ece4:	e718      	b.n	800eb18 <__kernel_rem_pio2+0x2b8>
 800ece6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800ecea:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800ecee:	f7f1 fca3 	bl	8000638 <__aeabi_dmul>
 800ecf2:	4602      	mov	r2, r0
 800ecf4:	460b      	mov	r3, r1
 800ecf6:	4648      	mov	r0, r9
 800ecf8:	4651      	mov	r1, sl
 800ecfa:	f7f1 fae7 	bl	80002cc <__adddf3>
 800ecfe:	3701      	adds	r7, #1
 800ed00:	4681      	mov	r9, r0
 800ed02:	468a      	mov	sl, r1
 800ed04:	9b00      	ldr	r3, [sp, #0]
 800ed06:	429f      	cmp	r7, r3
 800ed08:	dc02      	bgt.n	800ed10 <__kernel_rem_pio2+0x4b0>
 800ed0a:	9b06      	ldr	r3, [sp, #24]
 800ed0c:	429f      	cmp	r7, r3
 800ed0e:	ddea      	ble.n	800ece6 <__kernel_rem_pio2+0x486>
 800ed10:	9a06      	ldr	r2, [sp, #24]
 800ed12:	ab48      	add	r3, sp, #288	; 0x120
 800ed14:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800ed18:	e9c6 9a00 	strd	r9, sl, [r6]
 800ed1c:	3c01      	subs	r4, #1
 800ed1e:	e6ff      	b.n	800eb20 <__kernel_rem_pio2+0x2c0>
 800ed20:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800ed22:	2b02      	cmp	r3, #2
 800ed24:	dc0b      	bgt.n	800ed3e <__kernel_rem_pio2+0x4de>
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	dc39      	bgt.n	800ed9e <__kernel_rem_pio2+0x53e>
 800ed2a:	d05d      	beq.n	800ede8 <__kernel_rem_pio2+0x588>
 800ed2c:	9b02      	ldr	r3, [sp, #8]
 800ed2e:	f003 0007 	and.w	r0, r3, #7
 800ed32:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800ed36:	ecbd 8b02 	vpop	{d8}
 800ed3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed3e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800ed40:	2b03      	cmp	r3, #3
 800ed42:	d1f3      	bne.n	800ed2c <__kernel_rem_pio2+0x4cc>
 800ed44:	9b05      	ldr	r3, [sp, #20]
 800ed46:	9500      	str	r5, [sp, #0]
 800ed48:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800ed4c:	eb0d 0403 	add.w	r4, sp, r3
 800ed50:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800ed54:	46a2      	mov	sl, r4
 800ed56:	9b00      	ldr	r3, [sp, #0]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	f1aa 0a08 	sub.w	sl, sl, #8
 800ed5e:	dc69      	bgt.n	800ee34 <__kernel_rem_pio2+0x5d4>
 800ed60:	46aa      	mov	sl, r5
 800ed62:	f1ba 0f01 	cmp.w	sl, #1
 800ed66:	f1a4 0408 	sub.w	r4, r4, #8
 800ed6a:	f300 8083 	bgt.w	800ee74 <__kernel_rem_pio2+0x614>
 800ed6e:	9c05      	ldr	r4, [sp, #20]
 800ed70:	ab48      	add	r3, sp, #288	; 0x120
 800ed72:	441c      	add	r4, r3
 800ed74:	2000      	movs	r0, #0
 800ed76:	2100      	movs	r1, #0
 800ed78:	2d01      	cmp	r5, #1
 800ed7a:	f300 809a 	bgt.w	800eeb2 <__kernel_rem_pio2+0x652>
 800ed7e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800ed82:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800ed86:	f1bb 0f00 	cmp.w	fp, #0
 800ed8a:	f040 8098 	bne.w	800eebe <__kernel_rem_pio2+0x65e>
 800ed8e:	9b04      	ldr	r3, [sp, #16]
 800ed90:	e9c3 7800 	strd	r7, r8, [r3]
 800ed94:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800ed98:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ed9c:	e7c6      	b.n	800ed2c <__kernel_rem_pio2+0x4cc>
 800ed9e:	9e05      	ldr	r6, [sp, #20]
 800eda0:	ab48      	add	r3, sp, #288	; 0x120
 800eda2:	441e      	add	r6, r3
 800eda4:	462c      	mov	r4, r5
 800eda6:	2000      	movs	r0, #0
 800eda8:	2100      	movs	r1, #0
 800edaa:	2c00      	cmp	r4, #0
 800edac:	da33      	bge.n	800ee16 <__kernel_rem_pio2+0x5b6>
 800edae:	f1bb 0f00 	cmp.w	fp, #0
 800edb2:	d036      	beq.n	800ee22 <__kernel_rem_pio2+0x5c2>
 800edb4:	4602      	mov	r2, r0
 800edb6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800edba:	9c04      	ldr	r4, [sp, #16]
 800edbc:	e9c4 2300 	strd	r2, r3, [r4]
 800edc0:	4602      	mov	r2, r0
 800edc2:	460b      	mov	r3, r1
 800edc4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800edc8:	f7f1 fa7e 	bl	80002c8 <__aeabi_dsub>
 800edcc:	ae4a      	add	r6, sp, #296	; 0x128
 800edce:	2401      	movs	r4, #1
 800edd0:	42a5      	cmp	r5, r4
 800edd2:	da29      	bge.n	800ee28 <__kernel_rem_pio2+0x5c8>
 800edd4:	f1bb 0f00 	cmp.w	fp, #0
 800edd8:	d002      	beq.n	800ede0 <__kernel_rem_pio2+0x580>
 800edda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800edde:	4619      	mov	r1, r3
 800ede0:	9b04      	ldr	r3, [sp, #16]
 800ede2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ede6:	e7a1      	b.n	800ed2c <__kernel_rem_pio2+0x4cc>
 800ede8:	9c05      	ldr	r4, [sp, #20]
 800edea:	ab48      	add	r3, sp, #288	; 0x120
 800edec:	441c      	add	r4, r3
 800edee:	2000      	movs	r0, #0
 800edf0:	2100      	movs	r1, #0
 800edf2:	2d00      	cmp	r5, #0
 800edf4:	da09      	bge.n	800ee0a <__kernel_rem_pio2+0x5aa>
 800edf6:	f1bb 0f00 	cmp.w	fp, #0
 800edfa:	d002      	beq.n	800ee02 <__kernel_rem_pio2+0x5a2>
 800edfc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ee00:	4619      	mov	r1, r3
 800ee02:	9b04      	ldr	r3, [sp, #16]
 800ee04:	e9c3 0100 	strd	r0, r1, [r3]
 800ee08:	e790      	b.n	800ed2c <__kernel_rem_pio2+0x4cc>
 800ee0a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ee0e:	f7f1 fa5d 	bl	80002cc <__adddf3>
 800ee12:	3d01      	subs	r5, #1
 800ee14:	e7ed      	b.n	800edf2 <__kernel_rem_pio2+0x592>
 800ee16:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800ee1a:	f7f1 fa57 	bl	80002cc <__adddf3>
 800ee1e:	3c01      	subs	r4, #1
 800ee20:	e7c3      	b.n	800edaa <__kernel_rem_pio2+0x54a>
 800ee22:	4602      	mov	r2, r0
 800ee24:	460b      	mov	r3, r1
 800ee26:	e7c8      	b.n	800edba <__kernel_rem_pio2+0x55a>
 800ee28:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800ee2c:	f7f1 fa4e 	bl	80002cc <__adddf3>
 800ee30:	3401      	adds	r4, #1
 800ee32:	e7cd      	b.n	800edd0 <__kernel_rem_pio2+0x570>
 800ee34:	e9da 8900 	ldrd	r8, r9, [sl]
 800ee38:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800ee3c:	9b00      	ldr	r3, [sp, #0]
 800ee3e:	3b01      	subs	r3, #1
 800ee40:	9300      	str	r3, [sp, #0]
 800ee42:	4632      	mov	r2, r6
 800ee44:	463b      	mov	r3, r7
 800ee46:	4640      	mov	r0, r8
 800ee48:	4649      	mov	r1, r9
 800ee4a:	f7f1 fa3f 	bl	80002cc <__adddf3>
 800ee4e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ee52:	4602      	mov	r2, r0
 800ee54:	460b      	mov	r3, r1
 800ee56:	4640      	mov	r0, r8
 800ee58:	4649      	mov	r1, r9
 800ee5a:	f7f1 fa35 	bl	80002c8 <__aeabi_dsub>
 800ee5e:	4632      	mov	r2, r6
 800ee60:	463b      	mov	r3, r7
 800ee62:	f7f1 fa33 	bl	80002cc <__adddf3>
 800ee66:	ed9d 7b06 	vldr	d7, [sp, #24]
 800ee6a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ee6e:	ed8a 7b00 	vstr	d7, [sl]
 800ee72:	e770      	b.n	800ed56 <__kernel_rem_pio2+0x4f6>
 800ee74:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ee78:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800ee7c:	4640      	mov	r0, r8
 800ee7e:	4632      	mov	r2, r6
 800ee80:	463b      	mov	r3, r7
 800ee82:	4649      	mov	r1, r9
 800ee84:	f7f1 fa22 	bl	80002cc <__adddf3>
 800ee88:	e9cd 0100 	strd	r0, r1, [sp]
 800ee8c:	4602      	mov	r2, r0
 800ee8e:	460b      	mov	r3, r1
 800ee90:	4640      	mov	r0, r8
 800ee92:	4649      	mov	r1, r9
 800ee94:	f7f1 fa18 	bl	80002c8 <__aeabi_dsub>
 800ee98:	4632      	mov	r2, r6
 800ee9a:	463b      	mov	r3, r7
 800ee9c:	f7f1 fa16 	bl	80002cc <__adddf3>
 800eea0:	ed9d 7b00 	vldr	d7, [sp]
 800eea4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800eea8:	ed84 7b00 	vstr	d7, [r4]
 800eeac:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eeb0:	e757      	b.n	800ed62 <__kernel_rem_pio2+0x502>
 800eeb2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800eeb6:	f7f1 fa09 	bl	80002cc <__adddf3>
 800eeba:	3d01      	subs	r5, #1
 800eebc:	e75c      	b.n	800ed78 <__kernel_rem_pio2+0x518>
 800eebe:	9b04      	ldr	r3, [sp, #16]
 800eec0:	9a04      	ldr	r2, [sp, #16]
 800eec2:	601f      	str	r7, [r3, #0]
 800eec4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800eec8:	605c      	str	r4, [r3, #4]
 800eeca:	609d      	str	r5, [r3, #8]
 800eecc:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800eed0:	60d3      	str	r3, [r2, #12]
 800eed2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eed6:	6110      	str	r0, [r2, #16]
 800eed8:	6153      	str	r3, [r2, #20]
 800eeda:	e727      	b.n	800ed2c <__kernel_rem_pio2+0x4cc>
 800eedc:	41700000 	.word	0x41700000
 800eee0:	3e700000 	.word	0x3e700000
 800eee4:	00000000 	.word	0x00000000

0800eee8 <scalbn>:
 800eee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eeea:	4616      	mov	r6, r2
 800eeec:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800eef0:	4604      	mov	r4, r0
 800eef2:	460d      	mov	r5, r1
 800eef4:	460b      	mov	r3, r1
 800eef6:	b982      	cbnz	r2, 800ef1a <scalbn+0x32>
 800eef8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800eefc:	4303      	orrs	r3, r0
 800eefe:	d039      	beq.n	800ef74 <scalbn+0x8c>
 800ef00:	4b31      	ldr	r3, [pc, #196]	; (800efc8 <scalbn+0xe0>)
 800ef02:	2200      	movs	r2, #0
 800ef04:	f7f1 fb98 	bl	8000638 <__aeabi_dmul>
 800ef08:	4b30      	ldr	r3, [pc, #192]	; (800efcc <scalbn+0xe4>)
 800ef0a:	429e      	cmp	r6, r3
 800ef0c:	4604      	mov	r4, r0
 800ef0e:	460d      	mov	r5, r1
 800ef10:	da0d      	bge.n	800ef2e <scalbn+0x46>
 800ef12:	a325      	add	r3, pc, #148	; (adr r3, 800efa8 <scalbn+0xc0>)
 800ef14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef18:	e01c      	b.n	800ef54 <scalbn+0x6c>
 800ef1a:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800ef1e:	42ba      	cmp	r2, r7
 800ef20:	d109      	bne.n	800ef36 <scalbn+0x4e>
 800ef22:	4602      	mov	r2, r0
 800ef24:	f7f1 f9d2 	bl	80002cc <__adddf3>
 800ef28:	4604      	mov	r4, r0
 800ef2a:	460d      	mov	r5, r1
 800ef2c:	e022      	b.n	800ef74 <scalbn+0x8c>
 800ef2e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ef32:	460b      	mov	r3, r1
 800ef34:	3a36      	subs	r2, #54	; 0x36
 800ef36:	f24c 3150 	movw	r1, #50000	; 0xc350
 800ef3a:	428e      	cmp	r6, r1
 800ef3c:	dd0d      	ble.n	800ef5a <scalbn+0x72>
 800ef3e:	2d00      	cmp	r5, #0
 800ef40:	a11b      	add	r1, pc, #108	; (adr r1, 800efb0 <scalbn+0xc8>)
 800ef42:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef46:	da02      	bge.n	800ef4e <scalbn+0x66>
 800ef48:	a11b      	add	r1, pc, #108	; (adr r1, 800efb8 <scalbn+0xd0>)
 800ef4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef4e:	a318      	add	r3, pc, #96	; (adr r3, 800efb0 <scalbn+0xc8>)
 800ef50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef54:	f7f1 fb70 	bl	8000638 <__aeabi_dmul>
 800ef58:	e7e6      	b.n	800ef28 <scalbn+0x40>
 800ef5a:	4432      	add	r2, r6
 800ef5c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ef60:	428a      	cmp	r2, r1
 800ef62:	dcec      	bgt.n	800ef3e <scalbn+0x56>
 800ef64:	2a00      	cmp	r2, #0
 800ef66:	dd08      	ble.n	800ef7a <scalbn+0x92>
 800ef68:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ef6c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ef70:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ef74:	4620      	mov	r0, r4
 800ef76:	4629      	mov	r1, r5
 800ef78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef7a:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ef7e:	da08      	bge.n	800ef92 <scalbn+0xaa>
 800ef80:	2d00      	cmp	r5, #0
 800ef82:	a109      	add	r1, pc, #36	; (adr r1, 800efa8 <scalbn+0xc0>)
 800ef84:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef88:	dac3      	bge.n	800ef12 <scalbn+0x2a>
 800ef8a:	a10d      	add	r1, pc, #52	; (adr r1, 800efc0 <scalbn+0xd8>)
 800ef8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef90:	e7bf      	b.n	800ef12 <scalbn+0x2a>
 800ef92:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ef96:	3236      	adds	r2, #54	; 0x36
 800ef98:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ef9c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800efa0:	4620      	mov	r0, r4
 800efa2:	4b0b      	ldr	r3, [pc, #44]	; (800efd0 <scalbn+0xe8>)
 800efa4:	2200      	movs	r2, #0
 800efa6:	e7d5      	b.n	800ef54 <scalbn+0x6c>
 800efa8:	c2f8f359 	.word	0xc2f8f359
 800efac:	01a56e1f 	.word	0x01a56e1f
 800efb0:	8800759c 	.word	0x8800759c
 800efb4:	7e37e43c 	.word	0x7e37e43c
 800efb8:	8800759c 	.word	0x8800759c
 800efbc:	fe37e43c 	.word	0xfe37e43c
 800efc0:	c2f8f359 	.word	0xc2f8f359
 800efc4:	81a56e1f 	.word	0x81a56e1f
 800efc8:	43500000 	.word	0x43500000
 800efcc:	ffff3cb0 	.word	0xffff3cb0
 800efd0:	3c900000 	.word	0x3c900000
 800efd4:	00000000 	.word	0x00000000

0800efd8 <floor>:
 800efd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efdc:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800efe0:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800efe4:	2e13      	cmp	r6, #19
 800efe6:	4602      	mov	r2, r0
 800efe8:	460b      	mov	r3, r1
 800efea:	460c      	mov	r4, r1
 800efec:	4605      	mov	r5, r0
 800efee:	4680      	mov	r8, r0
 800eff0:	dc32      	bgt.n	800f058 <floor+0x80>
 800eff2:	2e00      	cmp	r6, #0
 800eff4:	da14      	bge.n	800f020 <floor+0x48>
 800eff6:	a334      	add	r3, pc, #208	; (adr r3, 800f0c8 <floor+0xf0>)
 800eff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800effc:	f7f1 f966 	bl	80002cc <__adddf3>
 800f000:	2200      	movs	r2, #0
 800f002:	2300      	movs	r3, #0
 800f004:	f7f1 fda8 	bl	8000b58 <__aeabi_dcmpgt>
 800f008:	b138      	cbz	r0, 800f01a <floor+0x42>
 800f00a:	2c00      	cmp	r4, #0
 800f00c:	da54      	bge.n	800f0b8 <floor+0xe0>
 800f00e:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800f012:	4325      	orrs	r5, r4
 800f014:	d053      	beq.n	800f0be <floor+0xe6>
 800f016:	4c2e      	ldr	r4, [pc, #184]	; (800f0d0 <floor+0xf8>)
 800f018:	2500      	movs	r5, #0
 800f01a:	4623      	mov	r3, r4
 800f01c:	462a      	mov	r2, r5
 800f01e:	e024      	b.n	800f06a <floor+0x92>
 800f020:	4f2c      	ldr	r7, [pc, #176]	; (800f0d4 <floor+0xfc>)
 800f022:	4137      	asrs	r7, r6
 800f024:	ea01 0c07 	and.w	ip, r1, r7
 800f028:	ea5c 0c00 	orrs.w	ip, ip, r0
 800f02c:	d01d      	beq.n	800f06a <floor+0x92>
 800f02e:	a326      	add	r3, pc, #152	; (adr r3, 800f0c8 <floor+0xf0>)
 800f030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f034:	f7f1 f94a 	bl	80002cc <__adddf3>
 800f038:	2200      	movs	r2, #0
 800f03a:	2300      	movs	r3, #0
 800f03c:	f7f1 fd8c 	bl	8000b58 <__aeabi_dcmpgt>
 800f040:	2800      	cmp	r0, #0
 800f042:	d0ea      	beq.n	800f01a <floor+0x42>
 800f044:	2c00      	cmp	r4, #0
 800f046:	bfbe      	ittt	lt
 800f048:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f04c:	4133      	asrlt	r3, r6
 800f04e:	18e4      	addlt	r4, r4, r3
 800f050:	ea24 0407 	bic.w	r4, r4, r7
 800f054:	2500      	movs	r5, #0
 800f056:	e7e0      	b.n	800f01a <floor+0x42>
 800f058:	2e33      	cmp	r6, #51	; 0x33
 800f05a:	dd0a      	ble.n	800f072 <floor+0x9a>
 800f05c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f060:	d103      	bne.n	800f06a <floor+0x92>
 800f062:	f7f1 f933 	bl	80002cc <__adddf3>
 800f066:	4602      	mov	r2, r0
 800f068:	460b      	mov	r3, r1
 800f06a:	4610      	mov	r0, r2
 800f06c:	4619      	mov	r1, r3
 800f06e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f072:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800f076:	f04f 3cff 	mov.w	ip, #4294967295
 800f07a:	fa2c f707 	lsr.w	r7, ip, r7
 800f07e:	4238      	tst	r0, r7
 800f080:	d0f3      	beq.n	800f06a <floor+0x92>
 800f082:	a311      	add	r3, pc, #68	; (adr r3, 800f0c8 <floor+0xf0>)
 800f084:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f088:	f7f1 f920 	bl	80002cc <__adddf3>
 800f08c:	2200      	movs	r2, #0
 800f08e:	2300      	movs	r3, #0
 800f090:	f7f1 fd62 	bl	8000b58 <__aeabi_dcmpgt>
 800f094:	2800      	cmp	r0, #0
 800f096:	d0c0      	beq.n	800f01a <floor+0x42>
 800f098:	2c00      	cmp	r4, #0
 800f09a:	da0a      	bge.n	800f0b2 <floor+0xda>
 800f09c:	2e14      	cmp	r6, #20
 800f09e:	d101      	bne.n	800f0a4 <floor+0xcc>
 800f0a0:	3401      	adds	r4, #1
 800f0a2:	e006      	b.n	800f0b2 <floor+0xda>
 800f0a4:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f0a8:	2301      	movs	r3, #1
 800f0aa:	40b3      	lsls	r3, r6
 800f0ac:	441d      	add	r5, r3
 800f0ae:	45a8      	cmp	r8, r5
 800f0b0:	d8f6      	bhi.n	800f0a0 <floor+0xc8>
 800f0b2:	ea25 0507 	bic.w	r5, r5, r7
 800f0b6:	e7b0      	b.n	800f01a <floor+0x42>
 800f0b8:	2500      	movs	r5, #0
 800f0ba:	462c      	mov	r4, r5
 800f0bc:	e7ad      	b.n	800f01a <floor+0x42>
 800f0be:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800f0c2:	e7aa      	b.n	800f01a <floor+0x42>
 800f0c4:	f3af 8000 	nop.w
 800f0c8:	8800759c 	.word	0x8800759c
 800f0cc:	7e37e43c 	.word	0x7e37e43c
 800f0d0:	bff00000 	.word	0xbff00000
 800f0d4:	000fffff 	.word	0x000fffff

0800f0d8 <_strtol_l.constprop.0>:
 800f0d8:	2b01      	cmp	r3, #1
 800f0da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0de:	d001      	beq.n	800f0e4 <_strtol_l.constprop.0+0xc>
 800f0e0:	2b24      	cmp	r3, #36	; 0x24
 800f0e2:	d906      	bls.n	800f0f2 <_strtol_l.constprop.0+0x1a>
 800f0e4:	f001 f97a 	bl	80103dc <__errno>
 800f0e8:	2316      	movs	r3, #22
 800f0ea:	6003      	str	r3, [r0, #0]
 800f0ec:	2000      	movs	r0, #0
 800f0ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0f2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800f1d8 <_strtol_l.constprop.0+0x100>
 800f0f6:	460d      	mov	r5, r1
 800f0f8:	462e      	mov	r6, r5
 800f0fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f0fe:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800f102:	f017 0708 	ands.w	r7, r7, #8
 800f106:	d1f7      	bne.n	800f0f8 <_strtol_l.constprop.0+0x20>
 800f108:	2c2d      	cmp	r4, #45	; 0x2d
 800f10a:	d132      	bne.n	800f172 <_strtol_l.constprop.0+0x9a>
 800f10c:	782c      	ldrb	r4, [r5, #0]
 800f10e:	2701      	movs	r7, #1
 800f110:	1cb5      	adds	r5, r6, #2
 800f112:	2b00      	cmp	r3, #0
 800f114:	d05b      	beq.n	800f1ce <_strtol_l.constprop.0+0xf6>
 800f116:	2b10      	cmp	r3, #16
 800f118:	d109      	bne.n	800f12e <_strtol_l.constprop.0+0x56>
 800f11a:	2c30      	cmp	r4, #48	; 0x30
 800f11c:	d107      	bne.n	800f12e <_strtol_l.constprop.0+0x56>
 800f11e:	782c      	ldrb	r4, [r5, #0]
 800f120:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f124:	2c58      	cmp	r4, #88	; 0x58
 800f126:	d14d      	bne.n	800f1c4 <_strtol_l.constprop.0+0xec>
 800f128:	786c      	ldrb	r4, [r5, #1]
 800f12a:	2310      	movs	r3, #16
 800f12c:	3502      	adds	r5, #2
 800f12e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800f132:	f108 38ff 	add.w	r8, r8, #4294967295
 800f136:	f04f 0e00 	mov.w	lr, #0
 800f13a:	fbb8 f9f3 	udiv	r9, r8, r3
 800f13e:	4676      	mov	r6, lr
 800f140:	fb03 8a19 	mls	sl, r3, r9, r8
 800f144:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800f148:	f1bc 0f09 	cmp.w	ip, #9
 800f14c:	d816      	bhi.n	800f17c <_strtol_l.constprop.0+0xa4>
 800f14e:	4664      	mov	r4, ip
 800f150:	42a3      	cmp	r3, r4
 800f152:	dd24      	ble.n	800f19e <_strtol_l.constprop.0+0xc6>
 800f154:	f1be 3fff 	cmp.w	lr, #4294967295
 800f158:	d008      	beq.n	800f16c <_strtol_l.constprop.0+0x94>
 800f15a:	45b1      	cmp	r9, r6
 800f15c:	d31c      	bcc.n	800f198 <_strtol_l.constprop.0+0xc0>
 800f15e:	d101      	bne.n	800f164 <_strtol_l.constprop.0+0x8c>
 800f160:	45a2      	cmp	sl, r4
 800f162:	db19      	blt.n	800f198 <_strtol_l.constprop.0+0xc0>
 800f164:	fb06 4603 	mla	r6, r6, r3, r4
 800f168:	f04f 0e01 	mov.w	lr, #1
 800f16c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f170:	e7e8      	b.n	800f144 <_strtol_l.constprop.0+0x6c>
 800f172:	2c2b      	cmp	r4, #43	; 0x2b
 800f174:	bf04      	itt	eq
 800f176:	782c      	ldrbeq	r4, [r5, #0]
 800f178:	1cb5      	addeq	r5, r6, #2
 800f17a:	e7ca      	b.n	800f112 <_strtol_l.constprop.0+0x3a>
 800f17c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800f180:	f1bc 0f19 	cmp.w	ip, #25
 800f184:	d801      	bhi.n	800f18a <_strtol_l.constprop.0+0xb2>
 800f186:	3c37      	subs	r4, #55	; 0x37
 800f188:	e7e2      	b.n	800f150 <_strtol_l.constprop.0+0x78>
 800f18a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800f18e:	f1bc 0f19 	cmp.w	ip, #25
 800f192:	d804      	bhi.n	800f19e <_strtol_l.constprop.0+0xc6>
 800f194:	3c57      	subs	r4, #87	; 0x57
 800f196:	e7db      	b.n	800f150 <_strtol_l.constprop.0+0x78>
 800f198:	f04f 3eff 	mov.w	lr, #4294967295
 800f19c:	e7e6      	b.n	800f16c <_strtol_l.constprop.0+0x94>
 800f19e:	f1be 3fff 	cmp.w	lr, #4294967295
 800f1a2:	d105      	bne.n	800f1b0 <_strtol_l.constprop.0+0xd8>
 800f1a4:	2322      	movs	r3, #34	; 0x22
 800f1a6:	6003      	str	r3, [r0, #0]
 800f1a8:	4646      	mov	r6, r8
 800f1aa:	b942      	cbnz	r2, 800f1be <_strtol_l.constprop.0+0xe6>
 800f1ac:	4630      	mov	r0, r6
 800f1ae:	e79e      	b.n	800f0ee <_strtol_l.constprop.0+0x16>
 800f1b0:	b107      	cbz	r7, 800f1b4 <_strtol_l.constprop.0+0xdc>
 800f1b2:	4276      	negs	r6, r6
 800f1b4:	2a00      	cmp	r2, #0
 800f1b6:	d0f9      	beq.n	800f1ac <_strtol_l.constprop.0+0xd4>
 800f1b8:	f1be 0f00 	cmp.w	lr, #0
 800f1bc:	d000      	beq.n	800f1c0 <_strtol_l.constprop.0+0xe8>
 800f1be:	1e69      	subs	r1, r5, #1
 800f1c0:	6011      	str	r1, [r2, #0]
 800f1c2:	e7f3      	b.n	800f1ac <_strtol_l.constprop.0+0xd4>
 800f1c4:	2430      	movs	r4, #48	; 0x30
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d1b1      	bne.n	800f12e <_strtol_l.constprop.0+0x56>
 800f1ca:	2308      	movs	r3, #8
 800f1cc:	e7af      	b.n	800f12e <_strtol_l.constprop.0+0x56>
 800f1ce:	2c30      	cmp	r4, #48	; 0x30
 800f1d0:	d0a5      	beq.n	800f11e <_strtol_l.constprop.0+0x46>
 800f1d2:	230a      	movs	r3, #10
 800f1d4:	e7ab      	b.n	800f12e <_strtol_l.constprop.0+0x56>
 800f1d6:	bf00      	nop
 800f1d8:	08014879 	.word	0x08014879

0800f1dc <_strtol_r>:
 800f1dc:	f7ff bf7c 	b.w	800f0d8 <_strtol_l.constprop.0>

0800f1e0 <__cvt>:
 800f1e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1e4:	b088      	sub	sp, #32
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	461d      	mov	r5, r3
 800f1ea:	4614      	mov	r4, r2
 800f1ec:	bfbc      	itt	lt
 800f1ee:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800f1f2:	4614      	movlt	r4, r2
 800f1f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f1f6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800f1f8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800f1fc:	bfb6      	itet	lt
 800f1fe:	461d      	movlt	r5, r3
 800f200:	2300      	movge	r3, #0
 800f202:	232d      	movlt	r3, #45	; 0x2d
 800f204:	7013      	strb	r3, [r2, #0]
 800f206:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f208:	f023 0820 	bic.w	r8, r3, #32
 800f20c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f210:	d005      	beq.n	800f21e <__cvt+0x3e>
 800f212:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f216:	d100      	bne.n	800f21a <__cvt+0x3a>
 800f218:	3601      	adds	r6, #1
 800f21a:	2302      	movs	r3, #2
 800f21c:	e000      	b.n	800f220 <__cvt+0x40>
 800f21e:	2303      	movs	r3, #3
 800f220:	aa07      	add	r2, sp, #28
 800f222:	9204      	str	r2, [sp, #16]
 800f224:	aa06      	add	r2, sp, #24
 800f226:	e9cd a202 	strd	sl, r2, [sp, #8]
 800f22a:	e9cd 3600 	strd	r3, r6, [sp]
 800f22e:	4622      	mov	r2, r4
 800f230:	462b      	mov	r3, r5
 800f232:	f001 f9b9 	bl	80105a8 <_dtoa_r>
 800f236:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f23a:	4607      	mov	r7, r0
 800f23c:	d102      	bne.n	800f244 <__cvt+0x64>
 800f23e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f240:	07db      	lsls	r3, r3, #31
 800f242:	d522      	bpl.n	800f28a <__cvt+0xaa>
 800f244:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f248:	eb07 0906 	add.w	r9, r7, r6
 800f24c:	d110      	bne.n	800f270 <__cvt+0x90>
 800f24e:	783b      	ldrb	r3, [r7, #0]
 800f250:	2b30      	cmp	r3, #48	; 0x30
 800f252:	d10a      	bne.n	800f26a <__cvt+0x8a>
 800f254:	2200      	movs	r2, #0
 800f256:	2300      	movs	r3, #0
 800f258:	4620      	mov	r0, r4
 800f25a:	4629      	mov	r1, r5
 800f25c:	f7f1 fc54 	bl	8000b08 <__aeabi_dcmpeq>
 800f260:	b918      	cbnz	r0, 800f26a <__cvt+0x8a>
 800f262:	f1c6 0601 	rsb	r6, r6, #1
 800f266:	f8ca 6000 	str.w	r6, [sl]
 800f26a:	f8da 3000 	ldr.w	r3, [sl]
 800f26e:	4499      	add	r9, r3
 800f270:	2200      	movs	r2, #0
 800f272:	2300      	movs	r3, #0
 800f274:	4620      	mov	r0, r4
 800f276:	4629      	mov	r1, r5
 800f278:	f7f1 fc46 	bl	8000b08 <__aeabi_dcmpeq>
 800f27c:	b108      	cbz	r0, 800f282 <__cvt+0xa2>
 800f27e:	f8cd 901c 	str.w	r9, [sp, #28]
 800f282:	2230      	movs	r2, #48	; 0x30
 800f284:	9b07      	ldr	r3, [sp, #28]
 800f286:	454b      	cmp	r3, r9
 800f288:	d307      	bcc.n	800f29a <__cvt+0xba>
 800f28a:	9b07      	ldr	r3, [sp, #28]
 800f28c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f28e:	1bdb      	subs	r3, r3, r7
 800f290:	4638      	mov	r0, r7
 800f292:	6013      	str	r3, [r2, #0]
 800f294:	b008      	add	sp, #32
 800f296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f29a:	1c59      	adds	r1, r3, #1
 800f29c:	9107      	str	r1, [sp, #28]
 800f29e:	701a      	strb	r2, [r3, #0]
 800f2a0:	e7f0      	b.n	800f284 <__cvt+0xa4>

0800f2a2 <__exponent>:
 800f2a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f2a4:	4603      	mov	r3, r0
 800f2a6:	2900      	cmp	r1, #0
 800f2a8:	bfb8      	it	lt
 800f2aa:	4249      	neglt	r1, r1
 800f2ac:	f803 2b02 	strb.w	r2, [r3], #2
 800f2b0:	bfb4      	ite	lt
 800f2b2:	222d      	movlt	r2, #45	; 0x2d
 800f2b4:	222b      	movge	r2, #43	; 0x2b
 800f2b6:	2909      	cmp	r1, #9
 800f2b8:	7042      	strb	r2, [r0, #1]
 800f2ba:	dd2a      	ble.n	800f312 <__exponent+0x70>
 800f2bc:	f10d 0207 	add.w	r2, sp, #7
 800f2c0:	4617      	mov	r7, r2
 800f2c2:	260a      	movs	r6, #10
 800f2c4:	4694      	mov	ip, r2
 800f2c6:	fb91 f5f6 	sdiv	r5, r1, r6
 800f2ca:	fb06 1415 	mls	r4, r6, r5, r1
 800f2ce:	3430      	adds	r4, #48	; 0x30
 800f2d0:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800f2d4:	460c      	mov	r4, r1
 800f2d6:	2c63      	cmp	r4, #99	; 0x63
 800f2d8:	f102 32ff 	add.w	r2, r2, #4294967295
 800f2dc:	4629      	mov	r1, r5
 800f2de:	dcf1      	bgt.n	800f2c4 <__exponent+0x22>
 800f2e0:	3130      	adds	r1, #48	; 0x30
 800f2e2:	f1ac 0402 	sub.w	r4, ip, #2
 800f2e6:	f802 1c01 	strb.w	r1, [r2, #-1]
 800f2ea:	1c41      	adds	r1, r0, #1
 800f2ec:	4622      	mov	r2, r4
 800f2ee:	42ba      	cmp	r2, r7
 800f2f0:	d30a      	bcc.n	800f308 <__exponent+0x66>
 800f2f2:	f10d 0209 	add.w	r2, sp, #9
 800f2f6:	eba2 020c 	sub.w	r2, r2, ip
 800f2fa:	42bc      	cmp	r4, r7
 800f2fc:	bf88      	it	hi
 800f2fe:	2200      	movhi	r2, #0
 800f300:	4413      	add	r3, r2
 800f302:	1a18      	subs	r0, r3, r0
 800f304:	b003      	add	sp, #12
 800f306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f308:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f30c:	f801 5f01 	strb.w	r5, [r1, #1]!
 800f310:	e7ed      	b.n	800f2ee <__exponent+0x4c>
 800f312:	2330      	movs	r3, #48	; 0x30
 800f314:	3130      	adds	r1, #48	; 0x30
 800f316:	7083      	strb	r3, [r0, #2]
 800f318:	70c1      	strb	r1, [r0, #3]
 800f31a:	1d03      	adds	r3, r0, #4
 800f31c:	e7f1      	b.n	800f302 <__exponent+0x60>
	...

0800f320 <_printf_float>:
 800f320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f324:	ed2d 8b02 	vpush	{d8}
 800f328:	b091      	sub	sp, #68	; 0x44
 800f32a:	460c      	mov	r4, r1
 800f32c:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800f330:	4616      	mov	r6, r2
 800f332:	461f      	mov	r7, r3
 800f334:	4605      	mov	r5, r0
 800f336:	f001 f807 	bl	8010348 <_localeconv_r>
 800f33a:	f8d0 a000 	ldr.w	sl, [r0]
 800f33e:	4650      	mov	r0, sl
 800f340:	f7f0 ffb6 	bl	80002b0 <strlen>
 800f344:	2300      	movs	r3, #0
 800f346:	930e      	str	r3, [sp, #56]	; 0x38
 800f348:	6823      	ldr	r3, [r4, #0]
 800f34a:	9309      	str	r3, [sp, #36]	; 0x24
 800f34c:	f8d8 3000 	ldr.w	r3, [r8]
 800f350:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f354:	3307      	adds	r3, #7
 800f356:	f023 0307 	bic.w	r3, r3, #7
 800f35a:	f103 0208 	add.w	r2, r3, #8
 800f35e:	f8c8 2000 	str.w	r2, [r8]
 800f362:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f366:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f36a:	930b      	str	r3, [sp, #44]	; 0x2c
 800f36c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800f370:	ee08 0a10 	vmov	s16, r0
 800f374:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800f378:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f37c:	4b9f      	ldr	r3, [pc, #636]	; (800f5fc <_printf_float+0x2dc>)
 800f37e:	f04f 32ff 	mov.w	r2, #4294967295
 800f382:	f7f1 fbf3 	bl	8000b6c <__aeabi_dcmpun>
 800f386:	bb88      	cbnz	r0, 800f3ec <_printf_float+0xcc>
 800f388:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f38c:	4b9b      	ldr	r3, [pc, #620]	; (800f5fc <_printf_float+0x2dc>)
 800f38e:	f04f 32ff 	mov.w	r2, #4294967295
 800f392:	f7f1 fbcd 	bl	8000b30 <__aeabi_dcmple>
 800f396:	bb48      	cbnz	r0, 800f3ec <_printf_float+0xcc>
 800f398:	2200      	movs	r2, #0
 800f39a:	2300      	movs	r3, #0
 800f39c:	4640      	mov	r0, r8
 800f39e:	4649      	mov	r1, r9
 800f3a0:	f7f1 fbbc 	bl	8000b1c <__aeabi_dcmplt>
 800f3a4:	b110      	cbz	r0, 800f3ac <_printf_float+0x8c>
 800f3a6:	232d      	movs	r3, #45	; 0x2d
 800f3a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f3ac:	4a94      	ldr	r2, [pc, #592]	; (800f600 <_printf_float+0x2e0>)
 800f3ae:	4b95      	ldr	r3, [pc, #596]	; (800f604 <_printf_float+0x2e4>)
 800f3b0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f3b4:	bf94      	ite	ls
 800f3b6:	4690      	movls	r8, r2
 800f3b8:	4698      	movhi	r8, r3
 800f3ba:	2303      	movs	r3, #3
 800f3bc:	6123      	str	r3, [r4, #16]
 800f3be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3c0:	f023 0304 	bic.w	r3, r3, #4
 800f3c4:	6023      	str	r3, [r4, #0]
 800f3c6:	f04f 0900 	mov.w	r9, #0
 800f3ca:	9700      	str	r7, [sp, #0]
 800f3cc:	4633      	mov	r3, r6
 800f3ce:	aa0f      	add	r2, sp, #60	; 0x3c
 800f3d0:	4621      	mov	r1, r4
 800f3d2:	4628      	mov	r0, r5
 800f3d4:	f000 f9dc 	bl	800f790 <_printf_common>
 800f3d8:	3001      	adds	r0, #1
 800f3da:	f040 8092 	bne.w	800f502 <_printf_float+0x1e2>
 800f3de:	f04f 30ff 	mov.w	r0, #4294967295
 800f3e2:	b011      	add	sp, #68	; 0x44
 800f3e4:	ecbd 8b02 	vpop	{d8}
 800f3e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3ec:	4642      	mov	r2, r8
 800f3ee:	464b      	mov	r3, r9
 800f3f0:	4640      	mov	r0, r8
 800f3f2:	4649      	mov	r1, r9
 800f3f4:	f7f1 fbba 	bl	8000b6c <__aeabi_dcmpun>
 800f3f8:	b140      	cbz	r0, 800f40c <_printf_float+0xec>
 800f3fa:	464b      	mov	r3, r9
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	bfbc      	itt	lt
 800f400:	232d      	movlt	r3, #45	; 0x2d
 800f402:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f406:	4a80      	ldr	r2, [pc, #512]	; (800f608 <_printf_float+0x2e8>)
 800f408:	4b80      	ldr	r3, [pc, #512]	; (800f60c <_printf_float+0x2ec>)
 800f40a:	e7d1      	b.n	800f3b0 <_printf_float+0x90>
 800f40c:	6863      	ldr	r3, [r4, #4]
 800f40e:	1c5a      	adds	r2, r3, #1
 800f410:	f00b 01df 	and.w	r1, fp, #223	; 0xdf
 800f414:	d143      	bne.n	800f49e <_printf_float+0x17e>
 800f416:	2306      	movs	r3, #6
 800f418:	6063      	str	r3, [r4, #4]
 800f41a:	2200      	movs	r2, #0
 800f41c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f41e:	9206      	str	r2, [sp, #24]
 800f420:	aa0e      	add	r2, sp, #56	; 0x38
 800f422:	e9cd b204 	strd	fp, r2, [sp, #16]
 800f426:	aa0d      	add	r2, sp, #52	; 0x34
 800f428:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f42c:	9203      	str	r2, [sp, #12]
 800f42e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800f432:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800f436:	6023      	str	r3, [r4, #0]
 800f438:	6863      	ldr	r3, [r4, #4]
 800f43a:	9300      	str	r3, [sp, #0]
 800f43c:	4642      	mov	r2, r8
 800f43e:	464b      	mov	r3, r9
 800f440:	4628      	mov	r0, r5
 800f442:	910a      	str	r1, [sp, #40]	; 0x28
 800f444:	f7ff fecc 	bl	800f1e0 <__cvt>
 800f448:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f44a:	2947      	cmp	r1, #71	; 0x47
 800f44c:	4680      	mov	r8, r0
 800f44e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800f450:	d108      	bne.n	800f464 <_printf_float+0x144>
 800f452:	1cc8      	adds	r0, r1, #3
 800f454:	db02      	blt.n	800f45c <_printf_float+0x13c>
 800f456:	6863      	ldr	r3, [r4, #4]
 800f458:	4299      	cmp	r1, r3
 800f45a:	dd40      	ble.n	800f4de <_printf_float+0x1be>
 800f45c:	f1ab 0302 	sub.w	r3, fp, #2
 800f460:	fa5f fb83 	uxtb.w	fp, r3
 800f464:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f468:	d81f      	bhi.n	800f4aa <_printf_float+0x18a>
 800f46a:	3901      	subs	r1, #1
 800f46c:	465a      	mov	r2, fp
 800f46e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f472:	910d      	str	r1, [sp, #52]	; 0x34
 800f474:	f7ff ff15 	bl	800f2a2 <__exponent>
 800f478:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f47a:	1813      	adds	r3, r2, r0
 800f47c:	2a01      	cmp	r2, #1
 800f47e:	4681      	mov	r9, r0
 800f480:	6123      	str	r3, [r4, #16]
 800f482:	dc02      	bgt.n	800f48a <_printf_float+0x16a>
 800f484:	6822      	ldr	r2, [r4, #0]
 800f486:	07d2      	lsls	r2, r2, #31
 800f488:	d501      	bpl.n	800f48e <_printf_float+0x16e>
 800f48a:	3301      	adds	r3, #1
 800f48c:	6123      	str	r3, [r4, #16]
 800f48e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800f492:	2b00      	cmp	r3, #0
 800f494:	d099      	beq.n	800f3ca <_printf_float+0xaa>
 800f496:	232d      	movs	r3, #45	; 0x2d
 800f498:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f49c:	e795      	b.n	800f3ca <_printf_float+0xaa>
 800f49e:	2947      	cmp	r1, #71	; 0x47
 800f4a0:	d1bb      	bne.n	800f41a <_printf_float+0xfa>
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d1b9      	bne.n	800f41a <_printf_float+0xfa>
 800f4a6:	2301      	movs	r3, #1
 800f4a8:	e7b6      	b.n	800f418 <_printf_float+0xf8>
 800f4aa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f4ae:	d118      	bne.n	800f4e2 <_printf_float+0x1c2>
 800f4b0:	2900      	cmp	r1, #0
 800f4b2:	6863      	ldr	r3, [r4, #4]
 800f4b4:	dd0b      	ble.n	800f4ce <_printf_float+0x1ae>
 800f4b6:	6121      	str	r1, [r4, #16]
 800f4b8:	b913      	cbnz	r3, 800f4c0 <_printf_float+0x1a0>
 800f4ba:	6822      	ldr	r2, [r4, #0]
 800f4bc:	07d0      	lsls	r0, r2, #31
 800f4be:	d502      	bpl.n	800f4c6 <_printf_float+0x1a6>
 800f4c0:	3301      	adds	r3, #1
 800f4c2:	440b      	add	r3, r1
 800f4c4:	6123      	str	r3, [r4, #16]
 800f4c6:	65a1      	str	r1, [r4, #88]	; 0x58
 800f4c8:	f04f 0900 	mov.w	r9, #0
 800f4cc:	e7df      	b.n	800f48e <_printf_float+0x16e>
 800f4ce:	b913      	cbnz	r3, 800f4d6 <_printf_float+0x1b6>
 800f4d0:	6822      	ldr	r2, [r4, #0]
 800f4d2:	07d2      	lsls	r2, r2, #31
 800f4d4:	d501      	bpl.n	800f4da <_printf_float+0x1ba>
 800f4d6:	3302      	adds	r3, #2
 800f4d8:	e7f4      	b.n	800f4c4 <_printf_float+0x1a4>
 800f4da:	2301      	movs	r3, #1
 800f4dc:	e7f2      	b.n	800f4c4 <_printf_float+0x1a4>
 800f4de:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f4e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f4e4:	4299      	cmp	r1, r3
 800f4e6:	db05      	blt.n	800f4f4 <_printf_float+0x1d4>
 800f4e8:	6823      	ldr	r3, [r4, #0]
 800f4ea:	6121      	str	r1, [r4, #16]
 800f4ec:	07d8      	lsls	r0, r3, #31
 800f4ee:	d5ea      	bpl.n	800f4c6 <_printf_float+0x1a6>
 800f4f0:	1c4b      	adds	r3, r1, #1
 800f4f2:	e7e7      	b.n	800f4c4 <_printf_float+0x1a4>
 800f4f4:	2900      	cmp	r1, #0
 800f4f6:	bfd4      	ite	le
 800f4f8:	f1c1 0202 	rsble	r2, r1, #2
 800f4fc:	2201      	movgt	r2, #1
 800f4fe:	4413      	add	r3, r2
 800f500:	e7e0      	b.n	800f4c4 <_printf_float+0x1a4>
 800f502:	6823      	ldr	r3, [r4, #0]
 800f504:	055a      	lsls	r2, r3, #21
 800f506:	d407      	bmi.n	800f518 <_printf_float+0x1f8>
 800f508:	6923      	ldr	r3, [r4, #16]
 800f50a:	4642      	mov	r2, r8
 800f50c:	4631      	mov	r1, r6
 800f50e:	4628      	mov	r0, r5
 800f510:	47b8      	blx	r7
 800f512:	3001      	adds	r0, #1
 800f514:	d12c      	bne.n	800f570 <_printf_float+0x250>
 800f516:	e762      	b.n	800f3de <_printf_float+0xbe>
 800f518:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f51c:	f240 80e0 	bls.w	800f6e0 <_printf_float+0x3c0>
 800f520:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f524:	2200      	movs	r2, #0
 800f526:	2300      	movs	r3, #0
 800f528:	f7f1 faee 	bl	8000b08 <__aeabi_dcmpeq>
 800f52c:	2800      	cmp	r0, #0
 800f52e:	d034      	beq.n	800f59a <_printf_float+0x27a>
 800f530:	4a37      	ldr	r2, [pc, #220]	; (800f610 <_printf_float+0x2f0>)
 800f532:	2301      	movs	r3, #1
 800f534:	4631      	mov	r1, r6
 800f536:	4628      	mov	r0, r5
 800f538:	47b8      	blx	r7
 800f53a:	3001      	adds	r0, #1
 800f53c:	f43f af4f 	beq.w	800f3de <_printf_float+0xbe>
 800f540:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800f544:	429a      	cmp	r2, r3
 800f546:	db02      	blt.n	800f54e <_printf_float+0x22e>
 800f548:	6823      	ldr	r3, [r4, #0]
 800f54a:	07d8      	lsls	r0, r3, #31
 800f54c:	d510      	bpl.n	800f570 <_printf_float+0x250>
 800f54e:	ee18 3a10 	vmov	r3, s16
 800f552:	4652      	mov	r2, sl
 800f554:	4631      	mov	r1, r6
 800f556:	4628      	mov	r0, r5
 800f558:	47b8      	blx	r7
 800f55a:	3001      	adds	r0, #1
 800f55c:	f43f af3f 	beq.w	800f3de <_printf_float+0xbe>
 800f560:	f04f 0800 	mov.w	r8, #0
 800f564:	f104 091a 	add.w	r9, r4, #26
 800f568:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f56a:	3b01      	subs	r3, #1
 800f56c:	4543      	cmp	r3, r8
 800f56e:	dc09      	bgt.n	800f584 <_printf_float+0x264>
 800f570:	6823      	ldr	r3, [r4, #0]
 800f572:	079b      	lsls	r3, r3, #30
 800f574:	f100 8107 	bmi.w	800f786 <_printf_float+0x466>
 800f578:	68e0      	ldr	r0, [r4, #12]
 800f57a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f57c:	4298      	cmp	r0, r3
 800f57e:	bfb8      	it	lt
 800f580:	4618      	movlt	r0, r3
 800f582:	e72e      	b.n	800f3e2 <_printf_float+0xc2>
 800f584:	2301      	movs	r3, #1
 800f586:	464a      	mov	r2, r9
 800f588:	4631      	mov	r1, r6
 800f58a:	4628      	mov	r0, r5
 800f58c:	47b8      	blx	r7
 800f58e:	3001      	adds	r0, #1
 800f590:	f43f af25 	beq.w	800f3de <_printf_float+0xbe>
 800f594:	f108 0801 	add.w	r8, r8, #1
 800f598:	e7e6      	b.n	800f568 <_printf_float+0x248>
 800f59a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	dc39      	bgt.n	800f614 <_printf_float+0x2f4>
 800f5a0:	4a1b      	ldr	r2, [pc, #108]	; (800f610 <_printf_float+0x2f0>)
 800f5a2:	2301      	movs	r3, #1
 800f5a4:	4631      	mov	r1, r6
 800f5a6:	4628      	mov	r0, r5
 800f5a8:	47b8      	blx	r7
 800f5aa:	3001      	adds	r0, #1
 800f5ac:	f43f af17 	beq.w	800f3de <_printf_float+0xbe>
 800f5b0:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800f5b4:	4313      	orrs	r3, r2
 800f5b6:	d102      	bne.n	800f5be <_printf_float+0x29e>
 800f5b8:	6823      	ldr	r3, [r4, #0]
 800f5ba:	07d9      	lsls	r1, r3, #31
 800f5bc:	d5d8      	bpl.n	800f570 <_printf_float+0x250>
 800f5be:	ee18 3a10 	vmov	r3, s16
 800f5c2:	4652      	mov	r2, sl
 800f5c4:	4631      	mov	r1, r6
 800f5c6:	4628      	mov	r0, r5
 800f5c8:	47b8      	blx	r7
 800f5ca:	3001      	adds	r0, #1
 800f5cc:	f43f af07 	beq.w	800f3de <_printf_float+0xbe>
 800f5d0:	f04f 0900 	mov.w	r9, #0
 800f5d4:	f104 0a1a 	add.w	sl, r4, #26
 800f5d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f5da:	425b      	negs	r3, r3
 800f5dc:	454b      	cmp	r3, r9
 800f5de:	dc01      	bgt.n	800f5e4 <_printf_float+0x2c4>
 800f5e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f5e2:	e792      	b.n	800f50a <_printf_float+0x1ea>
 800f5e4:	2301      	movs	r3, #1
 800f5e6:	4652      	mov	r2, sl
 800f5e8:	4631      	mov	r1, r6
 800f5ea:	4628      	mov	r0, r5
 800f5ec:	47b8      	blx	r7
 800f5ee:	3001      	adds	r0, #1
 800f5f0:	f43f aef5 	beq.w	800f3de <_printf_float+0xbe>
 800f5f4:	f109 0901 	add.w	r9, r9, #1
 800f5f8:	e7ee      	b.n	800f5d8 <_printf_float+0x2b8>
 800f5fa:	bf00      	nop
 800f5fc:	7fefffff 	.word	0x7fefffff
 800f600:	08014979 	.word	0x08014979
 800f604:	0801497d 	.word	0x0801497d
 800f608:	08014981 	.word	0x08014981
 800f60c:	08014985 	.word	0x08014985
 800f610:	08014989 	.word	0x08014989
 800f614:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f616:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f618:	429a      	cmp	r2, r3
 800f61a:	bfa8      	it	ge
 800f61c:	461a      	movge	r2, r3
 800f61e:	2a00      	cmp	r2, #0
 800f620:	4691      	mov	r9, r2
 800f622:	dc37      	bgt.n	800f694 <_printf_float+0x374>
 800f624:	f04f 0b00 	mov.w	fp, #0
 800f628:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f62c:	f104 021a 	add.w	r2, r4, #26
 800f630:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f632:	9309      	str	r3, [sp, #36]	; 0x24
 800f634:	eba3 0309 	sub.w	r3, r3, r9
 800f638:	455b      	cmp	r3, fp
 800f63a:	dc33      	bgt.n	800f6a4 <_printf_float+0x384>
 800f63c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800f640:	429a      	cmp	r2, r3
 800f642:	db3b      	blt.n	800f6bc <_printf_float+0x39c>
 800f644:	6823      	ldr	r3, [r4, #0]
 800f646:	07da      	lsls	r2, r3, #31
 800f648:	d438      	bmi.n	800f6bc <_printf_float+0x39c>
 800f64a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800f64e:	eba2 0903 	sub.w	r9, r2, r3
 800f652:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f654:	1ad2      	subs	r2, r2, r3
 800f656:	4591      	cmp	r9, r2
 800f658:	bfa8      	it	ge
 800f65a:	4691      	movge	r9, r2
 800f65c:	f1b9 0f00 	cmp.w	r9, #0
 800f660:	dc35      	bgt.n	800f6ce <_printf_float+0x3ae>
 800f662:	f04f 0800 	mov.w	r8, #0
 800f666:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f66a:	f104 0a1a 	add.w	sl, r4, #26
 800f66e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800f672:	1a9b      	subs	r3, r3, r2
 800f674:	eba3 0309 	sub.w	r3, r3, r9
 800f678:	4543      	cmp	r3, r8
 800f67a:	f77f af79 	ble.w	800f570 <_printf_float+0x250>
 800f67e:	2301      	movs	r3, #1
 800f680:	4652      	mov	r2, sl
 800f682:	4631      	mov	r1, r6
 800f684:	4628      	mov	r0, r5
 800f686:	47b8      	blx	r7
 800f688:	3001      	adds	r0, #1
 800f68a:	f43f aea8 	beq.w	800f3de <_printf_float+0xbe>
 800f68e:	f108 0801 	add.w	r8, r8, #1
 800f692:	e7ec      	b.n	800f66e <_printf_float+0x34e>
 800f694:	4613      	mov	r3, r2
 800f696:	4631      	mov	r1, r6
 800f698:	4642      	mov	r2, r8
 800f69a:	4628      	mov	r0, r5
 800f69c:	47b8      	blx	r7
 800f69e:	3001      	adds	r0, #1
 800f6a0:	d1c0      	bne.n	800f624 <_printf_float+0x304>
 800f6a2:	e69c      	b.n	800f3de <_printf_float+0xbe>
 800f6a4:	2301      	movs	r3, #1
 800f6a6:	4631      	mov	r1, r6
 800f6a8:	4628      	mov	r0, r5
 800f6aa:	9209      	str	r2, [sp, #36]	; 0x24
 800f6ac:	47b8      	blx	r7
 800f6ae:	3001      	adds	r0, #1
 800f6b0:	f43f ae95 	beq.w	800f3de <_printf_float+0xbe>
 800f6b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f6b6:	f10b 0b01 	add.w	fp, fp, #1
 800f6ba:	e7b9      	b.n	800f630 <_printf_float+0x310>
 800f6bc:	ee18 3a10 	vmov	r3, s16
 800f6c0:	4652      	mov	r2, sl
 800f6c2:	4631      	mov	r1, r6
 800f6c4:	4628      	mov	r0, r5
 800f6c6:	47b8      	blx	r7
 800f6c8:	3001      	adds	r0, #1
 800f6ca:	d1be      	bne.n	800f64a <_printf_float+0x32a>
 800f6cc:	e687      	b.n	800f3de <_printf_float+0xbe>
 800f6ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f6d0:	464b      	mov	r3, r9
 800f6d2:	4442      	add	r2, r8
 800f6d4:	4631      	mov	r1, r6
 800f6d6:	4628      	mov	r0, r5
 800f6d8:	47b8      	blx	r7
 800f6da:	3001      	adds	r0, #1
 800f6dc:	d1c1      	bne.n	800f662 <_printf_float+0x342>
 800f6de:	e67e      	b.n	800f3de <_printf_float+0xbe>
 800f6e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f6e2:	2a01      	cmp	r2, #1
 800f6e4:	dc01      	bgt.n	800f6ea <_printf_float+0x3ca>
 800f6e6:	07db      	lsls	r3, r3, #31
 800f6e8:	d53a      	bpl.n	800f760 <_printf_float+0x440>
 800f6ea:	2301      	movs	r3, #1
 800f6ec:	4642      	mov	r2, r8
 800f6ee:	4631      	mov	r1, r6
 800f6f0:	4628      	mov	r0, r5
 800f6f2:	47b8      	blx	r7
 800f6f4:	3001      	adds	r0, #1
 800f6f6:	f43f ae72 	beq.w	800f3de <_printf_float+0xbe>
 800f6fa:	ee18 3a10 	vmov	r3, s16
 800f6fe:	4652      	mov	r2, sl
 800f700:	4631      	mov	r1, r6
 800f702:	4628      	mov	r0, r5
 800f704:	47b8      	blx	r7
 800f706:	3001      	adds	r0, #1
 800f708:	f43f ae69 	beq.w	800f3de <_printf_float+0xbe>
 800f70c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f710:	2200      	movs	r2, #0
 800f712:	2300      	movs	r3, #0
 800f714:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 800f718:	f7f1 f9f6 	bl	8000b08 <__aeabi_dcmpeq>
 800f71c:	b9d8      	cbnz	r0, 800f756 <_printf_float+0x436>
 800f71e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f722:	f108 0201 	add.w	r2, r8, #1
 800f726:	4631      	mov	r1, r6
 800f728:	4628      	mov	r0, r5
 800f72a:	47b8      	blx	r7
 800f72c:	3001      	adds	r0, #1
 800f72e:	d10e      	bne.n	800f74e <_printf_float+0x42e>
 800f730:	e655      	b.n	800f3de <_printf_float+0xbe>
 800f732:	2301      	movs	r3, #1
 800f734:	4652      	mov	r2, sl
 800f736:	4631      	mov	r1, r6
 800f738:	4628      	mov	r0, r5
 800f73a:	47b8      	blx	r7
 800f73c:	3001      	adds	r0, #1
 800f73e:	f43f ae4e 	beq.w	800f3de <_printf_float+0xbe>
 800f742:	f108 0801 	add.w	r8, r8, #1
 800f746:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f748:	3b01      	subs	r3, #1
 800f74a:	4543      	cmp	r3, r8
 800f74c:	dcf1      	bgt.n	800f732 <_printf_float+0x412>
 800f74e:	464b      	mov	r3, r9
 800f750:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f754:	e6da      	b.n	800f50c <_printf_float+0x1ec>
 800f756:	f04f 0800 	mov.w	r8, #0
 800f75a:	f104 0a1a 	add.w	sl, r4, #26
 800f75e:	e7f2      	b.n	800f746 <_printf_float+0x426>
 800f760:	2301      	movs	r3, #1
 800f762:	4642      	mov	r2, r8
 800f764:	e7df      	b.n	800f726 <_printf_float+0x406>
 800f766:	2301      	movs	r3, #1
 800f768:	464a      	mov	r2, r9
 800f76a:	4631      	mov	r1, r6
 800f76c:	4628      	mov	r0, r5
 800f76e:	47b8      	blx	r7
 800f770:	3001      	adds	r0, #1
 800f772:	f43f ae34 	beq.w	800f3de <_printf_float+0xbe>
 800f776:	f108 0801 	add.w	r8, r8, #1
 800f77a:	68e3      	ldr	r3, [r4, #12]
 800f77c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f77e:	1a5b      	subs	r3, r3, r1
 800f780:	4543      	cmp	r3, r8
 800f782:	dcf0      	bgt.n	800f766 <_printf_float+0x446>
 800f784:	e6f8      	b.n	800f578 <_printf_float+0x258>
 800f786:	f04f 0800 	mov.w	r8, #0
 800f78a:	f104 0919 	add.w	r9, r4, #25
 800f78e:	e7f4      	b.n	800f77a <_printf_float+0x45a>

0800f790 <_printf_common>:
 800f790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f794:	4616      	mov	r6, r2
 800f796:	4699      	mov	r9, r3
 800f798:	688a      	ldr	r2, [r1, #8]
 800f79a:	690b      	ldr	r3, [r1, #16]
 800f79c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f7a0:	4293      	cmp	r3, r2
 800f7a2:	bfb8      	it	lt
 800f7a4:	4613      	movlt	r3, r2
 800f7a6:	6033      	str	r3, [r6, #0]
 800f7a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f7ac:	4607      	mov	r7, r0
 800f7ae:	460c      	mov	r4, r1
 800f7b0:	b10a      	cbz	r2, 800f7b6 <_printf_common+0x26>
 800f7b2:	3301      	adds	r3, #1
 800f7b4:	6033      	str	r3, [r6, #0]
 800f7b6:	6823      	ldr	r3, [r4, #0]
 800f7b8:	0699      	lsls	r1, r3, #26
 800f7ba:	bf42      	ittt	mi
 800f7bc:	6833      	ldrmi	r3, [r6, #0]
 800f7be:	3302      	addmi	r3, #2
 800f7c0:	6033      	strmi	r3, [r6, #0]
 800f7c2:	6825      	ldr	r5, [r4, #0]
 800f7c4:	f015 0506 	ands.w	r5, r5, #6
 800f7c8:	d106      	bne.n	800f7d8 <_printf_common+0x48>
 800f7ca:	f104 0a19 	add.w	sl, r4, #25
 800f7ce:	68e3      	ldr	r3, [r4, #12]
 800f7d0:	6832      	ldr	r2, [r6, #0]
 800f7d2:	1a9b      	subs	r3, r3, r2
 800f7d4:	42ab      	cmp	r3, r5
 800f7d6:	dc26      	bgt.n	800f826 <_printf_common+0x96>
 800f7d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f7dc:	1e13      	subs	r3, r2, #0
 800f7de:	6822      	ldr	r2, [r4, #0]
 800f7e0:	bf18      	it	ne
 800f7e2:	2301      	movne	r3, #1
 800f7e4:	0692      	lsls	r2, r2, #26
 800f7e6:	d42b      	bmi.n	800f840 <_printf_common+0xb0>
 800f7e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f7ec:	4649      	mov	r1, r9
 800f7ee:	4638      	mov	r0, r7
 800f7f0:	47c0      	blx	r8
 800f7f2:	3001      	adds	r0, #1
 800f7f4:	d01e      	beq.n	800f834 <_printf_common+0xa4>
 800f7f6:	6823      	ldr	r3, [r4, #0]
 800f7f8:	6922      	ldr	r2, [r4, #16]
 800f7fa:	f003 0306 	and.w	r3, r3, #6
 800f7fe:	2b04      	cmp	r3, #4
 800f800:	bf02      	ittt	eq
 800f802:	68e5      	ldreq	r5, [r4, #12]
 800f804:	6833      	ldreq	r3, [r6, #0]
 800f806:	1aed      	subeq	r5, r5, r3
 800f808:	68a3      	ldr	r3, [r4, #8]
 800f80a:	bf0c      	ite	eq
 800f80c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f810:	2500      	movne	r5, #0
 800f812:	4293      	cmp	r3, r2
 800f814:	bfc4      	itt	gt
 800f816:	1a9b      	subgt	r3, r3, r2
 800f818:	18ed      	addgt	r5, r5, r3
 800f81a:	2600      	movs	r6, #0
 800f81c:	341a      	adds	r4, #26
 800f81e:	42b5      	cmp	r5, r6
 800f820:	d11a      	bne.n	800f858 <_printf_common+0xc8>
 800f822:	2000      	movs	r0, #0
 800f824:	e008      	b.n	800f838 <_printf_common+0xa8>
 800f826:	2301      	movs	r3, #1
 800f828:	4652      	mov	r2, sl
 800f82a:	4649      	mov	r1, r9
 800f82c:	4638      	mov	r0, r7
 800f82e:	47c0      	blx	r8
 800f830:	3001      	adds	r0, #1
 800f832:	d103      	bne.n	800f83c <_printf_common+0xac>
 800f834:	f04f 30ff 	mov.w	r0, #4294967295
 800f838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f83c:	3501      	adds	r5, #1
 800f83e:	e7c6      	b.n	800f7ce <_printf_common+0x3e>
 800f840:	18e1      	adds	r1, r4, r3
 800f842:	1c5a      	adds	r2, r3, #1
 800f844:	2030      	movs	r0, #48	; 0x30
 800f846:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f84a:	4422      	add	r2, r4
 800f84c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f850:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f854:	3302      	adds	r3, #2
 800f856:	e7c7      	b.n	800f7e8 <_printf_common+0x58>
 800f858:	2301      	movs	r3, #1
 800f85a:	4622      	mov	r2, r4
 800f85c:	4649      	mov	r1, r9
 800f85e:	4638      	mov	r0, r7
 800f860:	47c0      	blx	r8
 800f862:	3001      	adds	r0, #1
 800f864:	d0e6      	beq.n	800f834 <_printf_common+0xa4>
 800f866:	3601      	adds	r6, #1
 800f868:	e7d9      	b.n	800f81e <_printf_common+0x8e>
	...

0800f86c <_printf_i>:
 800f86c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f870:	7e0f      	ldrb	r7, [r1, #24]
 800f872:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f874:	2f78      	cmp	r7, #120	; 0x78
 800f876:	4691      	mov	r9, r2
 800f878:	4680      	mov	r8, r0
 800f87a:	460c      	mov	r4, r1
 800f87c:	469a      	mov	sl, r3
 800f87e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f882:	d807      	bhi.n	800f894 <_printf_i+0x28>
 800f884:	2f62      	cmp	r7, #98	; 0x62
 800f886:	d80a      	bhi.n	800f89e <_printf_i+0x32>
 800f888:	2f00      	cmp	r7, #0
 800f88a:	f000 80d4 	beq.w	800fa36 <_printf_i+0x1ca>
 800f88e:	2f58      	cmp	r7, #88	; 0x58
 800f890:	f000 80c0 	beq.w	800fa14 <_printf_i+0x1a8>
 800f894:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f898:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f89c:	e03a      	b.n	800f914 <_printf_i+0xa8>
 800f89e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f8a2:	2b15      	cmp	r3, #21
 800f8a4:	d8f6      	bhi.n	800f894 <_printf_i+0x28>
 800f8a6:	a101      	add	r1, pc, #4	; (adr r1, 800f8ac <_printf_i+0x40>)
 800f8a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f8ac:	0800f905 	.word	0x0800f905
 800f8b0:	0800f919 	.word	0x0800f919
 800f8b4:	0800f895 	.word	0x0800f895
 800f8b8:	0800f895 	.word	0x0800f895
 800f8bc:	0800f895 	.word	0x0800f895
 800f8c0:	0800f895 	.word	0x0800f895
 800f8c4:	0800f919 	.word	0x0800f919
 800f8c8:	0800f895 	.word	0x0800f895
 800f8cc:	0800f895 	.word	0x0800f895
 800f8d0:	0800f895 	.word	0x0800f895
 800f8d4:	0800f895 	.word	0x0800f895
 800f8d8:	0800fa1d 	.word	0x0800fa1d
 800f8dc:	0800f945 	.word	0x0800f945
 800f8e0:	0800f9d7 	.word	0x0800f9d7
 800f8e4:	0800f895 	.word	0x0800f895
 800f8e8:	0800f895 	.word	0x0800f895
 800f8ec:	0800fa3f 	.word	0x0800fa3f
 800f8f0:	0800f895 	.word	0x0800f895
 800f8f4:	0800f945 	.word	0x0800f945
 800f8f8:	0800f895 	.word	0x0800f895
 800f8fc:	0800f895 	.word	0x0800f895
 800f900:	0800f9df 	.word	0x0800f9df
 800f904:	682b      	ldr	r3, [r5, #0]
 800f906:	1d1a      	adds	r2, r3, #4
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	602a      	str	r2, [r5, #0]
 800f90c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f910:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f914:	2301      	movs	r3, #1
 800f916:	e09f      	b.n	800fa58 <_printf_i+0x1ec>
 800f918:	6820      	ldr	r0, [r4, #0]
 800f91a:	682b      	ldr	r3, [r5, #0]
 800f91c:	0607      	lsls	r7, r0, #24
 800f91e:	f103 0104 	add.w	r1, r3, #4
 800f922:	6029      	str	r1, [r5, #0]
 800f924:	d501      	bpl.n	800f92a <_printf_i+0xbe>
 800f926:	681e      	ldr	r6, [r3, #0]
 800f928:	e003      	b.n	800f932 <_printf_i+0xc6>
 800f92a:	0646      	lsls	r6, r0, #25
 800f92c:	d5fb      	bpl.n	800f926 <_printf_i+0xba>
 800f92e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f932:	2e00      	cmp	r6, #0
 800f934:	da03      	bge.n	800f93e <_printf_i+0xd2>
 800f936:	232d      	movs	r3, #45	; 0x2d
 800f938:	4276      	negs	r6, r6
 800f93a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f93e:	485a      	ldr	r0, [pc, #360]	; (800faa8 <_printf_i+0x23c>)
 800f940:	230a      	movs	r3, #10
 800f942:	e012      	b.n	800f96a <_printf_i+0xfe>
 800f944:	682b      	ldr	r3, [r5, #0]
 800f946:	6820      	ldr	r0, [r4, #0]
 800f948:	1d19      	adds	r1, r3, #4
 800f94a:	6029      	str	r1, [r5, #0]
 800f94c:	0605      	lsls	r5, r0, #24
 800f94e:	d501      	bpl.n	800f954 <_printf_i+0xe8>
 800f950:	681e      	ldr	r6, [r3, #0]
 800f952:	e002      	b.n	800f95a <_printf_i+0xee>
 800f954:	0641      	lsls	r1, r0, #25
 800f956:	d5fb      	bpl.n	800f950 <_printf_i+0xe4>
 800f958:	881e      	ldrh	r6, [r3, #0]
 800f95a:	4853      	ldr	r0, [pc, #332]	; (800faa8 <_printf_i+0x23c>)
 800f95c:	2f6f      	cmp	r7, #111	; 0x6f
 800f95e:	bf0c      	ite	eq
 800f960:	2308      	moveq	r3, #8
 800f962:	230a      	movne	r3, #10
 800f964:	2100      	movs	r1, #0
 800f966:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f96a:	6865      	ldr	r5, [r4, #4]
 800f96c:	60a5      	str	r5, [r4, #8]
 800f96e:	2d00      	cmp	r5, #0
 800f970:	bfa2      	ittt	ge
 800f972:	6821      	ldrge	r1, [r4, #0]
 800f974:	f021 0104 	bicge.w	r1, r1, #4
 800f978:	6021      	strge	r1, [r4, #0]
 800f97a:	b90e      	cbnz	r6, 800f980 <_printf_i+0x114>
 800f97c:	2d00      	cmp	r5, #0
 800f97e:	d04b      	beq.n	800fa18 <_printf_i+0x1ac>
 800f980:	4615      	mov	r5, r2
 800f982:	fbb6 f1f3 	udiv	r1, r6, r3
 800f986:	fb03 6711 	mls	r7, r3, r1, r6
 800f98a:	5dc7      	ldrb	r7, [r0, r7]
 800f98c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f990:	4637      	mov	r7, r6
 800f992:	42bb      	cmp	r3, r7
 800f994:	460e      	mov	r6, r1
 800f996:	d9f4      	bls.n	800f982 <_printf_i+0x116>
 800f998:	2b08      	cmp	r3, #8
 800f99a:	d10b      	bne.n	800f9b4 <_printf_i+0x148>
 800f99c:	6823      	ldr	r3, [r4, #0]
 800f99e:	07de      	lsls	r6, r3, #31
 800f9a0:	d508      	bpl.n	800f9b4 <_printf_i+0x148>
 800f9a2:	6923      	ldr	r3, [r4, #16]
 800f9a4:	6861      	ldr	r1, [r4, #4]
 800f9a6:	4299      	cmp	r1, r3
 800f9a8:	bfde      	ittt	le
 800f9aa:	2330      	movle	r3, #48	; 0x30
 800f9ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f9b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f9b4:	1b52      	subs	r2, r2, r5
 800f9b6:	6122      	str	r2, [r4, #16]
 800f9b8:	f8cd a000 	str.w	sl, [sp]
 800f9bc:	464b      	mov	r3, r9
 800f9be:	aa03      	add	r2, sp, #12
 800f9c0:	4621      	mov	r1, r4
 800f9c2:	4640      	mov	r0, r8
 800f9c4:	f7ff fee4 	bl	800f790 <_printf_common>
 800f9c8:	3001      	adds	r0, #1
 800f9ca:	d14a      	bne.n	800fa62 <_printf_i+0x1f6>
 800f9cc:	f04f 30ff 	mov.w	r0, #4294967295
 800f9d0:	b004      	add	sp, #16
 800f9d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9d6:	6823      	ldr	r3, [r4, #0]
 800f9d8:	f043 0320 	orr.w	r3, r3, #32
 800f9dc:	6023      	str	r3, [r4, #0]
 800f9de:	4833      	ldr	r0, [pc, #204]	; (800faac <_printf_i+0x240>)
 800f9e0:	2778      	movs	r7, #120	; 0x78
 800f9e2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f9e6:	6823      	ldr	r3, [r4, #0]
 800f9e8:	6829      	ldr	r1, [r5, #0]
 800f9ea:	061f      	lsls	r7, r3, #24
 800f9ec:	f851 6b04 	ldr.w	r6, [r1], #4
 800f9f0:	d402      	bmi.n	800f9f8 <_printf_i+0x18c>
 800f9f2:	065f      	lsls	r7, r3, #25
 800f9f4:	bf48      	it	mi
 800f9f6:	b2b6      	uxthmi	r6, r6
 800f9f8:	07df      	lsls	r7, r3, #31
 800f9fa:	bf48      	it	mi
 800f9fc:	f043 0320 	orrmi.w	r3, r3, #32
 800fa00:	6029      	str	r1, [r5, #0]
 800fa02:	bf48      	it	mi
 800fa04:	6023      	strmi	r3, [r4, #0]
 800fa06:	b91e      	cbnz	r6, 800fa10 <_printf_i+0x1a4>
 800fa08:	6823      	ldr	r3, [r4, #0]
 800fa0a:	f023 0320 	bic.w	r3, r3, #32
 800fa0e:	6023      	str	r3, [r4, #0]
 800fa10:	2310      	movs	r3, #16
 800fa12:	e7a7      	b.n	800f964 <_printf_i+0xf8>
 800fa14:	4824      	ldr	r0, [pc, #144]	; (800faa8 <_printf_i+0x23c>)
 800fa16:	e7e4      	b.n	800f9e2 <_printf_i+0x176>
 800fa18:	4615      	mov	r5, r2
 800fa1a:	e7bd      	b.n	800f998 <_printf_i+0x12c>
 800fa1c:	682b      	ldr	r3, [r5, #0]
 800fa1e:	6826      	ldr	r6, [r4, #0]
 800fa20:	6961      	ldr	r1, [r4, #20]
 800fa22:	1d18      	adds	r0, r3, #4
 800fa24:	6028      	str	r0, [r5, #0]
 800fa26:	0635      	lsls	r5, r6, #24
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	d501      	bpl.n	800fa30 <_printf_i+0x1c4>
 800fa2c:	6019      	str	r1, [r3, #0]
 800fa2e:	e002      	b.n	800fa36 <_printf_i+0x1ca>
 800fa30:	0670      	lsls	r0, r6, #25
 800fa32:	d5fb      	bpl.n	800fa2c <_printf_i+0x1c0>
 800fa34:	8019      	strh	r1, [r3, #0]
 800fa36:	2300      	movs	r3, #0
 800fa38:	6123      	str	r3, [r4, #16]
 800fa3a:	4615      	mov	r5, r2
 800fa3c:	e7bc      	b.n	800f9b8 <_printf_i+0x14c>
 800fa3e:	682b      	ldr	r3, [r5, #0]
 800fa40:	1d1a      	adds	r2, r3, #4
 800fa42:	602a      	str	r2, [r5, #0]
 800fa44:	681d      	ldr	r5, [r3, #0]
 800fa46:	6862      	ldr	r2, [r4, #4]
 800fa48:	2100      	movs	r1, #0
 800fa4a:	4628      	mov	r0, r5
 800fa4c:	f7f0 fbe0 	bl	8000210 <memchr>
 800fa50:	b108      	cbz	r0, 800fa56 <_printf_i+0x1ea>
 800fa52:	1b40      	subs	r0, r0, r5
 800fa54:	6060      	str	r0, [r4, #4]
 800fa56:	6863      	ldr	r3, [r4, #4]
 800fa58:	6123      	str	r3, [r4, #16]
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fa60:	e7aa      	b.n	800f9b8 <_printf_i+0x14c>
 800fa62:	6923      	ldr	r3, [r4, #16]
 800fa64:	462a      	mov	r2, r5
 800fa66:	4649      	mov	r1, r9
 800fa68:	4640      	mov	r0, r8
 800fa6a:	47d0      	blx	sl
 800fa6c:	3001      	adds	r0, #1
 800fa6e:	d0ad      	beq.n	800f9cc <_printf_i+0x160>
 800fa70:	6823      	ldr	r3, [r4, #0]
 800fa72:	079b      	lsls	r3, r3, #30
 800fa74:	d413      	bmi.n	800fa9e <_printf_i+0x232>
 800fa76:	68e0      	ldr	r0, [r4, #12]
 800fa78:	9b03      	ldr	r3, [sp, #12]
 800fa7a:	4298      	cmp	r0, r3
 800fa7c:	bfb8      	it	lt
 800fa7e:	4618      	movlt	r0, r3
 800fa80:	e7a6      	b.n	800f9d0 <_printf_i+0x164>
 800fa82:	2301      	movs	r3, #1
 800fa84:	4632      	mov	r2, r6
 800fa86:	4649      	mov	r1, r9
 800fa88:	4640      	mov	r0, r8
 800fa8a:	47d0      	blx	sl
 800fa8c:	3001      	adds	r0, #1
 800fa8e:	d09d      	beq.n	800f9cc <_printf_i+0x160>
 800fa90:	3501      	adds	r5, #1
 800fa92:	68e3      	ldr	r3, [r4, #12]
 800fa94:	9903      	ldr	r1, [sp, #12]
 800fa96:	1a5b      	subs	r3, r3, r1
 800fa98:	42ab      	cmp	r3, r5
 800fa9a:	dcf2      	bgt.n	800fa82 <_printf_i+0x216>
 800fa9c:	e7eb      	b.n	800fa76 <_printf_i+0x20a>
 800fa9e:	2500      	movs	r5, #0
 800faa0:	f104 0619 	add.w	r6, r4, #25
 800faa4:	e7f5      	b.n	800fa92 <_printf_i+0x226>
 800faa6:	bf00      	nop
 800faa8:	0801498b 	.word	0x0801498b
 800faac:	0801499c 	.word	0x0801499c

0800fab0 <_scanf_float>:
 800fab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fab4:	b087      	sub	sp, #28
 800fab6:	4617      	mov	r7, r2
 800fab8:	9303      	str	r3, [sp, #12]
 800faba:	688b      	ldr	r3, [r1, #8]
 800fabc:	1e5a      	subs	r2, r3, #1
 800fabe:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800fac2:	bf83      	ittte	hi
 800fac4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800fac8:	195b      	addhi	r3, r3, r5
 800faca:	9302      	strhi	r3, [sp, #8]
 800facc:	2300      	movls	r3, #0
 800face:	bf86      	itte	hi
 800fad0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800fad4:	608b      	strhi	r3, [r1, #8]
 800fad6:	9302      	strls	r3, [sp, #8]
 800fad8:	680b      	ldr	r3, [r1, #0]
 800fada:	468b      	mov	fp, r1
 800fadc:	2500      	movs	r5, #0
 800fade:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800fae2:	f84b 3b1c 	str.w	r3, [fp], #28
 800fae6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800faea:	4680      	mov	r8, r0
 800faec:	460c      	mov	r4, r1
 800faee:	465e      	mov	r6, fp
 800faf0:	46aa      	mov	sl, r5
 800faf2:	46a9      	mov	r9, r5
 800faf4:	9501      	str	r5, [sp, #4]
 800faf6:	68a2      	ldr	r2, [r4, #8]
 800faf8:	b152      	cbz	r2, 800fb10 <_scanf_float+0x60>
 800fafa:	683b      	ldr	r3, [r7, #0]
 800fafc:	781b      	ldrb	r3, [r3, #0]
 800fafe:	2b4e      	cmp	r3, #78	; 0x4e
 800fb00:	d864      	bhi.n	800fbcc <_scanf_float+0x11c>
 800fb02:	2b40      	cmp	r3, #64	; 0x40
 800fb04:	d83c      	bhi.n	800fb80 <_scanf_float+0xd0>
 800fb06:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800fb0a:	b2c8      	uxtb	r0, r1
 800fb0c:	280e      	cmp	r0, #14
 800fb0e:	d93a      	bls.n	800fb86 <_scanf_float+0xd6>
 800fb10:	f1b9 0f00 	cmp.w	r9, #0
 800fb14:	d003      	beq.n	800fb1e <_scanf_float+0x6e>
 800fb16:	6823      	ldr	r3, [r4, #0]
 800fb18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fb1c:	6023      	str	r3, [r4, #0]
 800fb1e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fb22:	f1ba 0f01 	cmp.w	sl, #1
 800fb26:	f200 8113 	bhi.w	800fd50 <_scanf_float+0x2a0>
 800fb2a:	455e      	cmp	r6, fp
 800fb2c:	f200 8105 	bhi.w	800fd3a <_scanf_float+0x28a>
 800fb30:	2501      	movs	r5, #1
 800fb32:	4628      	mov	r0, r5
 800fb34:	b007      	add	sp, #28
 800fb36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb3a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800fb3e:	2a0d      	cmp	r2, #13
 800fb40:	d8e6      	bhi.n	800fb10 <_scanf_float+0x60>
 800fb42:	a101      	add	r1, pc, #4	; (adr r1, 800fb48 <_scanf_float+0x98>)
 800fb44:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800fb48:	0800fc87 	.word	0x0800fc87
 800fb4c:	0800fb11 	.word	0x0800fb11
 800fb50:	0800fb11 	.word	0x0800fb11
 800fb54:	0800fb11 	.word	0x0800fb11
 800fb58:	0800fce7 	.word	0x0800fce7
 800fb5c:	0800fcbf 	.word	0x0800fcbf
 800fb60:	0800fb11 	.word	0x0800fb11
 800fb64:	0800fb11 	.word	0x0800fb11
 800fb68:	0800fc95 	.word	0x0800fc95
 800fb6c:	0800fb11 	.word	0x0800fb11
 800fb70:	0800fb11 	.word	0x0800fb11
 800fb74:	0800fb11 	.word	0x0800fb11
 800fb78:	0800fb11 	.word	0x0800fb11
 800fb7c:	0800fc4d 	.word	0x0800fc4d
 800fb80:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800fb84:	e7db      	b.n	800fb3e <_scanf_float+0x8e>
 800fb86:	290e      	cmp	r1, #14
 800fb88:	d8c2      	bhi.n	800fb10 <_scanf_float+0x60>
 800fb8a:	a001      	add	r0, pc, #4	; (adr r0, 800fb90 <_scanf_float+0xe0>)
 800fb8c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800fb90:	0800fc3f 	.word	0x0800fc3f
 800fb94:	0800fb11 	.word	0x0800fb11
 800fb98:	0800fc3f 	.word	0x0800fc3f
 800fb9c:	0800fcd3 	.word	0x0800fcd3
 800fba0:	0800fb11 	.word	0x0800fb11
 800fba4:	0800fbed 	.word	0x0800fbed
 800fba8:	0800fc29 	.word	0x0800fc29
 800fbac:	0800fc29 	.word	0x0800fc29
 800fbb0:	0800fc29 	.word	0x0800fc29
 800fbb4:	0800fc29 	.word	0x0800fc29
 800fbb8:	0800fc29 	.word	0x0800fc29
 800fbbc:	0800fc29 	.word	0x0800fc29
 800fbc0:	0800fc29 	.word	0x0800fc29
 800fbc4:	0800fc29 	.word	0x0800fc29
 800fbc8:	0800fc29 	.word	0x0800fc29
 800fbcc:	2b6e      	cmp	r3, #110	; 0x6e
 800fbce:	d809      	bhi.n	800fbe4 <_scanf_float+0x134>
 800fbd0:	2b60      	cmp	r3, #96	; 0x60
 800fbd2:	d8b2      	bhi.n	800fb3a <_scanf_float+0x8a>
 800fbd4:	2b54      	cmp	r3, #84	; 0x54
 800fbd6:	d077      	beq.n	800fcc8 <_scanf_float+0x218>
 800fbd8:	2b59      	cmp	r3, #89	; 0x59
 800fbda:	d199      	bne.n	800fb10 <_scanf_float+0x60>
 800fbdc:	2d07      	cmp	r5, #7
 800fbde:	d197      	bne.n	800fb10 <_scanf_float+0x60>
 800fbe0:	2508      	movs	r5, #8
 800fbe2:	e029      	b.n	800fc38 <_scanf_float+0x188>
 800fbe4:	2b74      	cmp	r3, #116	; 0x74
 800fbe6:	d06f      	beq.n	800fcc8 <_scanf_float+0x218>
 800fbe8:	2b79      	cmp	r3, #121	; 0x79
 800fbea:	e7f6      	b.n	800fbda <_scanf_float+0x12a>
 800fbec:	6821      	ldr	r1, [r4, #0]
 800fbee:	05c8      	lsls	r0, r1, #23
 800fbf0:	d51a      	bpl.n	800fc28 <_scanf_float+0x178>
 800fbf2:	9b02      	ldr	r3, [sp, #8]
 800fbf4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800fbf8:	6021      	str	r1, [r4, #0]
 800fbfa:	f109 0901 	add.w	r9, r9, #1
 800fbfe:	b11b      	cbz	r3, 800fc08 <_scanf_float+0x158>
 800fc00:	3b01      	subs	r3, #1
 800fc02:	3201      	adds	r2, #1
 800fc04:	9302      	str	r3, [sp, #8]
 800fc06:	60a2      	str	r2, [r4, #8]
 800fc08:	68a3      	ldr	r3, [r4, #8]
 800fc0a:	3b01      	subs	r3, #1
 800fc0c:	60a3      	str	r3, [r4, #8]
 800fc0e:	6923      	ldr	r3, [r4, #16]
 800fc10:	3301      	adds	r3, #1
 800fc12:	6123      	str	r3, [r4, #16]
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	3b01      	subs	r3, #1
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	607b      	str	r3, [r7, #4]
 800fc1c:	f340 8084 	ble.w	800fd28 <_scanf_float+0x278>
 800fc20:	683b      	ldr	r3, [r7, #0]
 800fc22:	3301      	adds	r3, #1
 800fc24:	603b      	str	r3, [r7, #0]
 800fc26:	e766      	b.n	800faf6 <_scanf_float+0x46>
 800fc28:	eb1a 0f05 	cmn.w	sl, r5
 800fc2c:	f47f af70 	bne.w	800fb10 <_scanf_float+0x60>
 800fc30:	6822      	ldr	r2, [r4, #0]
 800fc32:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800fc36:	6022      	str	r2, [r4, #0]
 800fc38:	f806 3b01 	strb.w	r3, [r6], #1
 800fc3c:	e7e4      	b.n	800fc08 <_scanf_float+0x158>
 800fc3e:	6822      	ldr	r2, [r4, #0]
 800fc40:	0610      	lsls	r0, r2, #24
 800fc42:	f57f af65 	bpl.w	800fb10 <_scanf_float+0x60>
 800fc46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fc4a:	e7f4      	b.n	800fc36 <_scanf_float+0x186>
 800fc4c:	f1ba 0f00 	cmp.w	sl, #0
 800fc50:	d10e      	bne.n	800fc70 <_scanf_float+0x1c0>
 800fc52:	f1b9 0f00 	cmp.w	r9, #0
 800fc56:	d10e      	bne.n	800fc76 <_scanf_float+0x1c6>
 800fc58:	6822      	ldr	r2, [r4, #0]
 800fc5a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800fc5e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800fc62:	d108      	bne.n	800fc76 <_scanf_float+0x1c6>
 800fc64:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fc68:	6022      	str	r2, [r4, #0]
 800fc6a:	f04f 0a01 	mov.w	sl, #1
 800fc6e:	e7e3      	b.n	800fc38 <_scanf_float+0x188>
 800fc70:	f1ba 0f02 	cmp.w	sl, #2
 800fc74:	d055      	beq.n	800fd22 <_scanf_float+0x272>
 800fc76:	2d01      	cmp	r5, #1
 800fc78:	d002      	beq.n	800fc80 <_scanf_float+0x1d0>
 800fc7a:	2d04      	cmp	r5, #4
 800fc7c:	f47f af48 	bne.w	800fb10 <_scanf_float+0x60>
 800fc80:	3501      	adds	r5, #1
 800fc82:	b2ed      	uxtb	r5, r5
 800fc84:	e7d8      	b.n	800fc38 <_scanf_float+0x188>
 800fc86:	f1ba 0f01 	cmp.w	sl, #1
 800fc8a:	f47f af41 	bne.w	800fb10 <_scanf_float+0x60>
 800fc8e:	f04f 0a02 	mov.w	sl, #2
 800fc92:	e7d1      	b.n	800fc38 <_scanf_float+0x188>
 800fc94:	b97d      	cbnz	r5, 800fcb6 <_scanf_float+0x206>
 800fc96:	f1b9 0f00 	cmp.w	r9, #0
 800fc9a:	f47f af3c 	bne.w	800fb16 <_scanf_float+0x66>
 800fc9e:	6822      	ldr	r2, [r4, #0]
 800fca0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800fca4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800fca8:	f47f af39 	bne.w	800fb1e <_scanf_float+0x6e>
 800fcac:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fcb0:	6022      	str	r2, [r4, #0]
 800fcb2:	2501      	movs	r5, #1
 800fcb4:	e7c0      	b.n	800fc38 <_scanf_float+0x188>
 800fcb6:	2d03      	cmp	r5, #3
 800fcb8:	d0e2      	beq.n	800fc80 <_scanf_float+0x1d0>
 800fcba:	2d05      	cmp	r5, #5
 800fcbc:	e7de      	b.n	800fc7c <_scanf_float+0x1cc>
 800fcbe:	2d02      	cmp	r5, #2
 800fcc0:	f47f af26 	bne.w	800fb10 <_scanf_float+0x60>
 800fcc4:	2503      	movs	r5, #3
 800fcc6:	e7b7      	b.n	800fc38 <_scanf_float+0x188>
 800fcc8:	2d06      	cmp	r5, #6
 800fcca:	f47f af21 	bne.w	800fb10 <_scanf_float+0x60>
 800fcce:	2507      	movs	r5, #7
 800fcd0:	e7b2      	b.n	800fc38 <_scanf_float+0x188>
 800fcd2:	6822      	ldr	r2, [r4, #0]
 800fcd4:	0591      	lsls	r1, r2, #22
 800fcd6:	f57f af1b 	bpl.w	800fb10 <_scanf_float+0x60>
 800fcda:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800fcde:	6022      	str	r2, [r4, #0]
 800fce0:	f8cd 9004 	str.w	r9, [sp, #4]
 800fce4:	e7a8      	b.n	800fc38 <_scanf_float+0x188>
 800fce6:	6822      	ldr	r2, [r4, #0]
 800fce8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800fcec:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800fcf0:	d006      	beq.n	800fd00 <_scanf_float+0x250>
 800fcf2:	0550      	lsls	r0, r2, #21
 800fcf4:	f57f af0c 	bpl.w	800fb10 <_scanf_float+0x60>
 800fcf8:	f1b9 0f00 	cmp.w	r9, #0
 800fcfc:	f43f af0f 	beq.w	800fb1e <_scanf_float+0x6e>
 800fd00:	0591      	lsls	r1, r2, #22
 800fd02:	bf58      	it	pl
 800fd04:	9901      	ldrpl	r1, [sp, #4]
 800fd06:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fd0a:	bf58      	it	pl
 800fd0c:	eba9 0101 	subpl.w	r1, r9, r1
 800fd10:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800fd14:	bf58      	it	pl
 800fd16:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800fd1a:	6022      	str	r2, [r4, #0]
 800fd1c:	f04f 0900 	mov.w	r9, #0
 800fd20:	e78a      	b.n	800fc38 <_scanf_float+0x188>
 800fd22:	f04f 0a03 	mov.w	sl, #3
 800fd26:	e787      	b.n	800fc38 <_scanf_float+0x188>
 800fd28:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800fd2c:	4639      	mov	r1, r7
 800fd2e:	4640      	mov	r0, r8
 800fd30:	4798      	blx	r3
 800fd32:	2800      	cmp	r0, #0
 800fd34:	f43f aedf 	beq.w	800faf6 <_scanf_float+0x46>
 800fd38:	e6ea      	b.n	800fb10 <_scanf_float+0x60>
 800fd3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fd3e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fd42:	463a      	mov	r2, r7
 800fd44:	4640      	mov	r0, r8
 800fd46:	4798      	blx	r3
 800fd48:	6923      	ldr	r3, [r4, #16]
 800fd4a:	3b01      	subs	r3, #1
 800fd4c:	6123      	str	r3, [r4, #16]
 800fd4e:	e6ec      	b.n	800fb2a <_scanf_float+0x7a>
 800fd50:	1e6b      	subs	r3, r5, #1
 800fd52:	2b06      	cmp	r3, #6
 800fd54:	d825      	bhi.n	800fda2 <_scanf_float+0x2f2>
 800fd56:	2d02      	cmp	r5, #2
 800fd58:	d836      	bhi.n	800fdc8 <_scanf_float+0x318>
 800fd5a:	455e      	cmp	r6, fp
 800fd5c:	f67f aee8 	bls.w	800fb30 <_scanf_float+0x80>
 800fd60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fd64:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fd68:	463a      	mov	r2, r7
 800fd6a:	4640      	mov	r0, r8
 800fd6c:	4798      	blx	r3
 800fd6e:	6923      	ldr	r3, [r4, #16]
 800fd70:	3b01      	subs	r3, #1
 800fd72:	6123      	str	r3, [r4, #16]
 800fd74:	e7f1      	b.n	800fd5a <_scanf_float+0x2aa>
 800fd76:	9802      	ldr	r0, [sp, #8]
 800fd78:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fd7c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800fd80:	9002      	str	r0, [sp, #8]
 800fd82:	463a      	mov	r2, r7
 800fd84:	4640      	mov	r0, r8
 800fd86:	4798      	blx	r3
 800fd88:	6923      	ldr	r3, [r4, #16]
 800fd8a:	3b01      	subs	r3, #1
 800fd8c:	6123      	str	r3, [r4, #16]
 800fd8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fd92:	fa5f fa8a 	uxtb.w	sl, sl
 800fd96:	f1ba 0f02 	cmp.w	sl, #2
 800fd9a:	d1ec      	bne.n	800fd76 <_scanf_float+0x2c6>
 800fd9c:	3d03      	subs	r5, #3
 800fd9e:	b2ed      	uxtb	r5, r5
 800fda0:	1b76      	subs	r6, r6, r5
 800fda2:	6823      	ldr	r3, [r4, #0]
 800fda4:	05da      	lsls	r2, r3, #23
 800fda6:	d52f      	bpl.n	800fe08 <_scanf_float+0x358>
 800fda8:	055b      	lsls	r3, r3, #21
 800fdaa:	d510      	bpl.n	800fdce <_scanf_float+0x31e>
 800fdac:	455e      	cmp	r6, fp
 800fdae:	f67f aebf 	bls.w	800fb30 <_scanf_float+0x80>
 800fdb2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fdb6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fdba:	463a      	mov	r2, r7
 800fdbc:	4640      	mov	r0, r8
 800fdbe:	4798      	blx	r3
 800fdc0:	6923      	ldr	r3, [r4, #16]
 800fdc2:	3b01      	subs	r3, #1
 800fdc4:	6123      	str	r3, [r4, #16]
 800fdc6:	e7f1      	b.n	800fdac <_scanf_float+0x2fc>
 800fdc8:	46aa      	mov	sl, r5
 800fdca:	9602      	str	r6, [sp, #8]
 800fdcc:	e7df      	b.n	800fd8e <_scanf_float+0x2de>
 800fdce:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800fdd2:	6923      	ldr	r3, [r4, #16]
 800fdd4:	2965      	cmp	r1, #101	; 0x65
 800fdd6:	f103 33ff 	add.w	r3, r3, #4294967295
 800fdda:	f106 35ff 	add.w	r5, r6, #4294967295
 800fdde:	6123      	str	r3, [r4, #16]
 800fde0:	d00c      	beq.n	800fdfc <_scanf_float+0x34c>
 800fde2:	2945      	cmp	r1, #69	; 0x45
 800fde4:	d00a      	beq.n	800fdfc <_scanf_float+0x34c>
 800fde6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fdea:	463a      	mov	r2, r7
 800fdec:	4640      	mov	r0, r8
 800fdee:	4798      	blx	r3
 800fdf0:	6923      	ldr	r3, [r4, #16]
 800fdf2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800fdf6:	3b01      	subs	r3, #1
 800fdf8:	1eb5      	subs	r5, r6, #2
 800fdfa:	6123      	str	r3, [r4, #16]
 800fdfc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fe00:	463a      	mov	r2, r7
 800fe02:	4640      	mov	r0, r8
 800fe04:	4798      	blx	r3
 800fe06:	462e      	mov	r6, r5
 800fe08:	6825      	ldr	r5, [r4, #0]
 800fe0a:	f015 0510 	ands.w	r5, r5, #16
 800fe0e:	d154      	bne.n	800feba <_scanf_float+0x40a>
 800fe10:	7035      	strb	r5, [r6, #0]
 800fe12:	6823      	ldr	r3, [r4, #0]
 800fe14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800fe18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fe1c:	d11e      	bne.n	800fe5c <_scanf_float+0x3ac>
 800fe1e:	9b01      	ldr	r3, [sp, #4]
 800fe20:	454b      	cmp	r3, r9
 800fe22:	eba3 0209 	sub.w	r2, r3, r9
 800fe26:	d126      	bne.n	800fe76 <_scanf_float+0x3c6>
 800fe28:	2200      	movs	r2, #0
 800fe2a:	4659      	mov	r1, fp
 800fe2c:	4640      	mov	r0, r8
 800fe2e:	f002 fd5b 	bl	80128e8 <_strtod_r>
 800fe32:	9b03      	ldr	r3, [sp, #12]
 800fe34:	f8d4 c000 	ldr.w	ip, [r4]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	f01c 0f02 	tst.w	ip, #2
 800fe3e:	460f      	mov	r7, r1
 800fe40:	4681      	mov	r9, r0
 800fe42:	468a      	mov	sl, r1
 800fe44:	f103 0204 	add.w	r2, r3, #4
 800fe48:	d020      	beq.n	800fe8c <_scanf_float+0x3dc>
 800fe4a:	9903      	ldr	r1, [sp, #12]
 800fe4c:	600a      	str	r2, [r1, #0]
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	e9c3 9a00 	strd	r9, sl, [r3]
 800fe54:	68e3      	ldr	r3, [r4, #12]
 800fe56:	3301      	adds	r3, #1
 800fe58:	60e3      	str	r3, [r4, #12]
 800fe5a:	e66a      	b.n	800fb32 <_scanf_float+0x82>
 800fe5c:	9b04      	ldr	r3, [sp, #16]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d0e2      	beq.n	800fe28 <_scanf_float+0x378>
 800fe62:	9905      	ldr	r1, [sp, #20]
 800fe64:	230a      	movs	r3, #10
 800fe66:	462a      	mov	r2, r5
 800fe68:	3101      	adds	r1, #1
 800fe6a:	4640      	mov	r0, r8
 800fe6c:	f7ff f9b6 	bl	800f1dc <_strtol_r>
 800fe70:	9b04      	ldr	r3, [sp, #16]
 800fe72:	9e05      	ldr	r6, [sp, #20]
 800fe74:	1ac2      	subs	r2, r0, r3
 800fe76:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800fe7a:	429e      	cmp	r6, r3
 800fe7c:	bf28      	it	cs
 800fe7e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800fe82:	490f      	ldr	r1, [pc, #60]	; (800fec0 <_scanf_float+0x410>)
 800fe84:	4630      	mov	r0, r6
 800fe86:	f000 f93d 	bl	8010104 <siprintf>
 800fe8a:	e7cd      	b.n	800fe28 <_scanf_float+0x378>
 800fe8c:	f01c 0f04 	tst.w	ip, #4
 800fe90:	d1db      	bne.n	800fe4a <_scanf_float+0x39a>
 800fe92:	9e03      	ldr	r6, [sp, #12]
 800fe94:	6032      	str	r2, [r6, #0]
 800fe96:	f8d3 8000 	ldr.w	r8, [r3]
 800fe9a:	4602      	mov	r2, r0
 800fe9c:	460b      	mov	r3, r1
 800fe9e:	f7f0 fe65 	bl	8000b6c <__aeabi_dcmpun>
 800fea2:	b128      	cbz	r0, 800feb0 <_scanf_float+0x400>
 800fea4:	4807      	ldr	r0, [pc, #28]	; (800fec4 <_scanf_float+0x414>)
 800fea6:	f000 fad3 	bl	8010450 <nanf>
 800feaa:	f8c8 0000 	str.w	r0, [r8]
 800feae:	e7d1      	b.n	800fe54 <_scanf_float+0x3a4>
 800feb0:	4648      	mov	r0, r9
 800feb2:	4639      	mov	r1, r7
 800feb4:	f7f0 feb8 	bl	8000c28 <__aeabi_d2f>
 800feb8:	e7f7      	b.n	800feaa <_scanf_float+0x3fa>
 800feba:	2500      	movs	r5, #0
 800febc:	e639      	b.n	800fb32 <_scanf_float+0x82>
 800febe:	bf00      	nop
 800fec0:	080149ad 	.word	0x080149ad
 800fec4:	080149ed 	.word	0x080149ed

0800fec8 <std>:
 800fec8:	2300      	movs	r3, #0
 800feca:	b510      	push	{r4, lr}
 800fecc:	4604      	mov	r4, r0
 800fece:	e9c0 3300 	strd	r3, r3, [r0]
 800fed2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fed6:	6083      	str	r3, [r0, #8]
 800fed8:	8181      	strh	r1, [r0, #12]
 800feda:	6643      	str	r3, [r0, #100]	; 0x64
 800fedc:	81c2      	strh	r2, [r0, #14]
 800fede:	6183      	str	r3, [r0, #24]
 800fee0:	4619      	mov	r1, r3
 800fee2:	2208      	movs	r2, #8
 800fee4:	305c      	adds	r0, #92	; 0x5c
 800fee6:	f000 fa27 	bl	8010338 <memset>
 800feea:	4b05      	ldr	r3, [pc, #20]	; (800ff00 <std+0x38>)
 800feec:	6263      	str	r3, [r4, #36]	; 0x24
 800feee:	4b05      	ldr	r3, [pc, #20]	; (800ff04 <std+0x3c>)
 800fef0:	62a3      	str	r3, [r4, #40]	; 0x28
 800fef2:	4b05      	ldr	r3, [pc, #20]	; (800ff08 <std+0x40>)
 800fef4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fef6:	4b05      	ldr	r3, [pc, #20]	; (800ff0c <std+0x44>)
 800fef8:	6224      	str	r4, [r4, #32]
 800fefa:	6323      	str	r3, [r4, #48]	; 0x30
 800fefc:	bd10      	pop	{r4, pc}
 800fefe:	bf00      	nop
 800ff00:	08010145 	.word	0x08010145
 800ff04:	08010167 	.word	0x08010167
 800ff08:	0801019f 	.word	0x0801019f
 800ff0c:	080101c3 	.word	0x080101c3

0800ff10 <stdio_exit_handler>:
 800ff10:	4a02      	ldr	r2, [pc, #8]	; (800ff1c <stdio_exit_handler+0xc>)
 800ff12:	4903      	ldr	r1, [pc, #12]	; (800ff20 <stdio_exit_handler+0x10>)
 800ff14:	4803      	ldr	r0, [pc, #12]	; (800ff24 <stdio_exit_handler+0x14>)
 800ff16:	f000 b869 	b.w	800ffec <_fwalk_sglue>
 800ff1a:	bf00      	nop
 800ff1c:	20000078 	.word	0x20000078
 800ff20:	08012f39 	.word	0x08012f39
 800ff24:	20000084 	.word	0x20000084

0800ff28 <cleanup_stdio>:
 800ff28:	6841      	ldr	r1, [r0, #4]
 800ff2a:	4b0c      	ldr	r3, [pc, #48]	; (800ff5c <cleanup_stdio+0x34>)
 800ff2c:	4299      	cmp	r1, r3
 800ff2e:	b510      	push	{r4, lr}
 800ff30:	4604      	mov	r4, r0
 800ff32:	d001      	beq.n	800ff38 <cleanup_stdio+0x10>
 800ff34:	f003 f800 	bl	8012f38 <_fflush_r>
 800ff38:	68a1      	ldr	r1, [r4, #8]
 800ff3a:	4b09      	ldr	r3, [pc, #36]	; (800ff60 <cleanup_stdio+0x38>)
 800ff3c:	4299      	cmp	r1, r3
 800ff3e:	d002      	beq.n	800ff46 <cleanup_stdio+0x1e>
 800ff40:	4620      	mov	r0, r4
 800ff42:	f002 fff9 	bl	8012f38 <_fflush_r>
 800ff46:	68e1      	ldr	r1, [r4, #12]
 800ff48:	4b06      	ldr	r3, [pc, #24]	; (800ff64 <cleanup_stdio+0x3c>)
 800ff4a:	4299      	cmp	r1, r3
 800ff4c:	d004      	beq.n	800ff58 <cleanup_stdio+0x30>
 800ff4e:	4620      	mov	r0, r4
 800ff50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff54:	f002 bff0 	b.w	8012f38 <_fflush_r>
 800ff58:	bd10      	pop	{r4, pc}
 800ff5a:	bf00      	nop
 800ff5c:	20003de4 	.word	0x20003de4
 800ff60:	20003e4c 	.word	0x20003e4c
 800ff64:	20003eb4 	.word	0x20003eb4

0800ff68 <global_stdio_init.part.0>:
 800ff68:	b510      	push	{r4, lr}
 800ff6a:	4b0b      	ldr	r3, [pc, #44]	; (800ff98 <global_stdio_init.part.0+0x30>)
 800ff6c:	4c0b      	ldr	r4, [pc, #44]	; (800ff9c <global_stdio_init.part.0+0x34>)
 800ff6e:	4a0c      	ldr	r2, [pc, #48]	; (800ffa0 <global_stdio_init.part.0+0x38>)
 800ff70:	601a      	str	r2, [r3, #0]
 800ff72:	4620      	mov	r0, r4
 800ff74:	2200      	movs	r2, #0
 800ff76:	2104      	movs	r1, #4
 800ff78:	f7ff ffa6 	bl	800fec8 <std>
 800ff7c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ff80:	2201      	movs	r2, #1
 800ff82:	2109      	movs	r1, #9
 800ff84:	f7ff ffa0 	bl	800fec8 <std>
 800ff88:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ff8c:	2202      	movs	r2, #2
 800ff8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff92:	2112      	movs	r1, #18
 800ff94:	f7ff bf98 	b.w	800fec8 <std>
 800ff98:	20003f1c 	.word	0x20003f1c
 800ff9c:	20003de4 	.word	0x20003de4
 800ffa0:	0800ff11 	.word	0x0800ff11

0800ffa4 <__sfp_lock_acquire>:
 800ffa4:	4801      	ldr	r0, [pc, #4]	; (800ffac <__sfp_lock_acquire+0x8>)
 800ffa6:	f000 ba43 	b.w	8010430 <__retarget_lock_acquire_recursive>
 800ffaa:	bf00      	nop
 800ffac:	20003f25 	.word	0x20003f25

0800ffb0 <__sfp_lock_release>:
 800ffb0:	4801      	ldr	r0, [pc, #4]	; (800ffb8 <__sfp_lock_release+0x8>)
 800ffb2:	f000 ba3e 	b.w	8010432 <__retarget_lock_release_recursive>
 800ffb6:	bf00      	nop
 800ffb8:	20003f25 	.word	0x20003f25

0800ffbc <__sinit>:
 800ffbc:	b510      	push	{r4, lr}
 800ffbe:	4604      	mov	r4, r0
 800ffc0:	f7ff fff0 	bl	800ffa4 <__sfp_lock_acquire>
 800ffc4:	6a23      	ldr	r3, [r4, #32]
 800ffc6:	b11b      	cbz	r3, 800ffd0 <__sinit+0x14>
 800ffc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ffcc:	f7ff bff0 	b.w	800ffb0 <__sfp_lock_release>
 800ffd0:	4b04      	ldr	r3, [pc, #16]	; (800ffe4 <__sinit+0x28>)
 800ffd2:	6223      	str	r3, [r4, #32]
 800ffd4:	4b04      	ldr	r3, [pc, #16]	; (800ffe8 <__sinit+0x2c>)
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d1f5      	bne.n	800ffc8 <__sinit+0xc>
 800ffdc:	f7ff ffc4 	bl	800ff68 <global_stdio_init.part.0>
 800ffe0:	e7f2      	b.n	800ffc8 <__sinit+0xc>
 800ffe2:	bf00      	nop
 800ffe4:	0800ff29 	.word	0x0800ff29
 800ffe8:	20003f1c 	.word	0x20003f1c

0800ffec <_fwalk_sglue>:
 800ffec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fff0:	4607      	mov	r7, r0
 800fff2:	4688      	mov	r8, r1
 800fff4:	4614      	mov	r4, r2
 800fff6:	2600      	movs	r6, #0
 800fff8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fffc:	f1b9 0901 	subs.w	r9, r9, #1
 8010000:	d505      	bpl.n	801000e <_fwalk_sglue+0x22>
 8010002:	6824      	ldr	r4, [r4, #0]
 8010004:	2c00      	cmp	r4, #0
 8010006:	d1f7      	bne.n	800fff8 <_fwalk_sglue+0xc>
 8010008:	4630      	mov	r0, r6
 801000a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801000e:	89ab      	ldrh	r3, [r5, #12]
 8010010:	2b01      	cmp	r3, #1
 8010012:	d907      	bls.n	8010024 <_fwalk_sglue+0x38>
 8010014:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010018:	3301      	adds	r3, #1
 801001a:	d003      	beq.n	8010024 <_fwalk_sglue+0x38>
 801001c:	4629      	mov	r1, r5
 801001e:	4638      	mov	r0, r7
 8010020:	47c0      	blx	r8
 8010022:	4306      	orrs	r6, r0
 8010024:	3568      	adds	r5, #104	; 0x68
 8010026:	e7e9      	b.n	800fffc <_fwalk_sglue+0x10>

08010028 <iprintf>:
 8010028:	b40f      	push	{r0, r1, r2, r3}
 801002a:	b507      	push	{r0, r1, r2, lr}
 801002c:	4906      	ldr	r1, [pc, #24]	; (8010048 <iprintf+0x20>)
 801002e:	ab04      	add	r3, sp, #16
 8010030:	6808      	ldr	r0, [r1, #0]
 8010032:	f853 2b04 	ldr.w	r2, [r3], #4
 8010036:	6881      	ldr	r1, [r0, #8]
 8010038:	9301      	str	r3, [sp, #4]
 801003a:	f002 fddd 	bl	8012bf8 <_vfiprintf_r>
 801003e:	b003      	add	sp, #12
 8010040:	f85d eb04 	ldr.w	lr, [sp], #4
 8010044:	b004      	add	sp, #16
 8010046:	4770      	bx	lr
 8010048:	200000d0 	.word	0x200000d0

0801004c <_puts_r>:
 801004c:	6a03      	ldr	r3, [r0, #32]
 801004e:	b570      	push	{r4, r5, r6, lr}
 8010050:	6884      	ldr	r4, [r0, #8]
 8010052:	4605      	mov	r5, r0
 8010054:	460e      	mov	r6, r1
 8010056:	b90b      	cbnz	r3, 801005c <_puts_r+0x10>
 8010058:	f7ff ffb0 	bl	800ffbc <__sinit>
 801005c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801005e:	07db      	lsls	r3, r3, #31
 8010060:	d405      	bmi.n	801006e <_puts_r+0x22>
 8010062:	89a3      	ldrh	r3, [r4, #12]
 8010064:	0598      	lsls	r0, r3, #22
 8010066:	d402      	bmi.n	801006e <_puts_r+0x22>
 8010068:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801006a:	f000 f9e1 	bl	8010430 <__retarget_lock_acquire_recursive>
 801006e:	89a3      	ldrh	r3, [r4, #12]
 8010070:	0719      	lsls	r1, r3, #28
 8010072:	d513      	bpl.n	801009c <_puts_r+0x50>
 8010074:	6923      	ldr	r3, [r4, #16]
 8010076:	b18b      	cbz	r3, 801009c <_puts_r+0x50>
 8010078:	3e01      	subs	r6, #1
 801007a:	68a3      	ldr	r3, [r4, #8]
 801007c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010080:	3b01      	subs	r3, #1
 8010082:	60a3      	str	r3, [r4, #8]
 8010084:	b9e9      	cbnz	r1, 80100c2 <_puts_r+0x76>
 8010086:	2b00      	cmp	r3, #0
 8010088:	da2e      	bge.n	80100e8 <_puts_r+0x9c>
 801008a:	4622      	mov	r2, r4
 801008c:	210a      	movs	r1, #10
 801008e:	4628      	mov	r0, r5
 8010090:	f000 f8bc 	bl	801020c <__swbuf_r>
 8010094:	3001      	adds	r0, #1
 8010096:	d007      	beq.n	80100a8 <_puts_r+0x5c>
 8010098:	250a      	movs	r5, #10
 801009a:	e007      	b.n	80100ac <_puts_r+0x60>
 801009c:	4621      	mov	r1, r4
 801009e:	4628      	mov	r0, r5
 80100a0:	f000 f8f2 	bl	8010288 <__swsetup_r>
 80100a4:	2800      	cmp	r0, #0
 80100a6:	d0e7      	beq.n	8010078 <_puts_r+0x2c>
 80100a8:	f04f 35ff 	mov.w	r5, #4294967295
 80100ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80100ae:	07da      	lsls	r2, r3, #31
 80100b0:	d405      	bmi.n	80100be <_puts_r+0x72>
 80100b2:	89a3      	ldrh	r3, [r4, #12]
 80100b4:	059b      	lsls	r3, r3, #22
 80100b6:	d402      	bmi.n	80100be <_puts_r+0x72>
 80100b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80100ba:	f000 f9ba 	bl	8010432 <__retarget_lock_release_recursive>
 80100be:	4628      	mov	r0, r5
 80100c0:	bd70      	pop	{r4, r5, r6, pc}
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	da04      	bge.n	80100d0 <_puts_r+0x84>
 80100c6:	69a2      	ldr	r2, [r4, #24]
 80100c8:	429a      	cmp	r2, r3
 80100ca:	dc06      	bgt.n	80100da <_puts_r+0x8e>
 80100cc:	290a      	cmp	r1, #10
 80100ce:	d004      	beq.n	80100da <_puts_r+0x8e>
 80100d0:	6823      	ldr	r3, [r4, #0]
 80100d2:	1c5a      	adds	r2, r3, #1
 80100d4:	6022      	str	r2, [r4, #0]
 80100d6:	7019      	strb	r1, [r3, #0]
 80100d8:	e7cf      	b.n	801007a <_puts_r+0x2e>
 80100da:	4622      	mov	r2, r4
 80100dc:	4628      	mov	r0, r5
 80100de:	f000 f895 	bl	801020c <__swbuf_r>
 80100e2:	3001      	adds	r0, #1
 80100e4:	d1c9      	bne.n	801007a <_puts_r+0x2e>
 80100e6:	e7df      	b.n	80100a8 <_puts_r+0x5c>
 80100e8:	6823      	ldr	r3, [r4, #0]
 80100ea:	250a      	movs	r5, #10
 80100ec:	1c5a      	adds	r2, r3, #1
 80100ee:	6022      	str	r2, [r4, #0]
 80100f0:	701d      	strb	r5, [r3, #0]
 80100f2:	e7db      	b.n	80100ac <_puts_r+0x60>

080100f4 <puts>:
 80100f4:	4b02      	ldr	r3, [pc, #8]	; (8010100 <puts+0xc>)
 80100f6:	4601      	mov	r1, r0
 80100f8:	6818      	ldr	r0, [r3, #0]
 80100fa:	f7ff bfa7 	b.w	801004c <_puts_r>
 80100fe:	bf00      	nop
 8010100:	200000d0 	.word	0x200000d0

08010104 <siprintf>:
 8010104:	b40e      	push	{r1, r2, r3}
 8010106:	b500      	push	{lr}
 8010108:	b09c      	sub	sp, #112	; 0x70
 801010a:	ab1d      	add	r3, sp, #116	; 0x74
 801010c:	9002      	str	r0, [sp, #8]
 801010e:	9006      	str	r0, [sp, #24]
 8010110:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010114:	4809      	ldr	r0, [pc, #36]	; (801013c <siprintf+0x38>)
 8010116:	9107      	str	r1, [sp, #28]
 8010118:	9104      	str	r1, [sp, #16]
 801011a:	4909      	ldr	r1, [pc, #36]	; (8010140 <siprintf+0x3c>)
 801011c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010120:	9105      	str	r1, [sp, #20]
 8010122:	6800      	ldr	r0, [r0, #0]
 8010124:	9301      	str	r3, [sp, #4]
 8010126:	a902      	add	r1, sp, #8
 8010128:	f002 fc3e 	bl	80129a8 <_svfiprintf_r>
 801012c:	9b02      	ldr	r3, [sp, #8]
 801012e:	2200      	movs	r2, #0
 8010130:	701a      	strb	r2, [r3, #0]
 8010132:	b01c      	add	sp, #112	; 0x70
 8010134:	f85d eb04 	ldr.w	lr, [sp], #4
 8010138:	b003      	add	sp, #12
 801013a:	4770      	bx	lr
 801013c:	200000d0 	.word	0x200000d0
 8010140:	ffff0208 	.word	0xffff0208

08010144 <__sread>:
 8010144:	b510      	push	{r4, lr}
 8010146:	460c      	mov	r4, r1
 8010148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801014c:	f000 f922 	bl	8010394 <_read_r>
 8010150:	2800      	cmp	r0, #0
 8010152:	bfab      	itete	ge
 8010154:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010156:	89a3      	ldrhlt	r3, [r4, #12]
 8010158:	181b      	addge	r3, r3, r0
 801015a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801015e:	bfac      	ite	ge
 8010160:	6563      	strge	r3, [r4, #84]	; 0x54
 8010162:	81a3      	strhlt	r3, [r4, #12]
 8010164:	bd10      	pop	{r4, pc}

08010166 <__swrite>:
 8010166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801016a:	461f      	mov	r7, r3
 801016c:	898b      	ldrh	r3, [r1, #12]
 801016e:	05db      	lsls	r3, r3, #23
 8010170:	4605      	mov	r5, r0
 8010172:	460c      	mov	r4, r1
 8010174:	4616      	mov	r6, r2
 8010176:	d505      	bpl.n	8010184 <__swrite+0x1e>
 8010178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801017c:	2302      	movs	r3, #2
 801017e:	2200      	movs	r2, #0
 8010180:	f000 f8f6 	bl	8010370 <_lseek_r>
 8010184:	89a3      	ldrh	r3, [r4, #12]
 8010186:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801018a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801018e:	81a3      	strh	r3, [r4, #12]
 8010190:	4632      	mov	r2, r6
 8010192:	463b      	mov	r3, r7
 8010194:	4628      	mov	r0, r5
 8010196:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801019a:	f000 b90d 	b.w	80103b8 <_write_r>

0801019e <__sseek>:
 801019e:	b510      	push	{r4, lr}
 80101a0:	460c      	mov	r4, r1
 80101a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101a6:	f000 f8e3 	bl	8010370 <_lseek_r>
 80101aa:	1c43      	adds	r3, r0, #1
 80101ac:	89a3      	ldrh	r3, [r4, #12]
 80101ae:	bf15      	itete	ne
 80101b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80101b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80101b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80101ba:	81a3      	strheq	r3, [r4, #12]
 80101bc:	bf18      	it	ne
 80101be:	81a3      	strhne	r3, [r4, #12]
 80101c0:	bd10      	pop	{r4, pc}

080101c2 <__sclose>:
 80101c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101c6:	f000 b8c3 	b.w	8010350 <_close_r>
	...

080101cc <_vsiprintf_r>:
 80101cc:	b500      	push	{lr}
 80101ce:	b09b      	sub	sp, #108	; 0x6c
 80101d0:	9100      	str	r1, [sp, #0]
 80101d2:	9104      	str	r1, [sp, #16]
 80101d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80101d8:	9105      	str	r1, [sp, #20]
 80101da:	9102      	str	r1, [sp, #8]
 80101dc:	4905      	ldr	r1, [pc, #20]	; (80101f4 <_vsiprintf_r+0x28>)
 80101de:	9103      	str	r1, [sp, #12]
 80101e0:	4669      	mov	r1, sp
 80101e2:	f002 fbe1 	bl	80129a8 <_svfiprintf_r>
 80101e6:	9b00      	ldr	r3, [sp, #0]
 80101e8:	2200      	movs	r2, #0
 80101ea:	701a      	strb	r2, [r3, #0]
 80101ec:	b01b      	add	sp, #108	; 0x6c
 80101ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80101f2:	bf00      	nop
 80101f4:	ffff0208 	.word	0xffff0208

080101f8 <vsiprintf>:
 80101f8:	4613      	mov	r3, r2
 80101fa:	460a      	mov	r2, r1
 80101fc:	4601      	mov	r1, r0
 80101fe:	4802      	ldr	r0, [pc, #8]	; (8010208 <vsiprintf+0x10>)
 8010200:	6800      	ldr	r0, [r0, #0]
 8010202:	f7ff bfe3 	b.w	80101cc <_vsiprintf_r>
 8010206:	bf00      	nop
 8010208:	200000d0 	.word	0x200000d0

0801020c <__swbuf_r>:
 801020c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801020e:	460e      	mov	r6, r1
 8010210:	4614      	mov	r4, r2
 8010212:	4605      	mov	r5, r0
 8010214:	b118      	cbz	r0, 801021e <__swbuf_r+0x12>
 8010216:	6a03      	ldr	r3, [r0, #32]
 8010218:	b90b      	cbnz	r3, 801021e <__swbuf_r+0x12>
 801021a:	f7ff fecf 	bl	800ffbc <__sinit>
 801021e:	69a3      	ldr	r3, [r4, #24]
 8010220:	60a3      	str	r3, [r4, #8]
 8010222:	89a3      	ldrh	r3, [r4, #12]
 8010224:	071a      	lsls	r2, r3, #28
 8010226:	d525      	bpl.n	8010274 <__swbuf_r+0x68>
 8010228:	6923      	ldr	r3, [r4, #16]
 801022a:	b31b      	cbz	r3, 8010274 <__swbuf_r+0x68>
 801022c:	6823      	ldr	r3, [r4, #0]
 801022e:	6922      	ldr	r2, [r4, #16]
 8010230:	1a98      	subs	r0, r3, r2
 8010232:	6963      	ldr	r3, [r4, #20]
 8010234:	b2f6      	uxtb	r6, r6
 8010236:	4283      	cmp	r3, r0
 8010238:	4637      	mov	r7, r6
 801023a:	dc04      	bgt.n	8010246 <__swbuf_r+0x3a>
 801023c:	4621      	mov	r1, r4
 801023e:	4628      	mov	r0, r5
 8010240:	f002 fe7a 	bl	8012f38 <_fflush_r>
 8010244:	b9e0      	cbnz	r0, 8010280 <__swbuf_r+0x74>
 8010246:	68a3      	ldr	r3, [r4, #8]
 8010248:	3b01      	subs	r3, #1
 801024a:	60a3      	str	r3, [r4, #8]
 801024c:	6823      	ldr	r3, [r4, #0]
 801024e:	1c5a      	adds	r2, r3, #1
 8010250:	6022      	str	r2, [r4, #0]
 8010252:	701e      	strb	r6, [r3, #0]
 8010254:	6962      	ldr	r2, [r4, #20]
 8010256:	1c43      	adds	r3, r0, #1
 8010258:	429a      	cmp	r2, r3
 801025a:	d004      	beq.n	8010266 <__swbuf_r+0x5a>
 801025c:	89a3      	ldrh	r3, [r4, #12]
 801025e:	07db      	lsls	r3, r3, #31
 8010260:	d506      	bpl.n	8010270 <__swbuf_r+0x64>
 8010262:	2e0a      	cmp	r6, #10
 8010264:	d104      	bne.n	8010270 <__swbuf_r+0x64>
 8010266:	4621      	mov	r1, r4
 8010268:	4628      	mov	r0, r5
 801026a:	f002 fe65 	bl	8012f38 <_fflush_r>
 801026e:	b938      	cbnz	r0, 8010280 <__swbuf_r+0x74>
 8010270:	4638      	mov	r0, r7
 8010272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010274:	4621      	mov	r1, r4
 8010276:	4628      	mov	r0, r5
 8010278:	f000 f806 	bl	8010288 <__swsetup_r>
 801027c:	2800      	cmp	r0, #0
 801027e:	d0d5      	beq.n	801022c <__swbuf_r+0x20>
 8010280:	f04f 37ff 	mov.w	r7, #4294967295
 8010284:	e7f4      	b.n	8010270 <__swbuf_r+0x64>
	...

08010288 <__swsetup_r>:
 8010288:	b538      	push	{r3, r4, r5, lr}
 801028a:	4b2a      	ldr	r3, [pc, #168]	; (8010334 <__swsetup_r+0xac>)
 801028c:	4605      	mov	r5, r0
 801028e:	6818      	ldr	r0, [r3, #0]
 8010290:	460c      	mov	r4, r1
 8010292:	b118      	cbz	r0, 801029c <__swsetup_r+0x14>
 8010294:	6a03      	ldr	r3, [r0, #32]
 8010296:	b90b      	cbnz	r3, 801029c <__swsetup_r+0x14>
 8010298:	f7ff fe90 	bl	800ffbc <__sinit>
 801029c:	89a3      	ldrh	r3, [r4, #12]
 801029e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80102a2:	0718      	lsls	r0, r3, #28
 80102a4:	d422      	bmi.n	80102ec <__swsetup_r+0x64>
 80102a6:	06d9      	lsls	r1, r3, #27
 80102a8:	d407      	bmi.n	80102ba <__swsetup_r+0x32>
 80102aa:	2309      	movs	r3, #9
 80102ac:	602b      	str	r3, [r5, #0]
 80102ae:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80102b2:	81a3      	strh	r3, [r4, #12]
 80102b4:	f04f 30ff 	mov.w	r0, #4294967295
 80102b8:	e034      	b.n	8010324 <__swsetup_r+0x9c>
 80102ba:	0758      	lsls	r0, r3, #29
 80102bc:	d512      	bpl.n	80102e4 <__swsetup_r+0x5c>
 80102be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80102c0:	b141      	cbz	r1, 80102d4 <__swsetup_r+0x4c>
 80102c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80102c6:	4299      	cmp	r1, r3
 80102c8:	d002      	beq.n	80102d0 <__swsetup_r+0x48>
 80102ca:	4628      	mov	r0, r5
 80102cc:	f000 ff5e 	bl	801118c <_free_r>
 80102d0:	2300      	movs	r3, #0
 80102d2:	6363      	str	r3, [r4, #52]	; 0x34
 80102d4:	89a3      	ldrh	r3, [r4, #12]
 80102d6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80102da:	81a3      	strh	r3, [r4, #12]
 80102dc:	2300      	movs	r3, #0
 80102de:	6063      	str	r3, [r4, #4]
 80102e0:	6923      	ldr	r3, [r4, #16]
 80102e2:	6023      	str	r3, [r4, #0]
 80102e4:	89a3      	ldrh	r3, [r4, #12]
 80102e6:	f043 0308 	orr.w	r3, r3, #8
 80102ea:	81a3      	strh	r3, [r4, #12]
 80102ec:	6923      	ldr	r3, [r4, #16]
 80102ee:	b94b      	cbnz	r3, 8010304 <__swsetup_r+0x7c>
 80102f0:	89a3      	ldrh	r3, [r4, #12]
 80102f2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80102f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80102fa:	d003      	beq.n	8010304 <__swsetup_r+0x7c>
 80102fc:	4621      	mov	r1, r4
 80102fe:	4628      	mov	r0, r5
 8010300:	f002 fe7a 	bl	8012ff8 <__smakebuf_r>
 8010304:	89a0      	ldrh	r0, [r4, #12]
 8010306:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801030a:	f010 0301 	ands.w	r3, r0, #1
 801030e:	d00a      	beq.n	8010326 <__swsetup_r+0x9e>
 8010310:	2300      	movs	r3, #0
 8010312:	60a3      	str	r3, [r4, #8]
 8010314:	6963      	ldr	r3, [r4, #20]
 8010316:	425b      	negs	r3, r3
 8010318:	61a3      	str	r3, [r4, #24]
 801031a:	6923      	ldr	r3, [r4, #16]
 801031c:	b943      	cbnz	r3, 8010330 <__swsetup_r+0xa8>
 801031e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010322:	d1c4      	bne.n	80102ae <__swsetup_r+0x26>
 8010324:	bd38      	pop	{r3, r4, r5, pc}
 8010326:	0781      	lsls	r1, r0, #30
 8010328:	bf58      	it	pl
 801032a:	6963      	ldrpl	r3, [r4, #20]
 801032c:	60a3      	str	r3, [r4, #8]
 801032e:	e7f4      	b.n	801031a <__swsetup_r+0x92>
 8010330:	2000      	movs	r0, #0
 8010332:	e7f7      	b.n	8010324 <__swsetup_r+0x9c>
 8010334:	200000d0 	.word	0x200000d0

08010338 <memset>:
 8010338:	4402      	add	r2, r0
 801033a:	4603      	mov	r3, r0
 801033c:	4293      	cmp	r3, r2
 801033e:	d100      	bne.n	8010342 <memset+0xa>
 8010340:	4770      	bx	lr
 8010342:	f803 1b01 	strb.w	r1, [r3], #1
 8010346:	e7f9      	b.n	801033c <memset+0x4>

08010348 <_localeconv_r>:
 8010348:	4800      	ldr	r0, [pc, #0]	; (801034c <_localeconv_r+0x4>)
 801034a:	4770      	bx	lr
 801034c:	200001c4 	.word	0x200001c4

08010350 <_close_r>:
 8010350:	b538      	push	{r3, r4, r5, lr}
 8010352:	4d06      	ldr	r5, [pc, #24]	; (801036c <_close_r+0x1c>)
 8010354:	2300      	movs	r3, #0
 8010356:	4604      	mov	r4, r0
 8010358:	4608      	mov	r0, r1
 801035a:	602b      	str	r3, [r5, #0]
 801035c:	f7f5 fe5f 	bl	800601e <_close>
 8010360:	1c43      	adds	r3, r0, #1
 8010362:	d102      	bne.n	801036a <_close_r+0x1a>
 8010364:	682b      	ldr	r3, [r5, #0]
 8010366:	b103      	cbz	r3, 801036a <_close_r+0x1a>
 8010368:	6023      	str	r3, [r4, #0]
 801036a:	bd38      	pop	{r3, r4, r5, pc}
 801036c:	20003f20 	.word	0x20003f20

08010370 <_lseek_r>:
 8010370:	b538      	push	{r3, r4, r5, lr}
 8010372:	4d07      	ldr	r5, [pc, #28]	; (8010390 <_lseek_r+0x20>)
 8010374:	4604      	mov	r4, r0
 8010376:	4608      	mov	r0, r1
 8010378:	4611      	mov	r1, r2
 801037a:	2200      	movs	r2, #0
 801037c:	602a      	str	r2, [r5, #0]
 801037e:	461a      	mov	r2, r3
 8010380:	f7f5 fe74 	bl	800606c <_lseek>
 8010384:	1c43      	adds	r3, r0, #1
 8010386:	d102      	bne.n	801038e <_lseek_r+0x1e>
 8010388:	682b      	ldr	r3, [r5, #0]
 801038a:	b103      	cbz	r3, 801038e <_lseek_r+0x1e>
 801038c:	6023      	str	r3, [r4, #0]
 801038e:	bd38      	pop	{r3, r4, r5, pc}
 8010390:	20003f20 	.word	0x20003f20

08010394 <_read_r>:
 8010394:	b538      	push	{r3, r4, r5, lr}
 8010396:	4d07      	ldr	r5, [pc, #28]	; (80103b4 <_read_r+0x20>)
 8010398:	4604      	mov	r4, r0
 801039a:	4608      	mov	r0, r1
 801039c:	4611      	mov	r1, r2
 801039e:	2200      	movs	r2, #0
 80103a0:	602a      	str	r2, [r5, #0]
 80103a2:	461a      	mov	r2, r3
 80103a4:	f7f5 fe1e 	bl	8005fe4 <_read>
 80103a8:	1c43      	adds	r3, r0, #1
 80103aa:	d102      	bne.n	80103b2 <_read_r+0x1e>
 80103ac:	682b      	ldr	r3, [r5, #0]
 80103ae:	b103      	cbz	r3, 80103b2 <_read_r+0x1e>
 80103b0:	6023      	str	r3, [r4, #0]
 80103b2:	bd38      	pop	{r3, r4, r5, pc}
 80103b4:	20003f20 	.word	0x20003f20

080103b8 <_write_r>:
 80103b8:	b538      	push	{r3, r4, r5, lr}
 80103ba:	4d07      	ldr	r5, [pc, #28]	; (80103d8 <_write_r+0x20>)
 80103bc:	4604      	mov	r4, r0
 80103be:	4608      	mov	r0, r1
 80103c0:	4611      	mov	r1, r2
 80103c2:	2200      	movs	r2, #0
 80103c4:	602a      	str	r2, [r5, #0]
 80103c6:	461a      	mov	r2, r3
 80103c8:	f7f3 fa0a 	bl	80037e0 <_write>
 80103cc:	1c43      	adds	r3, r0, #1
 80103ce:	d102      	bne.n	80103d6 <_write_r+0x1e>
 80103d0:	682b      	ldr	r3, [r5, #0]
 80103d2:	b103      	cbz	r3, 80103d6 <_write_r+0x1e>
 80103d4:	6023      	str	r3, [r4, #0]
 80103d6:	bd38      	pop	{r3, r4, r5, pc}
 80103d8:	20003f20 	.word	0x20003f20

080103dc <__errno>:
 80103dc:	4b01      	ldr	r3, [pc, #4]	; (80103e4 <__errno+0x8>)
 80103de:	6818      	ldr	r0, [r3, #0]
 80103e0:	4770      	bx	lr
 80103e2:	bf00      	nop
 80103e4:	200000d0 	.word	0x200000d0

080103e8 <__libc_init_array>:
 80103e8:	b570      	push	{r4, r5, r6, lr}
 80103ea:	4d0d      	ldr	r5, [pc, #52]	; (8010420 <__libc_init_array+0x38>)
 80103ec:	4c0d      	ldr	r4, [pc, #52]	; (8010424 <__libc_init_array+0x3c>)
 80103ee:	1b64      	subs	r4, r4, r5
 80103f0:	10a4      	asrs	r4, r4, #2
 80103f2:	2600      	movs	r6, #0
 80103f4:	42a6      	cmp	r6, r4
 80103f6:	d109      	bne.n	801040c <__libc_init_array+0x24>
 80103f8:	4d0b      	ldr	r5, [pc, #44]	; (8010428 <__libc_init_array+0x40>)
 80103fa:	4c0c      	ldr	r4, [pc, #48]	; (801042c <__libc_init_array+0x44>)
 80103fc:	f003 faaa 	bl	8013954 <_init>
 8010400:	1b64      	subs	r4, r4, r5
 8010402:	10a4      	asrs	r4, r4, #2
 8010404:	2600      	movs	r6, #0
 8010406:	42a6      	cmp	r6, r4
 8010408:	d105      	bne.n	8010416 <__libc_init_array+0x2e>
 801040a:	bd70      	pop	{r4, r5, r6, pc}
 801040c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010410:	4798      	blx	r3
 8010412:	3601      	adds	r6, #1
 8010414:	e7ee      	b.n	80103f4 <__libc_init_array+0xc>
 8010416:	f855 3b04 	ldr.w	r3, [r5], #4
 801041a:	4798      	blx	r3
 801041c:	3601      	adds	r6, #1
 801041e:	e7f2      	b.n	8010406 <__libc_init_array+0x1e>
 8010420:	08014cac 	.word	0x08014cac
 8010424:	08014cac 	.word	0x08014cac
 8010428:	08014cac 	.word	0x08014cac
 801042c:	08014cb0 	.word	0x08014cb0

08010430 <__retarget_lock_acquire_recursive>:
 8010430:	4770      	bx	lr

08010432 <__retarget_lock_release_recursive>:
 8010432:	4770      	bx	lr

08010434 <memcpy>:
 8010434:	440a      	add	r2, r1
 8010436:	4291      	cmp	r1, r2
 8010438:	f100 33ff 	add.w	r3, r0, #4294967295
 801043c:	d100      	bne.n	8010440 <memcpy+0xc>
 801043e:	4770      	bx	lr
 8010440:	b510      	push	{r4, lr}
 8010442:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010446:	f803 4f01 	strb.w	r4, [r3, #1]!
 801044a:	4291      	cmp	r1, r2
 801044c:	d1f9      	bne.n	8010442 <memcpy+0xe>
 801044e:	bd10      	pop	{r4, pc}

08010450 <nanf>:
 8010450:	4800      	ldr	r0, [pc, #0]	; (8010454 <nanf+0x4>)
 8010452:	4770      	bx	lr
 8010454:	7fc00000 	.word	0x7fc00000

08010458 <__assert_func>:
 8010458:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801045a:	4614      	mov	r4, r2
 801045c:	461a      	mov	r2, r3
 801045e:	4b09      	ldr	r3, [pc, #36]	; (8010484 <__assert_func+0x2c>)
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	4605      	mov	r5, r0
 8010464:	68d8      	ldr	r0, [r3, #12]
 8010466:	b14c      	cbz	r4, 801047c <__assert_func+0x24>
 8010468:	4b07      	ldr	r3, [pc, #28]	; (8010488 <__assert_func+0x30>)
 801046a:	9100      	str	r1, [sp, #0]
 801046c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010470:	4906      	ldr	r1, [pc, #24]	; (801048c <__assert_func+0x34>)
 8010472:	462b      	mov	r3, r5
 8010474:	f002 fd88 	bl	8012f88 <fiprintf>
 8010478:	f002 fe5e 	bl	8013138 <abort>
 801047c:	4b04      	ldr	r3, [pc, #16]	; (8010490 <__assert_func+0x38>)
 801047e:	461c      	mov	r4, r3
 8010480:	e7f3      	b.n	801046a <__assert_func+0x12>
 8010482:	bf00      	nop
 8010484:	200000d0 	.word	0x200000d0
 8010488:	080149b2 	.word	0x080149b2
 801048c:	080149bf 	.word	0x080149bf
 8010490:	080149ed 	.word	0x080149ed

08010494 <quorem>:
 8010494:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010498:	6903      	ldr	r3, [r0, #16]
 801049a:	690c      	ldr	r4, [r1, #16]
 801049c:	42a3      	cmp	r3, r4
 801049e:	4607      	mov	r7, r0
 80104a0:	db7e      	blt.n	80105a0 <quorem+0x10c>
 80104a2:	3c01      	subs	r4, #1
 80104a4:	f101 0814 	add.w	r8, r1, #20
 80104a8:	f100 0514 	add.w	r5, r0, #20
 80104ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80104b0:	9301      	str	r3, [sp, #4]
 80104b2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80104b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80104ba:	3301      	adds	r3, #1
 80104bc:	429a      	cmp	r2, r3
 80104be:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80104c2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80104c6:	fbb2 f6f3 	udiv	r6, r2, r3
 80104ca:	d331      	bcc.n	8010530 <quorem+0x9c>
 80104cc:	f04f 0e00 	mov.w	lr, #0
 80104d0:	4640      	mov	r0, r8
 80104d2:	46ac      	mov	ip, r5
 80104d4:	46f2      	mov	sl, lr
 80104d6:	f850 2b04 	ldr.w	r2, [r0], #4
 80104da:	b293      	uxth	r3, r2
 80104dc:	fb06 e303 	mla	r3, r6, r3, lr
 80104e0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80104e4:	0c1a      	lsrs	r2, r3, #16
 80104e6:	b29b      	uxth	r3, r3
 80104e8:	ebaa 0303 	sub.w	r3, sl, r3
 80104ec:	f8dc a000 	ldr.w	sl, [ip]
 80104f0:	fa13 f38a 	uxtah	r3, r3, sl
 80104f4:	fb06 220e 	mla	r2, r6, lr, r2
 80104f8:	9300      	str	r3, [sp, #0]
 80104fa:	9b00      	ldr	r3, [sp, #0]
 80104fc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010500:	b292      	uxth	r2, r2
 8010502:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010506:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801050a:	f8bd 3000 	ldrh.w	r3, [sp]
 801050e:	4581      	cmp	r9, r0
 8010510:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010514:	f84c 3b04 	str.w	r3, [ip], #4
 8010518:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801051c:	d2db      	bcs.n	80104d6 <quorem+0x42>
 801051e:	f855 300b 	ldr.w	r3, [r5, fp]
 8010522:	b92b      	cbnz	r3, 8010530 <quorem+0x9c>
 8010524:	9b01      	ldr	r3, [sp, #4]
 8010526:	3b04      	subs	r3, #4
 8010528:	429d      	cmp	r5, r3
 801052a:	461a      	mov	r2, r3
 801052c:	d32c      	bcc.n	8010588 <quorem+0xf4>
 801052e:	613c      	str	r4, [r7, #16]
 8010530:	4638      	mov	r0, r7
 8010532:	f001 f9f1 	bl	8011918 <__mcmp>
 8010536:	2800      	cmp	r0, #0
 8010538:	db22      	blt.n	8010580 <quorem+0xec>
 801053a:	3601      	adds	r6, #1
 801053c:	4629      	mov	r1, r5
 801053e:	2000      	movs	r0, #0
 8010540:	f858 2b04 	ldr.w	r2, [r8], #4
 8010544:	f8d1 c000 	ldr.w	ip, [r1]
 8010548:	b293      	uxth	r3, r2
 801054a:	1ac3      	subs	r3, r0, r3
 801054c:	0c12      	lsrs	r2, r2, #16
 801054e:	fa13 f38c 	uxtah	r3, r3, ip
 8010552:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8010556:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801055a:	b29b      	uxth	r3, r3
 801055c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010560:	45c1      	cmp	r9, r8
 8010562:	f841 3b04 	str.w	r3, [r1], #4
 8010566:	ea4f 4022 	mov.w	r0, r2, asr #16
 801056a:	d2e9      	bcs.n	8010540 <quorem+0xac>
 801056c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010570:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010574:	b922      	cbnz	r2, 8010580 <quorem+0xec>
 8010576:	3b04      	subs	r3, #4
 8010578:	429d      	cmp	r5, r3
 801057a:	461a      	mov	r2, r3
 801057c:	d30a      	bcc.n	8010594 <quorem+0x100>
 801057e:	613c      	str	r4, [r7, #16]
 8010580:	4630      	mov	r0, r6
 8010582:	b003      	add	sp, #12
 8010584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010588:	6812      	ldr	r2, [r2, #0]
 801058a:	3b04      	subs	r3, #4
 801058c:	2a00      	cmp	r2, #0
 801058e:	d1ce      	bne.n	801052e <quorem+0x9a>
 8010590:	3c01      	subs	r4, #1
 8010592:	e7c9      	b.n	8010528 <quorem+0x94>
 8010594:	6812      	ldr	r2, [r2, #0]
 8010596:	3b04      	subs	r3, #4
 8010598:	2a00      	cmp	r2, #0
 801059a:	d1f0      	bne.n	801057e <quorem+0xea>
 801059c:	3c01      	subs	r4, #1
 801059e:	e7eb      	b.n	8010578 <quorem+0xe4>
 80105a0:	2000      	movs	r0, #0
 80105a2:	e7ee      	b.n	8010582 <quorem+0xee>
 80105a4:	0000      	movs	r0, r0
	...

080105a8 <_dtoa_r>:
 80105a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105ac:	ed2d 8b04 	vpush	{d8-d9}
 80105b0:	69c5      	ldr	r5, [r0, #28]
 80105b2:	b093      	sub	sp, #76	; 0x4c
 80105b4:	4616      	mov	r6, r2
 80105b6:	461f      	mov	r7, r3
 80105b8:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80105bc:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
 80105c0:	4604      	mov	r4, r0
 80105c2:	b975      	cbnz	r5, 80105e2 <_dtoa_r+0x3a>
 80105c4:	2010      	movs	r0, #16
 80105c6:	f000 fe2d 	bl	8011224 <malloc>
 80105ca:	4602      	mov	r2, r0
 80105cc:	61e0      	str	r0, [r4, #28]
 80105ce:	b920      	cbnz	r0, 80105da <_dtoa_r+0x32>
 80105d0:	4baf      	ldr	r3, [pc, #700]	; (8010890 <_dtoa_r+0x2e8>)
 80105d2:	21ef      	movs	r1, #239	; 0xef
 80105d4:	48af      	ldr	r0, [pc, #700]	; (8010894 <_dtoa_r+0x2ec>)
 80105d6:	f7ff ff3f 	bl	8010458 <__assert_func>
 80105da:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80105de:	6005      	str	r5, [r0, #0]
 80105e0:	60c5      	str	r5, [r0, #12]
 80105e2:	69e3      	ldr	r3, [r4, #28]
 80105e4:	6819      	ldr	r1, [r3, #0]
 80105e6:	b151      	cbz	r1, 80105fe <_dtoa_r+0x56>
 80105e8:	685a      	ldr	r2, [r3, #4]
 80105ea:	604a      	str	r2, [r1, #4]
 80105ec:	2301      	movs	r3, #1
 80105ee:	4093      	lsls	r3, r2
 80105f0:	608b      	str	r3, [r1, #8]
 80105f2:	4620      	mov	r0, r4
 80105f4:	f000 ff0a 	bl	801140c <_Bfree>
 80105f8:	69e3      	ldr	r3, [r4, #28]
 80105fa:	2200      	movs	r2, #0
 80105fc:	601a      	str	r2, [r3, #0]
 80105fe:	1e3b      	subs	r3, r7, #0
 8010600:	bfb9      	ittee	lt
 8010602:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010606:	9307      	strlt	r3, [sp, #28]
 8010608:	2300      	movge	r3, #0
 801060a:	f8c8 3000 	strge.w	r3, [r8]
 801060e:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8010612:	4ba1      	ldr	r3, [pc, #644]	; (8010898 <_dtoa_r+0x2f0>)
 8010614:	bfbc      	itt	lt
 8010616:	2201      	movlt	r2, #1
 8010618:	f8c8 2000 	strlt.w	r2, [r8]
 801061c:	ea33 0309 	bics.w	r3, r3, r9
 8010620:	d11b      	bne.n	801065a <_dtoa_r+0xb2>
 8010622:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8010624:	f242 730f 	movw	r3, #9999	; 0x270f
 8010628:	6013      	str	r3, [r2, #0]
 801062a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801062e:	4333      	orrs	r3, r6
 8010630:	f000 8596 	beq.w	8011160 <_dtoa_r+0xbb8>
 8010634:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8010636:	b963      	cbnz	r3, 8010652 <_dtoa_r+0xaa>
 8010638:	4b98      	ldr	r3, [pc, #608]	; (801089c <_dtoa_r+0x2f4>)
 801063a:	e027      	b.n	801068c <_dtoa_r+0xe4>
 801063c:	4b98      	ldr	r3, [pc, #608]	; (80108a0 <_dtoa_r+0x2f8>)
 801063e:	9303      	str	r3, [sp, #12]
 8010640:	3308      	adds	r3, #8
 8010642:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010644:	6013      	str	r3, [r2, #0]
 8010646:	9803      	ldr	r0, [sp, #12]
 8010648:	b013      	add	sp, #76	; 0x4c
 801064a:	ecbd 8b04 	vpop	{d8-d9}
 801064e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010652:	4b92      	ldr	r3, [pc, #584]	; (801089c <_dtoa_r+0x2f4>)
 8010654:	9303      	str	r3, [sp, #12]
 8010656:	3303      	adds	r3, #3
 8010658:	e7f3      	b.n	8010642 <_dtoa_r+0x9a>
 801065a:	ed9d 7b06 	vldr	d7, [sp, #24]
 801065e:	2200      	movs	r2, #0
 8010660:	ec51 0b17 	vmov	r0, r1, d7
 8010664:	eeb0 8a47 	vmov.f32	s16, s14
 8010668:	eef0 8a67 	vmov.f32	s17, s15
 801066c:	2300      	movs	r3, #0
 801066e:	f7f0 fa4b 	bl	8000b08 <__aeabi_dcmpeq>
 8010672:	4680      	mov	r8, r0
 8010674:	b160      	cbz	r0, 8010690 <_dtoa_r+0xe8>
 8010676:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8010678:	2301      	movs	r3, #1
 801067a:	6013      	str	r3, [r2, #0]
 801067c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801067e:	2b00      	cmp	r3, #0
 8010680:	f000 856b 	beq.w	801115a <_dtoa_r+0xbb2>
 8010684:	4b87      	ldr	r3, [pc, #540]	; (80108a4 <_dtoa_r+0x2fc>)
 8010686:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010688:	6013      	str	r3, [r2, #0]
 801068a:	3b01      	subs	r3, #1
 801068c:	9303      	str	r3, [sp, #12]
 801068e:	e7da      	b.n	8010646 <_dtoa_r+0x9e>
 8010690:	ab10      	add	r3, sp, #64	; 0x40
 8010692:	9301      	str	r3, [sp, #4]
 8010694:	ab11      	add	r3, sp, #68	; 0x44
 8010696:	9300      	str	r3, [sp, #0]
 8010698:	4620      	mov	r0, r4
 801069a:	ec53 2b18 	vmov	r2, r3, d8
 801069e:	f001 fa4b 	bl	8011b38 <__d2b>
 80106a2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80106a6:	4682      	mov	sl, r0
 80106a8:	2d00      	cmp	r5, #0
 80106aa:	d07f      	beq.n	80107ac <_dtoa_r+0x204>
 80106ac:	ee18 3a90 	vmov	r3, s17
 80106b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80106b4:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80106b8:	ec51 0b18 	vmov	r0, r1, d8
 80106bc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80106c0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80106c4:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80106c8:	4619      	mov	r1, r3
 80106ca:	2200      	movs	r2, #0
 80106cc:	4b76      	ldr	r3, [pc, #472]	; (80108a8 <_dtoa_r+0x300>)
 80106ce:	f7ef fdfb 	bl	80002c8 <__aeabi_dsub>
 80106d2:	a369      	add	r3, pc, #420	; (adr r3, 8010878 <_dtoa_r+0x2d0>)
 80106d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106d8:	f7ef ffae 	bl	8000638 <__aeabi_dmul>
 80106dc:	a368      	add	r3, pc, #416	; (adr r3, 8010880 <_dtoa_r+0x2d8>)
 80106de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106e2:	f7ef fdf3 	bl	80002cc <__adddf3>
 80106e6:	4606      	mov	r6, r0
 80106e8:	4628      	mov	r0, r5
 80106ea:	460f      	mov	r7, r1
 80106ec:	f7ef ff3a 	bl	8000564 <__aeabi_i2d>
 80106f0:	a365      	add	r3, pc, #404	; (adr r3, 8010888 <_dtoa_r+0x2e0>)
 80106f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106f6:	f7ef ff9f 	bl	8000638 <__aeabi_dmul>
 80106fa:	4602      	mov	r2, r0
 80106fc:	460b      	mov	r3, r1
 80106fe:	4630      	mov	r0, r6
 8010700:	4639      	mov	r1, r7
 8010702:	f7ef fde3 	bl	80002cc <__adddf3>
 8010706:	4606      	mov	r6, r0
 8010708:	460f      	mov	r7, r1
 801070a:	f7f0 fa45 	bl	8000b98 <__aeabi_d2iz>
 801070e:	2200      	movs	r2, #0
 8010710:	4683      	mov	fp, r0
 8010712:	2300      	movs	r3, #0
 8010714:	4630      	mov	r0, r6
 8010716:	4639      	mov	r1, r7
 8010718:	f7f0 fa00 	bl	8000b1c <__aeabi_dcmplt>
 801071c:	b148      	cbz	r0, 8010732 <_dtoa_r+0x18a>
 801071e:	4658      	mov	r0, fp
 8010720:	f7ef ff20 	bl	8000564 <__aeabi_i2d>
 8010724:	4632      	mov	r2, r6
 8010726:	463b      	mov	r3, r7
 8010728:	f7f0 f9ee 	bl	8000b08 <__aeabi_dcmpeq>
 801072c:	b908      	cbnz	r0, 8010732 <_dtoa_r+0x18a>
 801072e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010732:	f1bb 0f16 	cmp.w	fp, #22
 8010736:	d857      	bhi.n	80107e8 <_dtoa_r+0x240>
 8010738:	4b5c      	ldr	r3, [pc, #368]	; (80108ac <_dtoa_r+0x304>)
 801073a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801073e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010742:	ec51 0b18 	vmov	r0, r1, d8
 8010746:	f7f0 f9e9 	bl	8000b1c <__aeabi_dcmplt>
 801074a:	2800      	cmp	r0, #0
 801074c:	d04e      	beq.n	80107ec <_dtoa_r+0x244>
 801074e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010752:	2300      	movs	r3, #0
 8010754:	930d      	str	r3, [sp, #52]	; 0x34
 8010756:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010758:	1b5b      	subs	r3, r3, r5
 801075a:	1e5a      	subs	r2, r3, #1
 801075c:	bf45      	ittet	mi
 801075e:	f1c3 0301 	rsbmi	r3, r3, #1
 8010762:	9308      	strmi	r3, [sp, #32]
 8010764:	2300      	movpl	r3, #0
 8010766:	2300      	movmi	r3, #0
 8010768:	9209      	str	r2, [sp, #36]	; 0x24
 801076a:	bf54      	ite	pl
 801076c:	9308      	strpl	r3, [sp, #32]
 801076e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8010770:	f1bb 0f00 	cmp.w	fp, #0
 8010774:	db3c      	blt.n	80107f0 <_dtoa_r+0x248>
 8010776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010778:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 801077c:	445b      	add	r3, fp
 801077e:	9309      	str	r3, [sp, #36]	; 0x24
 8010780:	2300      	movs	r3, #0
 8010782:	930a      	str	r3, [sp, #40]	; 0x28
 8010784:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8010786:	2b09      	cmp	r3, #9
 8010788:	d868      	bhi.n	801085c <_dtoa_r+0x2b4>
 801078a:	2b05      	cmp	r3, #5
 801078c:	bfc4      	itt	gt
 801078e:	3b04      	subgt	r3, #4
 8010790:	9320      	strgt	r3, [sp, #128]	; 0x80
 8010792:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8010794:	f1a3 0302 	sub.w	r3, r3, #2
 8010798:	bfcc      	ite	gt
 801079a:	2500      	movgt	r5, #0
 801079c:	2501      	movle	r5, #1
 801079e:	2b03      	cmp	r3, #3
 80107a0:	f200 8088 	bhi.w	80108b4 <_dtoa_r+0x30c>
 80107a4:	e8df f003 	tbb	[pc, r3]
 80107a8:	58393b2e 	.word	0x58393b2e
 80107ac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80107b0:	441d      	add	r5, r3
 80107b2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80107b6:	2b20      	cmp	r3, #32
 80107b8:	bfc1      	itttt	gt
 80107ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80107be:	fa09 f903 	lslgt.w	r9, r9, r3
 80107c2:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80107c6:	fa26 f303 	lsrgt.w	r3, r6, r3
 80107ca:	bfd6      	itet	le
 80107cc:	f1c3 0320 	rsble	r3, r3, #32
 80107d0:	ea49 0003 	orrgt.w	r0, r9, r3
 80107d4:	fa06 f003 	lslle.w	r0, r6, r3
 80107d8:	f7ef feb4 	bl	8000544 <__aeabi_ui2d>
 80107dc:	2201      	movs	r2, #1
 80107de:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80107e2:	3d01      	subs	r5, #1
 80107e4:	920e      	str	r2, [sp, #56]	; 0x38
 80107e6:	e76f      	b.n	80106c8 <_dtoa_r+0x120>
 80107e8:	2301      	movs	r3, #1
 80107ea:	e7b3      	b.n	8010754 <_dtoa_r+0x1ac>
 80107ec:	900d      	str	r0, [sp, #52]	; 0x34
 80107ee:	e7b2      	b.n	8010756 <_dtoa_r+0x1ae>
 80107f0:	9b08      	ldr	r3, [sp, #32]
 80107f2:	eba3 030b 	sub.w	r3, r3, fp
 80107f6:	9308      	str	r3, [sp, #32]
 80107f8:	f1cb 0300 	rsb	r3, fp, #0
 80107fc:	930a      	str	r3, [sp, #40]	; 0x28
 80107fe:	2300      	movs	r3, #0
 8010800:	930c      	str	r3, [sp, #48]	; 0x30
 8010802:	e7bf      	b.n	8010784 <_dtoa_r+0x1dc>
 8010804:	2300      	movs	r3, #0
 8010806:	930b      	str	r3, [sp, #44]	; 0x2c
 8010808:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801080a:	2b00      	cmp	r3, #0
 801080c:	dc55      	bgt.n	80108ba <_dtoa_r+0x312>
 801080e:	2301      	movs	r3, #1
 8010810:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8010814:	461a      	mov	r2, r3
 8010816:	9221      	str	r2, [sp, #132]	; 0x84
 8010818:	e00b      	b.n	8010832 <_dtoa_r+0x28a>
 801081a:	2301      	movs	r3, #1
 801081c:	e7f3      	b.n	8010806 <_dtoa_r+0x25e>
 801081e:	2300      	movs	r3, #0
 8010820:	930b      	str	r3, [sp, #44]	; 0x2c
 8010822:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010824:	445b      	add	r3, fp
 8010826:	9304      	str	r3, [sp, #16]
 8010828:	3301      	adds	r3, #1
 801082a:	2b01      	cmp	r3, #1
 801082c:	9305      	str	r3, [sp, #20]
 801082e:	bfb8      	it	lt
 8010830:	2301      	movlt	r3, #1
 8010832:	69e0      	ldr	r0, [r4, #28]
 8010834:	2100      	movs	r1, #0
 8010836:	2204      	movs	r2, #4
 8010838:	f102 0614 	add.w	r6, r2, #20
 801083c:	429e      	cmp	r6, r3
 801083e:	d940      	bls.n	80108c2 <_dtoa_r+0x31a>
 8010840:	6041      	str	r1, [r0, #4]
 8010842:	4620      	mov	r0, r4
 8010844:	f000 fda2 	bl	801138c <_Balloc>
 8010848:	9003      	str	r0, [sp, #12]
 801084a:	2800      	cmp	r0, #0
 801084c:	d13c      	bne.n	80108c8 <_dtoa_r+0x320>
 801084e:	4b18      	ldr	r3, [pc, #96]	; (80108b0 <_dtoa_r+0x308>)
 8010850:	4602      	mov	r2, r0
 8010852:	f240 11af 	movw	r1, #431	; 0x1af
 8010856:	e6bd      	b.n	80105d4 <_dtoa_r+0x2c>
 8010858:	2301      	movs	r3, #1
 801085a:	e7e1      	b.n	8010820 <_dtoa_r+0x278>
 801085c:	2501      	movs	r5, #1
 801085e:	2300      	movs	r3, #0
 8010860:	9320      	str	r3, [sp, #128]	; 0x80
 8010862:	950b      	str	r5, [sp, #44]	; 0x2c
 8010864:	f04f 33ff 	mov.w	r3, #4294967295
 8010868:	e9cd 3304 	strd	r3, r3, [sp, #16]
 801086c:	2200      	movs	r2, #0
 801086e:	2312      	movs	r3, #18
 8010870:	e7d1      	b.n	8010816 <_dtoa_r+0x26e>
 8010872:	bf00      	nop
 8010874:	f3af 8000 	nop.w
 8010878:	636f4361 	.word	0x636f4361
 801087c:	3fd287a7 	.word	0x3fd287a7
 8010880:	8b60c8b3 	.word	0x8b60c8b3
 8010884:	3fc68a28 	.word	0x3fc68a28
 8010888:	509f79fb 	.word	0x509f79fb
 801088c:	3fd34413 	.word	0x3fd34413
 8010890:	080149fb 	.word	0x080149fb
 8010894:	08014a12 	.word	0x08014a12
 8010898:	7ff00000 	.word	0x7ff00000
 801089c:	080149f7 	.word	0x080149f7
 80108a0:	080149ee 	.word	0x080149ee
 80108a4:	0801498a 	.word	0x0801498a
 80108a8:	3ff80000 	.word	0x3ff80000
 80108ac:	08014b00 	.word	0x08014b00
 80108b0:	08014a6a 	.word	0x08014a6a
 80108b4:	2301      	movs	r3, #1
 80108b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80108b8:	e7d4      	b.n	8010864 <_dtoa_r+0x2bc>
 80108ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80108bc:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80108c0:	e7b7      	b.n	8010832 <_dtoa_r+0x28a>
 80108c2:	3101      	adds	r1, #1
 80108c4:	0052      	lsls	r2, r2, #1
 80108c6:	e7b7      	b.n	8010838 <_dtoa_r+0x290>
 80108c8:	69e3      	ldr	r3, [r4, #28]
 80108ca:	9a03      	ldr	r2, [sp, #12]
 80108cc:	601a      	str	r2, [r3, #0]
 80108ce:	9b05      	ldr	r3, [sp, #20]
 80108d0:	2b0e      	cmp	r3, #14
 80108d2:	f200 80a8 	bhi.w	8010a26 <_dtoa_r+0x47e>
 80108d6:	2d00      	cmp	r5, #0
 80108d8:	f000 80a5 	beq.w	8010a26 <_dtoa_r+0x47e>
 80108dc:	f1bb 0f00 	cmp.w	fp, #0
 80108e0:	dd38      	ble.n	8010954 <_dtoa_r+0x3ac>
 80108e2:	4bc0      	ldr	r3, [pc, #768]	; (8010be4 <_dtoa_r+0x63c>)
 80108e4:	f00b 020f 	and.w	r2, fp, #15
 80108e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80108ec:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80108f0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80108f4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80108f8:	d019      	beq.n	801092e <_dtoa_r+0x386>
 80108fa:	4bbb      	ldr	r3, [pc, #748]	; (8010be8 <_dtoa_r+0x640>)
 80108fc:	ec51 0b18 	vmov	r0, r1, d8
 8010900:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010904:	f7ef ffc2 	bl	800088c <__aeabi_ddiv>
 8010908:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801090c:	f008 080f 	and.w	r8, r8, #15
 8010910:	2503      	movs	r5, #3
 8010912:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8010be8 <_dtoa_r+0x640>
 8010916:	f1b8 0f00 	cmp.w	r8, #0
 801091a:	d10a      	bne.n	8010932 <_dtoa_r+0x38a>
 801091c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010920:	4632      	mov	r2, r6
 8010922:	463b      	mov	r3, r7
 8010924:	f7ef ffb2 	bl	800088c <__aeabi_ddiv>
 8010928:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801092c:	e02b      	b.n	8010986 <_dtoa_r+0x3de>
 801092e:	2502      	movs	r5, #2
 8010930:	e7ef      	b.n	8010912 <_dtoa_r+0x36a>
 8010932:	f018 0f01 	tst.w	r8, #1
 8010936:	d008      	beq.n	801094a <_dtoa_r+0x3a2>
 8010938:	4630      	mov	r0, r6
 801093a:	4639      	mov	r1, r7
 801093c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010940:	f7ef fe7a 	bl	8000638 <__aeabi_dmul>
 8010944:	3501      	adds	r5, #1
 8010946:	4606      	mov	r6, r0
 8010948:	460f      	mov	r7, r1
 801094a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801094e:	f109 0908 	add.w	r9, r9, #8
 8010952:	e7e0      	b.n	8010916 <_dtoa_r+0x36e>
 8010954:	f000 809f 	beq.w	8010a96 <_dtoa_r+0x4ee>
 8010958:	f1cb 0600 	rsb	r6, fp, #0
 801095c:	4ba1      	ldr	r3, [pc, #644]	; (8010be4 <_dtoa_r+0x63c>)
 801095e:	4fa2      	ldr	r7, [pc, #648]	; (8010be8 <_dtoa_r+0x640>)
 8010960:	f006 020f 	and.w	r2, r6, #15
 8010964:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010968:	e9d3 2300 	ldrd	r2, r3, [r3]
 801096c:	ec51 0b18 	vmov	r0, r1, d8
 8010970:	f7ef fe62 	bl	8000638 <__aeabi_dmul>
 8010974:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010978:	1136      	asrs	r6, r6, #4
 801097a:	2300      	movs	r3, #0
 801097c:	2502      	movs	r5, #2
 801097e:	2e00      	cmp	r6, #0
 8010980:	d17e      	bne.n	8010a80 <_dtoa_r+0x4d8>
 8010982:	2b00      	cmp	r3, #0
 8010984:	d1d0      	bne.n	8010928 <_dtoa_r+0x380>
 8010986:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010988:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 801098c:	2b00      	cmp	r3, #0
 801098e:	f000 8084 	beq.w	8010a9a <_dtoa_r+0x4f2>
 8010992:	4b96      	ldr	r3, [pc, #600]	; (8010bec <_dtoa_r+0x644>)
 8010994:	2200      	movs	r2, #0
 8010996:	4640      	mov	r0, r8
 8010998:	4649      	mov	r1, r9
 801099a:	f7f0 f8bf 	bl	8000b1c <__aeabi_dcmplt>
 801099e:	2800      	cmp	r0, #0
 80109a0:	d07b      	beq.n	8010a9a <_dtoa_r+0x4f2>
 80109a2:	9b05      	ldr	r3, [sp, #20]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d078      	beq.n	8010a9a <_dtoa_r+0x4f2>
 80109a8:	9b04      	ldr	r3, [sp, #16]
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	dd39      	ble.n	8010a22 <_dtoa_r+0x47a>
 80109ae:	4b90      	ldr	r3, [pc, #576]	; (8010bf0 <_dtoa_r+0x648>)
 80109b0:	2200      	movs	r2, #0
 80109b2:	4640      	mov	r0, r8
 80109b4:	4649      	mov	r1, r9
 80109b6:	f7ef fe3f 	bl	8000638 <__aeabi_dmul>
 80109ba:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80109be:	9e04      	ldr	r6, [sp, #16]
 80109c0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80109c4:	3501      	adds	r5, #1
 80109c6:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80109ca:	4628      	mov	r0, r5
 80109cc:	f7ef fdca 	bl	8000564 <__aeabi_i2d>
 80109d0:	4642      	mov	r2, r8
 80109d2:	464b      	mov	r3, r9
 80109d4:	f7ef fe30 	bl	8000638 <__aeabi_dmul>
 80109d8:	4b86      	ldr	r3, [pc, #536]	; (8010bf4 <_dtoa_r+0x64c>)
 80109da:	2200      	movs	r2, #0
 80109dc:	f7ef fc76 	bl	80002cc <__adddf3>
 80109e0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80109e4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80109e8:	9307      	str	r3, [sp, #28]
 80109ea:	2e00      	cmp	r6, #0
 80109ec:	d158      	bne.n	8010aa0 <_dtoa_r+0x4f8>
 80109ee:	4b82      	ldr	r3, [pc, #520]	; (8010bf8 <_dtoa_r+0x650>)
 80109f0:	2200      	movs	r2, #0
 80109f2:	4640      	mov	r0, r8
 80109f4:	4649      	mov	r1, r9
 80109f6:	f7ef fc67 	bl	80002c8 <__aeabi_dsub>
 80109fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80109fe:	4680      	mov	r8, r0
 8010a00:	4689      	mov	r9, r1
 8010a02:	f7f0 f8a9 	bl	8000b58 <__aeabi_dcmpgt>
 8010a06:	2800      	cmp	r0, #0
 8010a08:	f040 8297 	bne.w	8010f3a <_dtoa_r+0x992>
 8010a0c:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
 8010a10:	4640      	mov	r0, r8
 8010a12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010a16:	4649      	mov	r1, r9
 8010a18:	f7f0 f880 	bl	8000b1c <__aeabi_dcmplt>
 8010a1c:	2800      	cmp	r0, #0
 8010a1e:	f040 828a 	bne.w	8010f36 <_dtoa_r+0x98e>
 8010a22:	ed8d 8b06 	vstr	d8, [sp, #24]
 8010a26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	f2c0 814e 	blt.w	8010cca <_dtoa_r+0x722>
 8010a2e:	f1bb 0f0e 	cmp.w	fp, #14
 8010a32:	f300 814a 	bgt.w	8010cca <_dtoa_r+0x722>
 8010a36:	4b6b      	ldr	r3, [pc, #428]	; (8010be4 <_dtoa_r+0x63c>)
 8010a38:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010a3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010a40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	f280 80dc 	bge.w	8010c00 <_dtoa_r+0x658>
 8010a48:	9b05      	ldr	r3, [sp, #20]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	f300 80d8 	bgt.w	8010c00 <_dtoa_r+0x658>
 8010a50:	f040 8270 	bne.w	8010f34 <_dtoa_r+0x98c>
 8010a54:	4b68      	ldr	r3, [pc, #416]	; (8010bf8 <_dtoa_r+0x650>)
 8010a56:	2200      	movs	r2, #0
 8010a58:	4640      	mov	r0, r8
 8010a5a:	4649      	mov	r1, r9
 8010a5c:	f7ef fdec 	bl	8000638 <__aeabi_dmul>
 8010a60:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010a64:	f7f0 f86e 	bl	8000b44 <__aeabi_dcmpge>
 8010a68:	9e05      	ldr	r6, [sp, #20]
 8010a6a:	4637      	mov	r7, r6
 8010a6c:	2800      	cmp	r0, #0
 8010a6e:	f040 8246 	bne.w	8010efe <_dtoa_r+0x956>
 8010a72:	9d03      	ldr	r5, [sp, #12]
 8010a74:	2331      	movs	r3, #49	; 0x31
 8010a76:	f805 3b01 	strb.w	r3, [r5], #1
 8010a7a:	f10b 0b01 	add.w	fp, fp, #1
 8010a7e:	e242      	b.n	8010f06 <_dtoa_r+0x95e>
 8010a80:	07f2      	lsls	r2, r6, #31
 8010a82:	d505      	bpl.n	8010a90 <_dtoa_r+0x4e8>
 8010a84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010a88:	f7ef fdd6 	bl	8000638 <__aeabi_dmul>
 8010a8c:	3501      	adds	r5, #1
 8010a8e:	2301      	movs	r3, #1
 8010a90:	1076      	asrs	r6, r6, #1
 8010a92:	3708      	adds	r7, #8
 8010a94:	e773      	b.n	801097e <_dtoa_r+0x3d6>
 8010a96:	2502      	movs	r5, #2
 8010a98:	e775      	b.n	8010986 <_dtoa_r+0x3de>
 8010a9a:	9e05      	ldr	r6, [sp, #20]
 8010a9c:	465f      	mov	r7, fp
 8010a9e:	e792      	b.n	80109c6 <_dtoa_r+0x41e>
 8010aa0:	9903      	ldr	r1, [sp, #12]
 8010aa2:	4b50      	ldr	r3, [pc, #320]	; (8010be4 <_dtoa_r+0x63c>)
 8010aa4:	ed9d 7b06 	vldr	d7, [sp, #24]
 8010aa8:	4431      	add	r1, r6
 8010aaa:	9106      	str	r1, [sp, #24]
 8010aac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010aae:	eeb0 9a47 	vmov.f32	s18, s14
 8010ab2:	eef0 9a67 	vmov.f32	s19, s15
 8010ab6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010aba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010abe:	2900      	cmp	r1, #0
 8010ac0:	d044      	beq.n	8010b4c <_dtoa_r+0x5a4>
 8010ac2:	494e      	ldr	r1, [pc, #312]	; (8010bfc <_dtoa_r+0x654>)
 8010ac4:	2000      	movs	r0, #0
 8010ac6:	f7ef fee1 	bl	800088c <__aeabi_ddiv>
 8010aca:	ec53 2b19 	vmov	r2, r3, d9
 8010ace:	f7ef fbfb 	bl	80002c8 <__aeabi_dsub>
 8010ad2:	9d03      	ldr	r5, [sp, #12]
 8010ad4:	ec41 0b19 	vmov	d9, r0, r1
 8010ad8:	4649      	mov	r1, r9
 8010ada:	4640      	mov	r0, r8
 8010adc:	f7f0 f85c 	bl	8000b98 <__aeabi_d2iz>
 8010ae0:	4606      	mov	r6, r0
 8010ae2:	f7ef fd3f 	bl	8000564 <__aeabi_i2d>
 8010ae6:	4602      	mov	r2, r0
 8010ae8:	460b      	mov	r3, r1
 8010aea:	4640      	mov	r0, r8
 8010aec:	4649      	mov	r1, r9
 8010aee:	f7ef fbeb 	bl	80002c8 <__aeabi_dsub>
 8010af2:	3630      	adds	r6, #48	; 0x30
 8010af4:	f805 6b01 	strb.w	r6, [r5], #1
 8010af8:	ec53 2b19 	vmov	r2, r3, d9
 8010afc:	4680      	mov	r8, r0
 8010afe:	4689      	mov	r9, r1
 8010b00:	f7f0 f80c 	bl	8000b1c <__aeabi_dcmplt>
 8010b04:	2800      	cmp	r0, #0
 8010b06:	d164      	bne.n	8010bd2 <_dtoa_r+0x62a>
 8010b08:	4642      	mov	r2, r8
 8010b0a:	464b      	mov	r3, r9
 8010b0c:	4937      	ldr	r1, [pc, #220]	; (8010bec <_dtoa_r+0x644>)
 8010b0e:	2000      	movs	r0, #0
 8010b10:	f7ef fbda 	bl	80002c8 <__aeabi_dsub>
 8010b14:	ec53 2b19 	vmov	r2, r3, d9
 8010b18:	f7f0 f800 	bl	8000b1c <__aeabi_dcmplt>
 8010b1c:	2800      	cmp	r0, #0
 8010b1e:	f040 80b6 	bne.w	8010c8e <_dtoa_r+0x6e6>
 8010b22:	9b06      	ldr	r3, [sp, #24]
 8010b24:	429d      	cmp	r5, r3
 8010b26:	f43f af7c 	beq.w	8010a22 <_dtoa_r+0x47a>
 8010b2a:	4b31      	ldr	r3, [pc, #196]	; (8010bf0 <_dtoa_r+0x648>)
 8010b2c:	ec51 0b19 	vmov	r0, r1, d9
 8010b30:	2200      	movs	r2, #0
 8010b32:	f7ef fd81 	bl	8000638 <__aeabi_dmul>
 8010b36:	4b2e      	ldr	r3, [pc, #184]	; (8010bf0 <_dtoa_r+0x648>)
 8010b38:	ec41 0b19 	vmov	d9, r0, r1
 8010b3c:	2200      	movs	r2, #0
 8010b3e:	4640      	mov	r0, r8
 8010b40:	4649      	mov	r1, r9
 8010b42:	f7ef fd79 	bl	8000638 <__aeabi_dmul>
 8010b46:	4680      	mov	r8, r0
 8010b48:	4689      	mov	r9, r1
 8010b4a:	e7c5      	b.n	8010ad8 <_dtoa_r+0x530>
 8010b4c:	ec51 0b17 	vmov	r0, r1, d7
 8010b50:	f7ef fd72 	bl	8000638 <__aeabi_dmul>
 8010b54:	9b06      	ldr	r3, [sp, #24]
 8010b56:	9d03      	ldr	r5, [sp, #12]
 8010b58:	930f      	str	r3, [sp, #60]	; 0x3c
 8010b5a:	ec41 0b19 	vmov	d9, r0, r1
 8010b5e:	4649      	mov	r1, r9
 8010b60:	4640      	mov	r0, r8
 8010b62:	f7f0 f819 	bl	8000b98 <__aeabi_d2iz>
 8010b66:	4606      	mov	r6, r0
 8010b68:	f7ef fcfc 	bl	8000564 <__aeabi_i2d>
 8010b6c:	3630      	adds	r6, #48	; 0x30
 8010b6e:	4602      	mov	r2, r0
 8010b70:	460b      	mov	r3, r1
 8010b72:	4640      	mov	r0, r8
 8010b74:	4649      	mov	r1, r9
 8010b76:	f7ef fba7 	bl	80002c8 <__aeabi_dsub>
 8010b7a:	f805 6b01 	strb.w	r6, [r5], #1
 8010b7e:	9b06      	ldr	r3, [sp, #24]
 8010b80:	429d      	cmp	r5, r3
 8010b82:	4680      	mov	r8, r0
 8010b84:	4689      	mov	r9, r1
 8010b86:	f04f 0200 	mov.w	r2, #0
 8010b8a:	d124      	bne.n	8010bd6 <_dtoa_r+0x62e>
 8010b8c:	4b1b      	ldr	r3, [pc, #108]	; (8010bfc <_dtoa_r+0x654>)
 8010b8e:	ec51 0b19 	vmov	r0, r1, d9
 8010b92:	f7ef fb9b 	bl	80002cc <__adddf3>
 8010b96:	4602      	mov	r2, r0
 8010b98:	460b      	mov	r3, r1
 8010b9a:	4640      	mov	r0, r8
 8010b9c:	4649      	mov	r1, r9
 8010b9e:	f7ef ffdb 	bl	8000b58 <__aeabi_dcmpgt>
 8010ba2:	2800      	cmp	r0, #0
 8010ba4:	d173      	bne.n	8010c8e <_dtoa_r+0x6e6>
 8010ba6:	ec53 2b19 	vmov	r2, r3, d9
 8010baa:	4914      	ldr	r1, [pc, #80]	; (8010bfc <_dtoa_r+0x654>)
 8010bac:	2000      	movs	r0, #0
 8010bae:	f7ef fb8b 	bl	80002c8 <__aeabi_dsub>
 8010bb2:	4602      	mov	r2, r0
 8010bb4:	460b      	mov	r3, r1
 8010bb6:	4640      	mov	r0, r8
 8010bb8:	4649      	mov	r1, r9
 8010bba:	f7ef ffaf 	bl	8000b1c <__aeabi_dcmplt>
 8010bbe:	2800      	cmp	r0, #0
 8010bc0:	f43f af2f 	beq.w	8010a22 <_dtoa_r+0x47a>
 8010bc4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010bc6:	1e6b      	subs	r3, r5, #1
 8010bc8:	930f      	str	r3, [sp, #60]	; 0x3c
 8010bca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010bce:	2b30      	cmp	r3, #48	; 0x30
 8010bd0:	d0f8      	beq.n	8010bc4 <_dtoa_r+0x61c>
 8010bd2:	46bb      	mov	fp, r7
 8010bd4:	e04a      	b.n	8010c6c <_dtoa_r+0x6c4>
 8010bd6:	4b06      	ldr	r3, [pc, #24]	; (8010bf0 <_dtoa_r+0x648>)
 8010bd8:	f7ef fd2e 	bl	8000638 <__aeabi_dmul>
 8010bdc:	4680      	mov	r8, r0
 8010bde:	4689      	mov	r9, r1
 8010be0:	e7bd      	b.n	8010b5e <_dtoa_r+0x5b6>
 8010be2:	bf00      	nop
 8010be4:	08014b00 	.word	0x08014b00
 8010be8:	08014ad8 	.word	0x08014ad8
 8010bec:	3ff00000 	.word	0x3ff00000
 8010bf0:	40240000 	.word	0x40240000
 8010bf4:	401c0000 	.word	0x401c0000
 8010bf8:	40140000 	.word	0x40140000
 8010bfc:	3fe00000 	.word	0x3fe00000
 8010c00:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8010c04:	9d03      	ldr	r5, [sp, #12]
 8010c06:	4642      	mov	r2, r8
 8010c08:	464b      	mov	r3, r9
 8010c0a:	4630      	mov	r0, r6
 8010c0c:	4639      	mov	r1, r7
 8010c0e:	f7ef fe3d 	bl	800088c <__aeabi_ddiv>
 8010c12:	f7ef ffc1 	bl	8000b98 <__aeabi_d2iz>
 8010c16:	9004      	str	r0, [sp, #16]
 8010c18:	f7ef fca4 	bl	8000564 <__aeabi_i2d>
 8010c1c:	4642      	mov	r2, r8
 8010c1e:	464b      	mov	r3, r9
 8010c20:	f7ef fd0a 	bl	8000638 <__aeabi_dmul>
 8010c24:	4602      	mov	r2, r0
 8010c26:	460b      	mov	r3, r1
 8010c28:	4630      	mov	r0, r6
 8010c2a:	4639      	mov	r1, r7
 8010c2c:	f7ef fb4c 	bl	80002c8 <__aeabi_dsub>
 8010c30:	9e04      	ldr	r6, [sp, #16]
 8010c32:	9f05      	ldr	r7, [sp, #20]
 8010c34:	3630      	adds	r6, #48	; 0x30
 8010c36:	f805 6b01 	strb.w	r6, [r5], #1
 8010c3a:	9e03      	ldr	r6, [sp, #12]
 8010c3c:	1bae      	subs	r6, r5, r6
 8010c3e:	42b7      	cmp	r7, r6
 8010c40:	4602      	mov	r2, r0
 8010c42:	460b      	mov	r3, r1
 8010c44:	d134      	bne.n	8010cb0 <_dtoa_r+0x708>
 8010c46:	f7ef fb41 	bl	80002cc <__adddf3>
 8010c4a:	4642      	mov	r2, r8
 8010c4c:	464b      	mov	r3, r9
 8010c4e:	4606      	mov	r6, r0
 8010c50:	460f      	mov	r7, r1
 8010c52:	f7ef ff81 	bl	8000b58 <__aeabi_dcmpgt>
 8010c56:	b9c8      	cbnz	r0, 8010c8c <_dtoa_r+0x6e4>
 8010c58:	4642      	mov	r2, r8
 8010c5a:	464b      	mov	r3, r9
 8010c5c:	4630      	mov	r0, r6
 8010c5e:	4639      	mov	r1, r7
 8010c60:	f7ef ff52 	bl	8000b08 <__aeabi_dcmpeq>
 8010c64:	b110      	cbz	r0, 8010c6c <_dtoa_r+0x6c4>
 8010c66:	9b04      	ldr	r3, [sp, #16]
 8010c68:	07db      	lsls	r3, r3, #31
 8010c6a:	d40f      	bmi.n	8010c8c <_dtoa_r+0x6e4>
 8010c6c:	4651      	mov	r1, sl
 8010c6e:	4620      	mov	r0, r4
 8010c70:	f000 fbcc 	bl	801140c <_Bfree>
 8010c74:	2300      	movs	r3, #0
 8010c76:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8010c78:	702b      	strb	r3, [r5, #0]
 8010c7a:	f10b 0301 	add.w	r3, fp, #1
 8010c7e:	6013      	str	r3, [r2, #0]
 8010c80:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	f43f acdf 	beq.w	8010646 <_dtoa_r+0x9e>
 8010c88:	601d      	str	r5, [r3, #0]
 8010c8a:	e4dc      	b.n	8010646 <_dtoa_r+0x9e>
 8010c8c:	465f      	mov	r7, fp
 8010c8e:	462b      	mov	r3, r5
 8010c90:	461d      	mov	r5, r3
 8010c92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010c96:	2a39      	cmp	r2, #57	; 0x39
 8010c98:	d106      	bne.n	8010ca8 <_dtoa_r+0x700>
 8010c9a:	9a03      	ldr	r2, [sp, #12]
 8010c9c:	429a      	cmp	r2, r3
 8010c9e:	d1f7      	bne.n	8010c90 <_dtoa_r+0x6e8>
 8010ca0:	9903      	ldr	r1, [sp, #12]
 8010ca2:	2230      	movs	r2, #48	; 0x30
 8010ca4:	3701      	adds	r7, #1
 8010ca6:	700a      	strb	r2, [r1, #0]
 8010ca8:	781a      	ldrb	r2, [r3, #0]
 8010caa:	3201      	adds	r2, #1
 8010cac:	701a      	strb	r2, [r3, #0]
 8010cae:	e790      	b.n	8010bd2 <_dtoa_r+0x62a>
 8010cb0:	4ba3      	ldr	r3, [pc, #652]	; (8010f40 <_dtoa_r+0x998>)
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	f7ef fcc0 	bl	8000638 <__aeabi_dmul>
 8010cb8:	2200      	movs	r2, #0
 8010cba:	2300      	movs	r3, #0
 8010cbc:	4606      	mov	r6, r0
 8010cbe:	460f      	mov	r7, r1
 8010cc0:	f7ef ff22 	bl	8000b08 <__aeabi_dcmpeq>
 8010cc4:	2800      	cmp	r0, #0
 8010cc6:	d09e      	beq.n	8010c06 <_dtoa_r+0x65e>
 8010cc8:	e7d0      	b.n	8010c6c <_dtoa_r+0x6c4>
 8010cca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010ccc:	2a00      	cmp	r2, #0
 8010cce:	f000 80cb 	beq.w	8010e68 <_dtoa_r+0x8c0>
 8010cd2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010cd4:	2a01      	cmp	r2, #1
 8010cd6:	f300 80ad 	bgt.w	8010e34 <_dtoa_r+0x88c>
 8010cda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010cdc:	2a00      	cmp	r2, #0
 8010cde:	f000 80a5 	beq.w	8010e2c <_dtoa_r+0x884>
 8010ce2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010ce6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8010ce8:	9d08      	ldr	r5, [sp, #32]
 8010cea:	9a08      	ldr	r2, [sp, #32]
 8010cec:	441a      	add	r2, r3
 8010cee:	9208      	str	r2, [sp, #32]
 8010cf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010cf2:	2101      	movs	r1, #1
 8010cf4:	441a      	add	r2, r3
 8010cf6:	4620      	mov	r0, r4
 8010cf8:	9209      	str	r2, [sp, #36]	; 0x24
 8010cfa:	f000 fc87 	bl	801160c <__i2b>
 8010cfe:	4607      	mov	r7, r0
 8010d00:	b165      	cbz	r5, 8010d1c <_dtoa_r+0x774>
 8010d02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	dd09      	ble.n	8010d1c <_dtoa_r+0x774>
 8010d08:	42ab      	cmp	r3, r5
 8010d0a:	9a08      	ldr	r2, [sp, #32]
 8010d0c:	bfa8      	it	ge
 8010d0e:	462b      	movge	r3, r5
 8010d10:	1ad2      	subs	r2, r2, r3
 8010d12:	9208      	str	r2, [sp, #32]
 8010d14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010d16:	1aed      	subs	r5, r5, r3
 8010d18:	1ad3      	subs	r3, r2, r3
 8010d1a:	9309      	str	r3, [sp, #36]	; 0x24
 8010d1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d1e:	b1f3      	cbz	r3, 8010d5e <_dtoa_r+0x7b6>
 8010d20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	f000 80a4 	beq.w	8010e70 <_dtoa_r+0x8c8>
 8010d28:	2e00      	cmp	r6, #0
 8010d2a:	dd10      	ble.n	8010d4e <_dtoa_r+0x7a6>
 8010d2c:	4639      	mov	r1, r7
 8010d2e:	4632      	mov	r2, r6
 8010d30:	4620      	mov	r0, r4
 8010d32:	f000 fd2b 	bl	801178c <__pow5mult>
 8010d36:	4652      	mov	r2, sl
 8010d38:	4601      	mov	r1, r0
 8010d3a:	4607      	mov	r7, r0
 8010d3c:	4620      	mov	r0, r4
 8010d3e:	f000 fc7b 	bl	8011638 <__multiply>
 8010d42:	4651      	mov	r1, sl
 8010d44:	4680      	mov	r8, r0
 8010d46:	4620      	mov	r0, r4
 8010d48:	f000 fb60 	bl	801140c <_Bfree>
 8010d4c:	46c2      	mov	sl, r8
 8010d4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d50:	1b9a      	subs	r2, r3, r6
 8010d52:	d004      	beq.n	8010d5e <_dtoa_r+0x7b6>
 8010d54:	4651      	mov	r1, sl
 8010d56:	4620      	mov	r0, r4
 8010d58:	f000 fd18 	bl	801178c <__pow5mult>
 8010d5c:	4682      	mov	sl, r0
 8010d5e:	2101      	movs	r1, #1
 8010d60:	4620      	mov	r0, r4
 8010d62:	f000 fc53 	bl	801160c <__i2b>
 8010d66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	4606      	mov	r6, r0
 8010d6c:	f340 8082 	ble.w	8010e74 <_dtoa_r+0x8cc>
 8010d70:	461a      	mov	r2, r3
 8010d72:	4601      	mov	r1, r0
 8010d74:	4620      	mov	r0, r4
 8010d76:	f000 fd09 	bl	801178c <__pow5mult>
 8010d7a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8010d7c:	2b01      	cmp	r3, #1
 8010d7e:	4606      	mov	r6, r0
 8010d80:	dd7b      	ble.n	8010e7a <_dtoa_r+0x8d2>
 8010d82:	f04f 0800 	mov.w	r8, #0
 8010d86:	6933      	ldr	r3, [r6, #16]
 8010d88:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010d8c:	6918      	ldr	r0, [r3, #16]
 8010d8e:	f000 fbef 	bl	8011570 <__hi0bits>
 8010d92:	f1c0 0020 	rsb	r0, r0, #32
 8010d96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d98:	4418      	add	r0, r3
 8010d9a:	f010 001f 	ands.w	r0, r0, #31
 8010d9e:	f000 8095 	beq.w	8010ecc <_dtoa_r+0x924>
 8010da2:	f1c0 0320 	rsb	r3, r0, #32
 8010da6:	2b04      	cmp	r3, #4
 8010da8:	f340 8086 	ble.w	8010eb8 <_dtoa_r+0x910>
 8010dac:	9b08      	ldr	r3, [sp, #32]
 8010dae:	f1c0 001c 	rsb	r0, r0, #28
 8010db2:	4403      	add	r3, r0
 8010db4:	9308      	str	r3, [sp, #32]
 8010db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010db8:	4403      	add	r3, r0
 8010dba:	4405      	add	r5, r0
 8010dbc:	9309      	str	r3, [sp, #36]	; 0x24
 8010dbe:	9b08      	ldr	r3, [sp, #32]
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	dd05      	ble.n	8010dd0 <_dtoa_r+0x828>
 8010dc4:	4651      	mov	r1, sl
 8010dc6:	461a      	mov	r2, r3
 8010dc8:	4620      	mov	r0, r4
 8010dca:	f000 fd39 	bl	8011840 <__lshift>
 8010dce:	4682      	mov	sl, r0
 8010dd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	dd05      	ble.n	8010de2 <_dtoa_r+0x83a>
 8010dd6:	4631      	mov	r1, r6
 8010dd8:	461a      	mov	r2, r3
 8010dda:	4620      	mov	r0, r4
 8010ddc:	f000 fd30 	bl	8011840 <__lshift>
 8010de0:	4606      	mov	r6, r0
 8010de2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d073      	beq.n	8010ed0 <_dtoa_r+0x928>
 8010de8:	4631      	mov	r1, r6
 8010dea:	4650      	mov	r0, sl
 8010dec:	f000 fd94 	bl	8011918 <__mcmp>
 8010df0:	2800      	cmp	r0, #0
 8010df2:	da6d      	bge.n	8010ed0 <_dtoa_r+0x928>
 8010df4:	2300      	movs	r3, #0
 8010df6:	4651      	mov	r1, sl
 8010df8:	220a      	movs	r2, #10
 8010dfa:	4620      	mov	r0, r4
 8010dfc:	f000 fb28 	bl	8011450 <__multadd>
 8010e00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010e02:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010e06:	4682      	mov	sl, r0
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	f000 81b0 	beq.w	801116e <_dtoa_r+0xbc6>
 8010e0e:	2300      	movs	r3, #0
 8010e10:	4639      	mov	r1, r7
 8010e12:	220a      	movs	r2, #10
 8010e14:	4620      	mov	r0, r4
 8010e16:	f000 fb1b 	bl	8011450 <__multadd>
 8010e1a:	9b04      	ldr	r3, [sp, #16]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	4607      	mov	r7, r0
 8010e20:	f300 8096 	bgt.w	8010f50 <_dtoa_r+0x9a8>
 8010e24:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8010e26:	2b02      	cmp	r3, #2
 8010e28:	dc5a      	bgt.n	8010ee0 <_dtoa_r+0x938>
 8010e2a:	e091      	b.n	8010f50 <_dtoa_r+0x9a8>
 8010e2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010e2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010e32:	e758      	b.n	8010ce6 <_dtoa_r+0x73e>
 8010e34:	9b05      	ldr	r3, [sp, #20]
 8010e36:	1e5e      	subs	r6, r3, #1
 8010e38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e3a:	42b3      	cmp	r3, r6
 8010e3c:	bfbf      	itttt	lt
 8010e3e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8010e40:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8010e42:	960a      	strlt	r6, [sp, #40]	; 0x28
 8010e44:	1af3      	sublt	r3, r6, r3
 8010e46:	bfb4      	ite	lt
 8010e48:	18d2      	addlt	r2, r2, r3
 8010e4a:	1b9e      	subge	r6, r3, r6
 8010e4c:	9b05      	ldr	r3, [sp, #20]
 8010e4e:	bfbc      	itt	lt
 8010e50:	920c      	strlt	r2, [sp, #48]	; 0x30
 8010e52:	2600      	movlt	r6, #0
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	bfb9      	ittee	lt
 8010e58:	9b08      	ldrlt	r3, [sp, #32]
 8010e5a:	9a05      	ldrlt	r2, [sp, #20]
 8010e5c:	9d08      	ldrge	r5, [sp, #32]
 8010e5e:	9b05      	ldrge	r3, [sp, #20]
 8010e60:	bfbc      	itt	lt
 8010e62:	1a9d      	sublt	r5, r3, r2
 8010e64:	2300      	movlt	r3, #0
 8010e66:	e740      	b.n	8010cea <_dtoa_r+0x742>
 8010e68:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8010e6a:	9d08      	ldr	r5, [sp, #32]
 8010e6c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8010e6e:	e747      	b.n	8010d00 <_dtoa_r+0x758>
 8010e70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010e72:	e76f      	b.n	8010d54 <_dtoa_r+0x7ac>
 8010e74:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8010e76:	2b01      	cmp	r3, #1
 8010e78:	dc19      	bgt.n	8010eae <_dtoa_r+0x906>
 8010e7a:	9b06      	ldr	r3, [sp, #24]
 8010e7c:	b9bb      	cbnz	r3, 8010eae <_dtoa_r+0x906>
 8010e7e:	9b07      	ldr	r3, [sp, #28]
 8010e80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010e84:	b99b      	cbnz	r3, 8010eae <_dtoa_r+0x906>
 8010e86:	9b07      	ldr	r3, [sp, #28]
 8010e88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010e8c:	0d1b      	lsrs	r3, r3, #20
 8010e8e:	051b      	lsls	r3, r3, #20
 8010e90:	b183      	cbz	r3, 8010eb4 <_dtoa_r+0x90c>
 8010e92:	9b08      	ldr	r3, [sp, #32]
 8010e94:	3301      	adds	r3, #1
 8010e96:	9308      	str	r3, [sp, #32]
 8010e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e9a:	3301      	adds	r3, #1
 8010e9c:	9309      	str	r3, [sp, #36]	; 0x24
 8010e9e:	f04f 0801 	mov.w	r8, #1
 8010ea2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	f47f af6e 	bne.w	8010d86 <_dtoa_r+0x7de>
 8010eaa:	2001      	movs	r0, #1
 8010eac:	e773      	b.n	8010d96 <_dtoa_r+0x7ee>
 8010eae:	f04f 0800 	mov.w	r8, #0
 8010eb2:	e7f6      	b.n	8010ea2 <_dtoa_r+0x8fa>
 8010eb4:	4698      	mov	r8, r3
 8010eb6:	e7f4      	b.n	8010ea2 <_dtoa_r+0x8fa>
 8010eb8:	d081      	beq.n	8010dbe <_dtoa_r+0x816>
 8010eba:	9a08      	ldr	r2, [sp, #32]
 8010ebc:	331c      	adds	r3, #28
 8010ebe:	441a      	add	r2, r3
 8010ec0:	9208      	str	r2, [sp, #32]
 8010ec2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010ec4:	441a      	add	r2, r3
 8010ec6:	441d      	add	r5, r3
 8010ec8:	9209      	str	r2, [sp, #36]	; 0x24
 8010eca:	e778      	b.n	8010dbe <_dtoa_r+0x816>
 8010ecc:	4603      	mov	r3, r0
 8010ece:	e7f4      	b.n	8010eba <_dtoa_r+0x912>
 8010ed0:	9b05      	ldr	r3, [sp, #20]
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	dc36      	bgt.n	8010f44 <_dtoa_r+0x99c>
 8010ed6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8010ed8:	2b02      	cmp	r3, #2
 8010eda:	dd33      	ble.n	8010f44 <_dtoa_r+0x99c>
 8010edc:	9b05      	ldr	r3, [sp, #20]
 8010ede:	9304      	str	r3, [sp, #16]
 8010ee0:	9b04      	ldr	r3, [sp, #16]
 8010ee2:	b963      	cbnz	r3, 8010efe <_dtoa_r+0x956>
 8010ee4:	4631      	mov	r1, r6
 8010ee6:	2205      	movs	r2, #5
 8010ee8:	4620      	mov	r0, r4
 8010eea:	f000 fab1 	bl	8011450 <__multadd>
 8010eee:	4601      	mov	r1, r0
 8010ef0:	4606      	mov	r6, r0
 8010ef2:	4650      	mov	r0, sl
 8010ef4:	f000 fd10 	bl	8011918 <__mcmp>
 8010ef8:	2800      	cmp	r0, #0
 8010efa:	f73f adba 	bgt.w	8010a72 <_dtoa_r+0x4ca>
 8010efe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010f00:	9d03      	ldr	r5, [sp, #12]
 8010f02:	ea6f 0b03 	mvn.w	fp, r3
 8010f06:	f04f 0800 	mov.w	r8, #0
 8010f0a:	4631      	mov	r1, r6
 8010f0c:	4620      	mov	r0, r4
 8010f0e:	f000 fa7d 	bl	801140c <_Bfree>
 8010f12:	2f00      	cmp	r7, #0
 8010f14:	f43f aeaa 	beq.w	8010c6c <_dtoa_r+0x6c4>
 8010f18:	f1b8 0f00 	cmp.w	r8, #0
 8010f1c:	d005      	beq.n	8010f2a <_dtoa_r+0x982>
 8010f1e:	45b8      	cmp	r8, r7
 8010f20:	d003      	beq.n	8010f2a <_dtoa_r+0x982>
 8010f22:	4641      	mov	r1, r8
 8010f24:	4620      	mov	r0, r4
 8010f26:	f000 fa71 	bl	801140c <_Bfree>
 8010f2a:	4639      	mov	r1, r7
 8010f2c:	4620      	mov	r0, r4
 8010f2e:	f000 fa6d 	bl	801140c <_Bfree>
 8010f32:	e69b      	b.n	8010c6c <_dtoa_r+0x6c4>
 8010f34:	2600      	movs	r6, #0
 8010f36:	4637      	mov	r7, r6
 8010f38:	e7e1      	b.n	8010efe <_dtoa_r+0x956>
 8010f3a:	46bb      	mov	fp, r7
 8010f3c:	4637      	mov	r7, r6
 8010f3e:	e598      	b.n	8010a72 <_dtoa_r+0x4ca>
 8010f40:	40240000 	.word	0x40240000
 8010f44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	f000 80c8 	beq.w	80110dc <_dtoa_r+0xb34>
 8010f4c:	9b05      	ldr	r3, [sp, #20]
 8010f4e:	9304      	str	r3, [sp, #16]
 8010f50:	2d00      	cmp	r5, #0
 8010f52:	dd05      	ble.n	8010f60 <_dtoa_r+0x9b8>
 8010f54:	4639      	mov	r1, r7
 8010f56:	462a      	mov	r2, r5
 8010f58:	4620      	mov	r0, r4
 8010f5a:	f000 fc71 	bl	8011840 <__lshift>
 8010f5e:	4607      	mov	r7, r0
 8010f60:	f1b8 0f00 	cmp.w	r8, #0
 8010f64:	d05b      	beq.n	801101e <_dtoa_r+0xa76>
 8010f66:	6879      	ldr	r1, [r7, #4]
 8010f68:	4620      	mov	r0, r4
 8010f6a:	f000 fa0f 	bl	801138c <_Balloc>
 8010f6e:	4605      	mov	r5, r0
 8010f70:	b928      	cbnz	r0, 8010f7e <_dtoa_r+0x9d6>
 8010f72:	4b83      	ldr	r3, [pc, #524]	; (8011180 <_dtoa_r+0xbd8>)
 8010f74:	4602      	mov	r2, r0
 8010f76:	f240 21ef 	movw	r1, #751	; 0x2ef
 8010f7a:	f7ff bb2b 	b.w	80105d4 <_dtoa_r+0x2c>
 8010f7e:	693a      	ldr	r2, [r7, #16]
 8010f80:	3202      	adds	r2, #2
 8010f82:	0092      	lsls	r2, r2, #2
 8010f84:	f107 010c 	add.w	r1, r7, #12
 8010f88:	300c      	adds	r0, #12
 8010f8a:	f7ff fa53 	bl	8010434 <memcpy>
 8010f8e:	2201      	movs	r2, #1
 8010f90:	4629      	mov	r1, r5
 8010f92:	4620      	mov	r0, r4
 8010f94:	f000 fc54 	bl	8011840 <__lshift>
 8010f98:	9b03      	ldr	r3, [sp, #12]
 8010f9a:	3301      	adds	r3, #1
 8010f9c:	9305      	str	r3, [sp, #20]
 8010f9e:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8010fa2:	4413      	add	r3, r2
 8010fa4:	930a      	str	r3, [sp, #40]	; 0x28
 8010fa6:	9b06      	ldr	r3, [sp, #24]
 8010fa8:	f003 0301 	and.w	r3, r3, #1
 8010fac:	46b8      	mov	r8, r7
 8010fae:	9309      	str	r3, [sp, #36]	; 0x24
 8010fb0:	4607      	mov	r7, r0
 8010fb2:	9b05      	ldr	r3, [sp, #20]
 8010fb4:	4631      	mov	r1, r6
 8010fb6:	3b01      	subs	r3, #1
 8010fb8:	4650      	mov	r0, sl
 8010fba:	9304      	str	r3, [sp, #16]
 8010fbc:	f7ff fa6a 	bl	8010494 <quorem>
 8010fc0:	4641      	mov	r1, r8
 8010fc2:	9006      	str	r0, [sp, #24]
 8010fc4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010fc8:	4650      	mov	r0, sl
 8010fca:	f000 fca5 	bl	8011918 <__mcmp>
 8010fce:	463a      	mov	r2, r7
 8010fd0:	9008      	str	r0, [sp, #32]
 8010fd2:	4631      	mov	r1, r6
 8010fd4:	4620      	mov	r0, r4
 8010fd6:	f000 fcbb 	bl	8011950 <__mdiff>
 8010fda:	68c2      	ldr	r2, [r0, #12]
 8010fdc:	4605      	mov	r5, r0
 8010fde:	bb02      	cbnz	r2, 8011022 <_dtoa_r+0xa7a>
 8010fe0:	4601      	mov	r1, r0
 8010fe2:	4650      	mov	r0, sl
 8010fe4:	f000 fc98 	bl	8011918 <__mcmp>
 8010fe8:	4602      	mov	r2, r0
 8010fea:	4629      	mov	r1, r5
 8010fec:	4620      	mov	r0, r4
 8010fee:	920b      	str	r2, [sp, #44]	; 0x2c
 8010ff0:	f000 fa0c 	bl	801140c <_Bfree>
 8010ff4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8010ff6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010ff8:	9d05      	ldr	r5, [sp, #20]
 8010ffa:	ea43 0102 	orr.w	r1, r3, r2
 8010ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011000:	4319      	orrs	r1, r3
 8011002:	d110      	bne.n	8011026 <_dtoa_r+0xa7e>
 8011004:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011008:	d029      	beq.n	801105e <_dtoa_r+0xab6>
 801100a:	9b08      	ldr	r3, [sp, #32]
 801100c:	2b00      	cmp	r3, #0
 801100e:	dd02      	ble.n	8011016 <_dtoa_r+0xa6e>
 8011010:	9b06      	ldr	r3, [sp, #24]
 8011012:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8011016:	9b04      	ldr	r3, [sp, #16]
 8011018:	f883 9000 	strb.w	r9, [r3]
 801101c:	e775      	b.n	8010f0a <_dtoa_r+0x962>
 801101e:	4638      	mov	r0, r7
 8011020:	e7ba      	b.n	8010f98 <_dtoa_r+0x9f0>
 8011022:	2201      	movs	r2, #1
 8011024:	e7e1      	b.n	8010fea <_dtoa_r+0xa42>
 8011026:	9b08      	ldr	r3, [sp, #32]
 8011028:	2b00      	cmp	r3, #0
 801102a:	db04      	blt.n	8011036 <_dtoa_r+0xa8e>
 801102c:	9920      	ldr	r1, [sp, #128]	; 0x80
 801102e:	430b      	orrs	r3, r1
 8011030:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011032:	430b      	orrs	r3, r1
 8011034:	d120      	bne.n	8011078 <_dtoa_r+0xad0>
 8011036:	2a00      	cmp	r2, #0
 8011038:	dded      	ble.n	8011016 <_dtoa_r+0xa6e>
 801103a:	4651      	mov	r1, sl
 801103c:	2201      	movs	r2, #1
 801103e:	4620      	mov	r0, r4
 8011040:	f000 fbfe 	bl	8011840 <__lshift>
 8011044:	4631      	mov	r1, r6
 8011046:	4682      	mov	sl, r0
 8011048:	f000 fc66 	bl	8011918 <__mcmp>
 801104c:	2800      	cmp	r0, #0
 801104e:	dc03      	bgt.n	8011058 <_dtoa_r+0xab0>
 8011050:	d1e1      	bne.n	8011016 <_dtoa_r+0xa6e>
 8011052:	f019 0f01 	tst.w	r9, #1
 8011056:	d0de      	beq.n	8011016 <_dtoa_r+0xa6e>
 8011058:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801105c:	d1d8      	bne.n	8011010 <_dtoa_r+0xa68>
 801105e:	9a04      	ldr	r2, [sp, #16]
 8011060:	2339      	movs	r3, #57	; 0x39
 8011062:	7013      	strb	r3, [r2, #0]
 8011064:	462b      	mov	r3, r5
 8011066:	461d      	mov	r5, r3
 8011068:	3b01      	subs	r3, #1
 801106a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801106e:	2a39      	cmp	r2, #57	; 0x39
 8011070:	d06c      	beq.n	801114c <_dtoa_r+0xba4>
 8011072:	3201      	adds	r2, #1
 8011074:	701a      	strb	r2, [r3, #0]
 8011076:	e748      	b.n	8010f0a <_dtoa_r+0x962>
 8011078:	2a00      	cmp	r2, #0
 801107a:	dd07      	ble.n	801108c <_dtoa_r+0xae4>
 801107c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011080:	d0ed      	beq.n	801105e <_dtoa_r+0xab6>
 8011082:	9a04      	ldr	r2, [sp, #16]
 8011084:	f109 0301 	add.w	r3, r9, #1
 8011088:	7013      	strb	r3, [r2, #0]
 801108a:	e73e      	b.n	8010f0a <_dtoa_r+0x962>
 801108c:	9b05      	ldr	r3, [sp, #20]
 801108e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011090:	f803 9c01 	strb.w	r9, [r3, #-1]
 8011094:	4293      	cmp	r3, r2
 8011096:	d043      	beq.n	8011120 <_dtoa_r+0xb78>
 8011098:	4651      	mov	r1, sl
 801109a:	2300      	movs	r3, #0
 801109c:	220a      	movs	r2, #10
 801109e:	4620      	mov	r0, r4
 80110a0:	f000 f9d6 	bl	8011450 <__multadd>
 80110a4:	45b8      	cmp	r8, r7
 80110a6:	4682      	mov	sl, r0
 80110a8:	f04f 0300 	mov.w	r3, #0
 80110ac:	f04f 020a 	mov.w	r2, #10
 80110b0:	4641      	mov	r1, r8
 80110b2:	4620      	mov	r0, r4
 80110b4:	d107      	bne.n	80110c6 <_dtoa_r+0xb1e>
 80110b6:	f000 f9cb 	bl	8011450 <__multadd>
 80110ba:	4680      	mov	r8, r0
 80110bc:	4607      	mov	r7, r0
 80110be:	9b05      	ldr	r3, [sp, #20]
 80110c0:	3301      	adds	r3, #1
 80110c2:	9305      	str	r3, [sp, #20]
 80110c4:	e775      	b.n	8010fb2 <_dtoa_r+0xa0a>
 80110c6:	f000 f9c3 	bl	8011450 <__multadd>
 80110ca:	4639      	mov	r1, r7
 80110cc:	4680      	mov	r8, r0
 80110ce:	2300      	movs	r3, #0
 80110d0:	220a      	movs	r2, #10
 80110d2:	4620      	mov	r0, r4
 80110d4:	f000 f9bc 	bl	8011450 <__multadd>
 80110d8:	4607      	mov	r7, r0
 80110da:	e7f0      	b.n	80110be <_dtoa_r+0xb16>
 80110dc:	9b05      	ldr	r3, [sp, #20]
 80110de:	9304      	str	r3, [sp, #16]
 80110e0:	9d03      	ldr	r5, [sp, #12]
 80110e2:	4631      	mov	r1, r6
 80110e4:	4650      	mov	r0, sl
 80110e6:	f7ff f9d5 	bl	8010494 <quorem>
 80110ea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80110ee:	9b03      	ldr	r3, [sp, #12]
 80110f0:	f805 9b01 	strb.w	r9, [r5], #1
 80110f4:	1aea      	subs	r2, r5, r3
 80110f6:	9b04      	ldr	r3, [sp, #16]
 80110f8:	4293      	cmp	r3, r2
 80110fa:	dd07      	ble.n	801110c <_dtoa_r+0xb64>
 80110fc:	4651      	mov	r1, sl
 80110fe:	2300      	movs	r3, #0
 8011100:	220a      	movs	r2, #10
 8011102:	4620      	mov	r0, r4
 8011104:	f000 f9a4 	bl	8011450 <__multadd>
 8011108:	4682      	mov	sl, r0
 801110a:	e7ea      	b.n	80110e2 <_dtoa_r+0xb3a>
 801110c:	9b04      	ldr	r3, [sp, #16]
 801110e:	2b00      	cmp	r3, #0
 8011110:	bfc8      	it	gt
 8011112:	461d      	movgt	r5, r3
 8011114:	9b03      	ldr	r3, [sp, #12]
 8011116:	bfd8      	it	le
 8011118:	2501      	movle	r5, #1
 801111a:	441d      	add	r5, r3
 801111c:	f04f 0800 	mov.w	r8, #0
 8011120:	4651      	mov	r1, sl
 8011122:	2201      	movs	r2, #1
 8011124:	4620      	mov	r0, r4
 8011126:	f000 fb8b 	bl	8011840 <__lshift>
 801112a:	4631      	mov	r1, r6
 801112c:	4682      	mov	sl, r0
 801112e:	f000 fbf3 	bl	8011918 <__mcmp>
 8011132:	2800      	cmp	r0, #0
 8011134:	dc96      	bgt.n	8011064 <_dtoa_r+0xabc>
 8011136:	d102      	bne.n	801113e <_dtoa_r+0xb96>
 8011138:	f019 0f01 	tst.w	r9, #1
 801113c:	d192      	bne.n	8011064 <_dtoa_r+0xabc>
 801113e:	462b      	mov	r3, r5
 8011140:	461d      	mov	r5, r3
 8011142:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011146:	2a30      	cmp	r2, #48	; 0x30
 8011148:	d0fa      	beq.n	8011140 <_dtoa_r+0xb98>
 801114a:	e6de      	b.n	8010f0a <_dtoa_r+0x962>
 801114c:	9a03      	ldr	r2, [sp, #12]
 801114e:	429a      	cmp	r2, r3
 8011150:	d189      	bne.n	8011066 <_dtoa_r+0xabe>
 8011152:	f10b 0b01 	add.w	fp, fp, #1
 8011156:	2331      	movs	r3, #49	; 0x31
 8011158:	e796      	b.n	8011088 <_dtoa_r+0xae0>
 801115a:	4b0a      	ldr	r3, [pc, #40]	; (8011184 <_dtoa_r+0xbdc>)
 801115c:	f7ff ba96 	b.w	801068c <_dtoa_r+0xe4>
 8011160:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8011162:	2b00      	cmp	r3, #0
 8011164:	f47f aa6a 	bne.w	801063c <_dtoa_r+0x94>
 8011168:	4b07      	ldr	r3, [pc, #28]	; (8011188 <_dtoa_r+0xbe0>)
 801116a:	f7ff ba8f 	b.w	801068c <_dtoa_r+0xe4>
 801116e:	9b04      	ldr	r3, [sp, #16]
 8011170:	2b00      	cmp	r3, #0
 8011172:	dcb5      	bgt.n	80110e0 <_dtoa_r+0xb38>
 8011174:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8011176:	2b02      	cmp	r3, #2
 8011178:	f73f aeb2 	bgt.w	8010ee0 <_dtoa_r+0x938>
 801117c:	e7b0      	b.n	80110e0 <_dtoa_r+0xb38>
 801117e:	bf00      	nop
 8011180:	08014a6a 	.word	0x08014a6a
 8011184:	08014989 	.word	0x08014989
 8011188:	080149ee 	.word	0x080149ee

0801118c <_free_r>:
 801118c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801118e:	2900      	cmp	r1, #0
 8011190:	d044      	beq.n	801121c <_free_r+0x90>
 8011192:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011196:	9001      	str	r0, [sp, #4]
 8011198:	2b00      	cmp	r3, #0
 801119a:	f1a1 0404 	sub.w	r4, r1, #4
 801119e:	bfb8      	it	lt
 80111a0:	18e4      	addlt	r4, r4, r3
 80111a2:	f000 f8e7 	bl	8011374 <__malloc_lock>
 80111a6:	4a1e      	ldr	r2, [pc, #120]	; (8011220 <_free_r+0x94>)
 80111a8:	9801      	ldr	r0, [sp, #4]
 80111aa:	6813      	ldr	r3, [r2, #0]
 80111ac:	b933      	cbnz	r3, 80111bc <_free_r+0x30>
 80111ae:	6063      	str	r3, [r4, #4]
 80111b0:	6014      	str	r4, [r2, #0]
 80111b2:	b003      	add	sp, #12
 80111b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80111b8:	f000 b8e2 	b.w	8011380 <__malloc_unlock>
 80111bc:	42a3      	cmp	r3, r4
 80111be:	d908      	bls.n	80111d2 <_free_r+0x46>
 80111c0:	6825      	ldr	r5, [r4, #0]
 80111c2:	1961      	adds	r1, r4, r5
 80111c4:	428b      	cmp	r3, r1
 80111c6:	bf01      	itttt	eq
 80111c8:	6819      	ldreq	r1, [r3, #0]
 80111ca:	685b      	ldreq	r3, [r3, #4]
 80111cc:	1949      	addeq	r1, r1, r5
 80111ce:	6021      	streq	r1, [r4, #0]
 80111d0:	e7ed      	b.n	80111ae <_free_r+0x22>
 80111d2:	461a      	mov	r2, r3
 80111d4:	685b      	ldr	r3, [r3, #4]
 80111d6:	b10b      	cbz	r3, 80111dc <_free_r+0x50>
 80111d8:	42a3      	cmp	r3, r4
 80111da:	d9fa      	bls.n	80111d2 <_free_r+0x46>
 80111dc:	6811      	ldr	r1, [r2, #0]
 80111de:	1855      	adds	r5, r2, r1
 80111e0:	42a5      	cmp	r5, r4
 80111e2:	d10b      	bne.n	80111fc <_free_r+0x70>
 80111e4:	6824      	ldr	r4, [r4, #0]
 80111e6:	4421      	add	r1, r4
 80111e8:	1854      	adds	r4, r2, r1
 80111ea:	42a3      	cmp	r3, r4
 80111ec:	6011      	str	r1, [r2, #0]
 80111ee:	d1e0      	bne.n	80111b2 <_free_r+0x26>
 80111f0:	681c      	ldr	r4, [r3, #0]
 80111f2:	685b      	ldr	r3, [r3, #4]
 80111f4:	6053      	str	r3, [r2, #4]
 80111f6:	440c      	add	r4, r1
 80111f8:	6014      	str	r4, [r2, #0]
 80111fa:	e7da      	b.n	80111b2 <_free_r+0x26>
 80111fc:	d902      	bls.n	8011204 <_free_r+0x78>
 80111fe:	230c      	movs	r3, #12
 8011200:	6003      	str	r3, [r0, #0]
 8011202:	e7d6      	b.n	80111b2 <_free_r+0x26>
 8011204:	6825      	ldr	r5, [r4, #0]
 8011206:	1961      	adds	r1, r4, r5
 8011208:	428b      	cmp	r3, r1
 801120a:	bf04      	itt	eq
 801120c:	6819      	ldreq	r1, [r3, #0]
 801120e:	685b      	ldreq	r3, [r3, #4]
 8011210:	6063      	str	r3, [r4, #4]
 8011212:	bf04      	itt	eq
 8011214:	1949      	addeq	r1, r1, r5
 8011216:	6021      	streq	r1, [r4, #0]
 8011218:	6054      	str	r4, [r2, #4]
 801121a:	e7ca      	b.n	80111b2 <_free_r+0x26>
 801121c:	b003      	add	sp, #12
 801121e:	bd30      	pop	{r4, r5, pc}
 8011220:	20003f28 	.word	0x20003f28

08011224 <malloc>:
 8011224:	4b02      	ldr	r3, [pc, #8]	; (8011230 <malloc+0xc>)
 8011226:	4601      	mov	r1, r0
 8011228:	6818      	ldr	r0, [r3, #0]
 801122a:	f000 b823 	b.w	8011274 <_malloc_r>
 801122e:	bf00      	nop
 8011230:	200000d0 	.word	0x200000d0

08011234 <sbrk_aligned>:
 8011234:	b570      	push	{r4, r5, r6, lr}
 8011236:	4e0e      	ldr	r6, [pc, #56]	; (8011270 <sbrk_aligned+0x3c>)
 8011238:	460c      	mov	r4, r1
 801123a:	6831      	ldr	r1, [r6, #0]
 801123c:	4605      	mov	r5, r0
 801123e:	b911      	cbnz	r1, 8011246 <sbrk_aligned+0x12>
 8011240:	f001 ff64 	bl	801310c <_sbrk_r>
 8011244:	6030      	str	r0, [r6, #0]
 8011246:	4621      	mov	r1, r4
 8011248:	4628      	mov	r0, r5
 801124a:	f001 ff5f 	bl	801310c <_sbrk_r>
 801124e:	1c43      	adds	r3, r0, #1
 8011250:	d00a      	beq.n	8011268 <sbrk_aligned+0x34>
 8011252:	1cc4      	adds	r4, r0, #3
 8011254:	f024 0403 	bic.w	r4, r4, #3
 8011258:	42a0      	cmp	r0, r4
 801125a:	d007      	beq.n	801126c <sbrk_aligned+0x38>
 801125c:	1a21      	subs	r1, r4, r0
 801125e:	4628      	mov	r0, r5
 8011260:	f001 ff54 	bl	801310c <_sbrk_r>
 8011264:	3001      	adds	r0, #1
 8011266:	d101      	bne.n	801126c <sbrk_aligned+0x38>
 8011268:	f04f 34ff 	mov.w	r4, #4294967295
 801126c:	4620      	mov	r0, r4
 801126e:	bd70      	pop	{r4, r5, r6, pc}
 8011270:	20003f2c 	.word	0x20003f2c

08011274 <_malloc_r>:
 8011274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011278:	1ccd      	adds	r5, r1, #3
 801127a:	f025 0503 	bic.w	r5, r5, #3
 801127e:	3508      	adds	r5, #8
 8011280:	2d0c      	cmp	r5, #12
 8011282:	bf38      	it	cc
 8011284:	250c      	movcc	r5, #12
 8011286:	2d00      	cmp	r5, #0
 8011288:	4607      	mov	r7, r0
 801128a:	db01      	blt.n	8011290 <_malloc_r+0x1c>
 801128c:	42a9      	cmp	r1, r5
 801128e:	d905      	bls.n	801129c <_malloc_r+0x28>
 8011290:	230c      	movs	r3, #12
 8011292:	603b      	str	r3, [r7, #0]
 8011294:	2600      	movs	r6, #0
 8011296:	4630      	mov	r0, r6
 8011298:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801129c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8011370 <_malloc_r+0xfc>
 80112a0:	f000 f868 	bl	8011374 <__malloc_lock>
 80112a4:	f8d8 3000 	ldr.w	r3, [r8]
 80112a8:	461c      	mov	r4, r3
 80112aa:	bb5c      	cbnz	r4, 8011304 <_malloc_r+0x90>
 80112ac:	4629      	mov	r1, r5
 80112ae:	4638      	mov	r0, r7
 80112b0:	f7ff ffc0 	bl	8011234 <sbrk_aligned>
 80112b4:	1c43      	adds	r3, r0, #1
 80112b6:	4604      	mov	r4, r0
 80112b8:	d155      	bne.n	8011366 <_malloc_r+0xf2>
 80112ba:	f8d8 4000 	ldr.w	r4, [r8]
 80112be:	4626      	mov	r6, r4
 80112c0:	2e00      	cmp	r6, #0
 80112c2:	d145      	bne.n	8011350 <_malloc_r+0xdc>
 80112c4:	2c00      	cmp	r4, #0
 80112c6:	d048      	beq.n	801135a <_malloc_r+0xe6>
 80112c8:	6823      	ldr	r3, [r4, #0]
 80112ca:	4631      	mov	r1, r6
 80112cc:	4638      	mov	r0, r7
 80112ce:	eb04 0903 	add.w	r9, r4, r3
 80112d2:	f001 ff1b 	bl	801310c <_sbrk_r>
 80112d6:	4581      	cmp	r9, r0
 80112d8:	d13f      	bne.n	801135a <_malloc_r+0xe6>
 80112da:	6821      	ldr	r1, [r4, #0]
 80112dc:	1a6d      	subs	r5, r5, r1
 80112de:	4629      	mov	r1, r5
 80112e0:	4638      	mov	r0, r7
 80112e2:	f7ff ffa7 	bl	8011234 <sbrk_aligned>
 80112e6:	3001      	adds	r0, #1
 80112e8:	d037      	beq.n	801135a <_malloc_r+0xe6>
 80112ea:	6823      	ldr	r3, [r4, #0]
 80112ec:	442b      	add	r3, r5
 80112ee:	6023      	str	r3, [r4, #0]
 80112f0:	f8d8 3000 	ldr.w	r3, [r8]
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d038      	beq.n	801136a <_malloc_r+0xf6>
 80112f8:	685a      	ldr	r2, [r3, #4]
 80112fa:	42a2      	cmp	r2, r4
 80112fc:	d12b      	bne.n	8011356 <_malloc_r+0xe2>
 80112fe:	2200      	movs	r2, #0
 8011300:	605a      	str	r2, [r3, #4]
 8011302:	e00f      	b.n	8011324 <_malloc_r+0xb0>
 8011304:	6822      	ldr	r2, [r4, #0]
 8011306:	1b52      	subs	r2, r2, r5
 8011308:	d41f      	bmi.n	801134a <_malloc_r+0xd6>
 801130a:	2a0b      	cmp	r2, #11
 801130c:	d917      	bls.n	801133e <_malloc_r+0xca>
 801130e:	1961      	adds	r1, r4, r5
 8011310:	42a3      	cmp	r3, r4
 8011312:	6025      	str	r5, [r4, #0]
 8011314:	bf18      	it	ne
 8011316:	6059      	strne	r1, [r3, #4]
 8011318:	6863      	ldr	r3, [r4, #4]
 801131a:	bf08      	it	eq
 801131c:	f8c8 1000 	streq.w	r1, [r8]
 8011320:	5162      	str	r2, [r4, r5]
 8011322:	604b      	str	r3, [r1, #4]
 8011324:	4638      	mov	r0, r7
 8011326:	f104 060b 	add.w	r6, r4, #11
 801132a:	f000 f829 	bl	8011380 <__malloc_unlock>
 801132e:	f026 0607 	bic.w	r6, r6, #7
 8011332:	1d23      	adds	r3, r4, #4
 8011334:	1af2      	subs	r2, r6, r3
 8011336:	d0ae      	beq.n	8011296 <_malloc_r+0x22>
 8011338:	1b9b      	subs	r3, r3, r6
 801133a:	50a3      	str	r3, [r4, r2]
 801133c:	e7ab      	b.n	8011296 <_malloc_r+0x22>
 801133e:	42a3      	cmp	r3, r4
 8011340:	6862      	ldr	r2, [r4, #4]
 8011342:	d1dd      	bne.n	8011300 <_malloc_r+0x8c>
 8011344:	f8c8 2000 	str.w	r2, [r8]
 8011348:	e7ec      	b.n	8011324 <_malloc_r+0xb0>
 801134a:	4623      	mov	r3, r4
 801134c:	6864      	ldr	r4, [r4, #4]
 801134e:	e7ac      	b.n	80112aa <_malloc_r+0x36>
 8011350:	4634      	mov	r4, r6
 8011352:	6876      	ldr	r6, [r6, #4]
 8011354:	e7b4      	b.n	80112c0 <_malloc_r+0x4c>
 8011356:	4613      	mov	r3, r2
 8011358:	e7cc      	b.n	80112f4 <_malloc_r+0x80>
 801135a:	230c      	movs	r3, #12
 801135c:	603b      	str	r3, [r7, #0]
 801135e:	4638      	mov	r0, r7
 8011360:	f000 f80e 	bl	8011380 <__malloc_unlock>
 8011364:	e797      	b.n	8011296 <_malloc_r+0x22>
 8011366:	6025      	str	r5, [r4, #0]
 8011368:	e7dc      	b.n	8011324 <_malloc_r+0xb0>
 801136a:	605b      	str	r3, [r3, #4]
 801136c:	deff      	udf	#255	; 0xff
 801136e:	bf00      	nop
 8011370:	20003f28 	.word	0x20003f28

08011374 <__malloc_lock>:
 8011374:	4801      	ldr	r0, [pc, #4]	; (801137c <__malloc_lock+0x8>)
 8011376:	f7ff b85b 	b.w	8010430 <__retarget_lock_acquire_recursive>
 801137a:	bf00      	nop
 801137c:	20003f24 	.word	0x20003f24

08011380 <__malloc_unlock>:
 8011380:	4801      	ldr	r0, [pc, #4]	; (8011388 <__malloc_unlock+0x8>)
 8011382:	f7ff b856 	b.w	8010432 <__retarget_lock_release_recursive>
 8011386:	bf00      	nop
 8011388:	20003f24 	.word	0x20003f24

0801138c <_Balloc>:
 801138c:	b570      	push	{r4, r5, r6, lr}
 801138e:	69c6      	ldr	r6, [r0, #28]
 8011390:	4604      	mov	r4, r0
 8011392:	460d      	mov	r5, r1
 8011394:	b976      	cbnz	r6, 80113b4 <_Balloc+0x28>
 8011396:	2010      	movs	r0, #16
 8011398:	f7ff ff44 	bl	8011224 <malloc>
 801139c:	4602      	mov	r2, r0
 801139e:	61e0      	str	r0, [r4, #28]
 80113a0:	b920      	cbnz	r0, 80113ac <_Balloc+0x20>
 80113a2:	4b18      	ldr	r3, [pc, #96]	; (8011404 <_Balloc+0x78>)
 80113a4:	4818      	ldr	r0, [pc, #96]	; (8011408 <_Balloc+0x7c>)
 80113a6:	216b      	movs	r1, #107	; 0x6b
 80113a8:	f7ff f856 	bl	8010458 <__assert_func>
 80113ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80113b0:	6006      	str	r6, [r0, #0]
 80113b2:	60c6      	str	r6, [r0, #12]
 80113b4:	69e6      	ldr	r6, [r4, #28]
 80113b6:	68f3      	ldr	r3, [r6, #12]
 80113b8:	b183      	cbz	r3, 80113dc <_Balloc+0x50>
 80113ba:	69e3      	ldr	r3, [r4, #28]
 80113bc:	68db      	ldr	r3, [r3, #12]
 80113be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80113c2:	b9b8      	cbnz	r0, 80113f4 <_Balloc+0x68>
 80113c4:	2101      	movs	r1, #1
 80113c6:	fa01 f605 	lsl.w	r6, r1, r5
 80113ca:	1d72      	adds	r2, r6, #5
 80113cc:	0092      	lsls	r2, r2, #2
 80113ce:	4620      	mov	r0, r4
 80113d0:	f001 feb9 	bl	8013146 <_calloc_r>
 80113d4:	b160      	cbz	r0, 80113f0 <_Balloc+0x64>
 80113d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80113da:	e00e      	b.n	80113fa <_Balloc+0x6e>
 80113dc:	2221      	movs	r2, #33	; 0x21
 80113de:	2104      	movs	r1, #4
 80113e0:	4620      	mov	r0, r4
 80113e2:	f001 feb0 	bl	8013146 <_calloc_r>
 80113e6:	69e3      	ldr	r3, [r4, #28]
 80113e8:	60f0      	str	r0, [r6, #12]
 80113ea:	68db      	ldr	r3, [r3, #12]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d1e4      	bne.n	80113ba <_Balloc+0x2e>
 80113f0:	2000      	movs	r0, #0
 80113f2:	bd70      	pop	{r4, r5, r6, pc}
 80113f4:	6802      	ldr	r2, [r0, #0]
 80113f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80113fa:	2300      	movs	r3, #0
 80113fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011400:	e7f7      	b.n	80113f2 <_Balloc+0x66>
 8011402:	bf00      	nop
 8011404:	080149fb 	.word	0x080149fb
 8011408:	08014a7b 	.word	0x08014a7b

0801140c <_Bfree>:
 801140c:	b570      	push	{r4, r5, r6, lr}
 801140e:	69c6      	ldr	r6, [r0, #28]
 8011410:	4605      	mov	r5, r0
 8011412:	460c      	mov	r4, r1
 8011414:	b976      	cbnz	r6, 8011434 <_Bfree+0x28>
 8011416:	2010      	movs	r0, #16
 8011418:	f7ff ff04 	bl	8011224 <malloc>
 801141c:	4602      	mov	r2, r0
 801141e:	61e8      	str	r0, [r5, #28]
 8011420:	b920      	cbnz	r0, 801142c <_Bfree+0x20>
 8011422:	4b09      	ldr	r3, [pc, #36]	; (8011448 <_Bfree+0x3c>)
 8011424:	4809      	ldr	r0, [pc, #36]	; (801144c <_Bfree+0x40>)
 8011426:	218f      	movs	r1, #143	; 0x8f
 8011428:	f7ff f816 	bl	8010458 <__assert_func>
 801142c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011430:	6006      	str	r6, [r0, #0]
 8011432:	60c6      	str	r6, [r0, #12]
 8011434:	b13c      	cbz	r4, 8011446 <_Bfree+0x3a>
 8011436:	69eb      	ldr	r3, [r5, #28]
 8011438:	6862      	ldr	r2, [r4, #4]
 801143a:	68db      	ldr	r3, [r3, #12]
 801143c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011440:	6021      	str	r1, [r4, #0]
 8011442:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011446:	bd70      	pop	{r4, r5, r6, pc}
 8011448:	080149fb 	.word	0x080149fb
 801144c:	08014a7b 	.word	0x08014a7b

08011450 <__multadd>:
 8011450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011454:	690d      	ldr	r5, [r1, #16]
 8011456:	4607      	mov	r7, r0
 8011458:	460c      	mov	r4, r1
 801145a:	461e      	mov	r6, r3
 801145c:	f101 0c14 	add.w	ip, r1, #20
 8011460:	2000      	movs	r0, #0
 8011462:	f8dc 3000 	ldr.w	r3, [ip]
 8011466:	b299      	uxth	r1, r3
 8011468:	fb02 6101 	mla	r1, r2, r1, r6
 801146c:	0c1e      	lsrs	r6, r3, #16
 801146e:	0c0b      	lsrs	r3, r1, #16
 8011470:	fb02 3306 	mla	r3, r2, r6, r3
 8011474:	b289      	uxth	r1, r1
 8011476:	3001      	adds	r0, #1
 8011478:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801147c:	4285      	cmp	r5, r0
 801147e:	f84c 1b04 	str.w	r1, [ip], #4
 8011482:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011486:	dcec      	bgt.n	8011462 <__multadd+0x12>
 8011488:	b30e      	cbz	r6, 80114ce <__multadd+0x7e>
 801148a:	68a3      	ldr	r3, [r4, #8]
 801148c:	42ab      	cmp	r3, r5
 801148e:	dc19      	bgt.n	80114c4 <__multadd+0x74>
 8011490:	6861      	ldr	r1, [r4, #4]
 8011492:	4638      	mov	r0, r7
 8011494:	3101      	adds	r1, #1
 8011496:	f7ff ff79 	bl	801138c <_Balloc>
 801149a:	4680      	mov	r8, r0
 801149c:	b928      	cbnz	r0, 80114aa <__multadd+0x5a>
 801149e:	4602      	mov	r2, r0
 80114a0:	4b0c      	ldr	r3, [pc, #48]	; (80114d4 <__multadd+0x84>)
 80114a2:	480d      	ldr	r0, [pc, #52]	; (80114d8 <__multadd+0x88>)
 80114a4:	21ba      	movs	r1, #186	; 0xba
 80114a6:	f7fe ffd7 	bl	8010458 <__assert_func>
 80114aa:	6922      	ldr	r2, [r4, #16]
 80114ac:	3202      	adds	r2, #2
 80114ae:	f104 010c 	add.w	r1, r4, #12
 80114b2:	0092      	lsls	r2, r2, #2
 80114b4:	300c      	adds	r0, #12
 80114b6:	f7fe ffbd 	bl	8010434 <memcpy>
 80114ba:	4621      	mov	r1, r4
 80114bc:	4638      	mov	r0, r7
 80114be:	f7ff ffa5 	bl	801140c <_Bfree>
 80114c2:	4644      	mov	r4, r8
 80114c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80114c8:	3501      	adds	r5, #1
 80114ca:	615e      	str	r6, [r3, #20]
 80114cc:	6125      	str	r5, [r4, #16]
 80114ce:	4620      	mov	r0, r4
 80114d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114d4:	08014a6a 	.word	0x08014a6a
 80114d8:	08014a7b 	.word	0x08014a7b

080114dc <__s2b>:
 80114dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114e0:	460c      	mov	r4, r1
 80114e2:	4615      	mov	r5, r2
 80114e4:	461f      	mov	r7, r3
 80114e6:	2209      	movs	r2, #9
 80114e8:	3308      	adds	r3, #8
 80114ea:	4606      	mov	r6, r0
 80114ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80114f0:	2100      	movs	r1, #0
 80114f2:	2201      	movs	r2, #1
 80114f4:	429a      	cmp	r2, r3
 80114f6:	db09      	blt.n	801150c <__s2b+0x30>
 80114f8:	4630      	mov	r0, r6
 80114fa:	f7ff ff47 	bl	801138c <_Balloc>
 80114fe:	b940      	cbnz	r0, 8011512 <__s2b+0x36>
 8011500:	4602      	mov	r2, r0
 8011502:	4b19      	ldr	r3, [pc, #100]	; (8011568 <__s2b+0x8c>)
 8011504:	4819      	ldr	r0, [pc, #100]	; (801156c <__s2b+0x90>)
 8011506:	21d3      	movs	r1, #211	; 0xd3
 8011508:	f7fe ffa6 	bl	8010458 <__assert_func>
 801150c:	0052      	lsls	r2, r2, #1
 801150e:	3101      	adds	r1, #1
 8011510:	e7f0      	b.n	80114f4 <__s2b+0x18>
 8011512:	9b08      	ldr	r3, [sp, #32]
 8011514:	6143      	str	r3, [r0, #20]
 8011516:	2d09      	cmp	r5, #9
 8011518:	f04f 0301 	mov.w	r3, #1
 801151c:	6103      	str	r3, [r0, #16]
 801151e:	dd16      	ble.n	801154e <__s2b+0x72>
 8011520:	f104 0909 	add.w	r9, r4, #9
 8011524:	46c8      	mov	r8, r9
 8011526:	442c      	add	r4, r5
 8011528:	f818 3b01 	ldrb.w	r3, [r8], #1
 801152c:	4601      	mov	r1, r0
 801152e:	3b30      	subs	r3, #48	; 0x30
 8011530:	220a      	movs	r2, #10
 8011532:	4630      	mov	r0, r6
 8011534:	f7ff ff8c 	bl	8011450 <__multadd>
 8011538:	45a0      	cmp	r8, r4
 801153a:	d1f5      	bne.n	8011528 <__s2b+0x4c>
 801153c:	f1a5 0408 	sub.w	r4, r5, #8
 8011540:	444c      	add	r4, r9
 8011542:	1b2d      	subs	r5, r5, r4
 8011544:	1963      	adds	r3, r4, r5
 8011546:	42bb      	cmp	r3, r7
 8011548:	db04      	blt.n	8011554 <__s2b+0x78>
 801154a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801154e:	340a      	adds	r4, #10
 8011550:	2509      	movs	r5, #9
 8011552:	e7f6      	b.n	8011542 <__s2b+0x66>
 8011554:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011558:	4601      	mov	r1, r0
 801155a:	3b30      	subs	r3, #48	; 0x30
 801155c:	220a      	movs	r2, #10
 801155e:	4630      	mov	r0, r6
 8011560:	f7ff ff76 	bl	8011450 <__multadd>
 8011564:	e7ee      	b.n	8011544 <__s2b+0x68>
 8011566:	bf00      	nop
 8011568:	08014a6a 	.word	0x08014a6a
 801156c:	08014a7b 	.word	0x08014a7b

08011570 <__hi0bits>:
 8011570:	0c03      	lsrs	r3, r0, #16
 8011572:	041b      	lsls	r3, r3, #16
 8011574:	b9d3      	cbnz	r3, 80115ac <__hi0bits+0x3c>
 8011576:	0400      	lsls	r0, r0, #16
 8011578:	2310      	movs	r3, #16
 801157a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801157e:	bf04      	itt	eq
 8011580:	0200      	lsleq	r0, r0, #8
 8011582:	3308      	addeq	r3, #8
 8011584:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011588:	bf04      	itt	eq
 801158a:	0100      	lsleq	r0, r0, #4
 801158c:	3304      	addeq	r3, #4
 801158e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011592:	bf04      	itt	eq
 8011594:	0080      	lsleq	r0, r0, #2
 8011596:	3302      	addeq	r3, #2
 8011598:	2800      	cmp	r0, #0
 801159a:	db05      	blt.n	80115a8 <__hi0bits+0x38>
 801159c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80115a0:	f103 0301 	add.w	r3, r3, #1
 80115a4:	bf08      	it	eq
 80115a6:	2320      	moveq	r3, #32
 80115a8:	4618      	mov	r0, r3
 80115aa:	4770      	bx	lr
 80115ac:	2300      	movs	r3, #0
 80115ae:	e7e4      	b.n	801157a <__hi0bits+0xa>

080115b0 <__lo0bits>:
 80115b0:	6803      	ldr	r3, [r0, #0]
 80115b2:	f013 0207 	ands.w	r2, r3, #7
 80115b6:	d00c      	beq.n	80115d2 <__lo0bits+0x22>
 80115b8:	07d9      	lsls	r1, r3, #31
 80115ba:	d422      	bmi.n	8011602 <__lo0bits+0x52>
 80115bc:	079a      	lsls	r2, r3, #30
 80115be:	bf49      	itett	mi
 80115c0:	085b      	lsrmi	r3, r3, #1
 80115c2:	089b      	lsrpl	r3, r3, #2
 80115c4:	6003      	strmi	r3, [r0, #0]
 80115c6:	2201      	movmi	r2, #1
 80115c8:	bf5c      	itt	pl
 80115ca:	6003      	strpl	r3, [r0, #0]
 80115cc:	2202      	movpl	r2, #2
 80115ce:	4610      	mov	r0, r2
 80115d0:	4770      	bx	lr
 80115d2:	b299      	uxth	r1, r3
 80115d4:	b909      	cbnz	r1, 80115da <__lo0bits+0x2a>
 80115d6:	0c1b      	lsrs	r3, r3, #16
 80115d8:	2210      	movs	r2, #16
 80115da:	b2d9      	uxtb	r1, r3
 80115dc:	b909      	cbnz	r1, 80115e2 <__lo0bits+0x32>
 80115de:	3208      	adds	r2, #8
 80115e0:	0a1b      	lsrs	r3, r3, #8
 80115e2:	0719      	lsls	r1, r3, #28
 80115e4:	bf04      	itt	eq
 80115e6:	091b      	lsreq	r3, r3, #4
 80115e8:	3204      	addeq	r2, #4
 80115ea:	0799      	lsls	r1, r3, #30
 80115ec:	bf04      	itt	eq
 80115ee:	089b      	lsreq	r3, r3, #2
 80115f0:	3202      	addeq	r2, #2
 80115f2:	07d9      	lsls	r1, r3, #31
 80115f4:	d403      	bmi.n	80115fe <__lo0bits+0x4e>
 80115f6:	085b      	lsrs	r3, r3, #1
 80115f8:	f102 0201 	add.w	r2, r2, #1
 80115fc:	d003      	beq.n	8011606 <__lo0bits+0x56>
 80115fe:	6003      	str	r3, [r0, #0]
 8011600:	e7e5      	b.n	80115ce <__lo0bits+0x1e>
 8011602:	2200      	movs	r2, #0
 8011604:	e7e3      	b.n	80115ce <__lo0bits+0x1e>
 8011606:	2220      	movs	r2, #32
 8011608:	e7e1      	b.n	80115ce <__lo0bits+0x1e>
	...

0801160c <__i2b>:
 801160c:	b510      	push	{r4, lr}
 801160e:	460c      	mov	r4, r1
 8011610:	2101      	movs	r1, #1
 8011612:	f7ff febb 	bl	801138c <_Balloc>
 8011616:	4602      	mov	r2, r0
 8011618:	b928      	cbnz	r0, 8011626 <__i2b+0x1a>
 801161a:	4b05      	ldr	r3, [pc, #20]	; (8011630 <__i2b+0x24>)
 801161c:	4805      	ldr	r0, [pc, #20]	; (8011634 <__i2b+0x28>)
 801161e:	f240 1145 	movw	r1, #325	; 0x145
 8011622:	f7fe ff19 	bl	8010458 <__assert_func>
 8011626:	2301      	movs	r3, #1
 8011628:	6144      	str	r4, [r0, #20]
 801162a:	6103      	str	r3, [r0, #16]
 801162c:	bd10      	pop	{r4, pc}
 801162e:	bf00      	nop
 8011630:	08014a6a 	.word	0x08014a6a
 8011634:	08014a7b 	.word	0x08014a7b

08011638 <__multiply>:
 8011638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801163c:	4691      	mov	r9, r2
 801163e:	690a      	ldr	r2, [r1, #16]
 8011640:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011644:	429a      	cmp	r2, r3
 8011646:	bfb8      	it	lt
 8011648:	460b      	movlt	r3, r1
 801164a:	460c      	mov	r4, r1
 801164c:	bfbc      	itt	lt
 801164e:	464c      	movlt	r4, r9
 8011650:	4699      	movlt	r9, r3
 8011652:	6927      	ldr	r7, [r4, #16]
 8011654:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011658:	68a3      	ldr	r3, [r4, #8]
 801165a:	6861      	ldr	r1, [r4, #4]
 801165c:	eb07 060a 	add.w	r6, r7, sl
 8011660:	42b3      	cmp	r3, r6
 8011662:	b085      	sub	sp, #20
 8011664:	bfb8      	it	lt
 8011666:	3101      	addlt	r1, #1
 8011668:	f7ff fe90 	bl	801138c <_Balloc>
 801166c:	b930      	cbnz	r0, 801167c <__multiply+0x44>
 801166e:	4602      	mov	r2, r0
 8011670:	4b44      	ldr	r3, [pc, #272]	; (8011784 <__multiply+0x14c>)
 8011672:	4845      	ldr	r0, [pc, #276]	; (8011788 <__multiply+0x150>)
 8011674:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8011678:	f7fe feee 	bl	8010458 <__assert_func>
 801167c:	f100 0514 	add.w	r5, r0, #20
 8011680:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011684:	462b      	mov	r3, r5
 8011686:	2200      	movs	r2, #0
 8011688:	4543      	cmp	r3, r8
 801168a:	d321      	bcc.n	80116d0 <__multiply+0x98>
 801168c:	f104 0314 	add.w	r3, r4, #20
 8011690:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011694:	f109 0314 	add.w	r3, r9, #20
 8011698:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801169c:	9202      	str	r2, [sp, #8]
 801169e:	1b3a      	subs	r2, r7, r4
 80116a0:	3a15      	subs	r2, #21
 80116a2:	f022 0203 	bic.w	r2, r2, #3
 80116a6:	3204      	adds	r2, #4
 80116a8:	f104 0115 	add.w	r1, r4, #21
 80116ac:	428f      	cmp	r7, r1
 80116ae:	bf38      	it	cc
 80116b0:	2204      	movcc	r2, #4
 80116b2:	9201      	str	r2, [sp, #4]
 80116b4:	9a02      	ldr	r2, [sp, #8]
 80116b6:	9303      	str	r3, [sp, #12]
 80116b8:	429a      	cmp	r2, r3
 80116ba:	d80c      	bhi.n	80116d6 <__multiply+0x9e>
 80116bc:	2e00      	cmp	r6, #0
 80116be:	dd03      	ble.n	80116c8 <__multiply+0x90>
 80116c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d05b      	beq.n	8011780 <__multiply+0x148>
 80116c8:	6106      	str	r6, [r0, #16]
 80116ca:	b005      	add	sp, #20
 80116cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116d0:	f843 2b04 	str.w	r2, [r3], #4
 80116d4:	e7d8      	b.n	8011688 <__multiply+0x50>
 80116d6:	f8b3 a000 	ldrh.w	sl, [r3]
 80116da:	f1ba 0f00 	cmp.w	sl, #0
 80116de:	d024      	beq.n	801172a <__multiply+0xf2>
 80116e0:	f104 0e14 	add.w	lr, r4, #20
 80116e4:	46a9      	mov	r9, r5
 80116e6:	f04f 0c00 	mov.w	ip, #0
 80116ea:	f85e 2b04 	ldr.w	r2, [lr], #4
 80116ee:	f8d9 1000 	ldr.w	r1, [r9]
 80116f2:	fa1f fb82 	uxth.w	fp, r2
 80116f6:	b289      	uxth	r1, r1
 80116f8:	fb0a 110b 	mla	r1, sl, fp, r1
 80116fc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011700:	f8d9 2000 	ldr.w	r2, [r9]
 8011704:	4461      	add	r1, ip
 8011706:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801170a:	fb0a c20b 	mla	r2, sl, fp, ip
 801170e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011712:	b289      	uxth	r1, r1
 8011714:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011718:	4577      	cmp	r7, lr
 801171a:	f849 1b04 	str.w	r1, [r9], #4
 801171e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011722:	d8e2      	bhi.n	80116ea <__multiply+0xb2>
 8011724:	9a01      	ldr	r2, [sp, #4]
 8011726:	f845 c002 	str.w	ip, [r5, r2]
 801172a:	9a03      	ldr	r2, [sp, #12]
 801172c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011730:	3304      	adds	r3, #4
 8011732:	f1b9 0f00 	cmp.w	r9, #0
 8011736:	d021      	beq.n	801177c <__multiply+0x144>
 8011738:	6829      	ldr	r1, [r5, #0]
 801173a:	f104 0c14 	add.w	ip, r4, #20
 801173e:	46ae      	mov	lr, r5
 8011740:	f04f 0a00 	mov.w	sl, #0
 8011744:	f8bc b000 	ldrh.w	fp, [ip]
 8011748:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801174c:	fb09 220b 	mla	r2, r9, fp, r2
 8011750:	4452      	add	r2, sl
 8011752:	b289      	uxth	r1, r1
 8011754:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011758:	f84e 1b04 	str.w	r1, [lr], #4
 801175c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011760:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011764:	f8be 1000 	ldrh.w	r1, [lr]
 8011768:	fb09 110a 	mla	r1, r9, sl, r1
 801176c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8011770:	4567      	cmp	r7, ip
 8011772:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011776:	d8e5      	bhi.n	8011744 <__multiply+0x10c>
 8011778:	9a01      	ldr	r2, [sp, #4]
 801177a:	50a9      	str	r1, [r5, r2]
 801177c:	3504      	adds	r5, #4
 801177e:	e799      	b.n	80116b4 <__multiply+0x7c>
 8011780:	3e01      	subs	r6, #1
 8011782:	e79b      	b.n	80116bc <__multiply+0x84>
 8011784:	08014a6a 	.word	0x08014a6a
 8011788:	08014a7b 	.word	0x08014a7b

0801178c <__pow5mult>:
 801178c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011790:	4615      	mov	r5, r2
 8011792:	f012 0203 	ands.w	r2, r2, #3
 8011796:	4606      	mov	r6, r0
 8011798:	460f      	mov	r7, r1
 801179a:	d007      	beq.n	80117ac <__pow5mult+0x20>
 801179c:	4c25      	ldr	r4, [pc, #148]	; (8011834 <__pow5mult+0xa8>)
 801179e:	3a01      	subs	r2, #1
 80117a0:	2300      	movs	r3, #0
 80117a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80117a6:	f7ff fe53 	bl	8011450 <__multadd>
 80117aa:	4607      	mov	r7, r0
 80117ac:	10ad      	asrs	r5, r5, #2
 80117ae:	d03d      	beq.n	801182c <__pow5mult+0xa0>
 80117b0:	69f4      	ldr	r4, [r6, #28]
 80117b2:	b97c      	cbnz	r4, 80117d4 <__pow5mult+0x48>
 80117b4:	2010      	movs	r0, #16
 80117b6:	f7ff fd35 	bl	8011224 <malloc>
 80117ba:	4602      	mov	r2, r0
 80117bc:	61f0      	str	r0, [r6, #28]
 80117be:	b928      	cbnz	r0, 80117cc <__pow5mult+0x40>
 80117c0:	4b1d      	ldr	r3, [pc, #116]	; (8011838 <__pow5mult+0xac>)
 80117c2:	481e      	ldr	r0, [pc, #120]	; (801183c <__pow5mult+0xb0>)
 80117c4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80117c8:	f7fe fe46 	bl	8010458 <__assert_func>
 80117cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80117d0:	6004      	str	r4, [r0, #0]
 80117d2:	60c4      	str	r4, [r0, #12]
 80117d4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80117d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80117dc:	b94c      	cbnz	r4, 80117f2 <__pow5mult+0x66>
 80117de:	f240 2171 	movw	r1, #625	; 0x271
 80117e2:	4630      	mov	r0, r6
 80117e4:	f7ff ff12 	bl	801160c <__i2b>
 80117e8:	2300      	movs	r3, #0
 80117ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80117ee:	4604      	mov	r4, r0
 80117f0:	6003      	str	r3, [r0, #0]
 80117f2:	f04f 0900 	mov.w	r9, #0
 80117f6:	07eb      	lsls	r3, r5, #31
 80117f8:	d50a      	bpl.n	8011810 <__pow5mult+0x84>
 80117fa:	4639      	mov	r1, r7
 80117fc:	4622      	mov	r2, r4
 80117fe:	4630      	mov	r0, r6
 8011800:	f7ff ff1a 	bl	8011638 <__multiply>
 8011804:	4639      	mov	r1, r7
 8011806:	4680      	mov	r8, r0
 8011808:	4630      	mov	r0, r6
 801180a:	f7ff fdff 	bl	801140c <_Bfree>
 801180e:	4647      	mov	r7, r8
 8011810:	106d      	asrs	r5, r5, #1
 8011812:	d00b      	beq.n	801182c <__pow5mult+0xa0>
 8011814:	6820      	ldr	r0, [r4, #0]
 8011816:	b938      	cbnz	r0, 8011828 <__pow5mult+0x9c>
 8011818:	4622      	mov	r2, r4
 801181a:	4621      	mov	r1, r4
 801181c:	4630      	mov	r0, r6
 801181e:	f7ff ff0b 	bl	8011638 <__multiply>
 8011822:	6020      	str	r0, [r4, #0]
 8011824:	f8c0 9000 	str.w	r9, [r0]
 8011828:	4604      	mov	r4, r0
 801182a:	e7e4      	b.n	80117f6 <__pow5mult+0x6a>
 801182c:	4638      	mov	r0, r7
 801182e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011832:	bf00      	nop
 8011834:	08014bc8 	.word	0x08014bc8
 8011838:	080149fb 	.word	0x080149fb
 801183c:	08014a7b 	.word	0x08014a7b

08011840 <__lshift>:
 8011840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011844:	460c      	mov	r4, r1
 8011846:	6849      	ldr	r1, [r1, #4]
 8011848:	6923      	ldr	r3, [r4, #16]
 801184a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801184e:	68a3      	ldr	r3, [r4, #8]
 8011850:	4607      	mov	r7, r0
 8011852:	4691      	mov	r9, r2
 8011854:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011858:	f108 0601 	add.w	r6, r8, #1
 801185c:	42b3      	cmp	r3, r6
 801185e:	db0b      	blt.n	8011878 <__lshift+0x38>
 8011860:	4638      	mov	r0, r7
 8011862:	f7ff fd93 	bl	801138c <_Balloc>
 8011866:	4605      	mov	r5, r0
 8011868:	b948      	cbnz	r0, 801187e <__lshift+0x3e>
 801186a:	4602      	mov	r2, r0
 801186c:	4b28      	ldr	r3, [pc, #160]	; (8011910 <__lshift+0xd0>)
 801186e:	4829      	ldr	r0, [pc, #164]	; (8011914 <__lshift+0xd4>)
 8011870:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8011874:	f7fe fdf0 	bl	8010458 <__assert_func>
 8011878:	3101      	adds	r1, #1
 801187a:	005b      	lsls	r3, r3, #1
 801187c:	e7ee      	b.n	801185c <__lshift+0x1c>
 801187e:	2300      	movs	r3, #0
 8011880:	f100 0114 	add.w	r1, r0, #20
 8011884:	f100 0210 	add.w	r2, r0, #16
 8011888:	4618      	mov	r0, r3
 801188a:	4553      	cmp	r3, sl
 801188c:	db33      	blt.n	80118f6 <__lshift+0xb6>
 801188e:	6920      	ldr	r0, [r4, #16]
 8011890:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011894:	f104 0314 	add.w	r3, r4, #20
 8011898:	f019 091f 	ands.w	r9, r9, #31
 801189c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80118a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80118a4:	d02b      	beq.n	80118fe <__lshift+0xbe>
 80118a6:	f1c9 0e20 	rsb	lr, r9, #32
 80118aa:	468a      	mov	sl, r1
 80118ac:	2200      	movs	r2, #0
 80118ae:	6818      	ldr	r0, [r3, #0]
 80118b0:	fa00 f009 	lsl.w	r0, r0, r9
 80118b4:	4310      	orrs	r0, r2
 80118b6:	f84a 0b04 	str.w	r0, [sl], #4
 80118ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80118be:	459c      	cmp	ip, r3
 80118c0:	fa22 f20e 	lsr.w	r2, r2, lr
 80118c4:	d8f3      	bhi.n	80118ae <__lshift+0x6e>
 80118c6:	ebac 0304 	sub.w	r3, ip, r4
 80118ca:	3b15      	subs	r3, #21
 80118cc:	f023 0303 	bic.w	r3, r3, #3
 80118d0:	3304      	adds	r3, #4
 80118d2:	f104 0015 	add.w	r0, r4, #21
 80118d6:	4584      	cmp	ip, r0
 80118d8:	bf38      	it	cc
 80118da:	2304      	movcc	r3, #4
 80118dc:	50ca      	str	r2, [r1, r3]
 80118de:	b10a      	cbz	r2, 80118e4 <__lshift+0xa4>
 80118e0:	f108 0602 	add.w	r6, r8, #2
 80118e4:	3e01      	subs	r6, #1
 80118e6:	4638      	mov	r0, r7
 80118e8:	612e      	str	r6, [r5, #16]
 80118ea:	4621      	mov	r1, r4
 80118ec:	f7ff fd8e 	bl	801140c <_Bfree>
 80118f0:	4628      	mov	r0, r5
 80118f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80118fa:	3301      	adds	r3, #1
 80118fc:	e7c5      	b.n	801188a <__lshift+0x4a>
 80118fe:	3904      	subs	r1, #4
 8011900:	f853 2b04 	ldr.w	r2, [r3], #4
 8011904:	f841 2f04 	str.w	r2, [r1, #4]!
 8011908:	459c      	cmp	ip, r3
 801190a:	d8f9      	bhi.n	8011900 <__lshift+0xc0>
 801190c:	e7ea      	b.n	80118e4 <__lshift+0xa4>
 801190e:	bf00      	nop
 8011910:	08014a6a 	.word	0x08014a6a
 8011914:	08014a7b 	.word	0x08014a7b

08011918 <__mcmp>:
 8011918:	b530      	push	{r4, r5, lr}
 801191a:	6902      	ldr	r2, [r0, #16]
 801191c:	690c      	ldr	r4, [r1, #16]
 801191e:	1b12      	subs	r2, r2, r4
 8011920:	d10e      	bne.n	8011940 <__mcmp+0x28>
 8011922:	f100 0314 	add.w	r3, r0, #20
 8011926:	3114      	adds	r1, #20
 8011928:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801192c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011930:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011934:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011938:	42a5      	cmp	r5, r4
 801193a:	d003      	beq.n	8011944 <__mcmp+0x2c>
 801193c:	d305      	bcc.n	801194a <__mcmp+0x32>
 801193e:	2201      	movs	r2, #1
 8011940:	4610      	mov	r0, r2
 8011942:	bd30      	pop	{r4, r5, pc}
 8011944:	4283      	cmp	r3, r0
 8011946:	d3f3      	bcc.n	8011930 <__mcmp+0x18>
 8011948:	e7fa      	b.n	8011940 <__mcmp+0x28>
 801194a:	f04f 32ff 	mov.w	r2, #4294967295
 801194e:	e7f7      	b.n	8011940 <__mcmp+0x28>

08011950 <__mdiff>:
 8011950:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011954:	460c      	mov	r4, r1
 8011956:	4606      	mov	r6, r0
 8011958:	4611      	mov	r1, r2
 801195a:	4620      	mov	r0, r4
 801195c:	4690      	mov	r8, r2
 801195e:	f7ff ffdb 	bl	8011918 <__mcmp>
 8011962:	1e05      	subs	r5, r0, #0
 8011964:	d110      	bne.n	8011988 <__mdiff+0x38>
 8011966:	4629      	mov	r1, r5
 8011968:	4630      	mov	r0, r6
 801196a:	f7ff fd0f 	bl	801138c <_Balloc>
 801196e:	b930      	cbnz	r0, 801197e <__mdiff+0x2e>
 8011970:	4b3a      	ldr	r3, [pc, #232]	; (8011a5c <__mdiff+0x10c>)
 8011972:	4602      	mov	r2, r0
 8011974:	f240 2137 	movw	r1, #567	; 0x237
 8011978:	4839      	ldr	r0, [pc, #228]	; (8011a60 <__mdiff+0x110>)
 801197a:	f7fe fd6d 	bl	8010458 <__assert_func>
 801197e:	2301      	movs	r3, #1
 8011980:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011984:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011988:	bfa4      	itt	ge
 801198a:	4643      	movge	r3, r8
 801198c:	46a0      	movge	r8, r4
 801198e:	4630      	mov	r0, r6
 8011990:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011994:	bfa6      	itte	ge
 8011996:	461c      	movge	r4, r3
 8011998:	2500      	movge	r5, #0
 801199a:	2501      	movlt	r5, #1
 801199c:	f7ff fcf6 	bl	801138c <_Balloc>
 80119a0:	b920      	cbnz	r0, 80119ac <__mdiff+0x5c>
 80119a2:	4b2e      	ldr	r3, [pc, #184]	; (8011a5c <__mdiff+0x10c>)
 80119a4:	4602      	mov	r2, r0
 80119a6:	f240 2145 	movw	r1, #581	; 0x245
 80119aa:	e7e5      	b.n	8011978 <__mdiff+0x28>
 80119ac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80119b0:	6926      	ldr	r6, [r4, #16]
 80119b2:	60c5      	str	r5, [r0, #12]
 80119b4:	f104 0914 	add.w	r9, r4, #20
 80119b8:	f108 0514 	add.w	r5, r8, #20
 80119bc:	f100 0e14 	add.w	lr, r0, #20
 80119c0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80119c4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80119c8:	f108 0210 	add.w	r2, r8, #16
 80119cc:	46f2      	mov	sl, lr
 80119ce:	2100      	movs	r1, #0
 80119d0:	f859 3b04 	ldr.w	r3, [r9], #4
 80119d4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80119d8:	fa11 f88b 	uxtah	r8, r1, fp
 80119dc:	b299      	uxth	r1, r3
 80119de:	0c1b      	lsrs	r3, r3, #16
 80119e0:	eba8 0801 	sub.w	r8, r8, r1
 80119e4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80119e8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80119ec:	fa1f f888 	uxth.w	r8, r8
 80119f0:	1419      	asrs	r1, r3, #16
 80119f2:	454e      	cmp	r6, r9
 80119f4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80119f8:	f84a 3b04 	str.w	r3, [sl], #4
 80119fc:	d8e8      	bhi.n	80119d0 <__mdiff+0x80>
 80119fe:	1b33      	subs	r3, r6, r4
 8011a00:	3b15      	subs	r3, #21
 8011a02:	f023 0303 	bic.w	r3, r3, #3
 8011a06:	3304      	adds	r3, #4
 8011a08:	3415      	adds	r4, #21
 8011a0a:	42a6      	cmp	r6, r4
 8011a0c:	bf38      	it	cc
 8011a0e:	2304      	movcc	r3, #4
 8011a10:	441d      	add	r5, r3
 8011a12:	4473      	add	r3, lr
 8011a14:	469e      	mov	lr, r3
 8011a16:	462e      	mov	r6, r5
 8011a18:	4566      	cmp	r6, ip
 8011a1a:	d30e      	bcc.n	8011a3a <__mdiff+0xea>
 8011a1c:	f10c 0203 	add.w	r2, ip, #3
 8011a20:	1b52      	subs	r2, r2, r5
 8011a22:	f022 0203 	bic.w	r2, r2, #3
 8011a26:	3d03      	subs	r5, #3
 8011a28:	45ac      	cmp	ip, r5
 8011a2a:	bf38      	it	cc
 8011a2c:	2200      	movcc	r2, #0
 8011a2e:	4413      	add	r3, r2
 8011a30:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011a34:	b17a      	cbz	r2, 8011a56 <__mdiff+0x106>
 8011a36:	6107      	str	r7, [r0, #16]
 8011a38:	e7a4      	b.n	8011984 <__mdiff+0x34>
 8011a3a:	f856 8b04 	ldr.w	r8, [r6], #4
 8011a3e:	fa11 f288 	uxtah	r2, r1, r8
 8011a42:	1414      	asrs	r4, r2, #16
 8011a44:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011a48:	b292      	uxth	r2, r2
 8011a4a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011a4e:	f84e 2b04 	str.w	r2, [lr], #4
 8011a52:	1421      	asrs	r1, r4, #16
 8011a54:	e7e0      	b.n	8011a18 <__mdiff+0xc8>
 8011a56:	3f01      	subs	r7, #1
 8011a58:	e7ea      	b.n	8011a30 <__mdiff+0xe0>
 8011a5a:	bf00      	nop
 8011a5c:	08014a6a 	.word	0x08014a6a
 8011a60:	08014a7b 	.word	0x08014a7b

08011a64 <__ulp>:
 8011a64:	4b0e      	ldr	r3, [pc, #56]	; (8011aa0 <__ulp+0x3c>)
 8011a66:	400b      	ands	r3, r1
 8011a68:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	dc08      	bgt.n	8011a82 <__ulp+0x1e>
 8011a70:	425b      	negs	r3, r3
 8011a72:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8011a76:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011a7a:	da04      	bge.n	8011a86 <__ulp+0x22>
 8011a7c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8011a80:	4113      	asrs	r3, r2
 8011a82:	2200      	movs	r2, #0
 8011a84:	e008      	b.n	8011a98 <__ulp+0x34>
 8011a86:	f1a2 0314 	sub.w	r3, r2, #20
 8011a8a:	2b1e      	cmp	r3, #30
 8011a8c:	bfda      	itte	le
 8011a8e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8011a92:	40da      	lsrle	r2, r3
 8011a94:	2201      	movgt	r2, #1
 8011a96:	2300      	movs	r3, #0
 8011a98:	4619      	mov	r1, r3
 8011a9a:	4610      	mov	r0, r2
 8011a9c:	4770      	bx	lr
 8011a9e:	bf00      	nop
 8011aa0:	7ff00000 	.word	0x7ff00000

08011aa4 <__b2d>:
 8011aa4:	6902      	ldr	r2, [r0, #16]
 8011aa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011aa8:	f100 0614 	add.w	r6, r0, #20
 8011aac:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8011ab0:	4f20      	ldr	r7, [pc, #128]	; (8011b34 <__b2d+0x90>)
 8011ab2:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8011ab6:	4620      	mov	r0, r4
 8011ab8:	f7ff fd5a 	bl	8011570 <__hi0bits>
 8011abc:	4603      	mov	r3, r0
 8011abe:	2b0a      	cmp	r3, #10
 8011ac0:	f1c0 0020 	rsb	r0, r0, #32
 8011ac4:	f1a2 0504 	sub.w	r5, r2, #4
 8011ac8:	6008      	str	r0, [r1, #0]
 8011aca:	dc13      	bgt.n	8011af4 <__b2d+0x50>
 8011acc:	42ae      	cmp	r6, r5
 8011ace:	bf38      	it	cc
 8011ad0:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8011ad4:	f1c3 0c0b 	rsb	ip, r3, #11
 8011ad8:	bf28      	it	cs
 8011ada:	2200      	movcs	r2, #0
 8011adc:	3315      	adds	r3, #21
 8011ade:	fa24 fe0c 	lsr.w	lr, r4, ip
 8011ae2:	fa04 f303 	lsl.w	r3, r4, r3
 8011ae6:	fa22 f20c 	lsr.w	r2, r2, ip
 8011aea:	ea4e 0107 	orr.w	r1, lr, r7
 8011aee:	431a      	orrs	r2, r3
 8011af0:	4610      	mov	r0, r2
 8011af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011af4:	42ae      	cmp	r6, r5
 8011af6:	bf36      	itet	cc
 8011af8:	f1a2 0508 	subcc.w	r5, r2, #8
 8011afc:	2200      	movcs	r2, #0
 8011afe:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8011b02:	3b0b      	subs	r3, #11
 8011b04:	d012      	beq.n	8011b2c <__b2d+0x88>
 8011b06:	f1c3 0720 	rsb	r7, r3, #32
 8011b0a:	fa22 f107 	lsr.w	r1, r2, r7
 8011b0e:	409c      	lsls	r4, r3
 8011b10:	430c      	orrs	r4, r1
 8011b12:	42b5      	cmp	r5, r6
 8011b14:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8011b18:	bf8c      	ite	hi
 8011b1a:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8011b1e:	2400      	movls	r4, #0
 8011b20:	409a      	lsls	r2, r3
 8011b22:	40fc      	lsrs	r4, r7
 8011b24:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8011b28:	4322      	orrs	r2, r4
 8011b2a:	e7e1      	b.n	8011af0 <__b2d+0x4c>
 8011b2c:	ea44 0107 	orr.w	r1, r4, r7
 8011b30:	e7de      	b.n	8011af0 <__b2d+0x4c>
 8011b32:	bf00      	nop
 8011b34:	3ff00000 	.word	0x3ff00000

08011b38 <__d2b>:
 8011b38:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8011b3c:	2101      	movs	r1, #1
 8011b3e:	9e08      	ldr	r6, [sp, #32]
 8011b40:	4690      	mov	r8, r2
 8011b42:	4699      	mov	r9, r3
 8011b44:	f7ff fc22 	bl	801138c <_Balloc>
 8011b48:	4604      	mov	r4, r0
 8011b4a:	b930      	cbnz	r0, 8011b5a <__d2b+0x22>
 8011b4c:	4602      	mov	r2, r0
 8011b4e:	4b25      	ldr	r3, [pc, #148]	; (8011be4 <__d2b+0xac>)
 8011b50:	4825      	ldr	r0, [pc, #148]	; (8011be8 <__d2b+0xb0>)
 8011b52:	f240 310f 	movw	r1, #783	; 0x30f
 8011b56:	f7fe fc7f 	bl	8010458 <__assert_func>
 8011b5a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011b5e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011b62:	bb35      	cbnz	r5, 8011bb2 <__d2b+0x7a>
 8011b64:	9301      	str	r3, [sp, #4]
 8011b66:	f1b8 0300 	subs.w	r3, r8, #0
 8011b6a:	d027      	beq.n	8011bbc <__d2b+0x84>
 8011b6c:	4668      	mov	r0, sp
 8011b6e:	9300      	str	r3, [sp, #0]
 8011b70:	f7ff fd1e 	bl	80115b0 <__lo0bits>
 8011b74:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011b78:	b1f0      	cbz	r0, 8011bb8 <__d2b+0x80>
 8011b7a:	f1c0 0320 	rsb	r3, r0, #32
 8011b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8011b82:	430b      	orrs	r3, r1
 8011b84:	40c2      	lsrs	r2, r0
 8011b86:	6163      	str	r3, [r4, #20]
 8011b88:	9201      	str	r2, [sp, #4]
 8011b8a:	9b01      	ldr	r3, [sp, #4]
 8011b8c:	61a3      	str	r3, [r4, #24]
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	bf14      	ite	ne
 8011b92:	2202      	movne	r2, #2
 8011b94:	2201      	moveq	r2, #1
 8011b96:	6122      	str	r2, [r4, #16]
 8011b98:	b1c5      	cbz	r5, 8011bcc <__d2b+0x94>
 8011b9a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011b9e:	4405      	add	r5, r0
 8011ba0:	6035      	str	r5, [r6, #0]
 8011ba2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011ba6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011ba8:	6010      	str	r0, [r2, #0]
 8011baa:	4620      	mov	r0, r4
 8011bac:	b002      	add	sp, #8
 8011bae:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8011bb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011bb6:	e7d5      	b.n	8011b64 <__d2b+0x2c>
 8011bb8:	6161      	str	r1, [r4, #20]
 8011bba:	e7e6      	b.n	8011b8a <__d2b+0x52>
 8011bbc:	a801      	add	r0, sp, #4
 8011bbe:	f7ff fcf7 	bl	80115b0 <__lo0bits>
 8011bc2:	9b01      	ldr	r3, [sp, #4]
 8011bc4:	6163      	str	r3, [r4, #20]
 8011bc6:	3020      	adds	r0, #32
 8011bc8:	2201      	movs	r2, #1
 8011bca:	e7e4      	b.n	8011b96 <__d2b+0x5e>
 8011bcc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011bd0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011bd4:	6030      	str	r0, [r6, #0]
 8011bd6:	6918      	ldr	r0, [r3, #16]
 8011bd8:	f7ff fcca 	bl	8011570 <__hi0bits>
 8011bdc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011be0:	e7e1      	b.n	8011ba6 <__d2b+0x6e>
 8011be2:	bf00      	nop
 8011be4:	08014a6a 	.word	0x08014a6a
 8011be8:	08014a7b 	.word	0x08014a7b

08011bec <__ratio>:
 8011bec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bf0:	4688      	mov	r8, r1
 8011bf2:	4669      	mov	r1, sp
 8011bf4:	4681      	mov	r9, r0
 8011bf6:	f7ff ff55 	bl	8011aa4 <__b2d>
 8011bfa:	460f      	mov	r7, r1
 8011bfc:	4604      	mov	r4, r0
 8011bfe:	460d      	mov	r5, r1
 8011c00:	4640      	mov	r0, r8
 8011c02:	a901      	add	r1, sp, #4
 8011c04:	f7ff ff4e 	bl	8011aa4 <__b2d>
 8011c08:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011c0c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011c10:	eba3 0c02 	sub.w	ip, r3, r2
 8011c14:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011c18:	1a9b      	subs	r3, r3, r2
 8011c1a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	bfd5      	itete	le
 8011c22:	460a      	movle	r2, r1
 8011c24:	462a      	movgt	r2, r5
 8011c26:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011c2a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011c2e:	468b      	mov	fp, r1
 8011c30:	bfd8      	it	le
 8011c32:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8011c36:	465b      	mov	r3, fp
 8011c38:	4602      	mov	r2, r0
 8011c3a:	4639      	mov	r1, r7
 8011c3c:	4620      	mov	r0, r4
 8011c3e:	f7ee fe25 	bl	800088c <__aeabi_ddiv>
 8011c42:	b003      	add	sp, #12
 8011c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011c48 <__copybits>:
 8011c48:	3901      	subs	r1, #1
 8011c4a:	b570      	push	{r4, r5, r6, lr}
 8011c4c:	1149      	asrs	r1, r1, #5
 8011c4e:	6914      	ldr	r4, [r2, #16]
 8011c50:	3101      	adds	r1, #1
 8011c52:	f102 0314 	add.w	r3, r2, #20
 8011c56:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011c5a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011c5e:	1f05      	subs	r5, r0, #4
 8011c60:	42a3      	cmp	r3, r4
 8011c62:	d30c      	bcc.n	8011c7e <__copybits+0x36>
 8011c64:	1aa3      	subs	r3, r4, r2
 8011c66:	3b11      	subs	r3, #17
 8011c68:	f023 0303 	bic.w	r3, r3, #3
 8011c6c:	3211      	adds	r2, #17
 8011c6e:	42a2      	cmp	r2, r4
 8011c70:	bf88      	it	hi
 8011c72:	2300      	movhi	r3, #0
 8011c74:	4418      	add	r0, r3
 8011c76:	2300      	movs	r3, #0
 8011c78:	4288      	cmp	r0, r1
 8011c7a:	d305      	bcc.n	8011c88 <__copybits+0x40>
 8011c7c:	bd70      	pop	{r4, r5, r6, pc}
 8011c7e:	f853 6b04 	ldr.w	r6, [r3], #4
 8011c82:	f845 6f04 	str.w	r6, [r5, #4]!
 8011c86:	e7eb      	b.n	8011c60 <__copybits+0x18>
 8011c88:	f840 3b04 	str.w	r3, [r0], #4
 8011c8c:	e7f4      	b.n	8011c78 <__copybits+0x30>

08011c8e <__any_on>:
 8011c8e:	f100 0214 	add.w	r2, r0, #20
 8011c92:	6900      	ldr	r0, [r0, #16]
 8011c94:	114b      	asrs	r3, r1, #5
 8011c96:	4298      	cmp	r0, r3
 8011c98:	b510      	push	{r4, lr}
 8011c9a:	db11      	blt.n	8011cc0 <__any_on+0x32>
 8011c9c:	dd0a      	ble.n	8011cb4 <__any_on+0x26>
 8011c9e:	f011 011f 	ands.w	r1, r1, #31
 8011ca2:	d007      	beq.n	8011cb4 <__any_on+0x26>
 8011ca4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011ca8:	fa24 f001 	lsr.w	r0, r4, r1
 8011cac:	fa00 f101 	lsl.w	r1, r0, r1
 8011cb0:	428c      	cmp	r4, r1
 8011cb2:	d10b      	bne.n	8011ccc <__any_on+0x3e>
 8011cb4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011cb8:	4293      	cmp	r3, r2
 8011cba:	d803      	bhi.n	8011cc4 <__any_on+0x36>
 8011cbc:	2000      	movs	r0, #0
 8011cbe:	bd10      	pop	{r4, pc}
 8011cc0:	4603      	mov	r3, r0
 8011cc2:	e7f7      	b.n	8011cb4 <__any_on+0x26>
 8011cc4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011cc8:	2900      	cmp	r1, #0
 8011cca:	d0f5      	beq.n	8011cb8 <__any_on+0x2a>
 8011ccc:	2001      	movs	r0, #1
 8011cce:	e7f6      	b.n	8011cbe <__any_on+0x30>

08011cd0 <sulp>:
 8011cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cd4:	460f      	mov	r7, r1
 8011cd6:	4690      	mov	r8, r2
 8011cd8:	f7ff fec4 	bl	8011a64 <__ulp>
 8011cdc:	4604      	mov	r4, r0
 8011cde:	460d      	mov	r5, r1
 8011ce0:	f1b8 0f00 	cmp.w	r8, #0
 8011ce4:	d011      	beq.n	8011d0a <sulp+0x3a>
 8011ce6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8011cea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	dd0b      	ble.n	8011d0a <sulp+0x3a>
 8011cf2:	051b      	lsls	r3, r3, #20
 8011cf4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8011cf8:	2400      	movs	r4, #0
 8011cfa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8011cfe:	4622      	mov	r2, r4
 8011d00:	462b      	mov	r3, r5
 8011d02:	f7ee fc99 	bl	8000638 <__aeabi_dmul>
 8011d06:	4604      	mov	r4, r0
 8011d08:	460d      	mov	r5, r1
 8011d0a:	4620      	mov	r0, r4
 8011d0c:	4629      	mov	r1, r5
 8011d0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d12:	0000      	movs	r0, r0
 8011d14:	0000      	movs	r0, r0
	...

08011d18 <_strtod_l>:
 8011d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d1c:	ed2d 8b02 	vpush	{d8}
 8011d20:	b09b      	sub	sp, #108	; 0x6c
 8011d22:	4604      	mov	r4, r0
 8011d24:	9213      	str	r2, [sp, #76]	; 0x4c
 8011d26:	2200      	movs	r2, #0
 8011d28:	9216      	str	r2, [sp, #88]	; 0x58
 8011d2a:	460d      	mov	r5, r1
 8011d2c:	f04f 0800 	mov.w	r8, #0
 8011d30:	f04f 0900 	mov.w	r9, #0
 8011d34:	460a      	mov	r2, r1
 8011d36:	9215      	str	r2, [sp, #84]	; 0x54
 8011d38:	7811      	ldrb	r1, [r2, #0]
 8011d3a:	292b      	cmp	r1, #43	; 0x2b
 8011d3c:	d04a      	beq.n	8011dd4 <_strtod_l+0xbc>
 8011d3e:	d838      	bhi.n	8011db2 <_strtod_l+0x9a>
 8011d40:	290d      	cmp	r1, #13
 8011d42:	d832      	bhi.n	8011daa <_strtod_l+0x92>
 8011d44:	2908      	cmp	r1, #8
 8011d46:	d832      	bhi.n	8011dae <_strtod_l+0x96>
 8011d48:	2900      	cmp	r1, #0
 8011d4a:	d03b      	beq.n	8011dc4 <_strtod_l+0xac>
 8011d4c:	2200      	movs	r2, #0
 8011d4e:	920a      	str	r2, [sp, #40]	; 0x28
 8011d50:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8011d52:	7832      	ldrb	r2, [r6, #0]
 8011d54:	2a30      	cmp	r2, #48	; 0x30
 8011d56:	f040 80b2 	bne.w	8011ebe <_strtod_l+0x1a6>
 8011d5a:	7872      	ldrb	r2, [r6, #1]
 8011d5c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8011d60:	2a58      	cmp	r2, #88	; 0x58
 8011d62:	d16e      	bne.n	8011e42 <_strtod_l+0x12a>
 8011d64:	9302      	str	r3, [sp, #8]
 8011d66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d68:	9301      	str	r3, [sp, #4]
 8011d6a:	ab16      	add	r3, sp, #88	; 0x58
 8011d6c:	9300      	str	r3, [sp, #0]
 8011d6e:	4a8d      	ldr	r2, [pc, #564]	; (8011fa4 <_strtod_l+0x28c>)
 8011d70:	ab17      	add	r3, sp, #92	; 0x5c
 8011d72:	a915      	add	r1, sp, #84	; 0x54
 8011d74:	4620      	mov	r0, r4
 8011d76:	f001 fa63 	bl	8013240 <__gethex>
 8011d7a:	f010 070f 	ands.w	r7, r0, #15
 8011d7e:	4605      	mov	r5, r0
 8011d80:	d005      	beq.n	8011d8e <_strtod_l+0x76>
 8011d82:	2f06      	cmp	r7, #6
 8011d84:	d128      	bne.n	8011dd8 <_strtod_l+0xc0>
 8011d86:	3601      	adds	r6, #1
 8011d88:	2300      	movs	r3, #0
 8011d8a:	9615      	str	r6, [sp, #84]	; 0x54
 8011d8c:	930a      	str	r3, [sp, #40]	; 0x28
 8011d8e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	f040 8574 	bne.w	801287e <_strtod_l+0xb66>
 8011d96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d98:	b1cb      	cbz	r3, 8011dce <_strtod_l+0xb6>
 8011d9a:	4640      	mov	r0, r8
 8011d9c:	f109 4100 	add.w	r1, r9, #2147483648	; 0x80000000
 8011da0:	b01b      	add	sp, #108	; 0x6c
 8011da2:	ecbd 8b02 	vpop	{d8}
 8011da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011daa:	2920      	cmp	r1, #32
 8011dac:	d1ce      	bne.n	8011d4c <_strtod_l+0x34>
 8011dae:	3201      	adds	r2, #1
 8011db0:	e7c1      	b.n	8011d36 <_strtod_l+0x1e>
 8011db2:	292d      	cmp	r1, #45	; 0x2d
 8011db4:	d1ca      	bne.n	8011d4c <_strtod_l+0x34>
 8011db6:	2101      	movs	r1, #1
 8011db8:	910a      	str	r1, [sp, #40]	; 0x28
 8011dba:	1c51      	adds	r1, r2, #1
 8011dbc:	9115      	str	r1, [sp, #84]	; 0x54
 8011dbe:	7852      	ldrb	r2, [r2, #1]
 8011dc0:	2a00      	cmp	r2, #0
 8011dc2:	d1c5      	bne.n	8011d50 <_strtod_l+0x38>
 8011dc4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011dc6:	9515      	str	r5, [sp, #84]	; 0x54
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	f040 8556 	bne.w	801287a <_strtod_l+0xb62>
 8011dce:	4640      	mov	r0, r8
 8011dd0:	4649      	mov	r1, r9
 8011dd2:	e7e5      	b.n	8011da0 <_strtod_l+0x88>
 8011dd4:	2100      	movs	r1, #0
 8011dd6:	e7ef      	b.n	8011db8 <_strtod_l+0xa0>
 8011dd8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011dda:	b13a      	cbz	r2, 8011dec <_strtod_l+0xd4>
 8011ddc:	2135      	movs	r1, #53	; 0x35
 8011dde:	a818      	add	r0, sp, #96	; 0x60
 8011de0:	f7ff ff32 	bl	8011c48 <__copybits>
 8011de4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011de6:	4620      	mov	r0, r4
 8011de8:	f7ff fb10 	bl	801140c <_Bfree>
 8011dec:	3f01      	subs	r7, #1
 8011dee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011df0:	2f04      	cmp	r7, #4
 8011df2:	d806      	bhi.n	8011e02 <_strtod_l+0xea>
 8011df4:	e8df f007 	tbb	[pc, r7]
 8011df8:	201d0314 	.word	0x201d0314
 8011dfc:	14          	.byte	0x14
 8011dfd:	00          	.byte	0x00
 8011dfe:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8011e02:	05e9      	lsls	r1, r5, #23
 8011e04:	bf48      	it	mi
 8011e06:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8011e0a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011e0e:	0d1b      	lsrs	r3, r3, #20
 8011e10:	051b      	lsls	r3, r3, #20
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d1bb      	bne.n	8011d8e <_strtod_l+0x76>
 8011e16:	f7fe fae1 	bl	80103dc <__errno>
 8011e1a:	2322      	movs	r3, #34	; 0x22
 8011e1c:	6003      	str	r3, [r0, #0]
 8011e1e:	e7b6      	b.n	8011d8e <_strtod_l+0x76>
 8011e20:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8011e24:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011e28:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011e2c:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8011e30:	e7e7      	b.n	8011e02 <_strtod_l+0xea>
 8011e32:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8011fac <_strtod_l+0x294>
 8011e36:	e7e4      	b.n	8011e02 <_strtod_l+0xea>
 8011e38:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8011e3c:	f04f 38ff 	mov.w	r8, #4294967295
 8011e40:	e7df      	b.n	8011e02 <_strtod_l+0xea>
 8011e42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011e44:	1c5a      	adds	r2, r3, #1
 8011e46:	9215      	str	r2, [sp, #84]	; 0x54
 8011e48:	785b      	ldrb	r3, [r3, #1]
 8011e4a:	2b30      	cmp	r3, #48	; 0x30
 8011e4c:	d0f9      	beq.n	8011e42 <_strtod_l+0x12a>
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d09d      	beq.n	8011d8e <_strtod_l+0x76>
 8011e52:	2301      	movs	r3, #1
 8011e54:	f04f 0a00 	mov.w	sl, #0
 8011e58:	9304      	str	r3, [sp, #16]
 8011e5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011e5c:	930b      	str	r3, [sp, #44]	; 0x2c
 8011e5e:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8011e62:	46d3      	mov	fp, sl
 8011e64:	220a      	movs	r2, #10
 8011e66:	9815      	ldr	r0, [sp, #84]	; 0x54
 8011e68:	7806      	ldrb	r6, [r0, #0]
 8011e6a:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8011e6e:	b2d9      	uxtb	r1, r3
 8011e70:	2909      	cmp	r1, #9
 8011e72:	d926      	bls.n	8011ec2 <_strtod_l+0x1aa>
 8011e74:	494c      	ldr	r1, [pc, #304]	; (8011fa8 <_strtod_l+0x290>)
 8011e76:	2201      	movs	r2, #1
 8011e78:	f001 f914 	bl	80130a4 <strncmp>
 8011e7c:	2800      	cmp	r0, #0
 8011e7e:	d030      	beq.n	8011ee2 <_strtod_l+0x1ca>
 8011e80:	2000      	movs	r0, #0
 8011e82:	4632      	mov	r2, r6
 8011e84:	9005      	str	r0, [sp, #20]
 8011e86:	465e      	mov	r6, fp
 8011e88:	4603      	mov	r3, r0
 8011e8a:	2a65      	cmp	r2, #101	; 0x65
 8011e8c:	d001      	beq.n	8011e92 <_strtod_l+0x17a>
 8011e8e:	2a45      	cmp	r2, #69	; 0x45
 8011e90:	d113      	bne.n	8011eba <_strtod_l+0x1a2>
 8011e92:	b91e      	cbnz	r6, 8011e9c <_strtod_l+0x184>
 8011e94:	9a04      	ldr	r2, [sp, #16]
 8011e96:	4302      	orrs	r2, r0
 8011e98:	d094      	beq.n	8011dc4 <_strtod_l+0xac>
 8011e9a:	2600      	movs	r6, #0
 8011e9c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8011e9e:	1c6a      	adds	r2, r5, #1
 8011ea0:	9215      	str	r2, [sp, #84]	; 0x54
 8011ea2:	786a      	ldrb	r2, [r5, #1]
 8011ea4:	2a2b      	cmp	r2, #43	; 0x2b
 8011ea6:	d074      	beq.n	8011f92 <_strtod_l+0x27a>
 8011ea8:	2a2d      	cmp	r2, #45	; 0x2d
 8011eaa:	d078      	beq.n	8011f9e <_strtod_l+0x286>
 8011eac:	f04f 0c00 	mov.w	ip, #0
 8011eb0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8011eb4:	2909      	cmp	r1, #9
 8011eb6:	d97f      	bls.n	8011fb8 <_strtod_l+0x2a0>
 8011eb8:	9515      	str	r5, [sp, #84]	; 0x54
 8011eba:	2700      	movs	r7, #0
 8011ebc:	e09e      	b.n	8011ffc <_strtod_l+0x2e4>
 8011ebe:	2300      	movs	r3, #0
 8011ec0:	e7c8      	b.n	8011e54 <_strtod_l+0x13c>
 8011ec2:	f1bb 0f08 	cmp.w	fp, #8
 8011ec6:	bfd8      	it	le
 8011ec8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8011eca:	f100 0001 	add.w	r0, r0, #1
 8011ece:	bfda      	itte	le
 8011ed0:	fb02 3301 	mlale	r3, r2, r1, r3
 8011ed4:	9309      	strle	r3, [sp, #36]	; 0x24
 8011ed6:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8011eda:	f10b 0b01 	add.w	fp, fp, #1
 8011ede:	9015      	str	r0, [sp, #84]	; 0x54
 8011ee0:	e7c1      	b.n	8011e66 <_strtod_l+0x14e>
 8011ee2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011ee4:	1c5a      	adds	r2, r3, #1
 8011ee6:	9215      	str	r2, [sp, #84]	; 0x54
 8011ee8:	785a      	ldrb	r2, [r3, #1]
 8011eea:	f1bb 0f00 	cmp.w	fp, #0
 8011eee:	d037      	beq.n	8011f60 <_strtod_l+0x248>
 8011ef0:	9005      	str	r0, [sp, #20]
 8011ef2:	465e      	mov	r6, fp
 8011ef4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8011ef8:	2b09      	cmp	r3, #9
 8011efa:	d912      	bls.n	8011f22 <_strtod_l+0x20a>
 8011efc:	2301      	movs	r3, #1
 8011efe:	e7c4      	b.n	8011e8a <_strtod_l+0x172>
 8011f00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011f02:	1c5a      	adds	r2, r3, #1
 8011f04:	9215      	str	r2, [sp, #84]	; 0x54
 8011f06:	785a      	ldrb	r2, [r3, #1]
 8011f08:	3001      	adds	r0, #1
 8011f0a:	2a30      	cmp	r2, #48	; 0x30
 8011f0c:	d0f8      	beq.n	8011f00 <_strtod_l+0x1e8>
 8011f0e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8011f12:	2b08      	cmp	r3, #8
 8011f14:	f200 84b8 	bhi.w	8012888 <_strtod_l+0xb70>
 8011f18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011f1a:	9005      	str	r0, [sp, #20]
 8011f1c:	2000      	movs	r0, #0
 8011f1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8011f20:	4606      	mov	r6, r0
 8011f22:	3a30      	subs	r2, #48	; 0x30
 8011f24:	f100 0301 	add.w	r3, r0, #1
 8011f28:	d014      	beq.n	8011f54 <_strtod_l+0x23c>
 8011f2a:	9905      	ldr	r1, [sp, #20]
 8011f2c:	4419      	add	r1, r3
 8011f2e:	9105      	str	r1, [sp, #20]
 8011f30:	4633      	mov	r3, r6
 8011f32:	eb00 0c06 	add.w	ip, r0, r6
 8011f36:	210a      	movs	r1, #10
 8011f38:	4563      	cmp	r3, ip
 8011f3a:	d113      	bne.n	8011f64 <_strtod_l+0x24c>
 8011f3c:	1833      	adds	r3, r6, r0
 8011f3e:	2b08      	cmp	r3, #8
 8011f40:	f106 0601 	add.w	r6, r6, #1
 8011f44:	4406      	add	r6, r0
 8011f46:	dc1a      	bgt.n	8011f7e <_strtod_l+0x266>
 8011f48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011f4a:	230a      	movs	r3, #10
 8011f4c:	fb03 2301 	mla	r3, r3, r1, r2
 8011f50:	9309      	str	r3, [sp, #36]	; 0x24
 8011f52:	2300      	movs	r3, #0
 8011f54:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011f56:	1c51      	adds	r1, r2, #1
 8011f58:	9115      	str	r1, [sp, #84]	; 0x54
 8011f5a:	7852      	ldrb	r2, [r2, #1]
 8011f5c:	4618      	mov	r0, r3
 8011f5e:	e7c9      	b.n	8011ef4 <_strtod_l+0x1dc>
 8011f60:	4658      	mov	r0, fp
 8011f62:	e7d2      	b.n	8011f0a <_strtod_l+0x1f2>
 8011f64:	2b08      	cmp	r3, #8
 8011f66:	f103 0301 	add.w	r3, r3, #1
 8011f6a:	dc03      	bgt.n	8011f74 <_strtod_l+0x25c>
 8011f6c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8011f6e:	434f      	muls	r7, r1
 8011f70:	9709      	str	r7, [sp, #36]	; 0x24
 8011f72:	e7e1      	b.n	8011f38 <_strtod_l+0x220>
 8011f74:	2b10      	cmp	r3, #16
 8011f76:	bfd8      	it	le
 8011f78:	fb01 fa0a 	mulle.w	sl, r1, sl
 8011f7c:	e7dc      	b.n	8011f38 <_strtod_l+0x220>
 8011f7e:	2e10      	cmp	r6, #16
 8011f80:	bfdc      	itt	le
 8011f82:	230a      	movle	r3, #10
 8011f84:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8011f88:	e7e3      	b.n	8011f52 <_strtod_l+0x23a>
 8011f8a:	2300      	movs	r3, #0
 8011f8c:	9305      	str	r3, [sp, #20]
 8011f8e:	2301      	movs	r3, #1
 8011f90:	e780      	b.n	8011e94 <_strtod_l+0x17c>
 8011f92:	f04f 0c00 	mov.w	ip, #0
 8011f96:	1caa      	adds	r2, r5, #2
 8011f98:	9215      	str	r2, [sp, #84]	; 0x54
 8011f9a:	78aa      	ldrb	r2, [r5, #2]
 8011f9c:	e788      	b.n	8011eb0 <_strtod_l+0x198>
 8011f9e:	f04f 0c01 	mov.w	ip, #1
 8011fa2:	e7f8      	b.n	8011f96 <_strtod_l+0x27e>
 8011fa4:	08014bd8 	.word	0x08014bd8
 8011fa8:	08014bd4 	.word	0x08014bd4
 8011fac:	7ff00000 	.word	0x7ff00000
 8011fb0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011fb2:	1c51      	adds	r1, r2, #1
 8011fb4:	9115      	str	r1, [sp, #84]	; 0x54
 8011fb6:	7852      	ldrb	r2, [r2, #1]
 8011fb8:	2a30      	cmp	r2, #48	; 0x30
 8011fba:	d0f9      	beq.n	8011fb0 <_strtod_l+0x298>
 8011fbc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8011fc0:	2908      	cmp	r1, #8
 8011fc2:	f63f af7a 	bhi.w	8011eba <_strtod_l+0x1a2>
 8011fc6:	3a30      	subs	r2, #48	; 0x30
 8011fc8:	9208      	str	r2, [sp, #32]
 8011fca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011fcc:	920c      	str	r2, [sp, #48]	; 0x30
 8011fce:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011fd0:	1c57      	adds	r7, r2, #1
 8011fd2:	9715      	str	r7, [sp, #84]	; 0x54
 8011fd4:	7852      	ldrb	r2, [r2, #1]
 8011fd6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8011fda:	f1be 0f09 	cmp.w	lr, #9
 8011fde:	d938      	bls.n	8012052 <_strtod_l+0x33a>
 8011fe0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011fe2:	1a7f      	subs	r7, r7, r1
 8011fe4:	2f08      	cmp	r7, #8
 8011fe6:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8011fea:	dc03      	bgt.n	8011ff4 <_strtod_l+0x2dc>
 8011fec:	9908      	ldr	r1, [sp, #32]
 8011fee:	428f      	cmp	r7, r1
 8011ff0:	bfa8      	it	ge
 8011ff2:	460f      	movge	r7, r1
 8011ff4:	f1bc 0f00 	cmp.w	ip, #0
 8011ff8:	d000      	beq.n	8011ffc <_strtod_l+0x2e4>
 8011ffa:	427f      	negs	r7, r7
 8011ffc:	2e00      	cmp	r6, #0
 8011ffe:	d14f      	bne.n	80120a0 <_strtod_l+0x388>
 8012000:	9904      	ldr	r1, [sp, #16]
 8012002:	4301      	orrs	r1, r0
 8012004:	f47f aec3 	bne.w	8011d8e <_strtod_l+0x76>
 8012008:	2b00      	cmp	r3, #0
 801200a:	f47f aedb 	bne.w	8011dc4 <_strtod_l+0xac>
 801200e:	2a69      	cmp	r2, #105	; 0x69
 8012010:	d029      	beq.n	8012066 <_strtod_l+0x34e>
 8012012:	dc26      	bgt.n	8012062 <_strtod_l+0x34a>
 8012014:	2a49      	cmp	r2, #73	; 0x49
 8012016:	d026      	beq.n	8012066 <_strtod_l+0x34e>
 8012018:	2a4e      	cmp	r2, #78	; 0x4e
 801201a:	f47f aed3 	bne.w	8011dc4 <_strtod_l+0xac>
 801201e:	499a      	ldr	r1, [pc, #616]	; (8012288 <_strtod_l+0x570>)
 8012020:	a815      	add	r0, sp, #84	; 0x54
 8012022:	f001 fb4d 	bl	80136c0 <__match>
 8012026:	2800      	cmp	r0, #0
 8012028:	f43f aecc 	beq.w	8011dc4 <_strtod_l+0xac>
 801202c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801202e:	781b      	ldrb	r3, [r3, #0]
 8012030:	2b28      	cmp	r3, #40	; 0x28
 8012032:	d12f      	bne.n	8012094 <_strtod_l+0x37c>
 8012034:	4995      	ldr	r1, [pc, #596]	; (801228c <_strtod_l+0x574>)
 8012036:	aa18      	add	r2, sp, #96	; 0x60
 8012038:	a815      	add	r0, sp, #84	; 0x54
 801203a:	f001 fb55 	bl	80136e8 <__hexnan>
 801203e:	2805      	cmp	r0, #5
 8012040:	d128      	bne.n	8012094 <_strtod_l+0x37c>
 8012042:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012044:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8012048:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801204c:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8012050:	e69d      	b.n	8011d8e <_strtod_l+0x76>
 8012052:	9f08      	ldr	r7, [sp, #32]
 8012054:	210a      	movs	r1, #10
 8012056:	fb01 2107 	mla	r1, r1, r7, r2
 801205a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801205e:	9208      	str	r2, [sp, #32]
 8012060:	e7b5      	b.n	8011fce <_strtod_l+0x2b6>
 8012062:	2a6e      	cmp	r2, #110	; 0x6e
 8012064:	e7d9      	b.n	801201a <_strtod_l+0x302>
 8012066:	498a      	ldr	r1, [pc, #552]	; (8012290 <_strtod_l+0x578>)
 8012068:	a815      	add	r0, sp, #84	; 0x54
 801206a:	f001 fb29 	bl	80136c0 <__match>
 801206e:	2800      	cmp	r0, #0
 8012070:	f43f aea8 	beq.w	8011dc4 <_strtod_l+0xac>
 8012074:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012076:	4987      	ldr	r1, [pc, #540]	; (8012294 <_strtod_l+0x57c>)
 8012078:	3b01      	subs	r3, #1
 801207a:	a815      	add	r0, sp, #84	; 0x54
 801207c:	9315      	str	r3, [sp, #84]	; 0x54
 801207e:	f001 fb1f 	bl	80136c0 <__match>
 8012082:	b910      	cbnz	r0, 801208a <_strtod_l+0x372>
 8012084:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012086:	3301      	adds	r3, #1
 8012088:	9315      	str	r3, [sp, #84]	; 0x54
 801208a:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80122a4 <_strtod_l+0x58c>
 801208e:	f04f 0800 	mov.w	r8, #0
 8012092:	e67c      	b.n	8011d8e <_strtod_l+0x76>
 8012094:	4880      	ldr	r0, [pc, #512]	; (8012298 <_strtod_l+0x580>)
 8012096:	f001 f849 	bl	801312c <nan>
 801209a:	4680      	mov	r8, r0
 801209c:	4689      	mov	r9, r1
 801209e:	e676      	b.n	8011d8e <_strtod_l+0x76>
 80120a0:	9b05      	ldr	r3, [sp, #20]
 80120a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80120a4:	1afb      	subs	r3, r7, r3
 80120a6:	f1bb 0f00 	cmp.w	fp, #0
 80120aa:	bf08      	it	eq
 80120ac:	46b3      	moveq	fp, r6
 80120ae:	2e10      	cmp	r6, #16
 80120b0:	9308      	str	r3, [sp, #32]
 80120b2:	4635      	mov	r5, r6
 80120b4:	bfa8      	it	ge
 80120b6:	2510      	movge	r5, #16
 80120b8:	f7ee fa44 	bl	8000544 <__aeabi_ui2d>
 80120bc:	2e09      	cmp	r6, #9
 80120be:	4680      	mov	r8, r0
 80120c0:	4689      	mov	r9, r1
 80120c2:	dd13      	ble.n	80120ec <_strtod_l+0x3d4>
 80120c4:	4b75      	ldr	r3, [pc, #468]	; (801229c <_strtod_l+0x584>)
 80120c6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80120ca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80120ce:	f7ee fab3 	bl	8000638 <__aeabi_dmul>
 80120d2:	4680      	mov	r8, r0
 80120d4:	4650      	mov	r0, sl
 80120d6:	4689      	mov	r9, r1
 80120d8:	f7ee fa34 	bl	8000544 <__aeabi_ui2d>
 80120dc:	4602      	mov	r2, r0
 80120de:	460b      	mov	r3, r1
 80120e0:	4640      	mov	r0, r8
 80120e2:	4649      	mov	r1, r9
 80120e4:	f7ee f8f2 	bl	80002cc <__adddf3>
 80120e8:	4680      	mov	r8, r0
 80120ea:	4689      	mov	r9, r1
 80120ec:	2e0f      	cmp	r6, #15
 80120ee:	dc36      	bgt.n	801215e <_strtod_l+0x446>
 80120f0:	9b08      	ldr	r3, [sp, #32]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	f43f ae4b 	beq.w	8011d8e <_strtod_l+0x76>
 80120f8:	dd22      	ble.n	8012140 <_strtod_l+0x428>
 80120fa:	2b16      	cmp	r3, #22
 80120fc:	dc09      	bgt.n	8012112 <_strtod_l+0x3fa>
 80120fe:	4967      	ldr	r1, [pc, #412]	; (801229c <_strtod_l+0x584>)
 8012100:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012104:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012108:	4642      	mov	r2, r8
 801210a:	464b      	mov	r3, r9
 801210c:	f7ee fa94 	bl	8000638 <__aeabi_dmul>
 8012110:	e7c3      	b.n	801209a <_strtod_l+0x382>
 8012112:	9a08      	ldr	r2, [sp, #32]
 8012114:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8012118:	4293      	cmp	r3, r2
 801211a:	db20      	blt.n	801215e <_strtod_l+0x446>
 801211c:	4c5f      	ldr	r4, [pc, #380]	; (801229c <_strtod_l+0x584>)
 801211e:	f1c6 060f 	rsb	r6, r6, #15
 8012122:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8012126:	4642      	mov	r2, r8
 8012128:	464b      	mov	r3, r9
 801212a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801212e:	f7ee fa83 	bl	8000638 <__aeabi_dmul>
 8012132:	9b08      	ldr	r3, [sp, #32]
 8012134:	1b9e      	subs	r6, r3, r6
 8012136:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 801213a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801213e:	e7e5      	b.n	801210c <_strtod_l+0x3f4>
 8012140:	9b08      	ldr	r3, [sp, #32]
 8012142:	3316      	adds	r3, #22
 8012144:	db0b      	blt.n	801215e <_strtod_l+0x446>
 8012146:	9b05      	ldr	r3, [sp, #20]
 8012148:	1bdf      	subs	r7, r3, r7
 801214a:	4b54      	ldr	r3, [pc, #336]	; (801229c <_strtod_l+0x584>)
 801214c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8012150:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012154:	4640      	mov	r0, r8
 8012156:	4649      	mov	r1, r9
 8012158:	f7ee fb98 	bl	800088c <__aeabi_ddiv>
 801215c:	e79d      	b.n	801209a <_strtod_l+0x382>
 801215e:	9b08      	ldr	r3, [sp, #32]
 8012160:	1b75      	subs	r5, r6, r5
 8012162:	441d      	add	r5, r3
 8012164:	2d00      	cmp	r5, #0
 8012166:	dd70      	ble.n	801224a <_strtod_l+0x532>
 8012168:	f015 030f 	ands.w	r3, r5, #15
 801216c:	d00a      	beq.n	8012184 <_strtod_l+0x46c>
 801216e:	494b      	ldr	r1, [pc, #300]	; (801229c <_strtod_l+0x584>)
 8012170:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012174:	4642      	mov	r2, r8
 8012176:	464b      	mov	r3, r9
 8012178:	e9d1 0100 	ldrd	r0, r1, [r1]
 801217c:	f7ee fa5c 	bl	8000638 <__aeabi_dmul>
 8012180:	4680      	mov	r8, r0
 8012182:	4689      	mov	r9, r1
 8012184:	f035 050f 	bics.w	r5, r5, #15
 8012188:	d04d      	beq.n	8012226 <_strtod_l+0x50e>
 801218a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 801218e:	dd22      	ble.n	80121d6 <_strtod_l+0x4be>
 8012190:	2500      	movs	r5, #0
 8012192:	46ab      	mov	fp, r5
 8012194:	9509      	str	r5, [sp, #36]	; 0x24
 8012196:	9505      	str	r5, [sp, #20]
 8012198:	2322      	movs	r3, #34	; 0x22
 801219a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80122a4 <_strtod_l+0x58c>
 801219e:	6023      	str	r3, [r4, #0]
 80121a0:	f04f 0800 	mov.w	r8, #0
 80121a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	f43f adf1 	beq.w	8011d8e <_strtod_l+0x76>
 80121ac:	9916      	ldr	r1, [sp, #88]	; 0x58
 80121ae:	4620      	mov	r0, r4
 80121b0:	f7ff f92c 	bl	801140c <_Bfree>
 80121b4:	9905      	ldr	r1, [sp, #20]
 80121b6:	4620      	mov	r0, r4
 80121b8:	f7ff f928 	bl	801140c <_Bfree>
 80121bc:	4659      	mov	r1, fp
 80121be:	4620      	mov	r0, r4
 80121c0:	f7ff f924 	bl	801140c <_Bfree>
 80121c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80121c6:	4620      	mov	r0, r4
 80121c8:	f7ff f920 	bl	801140c <_Bfree>
 80121cc:	4629      	mov	r1, r5
 80121ce:	4620      	mov	r0, r4
 80121d0:	f7ff f91c 	bl	801140c <_Bfree>
 80121d4:	e5db      	b.n	8011d8e <_strtod_l+0x76>
 80121d6:	4b32      	ldr	r3, [pc, #200]	; (80122a0 <_strtod_l+0x588>)
 80121d8:	9304      	str	r3, [sp, #16]
 80121da:	2300      	movs	r3, #0
 80121dc:	112d      	asrs	r5, r5, #4
 80121de:	4640      	mov	r0, r8
 80121e0:	4649      	mov	r1, r9
 80121e2:	469a      	mov	sl, r3
 80121e4:	2d01      	cmp	r5, #1
 80121e6:	dc21      	bgt.n	801222c <_strtod_l+0x514>
 80121e8:	b10b      	cbz	r3, 80121ee <_strtod_l+0x4d6>
 80121ea:	4680      	mov	r8, r0
 80121ec:	4689      	mov	r9, r1
 80121ee:	492c      	ldr	r1, [pc, #176]	; (80122a0 <_strtod_l+0x588>)
 80121f0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80121f4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80121f8:	4642      	mov	r2, r8
 80121fa:	464b      	mov	r3, r9
 80121fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012200:	f7ee fa1a 	bl	8000638 <__aeabi_dmul>
 8012204:	4b27      	ldr	r3, [pc, #156]	; (80122a4 <_strtod_l+0x58c>)
 8012206:	460a      	mov	r2, r1
 8012208:	400b      	ands	r3, r1
 801220a:	4927      	ldr	r1, [pc, #156]	; (80122a8 <_strtod_l+0x590>)
 801220c:	428b      	cmp	r3, r1
 801220e:	4680      	mov	r8, r0
 8012210:	d8be      	bhi.n	8012190 <_strtod_l+0x478>
 8012212:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8012216:	428b      	cmp	r3, r1
 8012218:	bf86      	itte	hi
 801221a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80122ac <_strtod_l+0x594>
 801221e:	f04f 38ff 	movhi.w	r8, #4294967295
 8012222:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8012226:	2300      	movs	r3, #0
 8012228:	9304      	str	r3, [sp, #16]
 801222a:	e07b      	b.n	8012324 <_strtod_l+0x60c>
 801222c:	07ea      	lsls	r2, r5, #31
 801222e:	d505      	bpl.n	801223c <_strtod_l+0x524>
 8012230:	9b04      	ldr	r3, [sp, #16]
 8012232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012236:	f7ee f9ff 	bl	8000638 <__aeabi_dmul>
 801223a:	2301      	movs	r3, #1
 801223c:	9a04      	ldr	r2, [sp, #16]
 801223e:	3208      	adds	r2, #8
 8012240:	f10a 0a01 	add.w	sl, sl, #1
 8012244:	106d      	asrs	r5, r5, #1
 8012246:	9204      	str	r2, [sp, #16]
 8012248:	e7cc      	b.n	80121e4 <_strtod_l+0x4cc>
 801224a:	d0ec      	beq.n	8012226 <_strtod_l+0x50e>
 801224c:	426d      	negs	r5, r5
 801224e:	f015 020f 	ands.w	r2, r5, #15
 8012252:	d00a      	beq.n	801226a <_strtod_l+0x552>
 8012254:	4b11      	ldr	r3, [pc, #68]	; (801229c <_strtod_l+0x584>)
 8012256:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801225a:	4640      	mov	r0, r8
 801225c:	4649      	mov	r1, r9
 801225e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012262:	f7ee fb13 	bl	800088c <__aeabi_ddiv>
 8012266:	4680      	mov	r8, r0
 8012268:	4689      	mov	r9, r1
 801226a:	112d      	asrs	r5, r5, #4
 801226c:	d0db      	beq.n	8012226 <_strtod_l+0x50e>
 801226e:	2d1f      	cmp	r5, #31
 8012270:	dd1e      	ble.n	80122b0 <_strtod_l+0x598>
 8012272:	2500      	movs	r5, #0
 8012274:	46ab      	mov	fp, r5
 8012276:	9509      	str	r5, [sp, #36]	; 0x24
 8012278:	9505      	str	r5, [sp, #20]
 801227a:	2322      	movs	r3, #34	; 0x22
 801227c:	f04f 0800 	mov.w	r8, #0
 8012280:	f04f 0900 	mov.w	r9, #0
 8012284:	6023      	str	r3, [r4, #0]
 8012286:	e78d      	b.n	80121a4 <_strtod_l+0x48c>
 8012288:	08014986 	.word	0x08014986
 801228c:	08014bec 	.word	0x08014bec
 8012290:	0801497e 	.word	0x0801497e
 8012294:	080149f1 	.word	0x080149f1
 8012298:	080149ed 	.word	0x080149ed
 801229c:	08014b00 	.word	0x08014b00
 80122a0:	08014ad8 	.word	0x08014ad8
 80122a4:	7ff00000 	.word	0x7ff00000
 80122a8:	7ca00000 	.word	0x7ca00000
 80122ac:	7fefffff 	.word	0x7fefffff
 80122b0:	f015 0310 	ands.w	r3, r5, #16
 80122b4:	bf18      	it	ne
 80122b6:	236a      	movne	r3, #106	; 0x6a
 80122b8:	f8df a3a4 	ldr.w	sl, [pc, #932]	; 8012660 <_strtod_l+0x948>
 80122bc:	9304      	str	r3, [sp, #16]
 80122be:	4640      	mov	r0, r8
 80122c0:	4649      	mov	r1, r9
 80122c2:	2300      	movs	r3, #0
 80122c4:	07ea      	lsls	r2, r5, #31
 80122c6:	d504      	bpl.n	80122d2 <_strtod_l+0x5ba>
 80122c8:	e9da 2300 	ldrd	r2, r3, [sl]
 80122cc:	f7ee f9b4 	bl	8000638 <__aeabi_dmul>
 80122d0:	2301      	movs	r3, #1
 80122d2:	106d      	asrs	r5, r5, #1
 80122d4:	f10a 0a08 	add.w	sl, sl, #8
 80122d8:	d1f4      	bne.n	80122c4 <_strtod_l+0x5ac>
 80122da:	b10b      	cbz	r3, 80122e0 <_strtod_l+0x5c8>
 80122dc:	4680      	mov	r8, r0
 80122de:	4689      	mov	r9, r1
 80122e0:	9b04      	ldr	r3, [sp, #16]
 80122e2:	b1bb      	cbz	r3, 8012314 <_strtod_l+0x5fc>
 80122e4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80122e8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	4649      	mov	r1, r9
 80122f0:	dd10      	ble.n	8012314 <_strtod_l+0x5fc>
 80122f2:	2b1f      	cmp	r3, #31
 80122f4:	f340 8120 	ble.w	8012538 <_strtod_l+0x820>
 80122f8:	2b34      	cmp	r3, #52	; 0x34
 80122fa:	bfde      	ittt	le
 80122fc:	f04f 33ff 	movle.w	r3, #4294967295
 8012300:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8012304:	4093      	lslle	r3, r2
 8012306:	f04f 0800 	mov.w	r8, #0
 801230a:	bfcc      	ite	gt
 801230c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8012310:	ea03 0901 	andle.w	r9, r3, r1
 8012314:	2200      	movs	r2, #0
 8012316:	2300      	movs	r3, #0
 8012318:	4640      	mov	r0, r8
 801231a:	4649      	mov	r1, r9
 801231c:	f7ee fbf4 	bl	8000b08 <__aeabi_dcmpeq>
 8012320:	2800      	cmp	r0, #0
 8012322:	d1a6      	bne.n	8012272 <_strtod_l+0x55a>
 8012324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012326:	9300      	str	r3, [sp, #0]
 8012328:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801232a:	4633      	mov	r3, r6
 801232c:	465a      	mov	r2, fp
 801232e:	4620      	mov	r0, r4
 8012330:	f7ff f8d4 	bl	80114dc <__s2b>
 8012334:	9009      	str	r0, [sp, #36]	; 0x24
 8012336:	2800      	cmp	r0, #0
 8012338:	f43f af2a 	beq.w	8012190 <_strtod_l+0x478>
 801233c:	9a08      	ldr	r2, [sp, #32]
 801233e:	9b05      	ldr	r3, [sp, #20]
 8012340:	2a00      	cmp	r2, #0
 8012342:	eba3 0307 	sub.w	r3, r3, r7
 8012346:	bfa8      	it	ge
 8012348:	2300      	movge	r3, #0
 801234a:	930c      	str	r3, [sp, #48]	; 0x30
 801234c:	2500      	movs	r5, #0
 801234e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8012352:	9312      	str	r3, [sp, #72]	; 0x48
 8012354:	46ab      	mov	fp, r5
 8012356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012358:	4620      	mov	r0, r4
 801235a:	6859      	ldr	r1, [r3, #4]
 801235c:	f7ff f816 	bl	801138c <_Balloc>
 8012360:	9005      	str	r0, [sp, #20]
 8012362:	2800      	cmp	r0, #0
 8012364:	f43f af18 	beq.w	8012198 <_strtod_l+0x480>
 8012368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801236a:	691a      	ldr	r2, [r3, #16]
 801236c:	3202      	adds	r2, #2
 801236e:	f103 010c 	add.w	r1, r3, #12
 8012372:	0092      	lsls	r2, r2, #2
 8012374:	300c      	adds	r0, #12
 8012376:	f7fe f85d 	bl	8010434 <memcpy>
 801237a:	ab18      	add	r3, sp, #96	; 0x60
 801237c:	9301      	str	r3, [sp, #4]
 801237e:	ab17      	add	r3, sp, #92	; 0x5c
 8012380:	9300      	str	r3, [sp, #0]
 8012382:	4642      	mov	r2, r8
 8012384:	464b      	mov	r3, r9
 8012386:	4620      	mov	r0, r4
 8012388:	f7ff fbd6 	bl	8011b38 <__d2b>
 801238c:	ec49 8b18 	vmov	d8, r8, r9
 8012390:	9016      	str	r0, [sp, #88]	; 0x58
 8012392:	2800      	cmp	r0, #0
 8012394:	f43f af00 	beq.w	8012198 <_strtod_l+0x480>
 8012398:	2101      	movs	r1, #1
 801239a:	4620      	mov	r0, r4
 801239c:	f7ff f936 	bl	801160c <__i2b>
 80123a0:	4683      	mov	fp, r0
 80123a2:	2800      	cmp	r0, #0
 80123a4:	f43f aef8 	beq.w	8012198 <_strtod_l+0x480>
 80123a8:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80123aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80123ac:	2e00      	cmp	r6, #0
 80123ae:	bfab      	itete	ge
 80123b0:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80123b2:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80123b4:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80123b6:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80123ba:	bfac      	ite	ge
 80123bc:	eb06 0a03 	addge.w	sl, r6, r3
 80123c0:	1b9f      	sublt	r7, r3, r6
 80123c2:	9b04      	ldr	r3, [sp, #16]
 80123c4:	1af6      	subs	r6, r6, r3
 80123c6:	4416      	add	r6, r2
 80123c8:	4ba0      	ldr	r3, [pc, #640]	; (801264c <_strtod_l+0x934>)
 80123ca:	3e01      	subs	r6, #1
 80123cc:	429e      	cmp	r6, r3
 80123ce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80123d2:	f280 80c4 	bge.w	801255e <_strtod_l+0x846>
 80123d6:	1b9b      	subs	r3, r3, r6
 80123d8:	2b1f      	cmp	r3, #31
 80123da:	eba2 0203 	sub.w	r2, r2, r3
 80123de:	f04f 0101 	mov.w	r1, #1
 80123e2:	f300 80b0 	bgt.w	8012546 <_strtod_l+0x82e>
 80123e6:	fa01 f303 	lsl.w	r3, r1, r3
 80123ea:	930e      	str	r3, [sp, #56]	; 0x38
 80123ec:	2300      	movs	r3, #0
 80123ee:	930d      	str	r3, [sp, #52]	; 0x34
 80123f0:	eb0a 0602 	add.w	r6, sl, r2
 80123f4:	9b04      	ldr	r3, [sp, #16]
 80123f6:	45b2      	cmp	sl, r6
 80123f8:	4417      	add	r7, r2
 80123fa:	441f      	add	r7, r3
 80123fc:	4653      	mov	r3, sl
 80123fe:	bfa8      	it	ge
 8012400:	4633      	movge	r3, r6
 8012402:	42bb      	cmp	r3, r7
 8012404:	bfa8      	it	ge
 8012406:	463b      	movge	r3, r7
 8012408:	2b00      	cmp	r3, #0
 801240a:	bfc2      	ittt	gt
 801240c:	1af6      	subgt	r6, r6, r3
 801240e:	1aff      	subgt	r7, r7, r3
 8012410:	ebaa 0a03 	subgt.w	sl, sl, r3
 8012414:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012416:	2b00      	cmp	r3, #0
 8012418:	dd17      	ble.n	801244a <_strtod_l+0x732>
 801241a:	4659      	mov	r1, fp
 801241c:	461a      	mov	r2, r3
 801241e:	4620      	mov	r0, r4
 8012420:	f7ff f9b4 	bl	801178c <__pow5mult>
 8012424:	4683      	mov	fp, r0
 8012426:	2800      	cmp	r0, #0
 8012428:	f43f aeb6 	beq.w	8012198 <_strtod_l+0x480>
 801242c:	4601      	mov	r1, r0
 801242e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012430:	4620      	mov	r0, r4
 8012432:	f7ff f901 	bl	8011638 <__multiply>
 8012436:	900b      	str	r0, [sp, #44]	; 0x2c
 8012438:	2800      	cmp	r0, #0
 801243a:	f43f aead 	beq.w	8012198 <_strtod_l+0x480>
 801243e:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012440:	4620      	mov	r0, r4
 8012442:	f7fe ffe3 	bl	801140c <_Bfree>
 8012446:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012448:	9316      	str	r3, [sp, #88]	; 0x58
 801244a:	2e00      	cmp	r6, #0
 801244c:	f300 808c 	bgt.w	8012568 <_strtod_l+0x850>
 8012450:	9b08      	ldr	r3, [sp, #32]
 8012452:	2b00      	cmp	r3, #0
 8012454:	dd08      	ble.n	8012468 <_strtod_l+0x750>
 8012456:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012458:	9905      	ldr	r1, [sp, #20]
 801245a:	4620      	mov	r0, r4
 801245c:	f7ff f996 	bl	801178c <__pow5mult>
 8012460:	9005      	str	r0, [sp, #20]
 8012462:	2800      	cmp	r0, #0
 8012464:	f43f ae98 	beq.w	8012198 <_strtod_l+0x480>
 8012468:	2f00      	cmp	r7, #0
 801246a:	dd08      	ble.n	801247e <_strtod_l+0x766>
 801246c:	9905      	ldr	r1, [sp, #20]
 801246e:	463a      	mov	r2, r7
 8012470:	4620      	mov	r0, r4
 8012472:	f7ff f9e5 	bl	8011840 <__lshift>
 8012476:	9005      	str	r0, [sp, #20]
 8012478:	2800      	cmp	r0, #0
 801247a:	f43f ae8d 	beq.w	8012198 <_strtod_l+0x480>
 801247e:	f1ba 0f00 	cmp.w	sl, #0
 8012482:	dd08      	ble.n	8012496 <_strtod_l+0x77e>
 8012484:	4659      	mov	r1, fp
 8012486:	4652      	mov	r2, sl
 8012488:	4620      	mov	r0, r4
 801248a:	f7ff f9d9 	bl	8011840 <__lshift>
 801248e:	4683      	mov	fp, r0
 8012490:	2800      	cmp	r0, #0
 8012492:	f43f ae81 	beq.w	8012198 <_strtod_l+0x480>
 8012496:	9a05      	ldr	r2, [sp, #20]
 8012498:	9916      	ldr	r1, [sp, #88]	; 0x58
 801249a:	4620      	mov	r0, r4
 801249c:	f7ff fa58 	bl	8011950 <__mdiff>
 80124a0:	4605      	mov	r5, r0
 80124a2:	2800      	cmp	r0, #0
 80124a4:	f43f ae78 	beq.w	8012198 <_strtod_l+0x480>
 80124a8:	68c3      	ldr	r3, [r0, #12]
 80124aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80124ac:	2300      	movs	r3, #0
 80124ae:	60c3      	str	r3, [r0, #12]
 80124b0:	4659      	mov	r1, fp
 80124b2:	f7ff fa31 	bl	8011918 <__mcmp>
 80124b6:	2800      	cmp	r0, #0
 80124b8:	da60      	bge.n	801257c <_strtod_l+0x864>
 80124ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80124bc:	ea53 0308 	orrs.w	r3, r3, r8
 80124c0:	f040 8084 	bne.w	80125cc <_strtod_l+0x8b4>
 80124c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d17f      	bne.n	80125cc <_strtod_l+0x8b4>
 80124cc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80124d0:	0d1b      	lsrs	r3, r3, #20
 80124d2:	051b      	lsls	r3, r3, #20
 80124d4:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80124d8:	d978      	bls.n	80125cc <_strtod_l+0x8b4>
 80124da:	696b      	ldr	r3, [r5, #20]
 80124dc:	b913      	cbnz	r3, 80124e4 <_strtod_l+0x7cc>
 80124de:	692b      	ldr	r3, [r5, #16]
 80124e0:	2b01      	cmp	r3, #1
 80124e2:	dd73      	ble.n	80125cc <_strtod_l+0x8b4>
 80124e4:	4629      	mov	r1, r5
 80124e6:	2201      	movs	r2, #1
 80124e8:	4620      	mov	r0, r4
 80124ea:	f7ff f9a9 	bl	8011840 <__lshift>
 80124ee:	4659      	mov	r1, fp
 80124f0:	4605      	mov	r5, r0
 80124f2:	f7ff fa11 	bl	8011918 <__mcmp>
 80124f6:	2800      	cmp	r0, #0
 80124f8:	dd68      	ble.n	80125cc <_strtod_l+0x8b4>
 80124fa:	9904      	ldr	r1, [sp, #16]
 80124fc:	4a54      	ldr	r2, [pc, #336]	; (8012650 <_strtod_l+0x938>)
 80124fe:	464b      	mov	r3, r9
 8012500:	2900      	cmp	r1, #0
 8012502:	f000 8084 	beq.w	801260e <_strtod_l+0x8f6>
 8012506:	ea02 0109 	and.w	r1, r2, r9
 801250a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801250e:	dc7e      	bgt.n	801260e <_strtod_l+0x8f6>
 8012510:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8012514:	f77f aeb1 	ble.w	801227a <_strtod_l+0x562>
 8012518:	4b4e      	ldr	r3, [pc, #312]	; (8012654 <_strtod_l+0x93c>)
 801251a:	4640      	mov	r0, r8
 801251c:	4649      	mov	r1, r9
 801251e:	2200      	movs	r2, #0
 8012520:	f7ee f88a 	bl	8000638 <__aeabi_dmul>
 8012524:	4b4a      	ldr	r3, [pc, #296]	; (8012650 <_strtod_l+0x938>)
 8012526:	400b      	ands	r3, r1
 8012528:	4680      	mov	r8, r0
 801252a:	4689      	mov	r9, r1
 801252c:	2b00      	cmp	r3, #0
 801252e:	f47f ae3d 	bne.w	80121ac <_strtod_l+0x494>
 8012532:	2322      	movs	r3, #34	; 0x22
 8012534:	6023      	str	r3, [r4, #0]
 8012536:	e639      	b.n	80121ac <_strtod_l+0x494>
 8012538:	f04f 32ff 	mov.w	r2, #4294967295
 801253c:	fa02 f303 	lsl.w	r3, r2, r3
 8012540:	ea03 0808 	and.w	r8, r3, r8
 8012544:	e6e6      	b.n	8012314 <_strtod_l+0x5fc>
 8012546:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801254a:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801254e:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8012552:	36e2      	adds	r6, #226	; 0xe2
 8012554:	fa01 f306 	lsl.w	r3, r1, r6
 8012558:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 801255c:	e748      	b.n	80123f0 <_strtod_l+0x6d8>
 801255e:	2100      	movs	r1, #0
 8012560:	2301      	movs	r3, #1
 8012562:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8012566:	e743      	b.n	80123f0 <_strtod_l+0x6d8>
 8012568:	9916      	ldr	r1, [sp, #88]	; 0x58
 801256a:	4632      	mov	r2, r6
 801256c:	4620      	mov	r0, r4
 801256e:	f7ff f967 	bl	8011840 <__lshift>
 8012572:	9016      	str	r0, [sp, #88]	; 0x58
 8012574:	2800      	cmp	r0, #0
 8012576:	f47f af6b 	bne.w	8012450 <_strtod_l+0x738>
 801257a:	e60d      	b.n	8012198 <_strtod_l+0x480>
 801257c:	46ca      	mov	sl, r9
 801257e:	d171      	bne.n	8012664 <_strtod_l+0x94c>
 8012580:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012582:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012586:	b352      	cbz	r2, 80125de <_strtod_l+0x8c6>
 8012588:	4a33      	ldr	r2, [pc, #204]	; (8012658 <_strtod_l+0x940>)
 801258a:	4293      	cmp	r3, r2
 801258c:	d12a      	bne.n	80125e4 <_strtod_l+0x8cc>
 801258e:	9b04      	ldr	r3, [sp, #16]
 8012590:	4641      	mov	r1, r8
 8012592:	b1fb      	cbz	r3, 80125d4 <_strtod_l+0x8bc>
 8012594:	4b2e      	ldr	r3, [pc, #184]	; (8012650 <_strtod_l+0x938>)
 8012596:	ea09 0303 	and.w	r3, r9, r3
 801259a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801259e:	f04f 32ff 	mov.w	r2, #4294967295
 80125a2:	d81a      	bhi.n	80125da <_strtod_l+0x8c2>
 80125a4:	0d1b      	lsrs	r3, r3, #20
 80125a6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80125aa:	fa02 f303 	lsl.w	r3, r2, r3
 80125ae:	4299      	cmp	r1, r3
 80125b0:	d118      	bne.n	80125e4 <_strtod_l+0x8cc>
 80125b2:	4b2a      	ldr	r3, [pc, #168]	; (801265c <_strtod_l+0x944>)
 80125b4:	459a      	cmp	sl, r3
 80125b6:	d102      	bne.n	80125be <_strtod_l+0x8a6>
 80125b8:	3101      	adds	r1, #1
 80125ba:	f43f aded 	beq.w	8012198 <_strtod_l+0x480>
 80125be:	4b24      	ldr	r3, [pc, #144]	; (8012650 <_strtod_l+0x938>)
 80125c0:	ea0a 0303 	and.w	r3, sl, r3
 80125c4:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80125c8:	f04f 0800 	mov.w	r8, #0
 80125cc:	9b04      	ldr	r3, [sp, #16]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d1a2      	bne.n	8012518 <_strtod_l+0x800>
 80125d2:	e5eb      	b.n	80121ac <_strtod_l+0x494>
 80125d4:	f04f 33ff 	mov.w	r3, #4294967295
 80125d8:	e7e9      	b.n	80125ae <_strtod_l+0x896>
 80125da:	4613      	mov	r3, r2
 80125dc:	e7e7      	b.n	80125ae <_strtod_l+0x896>
 80125de:	ea53 0308 	orrs.w	r3, r3, r8
 80125e2:	d08a      	beq.n	80124fa <_strtod_l+0x7e2>
 80125e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80125e6:	b1e3      	cbz	r3, 8012622 <_strtod_l+0x90a>
 80125e8:	ea13 0f0a 	tst.w	r3, sl
 80125ec:	d0ee      	beq.n	80125cc <_strtod_l+0x8b4>
 80125ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80125f0:	9a04      	ldr	r2, [sp, #16]
 80125f2:	4640      	mov	r0, r8
 80125f4:	4649      	mov	r1, r9
 80125f6:	b1c3      	cbz	r3, 801262a <_strtod_l+0x912>
 80125f8:	f7ff fb6a 	bl	8011cd0 <sulp>
 80125fc:	4602      	mov	r2, r0
 80125fe:	460b      	mov	r3, r1
 8012600:	ec51 0b18 	vmov	r0, r1, d8
 8012604:	f7ed fe62 	bl	80002cc <__adddf3>
 8012608:	4680      	mov	r8, r0
 801260a:	4689      	mov	r9, r1
 801260c:	e7de      	b.n	80125cc <_strtod_l+0x8b4>
 801260e:	4013      	ands	r3, r2
 8012610:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8012614:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8012618:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801261c:	f04f 38ff 	mov.w	r8, #4294967295
 8012620:	e7d4      	b.n	80125cc <_strtod_l+0x8b4>
 8012622:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012624:	ea13 0f08 	tst.w	r3, r8
 8012628:	e7e0      	b.n	80125ec <_strtod_l+0x8d4>
 801262a:	f7ff fb51 	bl	8011cd0 <sulp>
 801262e:	4602      	mov	r2, r0
 8012630:	460b      	mov	r3, r1
 8012632:	ec51 0b18 	vmov	r0, r1, d8
 8012636:	f7ed fe47 	bl	80002c8 <__aeabi_dsub>
 801263a:	2200      	movs	r2, #0
 801263c:	2300      	movs	r3, #0
 801263e:	4680      	mov	r8, r0
 8012640:	4689      	mov	r9, r1
 8012642:	f7ee fa61 	bl	8000b08 <__aeabi_dcmpeq>
 8012646:	2800      	cmp	r0, #0
 8012648:	d0c0      	beq.n	80125cc <_strtod_l+0x8b4>
 801264a:	e616      	b.n	801227a <_strtod_l+0x562>
 801264c:	fffffc02 	.word	0xfffffc02
 8012650:	7ff00000 	.word	0x7ff00000
 8012654:	39500000 	.word	0x39500000
 8012658:	000fffff 	.word	0x000fffff
 801265c:	7fefffff 	.word	0x7fefffff
 8012660:	08014c00 	.word	0x08014c00
 8012664:	4659      	mov	r1, fp
 8012666:	4628      	mov	r0, r5
 8012668:	f7ff fac0 	bl	8011bec <__ratio>
 801266c:	2200      	movs	r2, #0
 801266e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012672:	4606      	mov	r6, r0
 8012674:	460f      	mov	r7, r1
 8012676:	f7ee fa5b 	bl	8000b30 <__aeabi_dcmple>
 801267a:	2800      	cmp	r0, #0
 801267c:	d06f      	beq.n	801275e <_strtod_l+0xa46>
 801267e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012680:	2b00      	cmp	r3, #0
 8012682:	d17a      	bne.n	801277a <_strtod_l+0xa62>
 8012684:	f1b8 0f00 	cmp.w	r8, #0
 8012688:	d158      	bne.n	801273c <_strtod_l+0xa24>
 801268a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801268e:	2b00      	cmp	r3, #0
 8012690:	d15b      	bne.n	801274a <_strtod_l+0xa32>
 8012692:	4b8f      	ldr	r3, [pc, #572]	; (80128d0 <_strtod_l+0xbb8>)
 8012694:	2200      	movs	r2, #0
 8012696:	4630      	mov	r0, r6
 8012698:	4639      	mov	r1, r7
 801269a:	f7ee fa3f 	bl	8000b1c <__aeabi_dcmplt>
 801269e:	2800      	cmp	r0, #0
 80126a0:	d15a      	bne.n	8012758 <_strtod_l+0xa40>
 80126a2:	4630      	mov	r0, r6
 80126a4:	4639      	mov	r1, r7
 80126a6:	4b8b      	ldr	r3, [pc, #556]	; (80128d4 <_strtod_l+0xbbc>)
 80126a8:	2200      	movs	r2, #0
 80126aa:	f7ed ffc5 	bl	8000638 <__aeabi_dmul>
 80126ae:	4606      	mov	r6, r0
 80126b0:	460f      	mov	r7, r1
 80126b2:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80126b6:	9606      	str	r6, [sp, #24]
 80126b8:	9307      	str	r3, [sp, #28]
 80126ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80126be:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80126c2:	4b85      	ldr	r3, [pc, #532]	; (80128d8 <_strtod_l+0xbc0>)
 80126c4:	ea0a 0303 	and.w	r3, sl, r3
 80126c8:	930d      	str	r3, [sp, #52]	; 0x34
 80126ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80126cc:	4b83      	ldr	r3, [pc, #524]	; (80128dc <_strtod_l+0xbc4>)
 80126ce:	429a      	cmp	r2, r3
 80126d0:	f040 808e 	bne.w	80127f0 <_strtod_l+0xad8>
 80126d4:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80126d8:	4640      	mov	r0, r8
 80126da:	4649      	mov	r1, r9
 80126dc:	f7ff f9c2 	bl	8011a64 <__ulp>
 80126e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80126e4:	f7ed ffa8 	bl	8000638 <__aeabi_dmul>
 80126e8:	4642      	mov	r2, r8
 80126ea:	464b      	mov	r3, r9
 80126ec:	f7ed fdee 	bl	80002cc <__adddf3>
 80126f0:	460b      	mov	r3, r1
 80126f2:	4979      	ldr	r1, [pc, #484]	; (80128d8 <_strtod_l+0xbc0>)
 80126f4:	4a7a      	ldr	r2, [pc, #488]	; (80128e0 <_strtod_l+0xbc8>)
 80126f6:	4019      	ands	r1, r3
 80126f8:	4291      	cmp	r1, r2
 80126fa:	4680      	mov	r8, r0
 80126fc:	d944      	bls.n	8012788 <_strtod_l+0xa70>
 80126fe:	ee18 2a90 	vmov	r2, s17
 8012702:	4b78      	ldr	r3, [pc, #480]	; (80128e4 <_strtod_l+0xbcc>)
 8012704:	429a      	cmp	r2, r3
 8012706:	d104      	bne.n	8012712 <_strtod_l+0x9fa>
 8012708:	ee18 3a10 	vmov	r3, s16
 801270c:	3301      	adds	r3, #1
 801270e:	f43f ad43 	beq.w	8012198 <_strtod_l+0x480>
 8012712:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80128e4 <_strtod_l+0xbcc>
 8012716:	f04f 38ff 	mov.w	r8, #4294967295
 801271a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801271c:	4620      	mov	r0, r4
 801271e:	f7fe fe75 	bl	801140c <_Bfree>
 8012722:	9905      	ldr	r1, [sp, #20]
 8012724:	4620      	mov	r0, r4
 8012726:	f7fe fe71 	bl	801140c <_Bfree>
 801272a:	4659      	mov	r1, fp
 801272c:	4620      	mov	r0, r4
 801272e:	f7fe fe6d 	bl	801140c <_Bfree>
 8012732:	4629      	mov	r1, r5
 8012734:	4620      	mov	r0, r4
 8012736:	f7fe fe69 	bl	801140c <_Bfree>
 801273a:	e60c      	b.n	8012356 <_strtod_l+0x63e>
 801273c:	f1b8 0f01 	cmp.w	r8, #1
 8012740:	d103      	bne.n	801274a <_strtod_l+0xa32>
 8012742:	f1b9 0f00 	cmp.w	r9, #0
 8012746:	f43f ad98 	beq.w	801227a <_strtod_l+0x562>
 801274a:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80128a0 <_strtod_l+0xb88>
 801274e:	4f60      	ldr	r7, [pc, #384]	; (80128d0 <_strtod_l+0xbb8>)
 8012750:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012754:	2600      	movs	r6, #0
 8012756:	e7b0      	b.n	80126ba <_strtod_l+0x9a2>
 8012758:	4f5e      	ldr	r7, [pc, #376]	; (80128d4 <_strtod_l+0xbbc>)
 801275a:	2600      	movs	r6, #0
 801275c:	e7a9      	b.n	80126b2 <_strtod_l+0x99a>
 801275e:	4b5d      	ldr	r3, [pc, #372]	; (80128d4 <_strtod_l+0xbbc>)
 8012760:	4630      	mov	r0, r6
 8012762:	4639      	mov	r1, r7
 8012764:	2200      	movs	r2, #0
 8012766:	f7ed ff67 	bl	8000638 <__aeabi_dmul>
 801276a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801276c:	4606      	mov	r6, r0
 801276e:	460f      	mov	r7, r1
 8012770:	2b00      	cmp	r3, #0
 8012772:	d09e      	beq.n	80126b2 <_strtod_l+0x99a>
 8012774:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8012778:	e79f      	b.n	80126ba <_strtod_l+0x9a2>
 801277a:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80128a8 <_strtod_l+0xb90>
 801277e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012782:	ec57 6b17 	vmov	r6, r7, d7
 8012786:	e798      	b.n	80126ba <_strtod_l+0x9a2>
 8012788:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801278c:	9b04      	ldr	r3, [sp, #16]
 801278e:	46ca      	mov	sl, r9
 8012790:	2b00      	cmp	r3, #0
 8012792:	d1c2      	bne.n	801271a <_strtod_l+0xa02>
 8012794:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012798:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801279a:	0d1b      	lsrs	r3, r3, #20
 801279c:	051b      	lsls	r3, r3, #20
 801279e:	429a      	cmp	r2, r3
 80127a0:	d1bb      	bne.n	801271a <_strtod_l+0xa02>
 80127a2:	4630      	mov	r0, r6
 80127a4:	4639      	mov	r1, r7
 80127a6:	f7ee faa7 	bl	8000cf8 <__aeabi_d2lz>
 80127aa:	f7ed ff17 	bl	80005dc <__aeabi_l2d>
 80127ae:	4602      	mov	r2, r0
 80127b0:	460b      	mov	r3, r1
 80127b2:	4630      	mov	r0, r6
 80127b4:	4639      	mov	r1, r7
 80127b6:	f7ed fd87 	bl	80002c8 <__aeabi_dsub>
 80127ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80127bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80127c0:	ea43 0308 	orr.w	r3, r3, r8
 80127c4:	4313      	orrs	r3, r2
 80127c6:	4606      	mov	r6, r0
 80127c8:	460f      	mov	r7, r1
 80127ca:	d050      	beq.n	801286e <_strtod_l+0xb56>
 80127cc:	a338      	add	r3, pc, #224	; (adr r3, 80128b0 <_strtod_l+0xb98>)
 80127ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127d2:	f7ee f9a3 	bl	8000b1c <__aeabi_dcmplt>
 80127d6:	2800      	cmp	r0, #0
 80127d8:	f47f ace8 	bne.w	80121ac <_strtod_l+0x494>
 80127dc:	a336      	add	r3, pc, #216	; (adr r3, 80128b8 <_strtod_l+0xba0>)
 80127de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127e2:	4630      	mov	r0, r6
 80127e4:	4639      	mov	r1, r7
 80127e6:	f7ee f9b7 	bl	8000b58 <__aeabi_dcmpgt>
 80127ea:	2800      	cmp	r0, #0
 80127ec:	d095      	beq.n	801271a <_strtod_l+0xa02>
 80127ee:	e4dd      	b.n	80121ac <_strtod_l+0x494>
 80127f0:	9b04      	ldr	r3, [sp, #16]
 80127f2:	b333      	cbz	r3, 8012842 <_strtod_l+0xb2a>
 80127f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80127f6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80127fa:	d822      	bhi.n	8012842 <_strtod_l+0xb2a>
 80127fc:	a330      	add	r3, pc, #192	; (adr r3, 80128c0 <_strtod_l+0xba8>)
 80127fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012802:	4630      	mov	r0, r6
 8012804:	4639      	mov	r1, r7
 8012806:	f7ee f993 	bl	8000b30 <__aeabi_dcmple>
 801280a:	b1a0      	cbz	r0, 8012836 <_strtod_l+0xb1e>
 801280c:	4639      	mov	r1, r7
 801280e:	4630      	mov	r0, r6
 8012810:	f7ee f9ea 	bl	8000be8 <__aeabi_d2uiz>
 8012814:	2801      	cmp	r0, #1
 8012816:	bf38      	it	cc
 8012818:	2001      	movcc	r0, #1
 801281a:	f7ed fe93 	bl	8000544 <__aeabi_ui2d>
 801281e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012820:	4606      	mov	r6, r0
 8012822:	460f      	mov	r7, r1
 8012824:	bb03      	cbnz	r3, 8012868 <_strtod_l+0xb50>
 8012826:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801282a:	9010      	str	r0, [sp, #64]	; 0x40
 801282c:	9311      	str	r3, [sp, #68]	; 0x44
 801282e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012832:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8012836:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012838:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801283a:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801283e:	1a9b      	subs	r3, r3, r2
 8012840:	930f      	str	r3, [sp, #60]	; 0x3c
 8012842:	ec51 0b18 	vmov	r0, r1, d8
 8012846:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 801284a:	f7ff f90b 	bl	8011a64 <__ulp>
 801284e:	4602      	mov	r2, r0
 8012850:	460b      	mov	r3, r1
 8012852:	4640      	mov	r0, r8
 8012854:	4649      	mov	r1, r9
 8012856:	f7ed feef 	bl	8000638 <__aeabi_dmul>
 801285a:	ec53 2b18 	vmov	r2, r3, d8
 801285e:	f7ed fd35 	bl	80002cc <__adddf3>
 8012862:	4680      	mov	r8, r0
 8012864:	4689      	mov	r9, r1
 8012866:	e791      	b.n	801278c <_strtod_l+0xa74>
 8012868:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801286c:	e7df      	b.n	801282e <_strtod_l+0xb16>
 801286e:	a316      	add	r3, pc, #88	; (adr r3, 80128c8 <_strtod_l+0xbb0>)
 8012870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012874:	f7ee f952 	bl	8000b1c <__aeabi_dcmplt>
 8012878:	e7b7      	b.n	80127ea <_strtod_l+0xad2>
 801287a:	2300      	movs	r3, #0
 801287c:	930a      	str	r3, [sp, #40]	; 0x28
 801287e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012880:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012882:	6013      	str	r3, [r2, #0]
 8012884:	f7ff ba87 	b.w	8011d96 <_strtod_l+0x7e>
 8012888:	2a65      	cmp	r2, #101	; 0x65
 801288a:	f43f ab7e 	beq.w	8011f8a <_strtod_l+0x272>
 801288e:	2a45      	cmp	r2, #69	; 0x45
 8012890:	f43f ab7b 	beq.w	8011f8a <_strtod_l+0x272>
 8012894:	2301      	movs	r3, #1
 8012896:	f7ff bbb3 	b.w	8012000 <_strtod_l+0x2e8>
 801289a:	bf00      	nop
 801289c:	f3af 8000 	nop.w
 80128a0:	00000000 	.word	0x00000000
 80128a4:	bff00000 	.word	0xbff00000
 80128a8:	00000000 	.word	0x00000000
 80128ac:	3ff00000 	.word	0x3ff00000
 80128b0:	94a03595 	.word	0x94a03595
 80128b4:	3fdfffff 	.word	0x3fdfffff
 80128b8:	35afe535 	.word	0x35afe535
 80128bc:	3fe00000 	.word	0x3fe00000
 80128c0:	ffc00000 	.word	0xffc00000
 80128c4:	41dfffff 	.word	0x41dfffff
 80128c8:	94a03595 	.word	0x94a03595
 80128cc:	3fcfffff 	.word	0x3fcfffff
 80128d0:	3ff00000 	.word	0x3ff00000
 80128d4:	3fe00000 	.word	0x3fe00000
 80128d8:	7ff00000 	.word	0x7ff00000
 80128dc:	7fe00000 	.word	0x7fe00000
 80128e0:	7c9fffff 	.word	0x7c9fffff
 80128e4:	7fefffff 	.word	0x7fefffff

080128e8 <_strtod_r>:
 80128e8:	4b01      	ldr	r3, [pc, #4]	; (80128f0 <_strtod_r+0x8>)
 80128ea:	f7ff ba15 	b.w	8011d18 <_strtod_l>
 80128ee:	bf00      	nop
 80128f0:	200000d4 	.word	0x200000d4

080128f4 <__ssputs_r>:
 80128f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80128f8:	688e      	ldr	r6, [r1, #8]
 80128fa:	461f      	mov	r7, r3
 80128fc:	42be      	cmp	r6, r7
 80128fe:	680b      	ldr	r3, [r1, #0]
 8012900:	4682      	mov	sl, r0
 8012902:	460c      	mov	r4, r1
 8012904:	4690      	mov	r8, r2
 8012906:	d82c      	bhi.n	8012962 <__ssputs_r+0x6e>
 8012908:	898a      	ldrh	r2, [r1, #12]
 801290a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801290e:	d026      	beq.n	801295e <__ssputs_r+0x6a>
 8012910:	6965      	ldr	r5, [r4, #20]
 8012912:	6909      	ldr	r1, [r1, #16]
 8012914:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012918:	eba3 0901 	sub.w	r9, r3, r1
 801291c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012920:	1c7b      	adds	r3, r7, #1
 8012922:	444b      	add	r3, r9
 8012924:	106d      	asrs	r5, r5, #1
 8012926:	429d      	cmp	r5, r3
 8012928:	bf38      	it	cc
 801292a:	461d      	movcc	r5, r3
 801292c:	0553      	lsls	r3, r2, #21
 801292e:	d527      	bpl.n	8012980 <__ssputs_r+0x8c>
 8012930:	4629      	mov	r1, r5
 8012932:	f7fe fc9f 	bl	8011274 <_malloc_r>
 8012936:	4606      	mov	r6, r0
 8012938:	b360      	cbz	r0, 8012994 <__ssputs_r+0xa0>
 801293a:	6921      	ldr	r1, [r4, #16]
 801293c:	464a      	mov	r2, r9
 801293e:	f7fd fd79 	bl	8010434 <memcpy>
 8012942:	89a3      	ldrh	r3, [r4, #12]
 8012944:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801294c:	81a3      	strh	r3, [r4, #12]
 801294e:	6126      	str	r6, [r4, #16]
 8012950:	6165      	str	r5, [r4, #20]
 8012952:	444e      	add	r6, r9
 8012954:	eba5 0509 	sub.w	r5, r5, r9
 8012958:	6026      	str	r6, [r4, #0]
 801295a:	60a5      	str	r5, [r4, #8]
 801295c:	463e      	mov	r6, r7
 801295e:	42be      	cmp	r6, r7
 8012960:	d900      	bls.n	8012964 <__ssputs_r+0x70>
 8012962:	463e      	mov	r6, r7
 8012964:	6820      	ldr	r0, [r4, #0]
 8012966:	4632      	mov	r2, r6
 8012968:	4641      	mov	r1, r8
 801296a:	f000 fb81 	bl	8013070 <memmove>
 801296e:	68a3      	ldr	r3, [r4, #8]
 8012970:	1b9b      	subs	r3, r3, r6
 8012972:	60a3      	str	r3, [r4, #8]
 8012974:	6823      	ldr	r3, [r4, #0]
 8012976:	4433      	add	r3, r6
 8012978:	6023      	str	r3, [r4, #0]
 801297a:	2000      	movs	r0, #0
 801297c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012980:	462a      	mov	r2, r5
 8012982:	f000 ff5e 	bl	8013842 <_realloc_r>
 8012986:	4606      	mov	r6, r0
 8012988:	2800      	cmp	r0, #0
 801298a:	d1e0      	bne.n	801294e <__ssputs_r+0x5a>
 801298c:	6921      	ldr	r1, [r4, #16]
 801298e:	4650      	mov	r0, sl
 8012990:	f7fe fbfc 	bl	801118c <_free_r>
 8012994:	230c      	movs	r3, #12
 8012996:	f8ca 3000 	str.w	r3, [sl]
 801299a:	89a3      	ldrh	r3, [r4, #12]
 801299c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80129a0:	81a3      	strh	r3, [r4, #12]
 80129a2:	f04f 30ff 	mov.w	r0, #4294967295
 80129a6:	e7e9      	b.n	801297c <__ssputs_r+0x88>

080129a8 <_svfiprintf_r>:
 80129a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129ac:	4698      	mov	r8, r3
 80129ae:	898b      	ldrh	r3, [r1, #12]
 80129b0:	061b      	lsls	r3, r3, #24
 80129b2:	b09d      	sub	sp, #116	; 0x74
 80129b4:	4607      	mov	r7, r0
 80129b6:	460d      	mov	r5, r1
 80129b8:	4614      	mov	r4, r2
 80129ba:	d50e      	bpl.n	80129da <_svfiprintf_r+0x32>
 80129bc:	690b      	ldr	r3, [r1, #16]
 80129be:	b963      	cbnz	r3, 80129da <_svfiprintf_r+0x32>
 80129c0:	2140      	movs	r1, #64	; 0x40
 80129c2:	f7fe fc57 	bl	8011274 <_malloc_r>
 80129c6:	6028      	str	r0, [r5, #0]
 80129c8:	6128      	str	r0, [r5, #16]
 80129ca:	b920      	cbnz	r0, 80129d6 <_svfiprintf_r+0x2e>
 80129cc:	230c      	movs	r3, #12
 80129ce:	603b      	str	r3, [r7, #0]
 80129d0:	f04f 30ff 	mov.w	r0, #4294967295
 80129d4:	e0d0      	b.n	8012b78 <_svfiprintf_r+0x1d0>
 80129d6:	2340      	movs	r3, #64	; 0x40
 80129d8:	616b      	str	r3, [r5, #20]
 80129da:	2300      	movs	r3, #0
 80129dc:	9309      	str	r3, [sp, #36]	; 0x24
 80129de:	2320      	movs	r3, #32
 80129e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80129e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80129e8:	2330      	movs	r3, #48	; 0x30
 80129ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8012b90 <_svfiprintf_r+0x1e8>
 80129ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80129f2:	f04f 0901 	mov.w	r9, #1
 80129f6:	4623      	mov	r3, r4
 80129f8:	469a      	mov	sl, r3
 80129fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80129fe:	b10a      	cbz	r2, 8012a04 <_svfiprintf_r+0x5c>
 8012a00:	2a25      	cmp	r2, #37	; 0x25
 8012a02:	d1f9      	bne.n	80129f8 <_svfiprintf_r+0x50>
 8012a04:	ebba 0b04 	subs.w	fp, sl, r4
 8012a08:	d00b      	beq.n	8012a22 <_svfiprintf_r+0x7a>
 8012a0a:	465b      	mov	r3, fp
 8012a0c:	4622      	mov	r2, r4
 8012a0e:	4629      	mov	r1, r5
 8012a10:	4638      	mov	r0, r7
 8012a12:	f7ff ff6f 	bl	80128f4 <__ssputs_r>
 8012a16:	3001      	adds	r0, #1
 8012a18:	f000 80a9 	beq.w	8012b6e <_svfiprintf_r+0x1c6>
 8012a1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012a1e:	445a      	add	r2, fp
 8012a20:	9209      	str	r2, [sp, #36]	; 0x24
 8012a22:	f89a 3000 	ldrb.w	r3, [sl]
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	f000 80a1 	beq.w	8012b6e <_svfiprintf_r+0x1c6>
 8012a2c:	2300      	movs	r3, #0
 8012a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8012a32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012a36:	f10a 0a01 	add.w	sl, sl, #1
 8012a3a:	9304      	str	r3, [sp, #16]
 8012a3c:	9307      	str	r3, [sp, #28]
 8012a3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012a42:	931a      	str	r3, [sp, #104]	; 0x68
 8012a44:	4654      	mov	r4, sl
 8012a46:	2205      	movs	r2, #5
 8012a48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a4c:	4850      	ldr	r0, [pc, #320]	; (8012b90 <_svfiprintf_r+0x1e8>)
 8012a4e:	f7ed fbdf 	bl	8000210 <memchr>
 8012a52:	9a04      	ldr	r2, [sp, #16]
 8012a54:	b9d8      	cbnz	r0, 8012a8e <_svfiprintf_r+0xe6>
 8012a56:	06d0      	lsls	r0, r2, #27
 8012a58:	bf44      	itt	mi
 8012a5a:	2320      	movmi	r3, #32
 8012a5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012a60:	0711      	lsls	r1, r2, #28
 8012a62:	bf44      	itt	mi
 8012a64:	232b      	movmi	r3, #43	; 0x2b
 8012a66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012a6a:	f89a 3000 	ldrb.w	r3, [sl]
 8012a6e:	2b2a      	cmp	r3, #42	; 0x2a
 8012a70:	d015      	beq.n	8012a9e <_svfiprintf_r+0xf6>
 8012a72:	9a07      	ldr	r2, [sp, #28]
 8012a74:	4654      	mov	r4, sl
 8012a76:	2000      	movs	r0, #0
 8012a78:	f04f 0c0a 	mov.w	ip, #10
 8012a7c:	4621      	mov	r1, r4
 8012a7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012a82:	3b30      	subs	r3, #48	; 0x30
 8012a84:	2b09      	cmp	r3, #9
 8012a86:	d94d      	bls.n	8012b24 <_svfiprintf_r+0x17c>
 8012a88:	b1b0      	cbz	r0, 8012ab8 <_svfiprintf_r+0x110>
 8012a8a:	9207      	str	r2, [sp, #28]
 8012a8c:	e014      	b.n	8012ab8 <_svfiprintf_r+0x110>
 8012a8e:	eba0 0308 	sub.w	r3, r0, r8
 8012a92:	fa09 f303 	lsl.w	r3, r9, r3
 8012a96:	4313      	orrs	r3, r2
 8012a98:	9304      	str	r3, [sp, #16]
 8012a9a:	46a2      	mov	sl, r4
 8012a9c:	e7d2      	b.n	8012a44 <_svfiprintf_r+0x9c>
 8012a9e:	9b03      	ldr	r3, [sp, #12]
 8012aa0:	1d19      	adds	r1, r3, #4
 8012aa2:	681b      	ldr	r3, [r3, #0]
 8012aa4:	9103      	str	r1, [sp, #12]
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	bfbb      	ittet	lt
 8012aaa:	425b      	neglt	r3, r3
 8012aac:	f042 0202 	orrlt.w	r2, r2, #2
 8012ab0:	9307      	strge	r3, [sp, #28]
 8012ab2:	9307      	strlt	r3, [sp, #28]
 8012ab4:	bfb8      	it	lt
 8012ab6:	9204      	strlt	r2, [sp, #16]
 8012ab8:	7823      	ldrb	r3, [r4, #0]
 8012aba:	2b2e      	cmp	r3, #46	; 0x2e
 8012abc:	d10c      	bne.n	8012ad8 <_svfiprintf_r+0x130>
 8012abe:	7863      	ldrb	r3, [r4, #1]
 8012ac0:	2b2a      	cmp	r3, #42	; 0x2a
 8012ac2:	d134      	bne.n	8012b2e <_svfiprintf_r+0x186>
 8012ac4:	9b03      	ldr	r3, [sp, #12]
 8012ac6:	1d1a      	adds	r2, r3, #4
 8012ac8:	681b      	ldr	r3, [r3, #0]
 8012aca:	9203      	str	r2, [sp, #12]
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	bfb8      	it	lt
 8012ad0:	f04f 33ff 	movlt.w	r3, #4294967295
 8012ad4:	3402      	adds	r4, #2
 8012ad6:	9305      	str	r3, [sp, #20]
 8012ad8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8012ba0 <_svfiprintf_r+0x1f8>
 8012adc:	7821      	ldrb	r1, [r4, #0]
 8012ade:	2203      	movs	r2, #3
 8012ae0:	4650      	mov	r0, sl
 8012ae2:	f7ed fb95 	bl	8000210 <memchr>
 8012ae6:	b138      	cbz	r0, 8012af8 <_svfiprintf_r+0x150>
 8012ae8:	9b04      	ldr	r3, [sp, #16]
 8012aea:	eba0 000a 	sub.w	r0, r0, sl
 8012aee:	2240      	movs	r2, #64	; 0x40
 8012af0:	4082      	lsls	r2, r0
 8012af2:	4313      	orrs	r3, r2
 8012af4:	3401      	adds	r4, #1
 8012af6:	9304      	str	r3, [sp, #16]
 8012af8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012afc:	4825      	ldr	r0, [pc, #148]	; (8012b94 <_svfiprintf_r+0x1ec>)
 8012afe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012b02:	2206      	movs	r2, #6
 8012b04:	f7ed fb84 	bl	8000210 <memchr>
 8012b08:	2800      	cmp	r0, #0
 8012b0a:	d038      	beq.n	8012b7e <_svfiprintf_r+0x1d6>
 8012b0c:	4b22      	ldr	r3, [pc, #136]	; (8012b98 <_svfiprintf_r+0x1f0>)
 8012b0e:	bb1b      	cbnz	r3, 8012b58 <_svfiprintf_r+0x1b0>
 8012b10:	9b03      	ldr	r3, [sp, #12]
 8012b12:	3307      	adds	r3, #7
 8012b14:	f023 0307 	bic.w	r3, r3, #7
 8012b18:	3308      	adds	r3, #8
 8012b1a:	9303      	str	r3, [sp, #12]
 8012b1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b1e:	4433      	add	r3, r6
 8012b20:	9309      	str	r3, [sp, #36]	; 0x24
 8012b22:	e768      	b.n	80129f6 <_svfiprintf_r+0x4e>
 8012b24:	fb0c 3202 	mla	r2, ip, r2, r3
 8012b28:	460c      	mov	r4, r1
 8012b2a:	2001      	movs	r0, #1
 8012b2c:	e7a6      	b.n	8012a7c <_svfiprintf_r+0xd4>
 8012b2e:	2300      	movs	r3, #0
 8012b30:	3401      	adds	r4, #1
 8012b32:	9305      	str	r3, [sp, #20]
 8012b34:	4619      	mov	r1, r3
 8012b36:	f04f 0c0a 	mov.w	ip, #10
 8012b3a:	4620      	mov	r0, r4
 8012b3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012b40:	3a30      	subs	r2, #48	; 0x30
 8012b42:	2a09      	cmp	r2, #9
 8012b44:	d903      	bls.n	8012b4e <_svfiprintf_r+0x1a6>
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d0c6      	beq.n	8012ad8 <_svfiprintf_r+0x130>
 8012b4a:	9105      	str	r1, [sp, #20]
 8012b4c:	e7c4      	b.n	8012ad8 <_svfiprintf_r+0x130>
 8012b4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012b52:	4604      	mov	r4, r0
 8012b54:	2301      	movs	r3, #1
 8012b56:	e7f0      	b.n	8012b3a <_svfiprintf_r+0x192>
 8012b58:	ab03      	add	r3, sp, #12
 8012b5a:	9300      	str	r3, [sp, #0]
 8012b5c:	462a      	mov	r2, r5
 8012b5e:	4b0f      	ldr	r3, [pc, #60]	; (8012b9c <_svfiprintf_r+0x1f4>)
 8012b60:	a904      	add	r1, sp, #16
 8012b62:	4638      	mov	r0, r7
 8012b64:	f7fc fbdc 	bl	800f320 <_printf_float>
 8012b68:	1c42      	adds	r2, r0, #1
 8012b6a:	4606      	mov	r6, r0
 8012b6c:	d1d6      	bne.n	8012b1c <_svfiprintf_r+0x174>
 8012b6e:	89ab      	ldrh	r3, [r5, #12]
 8012b70:	065b      	lsls	r3, r3, #25
 8012b72:	f53f af2d 	bmi.w	80129d0 <_svfiprintf_r+0x28>
 8012b76:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012b78:	b01d      	add	sp, #116	; 0x74
 8012b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b7e:	ab03      	add	r3, sp, #12
 8012b80:	9300      	str	r3, [sp, #0]
 8012b82:	462a      	mov	r2, r5
 8012b84:	4b05      	ldr	r3, [pc, #20]	; (8012b9c <_svfiprintf_r+0x1f4>)
 8012b86:	a904      	add	r1, sp, #16
 8012b88:	4638      	mov	r0, r7
 8012b8a:	f7fc fe6f 	bl	800f86c <_printf_i>
 8012b8e:	e7eb      	b.n	8012b68 <_svfiprintf_r+0x1c0>
 8012b90:	08014c28 	.word	0x08014c28
 8012b94:	08014c32 	.word	0x08014c32
 8012b98:	0800f321 	.word	0x0800f321
 8012b9c:	080128f5 	.word	0x080128f5
 8012ba0:	08014c2e 	.word	0x08014c2e

08012ba4 <__sfputc_r>:
 8012ba4:	6893      	ldr	r3, [r2, #8]
 8012ba6:	3b01      	subs	r3, #1
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	b410      	push	{r4}
 8012bac:	6093      	str	r3, [r2, #8]
 8012bae:	da08      	bge.n	8012bc2 <__sfputc_r+0x1e>
 8012bb0:	6994      	ldr	r4, [r2, #24]
 8012bb2:	42a3      	cmp	r3, r4
 8012bb4:	db01      	blt.n	8012bba <__sfputc_r+0x16>
 8012bb6:	290a      	cmp	r1, #10
 8012bb8:	d103      	bne.n	8012bc2 <__sfputc_r+0x1e>
 8012bba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012bbe:	f7fd bb25 	b.w	801020c <__swbuf_r>
 8012bc2:	6813      	ldr	r3, [r2, #0]
 8012bc4:	1c58      	adds	r0, r3, #1
 8012bc6:	6010      	str	r0, [r2, #0]
 8012bc8:	7019      	strb	r1, [r3, #0]
 8012bca:	4608      	mov	r0, r1
 8012bcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012bd0:	4770      	bx	lr

08012bd2 <__sfputs_r>:
 8012bd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bd4:	4606      	mov	r6, r0
 8012bd6:	460f      	mov	r7, r1
 8012bd8:	4614      	mov	r4, r2
 8012bda:	18d5      	adds	r5, r2, r3
 8012bdc:	42ac      	cmp	r4, r5
 8012bde:	d101      	bne.n	8012be4 <__sfputs_r+0x12>
 8012be0:	2000      	movs	r0, #0
 8012be2:	e007      	b.n	8012bf4 <__sfputs_r+0x22>
 8012be4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012be8:	463a      	mov	r2, r7
 8012bea:	4630      	mov	r0, r6
 8012bec:	f7ff ffda 	bl	8012ba4 <__sfputc_r>
 8012bf0:	1c43      	adds	r3, r0, #1
 8012bf2:	d1f3      	bne.n	8012bdc <__sfputs_r+0xa>
 8012bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012bf8 <_vfiprintf_r>:
 8012bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bfc:	460d      	mov	r5, r1
 8012bfe:	b09d      	sub	sp, #116	; 0x74
 8012c00:	4614      	mov	r4, r2
 8012c02:	4698      	mov	r8, r3
 8012c04:	4606      	mov	r6, r0
 8012c06:	b118      	cbz	r0, 8012c10 <_vfiprintf_r+0x18>
 8012c08:	6a03      	ldr	r3, [r0, #32]
 8012c0a:	b90b      	cbnz	r3, 8012c10 <_vfiprintf_r+0x18>
 8012c0c:	f7fd f9d6 	bl	800ffbc <__sinit>
 8012c10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012c12:	07d9      	lsls	r1, r3, #31
 8012c14:	d405      	bmi.n	8012c22 <_vfiprintf_r+0x2a>
 8012c16:	89ab      	ldrh	r3, [r5, #12]
 8012c18:	059a      	lsls	r2, r3, #22
 8012c1a:	d402      	bmi.n	8012c22 <_vfiprintf_r+0x2a>
 8012c1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012c1e:	f7fd fc07 	bl	8010430 <__retarget_lock_acquire_recursive>
 8012c22:	89ab      	ldrh	r3, [r5, #12]
 8012c24:	071b      	lsls	r3, r3, #28
 8012c26:	d501      	bpl.n	8012c2c <_vfiprintf_r+0x34>
 8012c28:	692b      	ldr	r3, [r5, #16]
 8012c2a:	b99b      	cbnz	r3, 8012c54 <_vfiprintf_r+0x5c>
 8012c2c:	4629      	mov	r1, r5
 8012c2e:	4630      	mov	r0, r6
 8012c30:	f7fd fb2a 	bl	8010288 <__swsetup_r>
 8012c34:	b170      	cbz	r0, 8012c54 <_vfiprintf_r+0x5c>
 8012c36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012c38:	07dc      	lsls	r4, r3, #31
 8012c3a:	d504      	bpl.n	8012c46 <_vfiprintf_r+0x4e>
 8012c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8012c40:	b01d      	add	sp, #116	; 0x74
 8012c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c46:	89ab      	ldrh	r3, [r5, #12]
 8012c48:	0598      	lsls	r0, r3, #22
 8012c4a:	d4f7      	bmi.n	8012c3c <_vfiprintf_r+0x44>
 8012c4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012c4e:	f7fd fbf0 	bl	8010432 <__retarget_lock_release_recursive>
 8012c52:	e7f3      	b.n	8012c3c <_vfiprintf_r+0x44>
 8012c54:	2300      	movs	r3, #0
 8012c56:	9309      	str	r3, [sp, #36]	; 0x24
 8012c58:	2320      	movs	r3, #32
 8012c5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012c5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012c62:	2330      	movs	r3, #48	; 0x30
 8012c64:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8012e18 <_vfiprintf_r+0x220>
 8012c68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012c6c:	f04f 0901 	mov.w	r9, #1
 8012c70:	4623      	mov	r3, r4
 8012c72:	469a      	mov	sl, r3
 8012c74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012c78:	b10a      	cbz	r2, 8012c7e <_vfiprintf_r+0x86>
 8012c7a:	2a25      	cmp	r2, #37	; 0x25
 8012c7c:	d1f9      	bne.n	8012c72 <_vfiprintf_r+0x7a>
 8012c7e:	ebba 0b04 	subs.w	fp, sl, r4
 8012c82:	d00b      	beq.n	8012c9c <_vfiprintf_r+0xa4>
 8012c84:	465b      	mov	r3, fp
 8012c86:	4622      	mov	r2, r4
 8012c88:	4629      	mov	r1, r5
 8012c8a:	4630      	mov	r0, r6
 8012c8c:	f7ff ffa1 	bl	8012bd2 <__sfputs_r>
 8012c90:	3001      	adds	r0, #1
 8012c92:	f000 80a9 	beq.w	8012de8 <_vfiprintf_r+0x1f0>
 8012c96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012c98:	445a      	add	r2, fp
 8012c9a:	9209      	str	r2, [sp, #36]	; 0x24
 8012c9c:	f89a 3000 	ldrb.w	r3, [sl]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	f000 80a1 	beq.w	8012de8 <_vfiprintf_r+0x1f0>
 8012ca6:	2300      	movs	r3, #0
 8012ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8012cac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012cb0:	f10a 0a01 	add.w	sl, sl, #1
 8012cb4:	9304      	str	r3, [sp, #16]
 8012cb6:	9307      	str	r3, [sp, #28]
 8012cb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012cbc:	931a      	str	r3, [sp, #104]	; 0x68
 8012cbe:	4654      	mov	r4, sl
 8012cc0:	2205      	movs	r2, #5
 8012cc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012cc6:	4854      	ldr	r0, [pc, #336]	; (8012e18 <_vfiprintf_r+0x220>)
 8012cc8:	f7ed faa2 	bl	8000210 <memchr>
 8012ccc:	9a04      	ldr	r2, [sp, #16]
 8012cce:	b9d8      	cbnz	r0, 8012d08 <_vfiprintf_r+0x110>
 8012cd0:	06d1      	lsls	r1, r2, #27
 8012cd2:	bf44      	itt	mi
 8012cd4:	2320      	movmi	r3, #32
 8012cd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012cda:	0713      	lsls	r3, r2, #28
 8012cdc:	bf44      	itt	mi
 8012cde:	232b      	movmi	r3, #43	; 0x2b
 8012ce0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012ce4:	f89a 3000 	ldrb.w	r3, [sl]
 8012ce8:	2b2a      	cmp	r3, #42	; 0x2a
 8012cea:	d015      	beq.n	8012d18 <_vfiprintf_r+0x120>
 8012cec:	9a07      	ldr	r2, [sp, #28]
 8012cee:	4654      	mov	r4, sl
 8012cf0:	2000      	movs	r0, #0
 8012cf2:	f04f 0c0a 	mov.w	ip, #10
 8012cf6:	4621      	mov	r1, r4
 8012cf8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012cfc:	3b30      	subs	r3, #48	; 0x30
 8012cfe:	2b09      	cmp	r3, #9
 8012d00:	d94d      	bls.n	8012d9e <_vfiprintf_r+0x1a6>
 8012d02:	b1b0      	cbz	r0, 8012d32 <_vfiprintf_r+0x13a>
 8012d04:	9207      	str	r2, [sp, #28]
 8012d06:	e014      	b.n	8012d32 <_vfiprintf_r+0x13a>
 8012d08:	eba0 0308 	sub.w	r3, r0, r8
 8012d0c:	fa09 f303 	lsl.w	r3, r9, r3
 8012d10:	4313      	orrs	r3, r2
 8012d12:	9304      	str	r3, [sp, #16]
 8012d14:	46a2      	mov	sl, r4
 8012d16:	e7d2      	b.n	8012cbe <_vfiprintf_r+0xc6>
 8012d18:	9b03      	ldr	r3, [sp, #12]
 8012d1a:	1d19      	adds	r1, r3, #4
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	9103      	str	r1, [sp, #12]
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	bfbb      	ittet	lt
 8012d24:	425b      	neglt	r3, r3
 8012d26:	f042 0202 	orrlt.w	r2, r2, #2
 8012d2a:	9307      	strge	r3, [sp, #28]
 8012d2c:	9307      	strlt	r3, [sp, #28]
 8012d2e:	bfb8      	it	lt
 8012d30:	9204      	strlt	r2, [sp, #16]
 8012d32:	7823      	ldrb	r3, [r4, #0]
 8012d34:	2b2e      	cmp	r3, #46	; 0x2e
 8012d36:	d10c      	bne.n	8012d52 <_vfiprintf_r+0x15a>
 8012d38:	7863      	ldrb	r3, [r4, #1]
 8012d3a:	2b2a      	cmp	r3, #42	; 0x2a
 8012d3c:	d134      	bne.n	8012da8 <_vfiprintf_r+0x1b0>
 8012d3e:	9b03      	ldr	r3, [sp, #12]
 8012d40:	1d1a      	adds	r2, r3, #4
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	9203      	str	r2, [sp, #12]
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	bfb8      	it	lt
 8012d4a:	f04f 33ff 	movlt.w	r3, #4294967295
 8012d4e:	3402      	adds	r4, #2
 8012d50:	9305      	str	r3, [sp, #20]
 8012d52:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8012e28 <_vfiprintf_r+0x230>
 8012d56:	7821      	ldrb	r1, [r4, #0]
 8012d58:	2203      	movs	r2, #3
 8012d5a:	4650      	mov	r0, sl
 8012d5c:	f7ed fa58 	bl	8000210 <memchr>
 8012d60:	b138      	cbz	r0, 8012d72 <_vfiprintf_r+0x17a>
 8012d62:	9b04      	ldr	r3, [sp, #16]
 8012d64:	eba0 000a 	sub.w	r0, r0, sl
 8012d68:	2240      	movs	r2, #64	; 0x40
 8012d6a:	4082      	lsls	r2, r0
 8012d6c:	4313      	orrs	r3, r2
 8012d6e:	3401      	adds	r4, #1
 8012d70:	9304      	str	r3, [sp, #16]
 8012d72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d76:	4829      	ldr	r0, [pc, #164]	; (8012e1c <_vfiprintf_r+0x224>)
 8012d78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012d7c:	2206      	movs	r2, #6
 8012d7e:	f7ed fa47 	bl	8000210 <memchr>
 8012d82:	2800      	cmp	r0, #0
 8012d84:	d03f      	beq.n	8012e06 <_vfiprintf_r+0x20e>
 8012d86:	4b26      	ldr	r3, [pc, #152]	; (8012e20 <_vfiprintf_r+0x228>)
 8012d88:	bb1b      	cbnz	r3, 8012dd2 <_vfiprintf_r+0x1da>
 8012d8a:	9b03      	ldr	r3, [sp, #12]
 8012d8c:	3307      	adds	r3, #7
 8012d8e:	f023 0307 	bic.w	r3, r3, #7
 8012d92:	3308      	adds	r3, #8
 8012d94:	9303      	str	r3, [sp, #12]
 8012d96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d98:	443b      	add	r3, r7
 8012d9a:	9309      	str	r3, [sp, #36]	; 0x24
 8012d9c:	e768      	b.n	8012c70 <_vfiprintf_r+0x78>
 8012d9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012da2:	460c      	mov	r4, r1
 8012da4:	2001      	movs	r0, #1
 8012da6:	e7a6      	b.n	8012cf6 <_vfiprintf_r+0xfe>
 8012da8:	2300      	movs	r3, #0
 8012daa:	3401      	adds	r4, #1
 8012dac:	9305      	str	r3, [sp, #20]
 8012dae:	4619      	mov	r1, r3
 8012db0:	f04f 0c0a 	mov.w	ip, #10
 8012db4:	4620      	mov	r0, r4
 8012db6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012dba:	3a30      	subs	r2, #48	; 0x30
 8012dbc:	2a09      	cmp	r2, #9
 8012dbe:	d903      	bls.n	8012dc8 <_vfiprintf_r+0x1d0>
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d0c6      	beq.n	8012d52 <_vfiprintf_r+0x15a>
 8012dc4:	9105      	str	r1, [sp, #20]
 8012dc6:	e7c4      	b.n	8012d52 <_vfiprintf_r+0x15a>
 8012dc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8012dcc:	4604      	mov	r4, r0
 8012dce:	2301      	movs	r3, #1
 8012dd0:	e7f0      	b.n	8012db4 <_vfiprintf_r+0x1bc>
 8012dd2:	ab03      	add	r3, sp, #12
 8012dd4:	9300      	str	r3, [sp, #0]
 8012dd6:	462a      	mov	r2, r5
 8012dd8:	4b12      	ldr	r3, [pc, #72]	; (8012e24 <_vfiprintf_r+0x22c>)
 8012dda:	a904      	add	r1, sp, #16
 8012ddc:	4630      	mov	r0, r6
 8012dde:	f7fc fa9f 	bl	800f320 <_printf_float>
 8012de2:	4607      	mov	r7, r0
 8012de4:	1c78      	adds	r0, r7, #1
 8012de6:	d1d6      	bne.n	8012d96 <_vfiprintf_r+0x19e>
 8012de8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012dea:	07d9      	lsls	r1, r3, #31
 8012dec:	d405      	bmi.n	8012dfa <_vfiprintf_r+0x202>
 8012dee:	89ab      	ldrh	r3, [r5, #12]
 8012df0:	059a      	lsls	r2, r3, #22
 8012df2:	d402      	bmi.n	8012dfa <_vfiprintf_r+0x202>
 8012df4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012df6:	f7fd fb1c 	bl	8010432 <__retarget_lock_release_recursive>
 8012dfa:	89ab      	ldrh	r3, [r5, #12]
 8012dfc:	065b      	lsls	r3, r3, #25
 8012dfe:	f53f af1d 	bmi.w	8012c3c <_vfiprintf_r+0x44>
 8012e02:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012e04:	e71c      	b.n	8012c40 <_vfiprintf_r+0x48>
 8012e06:	ab03      	add	r3, sp, #12
 8012e08:	9300      	str	r3, [sp, #0]
 8012e0a:	462a      	mov	r2, r5
 8012e0c:	4b05      	ldr	r3, [pc, #20]	; (8012e24 <_vfiprintf_r+0x22c>)
 8012e0e:	a904      	add	r1, sp, #16
 8012e10:	4630      	mov	r0, r6
 8012e12:	f7fc fd2b 	bl	800f86c <_printf_i>
 8012e16:	e7e4      	b.n	8012de2 <_vfiprintf_r+0x1ea>
 8012e18:	08014c28 	.word	0x08014c28
 8012e1c:	08014c32 	.word	0x08014c32
 8012e20:	0800f321 	.word	0x0800f321
 8012e24:	08012bd3 	.word	0x08012bd3
 8012e28:	08014c2e 	.word	0x08014c2e

08012e2c <__sflush_r>:
 8012e2c:	898a      	ldrh	r2, [r1, #12]
 8012e2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e32:	4605      	mov	r5, r0
 8012e34:	0710      	lsls	r0, r2, #28
 8012e36:	460c      	mov	r4, r1
 8012e38:	d458      	bmi.n	8012eec <__sflush_r+0xc0>
 8012e3a:	684b      	ldr	r3, [r1, #4]
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	dc05      	bgt.n	8012e4c <__sflush_r+0x20>
 8012e40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	dc02      	bgt.n	8012e4c <__sflush_r+0x20>
 8012e46:	2000      	movs	r0, #0
 8012e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012e4e:	2e00      	cmp	r6, #0
 8012e50:	d0f9      	beq.n	8012e46 <__sflush_r+0x1a>
 8012e52:	2300      	movs	r3, #0
 8012e54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012e58:	682f      	ldr	r7, [r5, #0]
 8012e5a:	6a21      	ldr	r1, [r4, #32]
 8012e5c:	602b      	str	r3, [r5, #0]
 8012e5e:	d032      	beq.n	8012ec6 <__sflush_r+0x9a>
 8012e60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012e62:	89a3      	ldrh	r3, [r4, #12]
 8012e64:	075a      	lsls	r2, r3, #29
 8012e66:	d505      	bpl.n	8012e74 <__sflush_r+0x48>
 8012e68:	6863      	ldr	r3, [r4, #4]
 8012e6a:	1ac0      	subs	r0, r0, r3
 8012e6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012e6e:	b10b      	cbz	r3, 8012e74 <__sflush_r+0x48>
 8012e70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012e72:	1ac0      	subs	r0, r0, r3
 8012e74:	2300      	movs	r3, #0
 8012e76:	4602      	mov	r2, r0
 8012e78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012e7a:	6a21      	ldr	r1, [r4, #32]
 8012e7c:	4628      	mov	r0, r5
 8012e7e:	47b0      	blx	r6
 8012e80:	1c43      	adds	r3, r0, #1
 8012e82:	89a3      	ldrh	r3, [r4, #12]
 8012e84:	d106      	bne.n	8012e94 <__sflush_r+0x68>
 8012e86:	6829      	ldr	r1, [r5, #0]
 8012e88:	291d      	cmp	r1, #29
 8012e8a:	d82b      	bhi.n	8012ee4 <__sflush_r+0xb8>
 8012e8c:	4a29      	ldr	r2, [pc, #164]	; (8012f34 <__sflush_r+0x108>)
 8012e8e:	410a      	asrs	r2, r1
 8012e90:	07d6      	lsls	r6, r2, #31
 8012e92:	d427      	bmi.n	8012ee4 <__sflush_r+0xb8>
 8012e94:	2200      	movs	r2, #0
 8012e96:	6062      	str	r2, [r4, #4]
 8012e98:	04d9      	lsls	r1, r3, #19
 8012e9a:	6922      	ldr	r2, [r4, #16]
 8012e9c:	6022      	str	r2, [r4, #0]
 8012e9e:	d504      	bpl.n	8012eaa <__sflush_r+0x7e>
 8012ea0:	1c42      	adds	r2, r0, #1
 8012ea2:	d101      	bne.n	8012ea8 <__sflush_r+0x7c>
 8012ea4:	682b      	ldr	r3, [r5, #0]
 8012ea6:	b903      	cbnz	r3, 8012eaa <__sflush_r+0x7e>
 8012ea8:	6560      	str	r0, [r4, #84]	; 0x54
 8012eaa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012eac:	602f      	str	r7, [r5, #0]
 8012eae:	2900      	cmp	r1, #0
 8012eb0:	d0c9      	beq.n	8012e46 <__sflush_r+0x1a>
 8012eb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012eb6:	4299      	cmp	r1, r3
 8012eb8:	d002      	beq.n	8012ec0 <__sflush_r+0x94>
 8012eba:	4628      	mov	r0, r5
 8012ebc:	f7fe f966 	bl	801118c <_free_r>
 8012ec0:	2000      	movs	r0, #0
 8012ec2:	6360      	str	r0, [r4, #52]	; 0x34
 8012ec4:	e7c0      	b.n	8012e48 <__sflush_r+0x1c>
 8012ec6:	2301      	movs	r3, #1
 8012ec8:	4628      	mov	r0, r5
 8012eca:	47b0      	blx	r6
 8012ecc:	1c41      	adds	r1, r0, #1
 8012ece:	d1c8      	bne.n	8012e62 <__sflush_r+0x36>
 8012ed0:	682b      	ldr	r3, [r5, #0]
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d0c5      	beq.n	8012e62 <__sflush_r+0x36>
 8012ed6:	2b1d      	cmp	r3, #29
 8012ed8:	d001      	beq.n	8012ede <__sflush_r+0xb2>
 8012eda:	2b16      	cmp	r3, #22
 8012edc:	d101      	bne.n	8012ee2 <__sflush_r+0xb6>
 8012ede:	602f      	str	r7, [r5, #0]
 8012ee0:	e7b1      	b.n	8012e46 <__sflush_r+0x1a>
 8012ee2:	89a3      	ldrh	r3, [r4, #12]
 8012ee4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012ee8:	81a3      	strh	r3, [r4, #12]
 8012eea:	e7ad      	b.n	8012e48 <__sflush_r+0x1c>
 8012eec:	690f      	ldr	r7, [r1, #16]
 8012eee:	2f00      	cmp	r7, #0
 8012ef0:	d0a9      	beq.n	8012e46 <__sflush_r+0x1a>
 8012ef2:	0793      	lsls	r3, r2, #30
 8012ef4:	680e      	ldr	r6, [r1, #0]
 8012ef6:	bf08      	it	eq
 8012ef8:	694b      	ldreq	r3, [r1, #20]
 8012efa:	600f      	str	r7, [r1, #0]
 8012efc:	bf18      	it	ne
 8012efe:	2300      	movne	r3, #0
 8012f00:	eba6 0807 	sub.w	r8, r6, r7
 8012f04:	608b      	str	r3, [r1, #8]
 8012f06:	f1b8 0f00 	cmp.w	r8, #0
 8012f0a:	dd9c      	ble.n	8012e46 <__sflush_r+0x1a>
 8012f0c:	6a21      	ldr	r1, [r4, #32]
 8012f0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012f10:	4643      	mov	r3, r8
 8012f12:	463a      	mov	r2, r7
 8012f14:	4628      	mov	r0, r5
 8012f16:	47b0      	blx	r6
 8012f18:	2800      	cmp	r0, #0
 8012f1a:	dc06      	bgt.n	8012f2a <__sflush_r+0xfe>
 8012f1c:	89a3      	ldrh	r3, [r4, #12]
 8012f1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012f22:	81a3      	strh	r3, [r4, #12]
 8012f24:	f04f 30ff 	mov.w	r0, #4294967295
 8012f28:	e78e      	b.n	8012e48 <__sflush_r+0x1c>
 8012f2a:	4407      	add	r7, r0
 8012f2c:	eba8 0800 	sub.w	r8, r8, r0
 8012f30:	e7e9      	b.n	8012f06 <__sflush_r+0xda>
 8012f32:	bf00      	nop
 8012f34:	dfbffffe 	.word	0xdfbffffe

08012f38 <_fflush_r>:
 8012f38:	b538      	push	{r3, r4, r5, lr}
 8012f3a:	690b      	ldr	r3, [r1, #16]
 8012f3c:	4605      	mov	r5, r0
 8012f3e:	460c      	mov	r4, r1
 8012f40:	b913      	cbnz	r3, 8012f48 <_fflush_r+0x10>
 8012f42:	2500      	movs	r5, #0
 8012f44:	4628      	mov	r0, r5
 8012f46:	bd38      	pop	{r3, r4, r5, pc}
 8012f48:	b118      	cbz	r0, 8012f52 <_fflush_r+0x1a>
 8012f4a:	6a03      	ldr	r3, [r0, #32]
 8012f4c:	b90b      	cbnz	r3, 8012f52 <_fflush_r+0x1a>
 8012f4e:	f7fd f835 	bl	800ffbc <__sinit>
 8012f52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	d0f3      	beq.n	8012f42 <_fflush_r+0xa>
 8012f5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012f5c:	07d0      	lsls	r0, r2, #31
 8012f5e:	d404      	bmi.n	8012f6a <_fflush_r+0x32>
 8012f60:	0599      	lsls	r1, r3, #22
 8012f62:	d402      	bmi.n	8012f6a <_fflush_r+0x32>
 8012f64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012f66:	f7fd fa63 	bl	8010430 <__retarget_lock_acquire_recursive>
 8012f6a:	4628      	mov	r0, r5
 8012f6c:	4621      	mov	r1, r4
 8012f6e:	f7ff ff5d 	bl	8012e2c <__sflush_r>
 8012f72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012f74:	07da      	lsls	r2, r3, #31
 8012f76:	4605      	mov	r5, r0
 8012f78:	d4e4      	bmi.n	8012f44 <_fflush_r+0xc>
 8012f7a:	89a3      	ldrh	r3, [r4, #12]
 8012f7c:	059b      	lsls	r3, r3, #22
 8012f7e:	d4e1      	bmi.n	8012f44 <_fflush_r+0xc>
 8012f80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012f82:	f7fd fa56 	bl	8010432 <__retarget_lock_release_recursive>
 8012f86:	e7dd      	b.n	8012f44 <_fflush_r+0xc>

08012f88 <fiprintf>:
 8012f88:	b40e      	push	{r1, r2, r3}
 8012f8a:	b503      	push	{r0, r1, lr}
 8012f8c:	4601      	mov	r1, r0
 8012f8e:	ab03      	add	r3, sp, #12
 8012f90:	4805      	ldr	r0, [pc, #20]	; (8012fa8 <fiprintf+0x20>)
 8012f92:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f96:	6800      	ldr	r0, [r0, #0]
 8012f98:	9301      	str	r3, [sp, #4]
 8012f9a:	f7ff fe2d 	bl	8012bf8 <_vfiprintf_r>
 8012f9e:	b002      	add	sp, #8
 8012fa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8012fa4:	b003      	add	sp, #12
 8012fa6:	4770      	bx	lr
 8012fa8:	200000d0 	.word	0x200000d0

08012fac <__swhatbuf_r>:
 8012fac:	b570      	push	{r4, r5, r6, lr}
 8012fae:	460c      	mov	r4, r1
 8012fb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012fb4:	2900      	cmp	r1, #0
 8012fb6:	b096      	sub	sp, #88	; 0x58
 8012fb8:	4615      	mov	r5, r2
 8012fba:	461e      	mov	r6, r3
 8012fbc:	da0d      	bge.n	8012fda <__swhatbuf_r+0x2e>
 8012fbe:	89a3      	ldrh	r3, [r4, #12]
 8012fc0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012fc4:	f04f 0100 	mov.w	r1, #0
 8012fc8:	bf0c      	ite	eq
 8012fca:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8012fce:	2340      	movne	r3, #64	; 0x40
 8012fd0:	2000      	movs	r0, #0
 8012fd2:	6031      	str	r1, [r6, #0]
 8012fd4:	602b      	str	r3, [r5, #0]
 8012fd6:	b016      	add	sp, #88	; 0x58
 8012fd8:	bd70      	pop	{r4, r5, r6, pc}
 8012fda:	466a      	mov	r2, sp
 8012fdc:	f000 f874 	bl	80130c8 <_fstat_r>
 8012fe0:	2800      	cmp	r0, #0
 8012fe2:	dbec      	blt.n	8012fbe <__swhatbuf_r+0x12>
 8012fe4:	9901      	ldr	r1, [sp, #4]
 8012fe6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8012fea:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8012fee:	4259      	negs	r1, r3
 8012ff0:	4159      	adcs	r1, r3
 8012ff2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012ff6:	e7eb      	b.n	8012fd0 <__swhatbuf_r+0x24>

08012ff8 <__smakebuf_r>:
 8012ff8:	898b      	ldrh	r3, [r1, #12]
 8012ffa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012ffc:	079d      	lsls	r5, r3, #30
 8012ffe:	4606      	mov	r6, r0
 8013000:	460c      	mov	r4, r1
 8013002:	d507      	bpl.n	8013014 <__smakebuf_r+0x1c>
 8013004:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013008:	6023      	str	r3, [r4, #0]
 801300a:	6123      	str	r3, [r4, #16]
 801300c:	2301      	movs	r3, #1
 801300e:	6163      	str	r3, [r4, #20]
 8013010:	b002      	add	sp, #8
 8013012:	bd70      	pop	{r4, r5, r6, pc}
 8013014:	ab01      	add	r3, sp, #4
 8013016:	466a      	mov	r2, sp
 8013018:	f7ff ffc8 	bl	8012fac <__swhatbuf_r>
 801301c:	9900      	ldr	r1, [sp, #0]
 801301e:	4605      	mov	r5, r0
 8013020:	4630      	mov	r0, r6
 8013022:	f7fe f927 	bl	8011274 <_malloc_r>
 8013026:	b948      	cbnz	r0, 801303c <__smakebuf_r+0x44>
 8013028:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801302c:	059a      	lsls	r2, r3, #22
 801302e:	d4ef      	bmi.n	8013010 <__smakebuf_r+0x18>
 8013030:	f023 0303 	bic.w	r3, r3, #3
 8013034:	f043 0302 	orr.w	r3, r3, #2
 8013038:	81a3      	strh	r3, [r4, #12]
 801303a:	e7e3      	b.n	8013004 <__smakebuf_r+0xc>
 801303c:	89a3      	ldrh	r3, [r4, #12]
 801303e:	6020      	str	r0, [r4, #0]
 8013040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013044:	81a3      	strh	r3, [r4, #12]
 8013046:	9b00      	ldr	r3, [sp, #0]
 8013048:	6163      	str	r3, [r4, #20]
 801304a:	9b01      	ldr	r3, [sp, #4]
 801304c:	6120      	str	r0, [r4, #16]
 801304e:	b15b      	cbz	r3, 8013068 <__smakebuf_r+0x70>
 8013050:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013054:	4630      	mov	r0, r6
 8013056:	f000 f849 	bl	80130ec <_isatty_r>
 801305a:	b128      	cbz	r0, 8013068 <__smakebuf_r+0x70>
 801305c:	89a3      	ldrh	r3, [r4, #12]
 801305e:	f023 0303 	bic.w	r3, r3, #3
 8013062:	f043 0301 	orr.w	r3, r3, #1
 8013066:	81a3      	strh	r3, [r4, #12]
 8013068:	89a3      	ldrh	r3, [r4, #12]
 801306a:	431d      	orrs	r5, r3
 801306c:	81a5      	strh	r5, [r4, #12]
 801306e:	e7cf      	b.n	8013010 <__smakebuf_r+0x18>

08013070 <memmove>:
 8013070:	4288      	cmp	r0, r1
 8013072:	b510      	push	{r4, lr}
 8013074:	eb01 0402 	add.w	r4, r1, r2
 8013078:	d902      	bls.n	8013080 <memmove+0x10>
 801307a:	4284      	cmp	r4, r0
 801307c:	4623      	mov	r3, r4
 801307e:	d807      	bhi.n	8013090 <memmove+0x20>
 8013080:	1e43      	subs	r3, r0, #1
 8013082:	42a1      	cmp	r1, r4
 8013084:	d008      	beq.n	8013098 <memmove+0x28>
 8013086:	f811 2b01 	ldrb.w	r2, [r1], #1
 801308a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801308e:	e7f8      	b.n	8013082 <memmove+0x12>
 8013090:	4402      	add	r2, r0
 8013092:	4601      	mov	r1, r0
 8013094:	428a      	cmp	r2, r1
 8013096:	d100      	bne.n	801309a <memmove+0x2a>
 8013098:	bd10      	pop	{r4, pc}
 801309a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801309e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80130a2:	e7f7      	b.n	8013094 <memmove+0x24>

080130a4 <strncmp>:
 80130a4:	b510      	push	{r4, lr}
 80130a6:	b16a      	cbz	r2, 80130c4 <strncmp+0x20>
 80130a8:	3901      	subs	r1, #1
 80130aa:	1884      	adds	r4, r0, r2
 80130ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80130b0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80130b4:	429a      	cmp	r2, r3
 80130b6:	d103      	bne.n	80130c0 <strncmp+0x1c>
 80130b8:	42a0      	cmp	r0, r4
 80130ba:	d001      	beq.n	80130c0 <strncmp+0x1c>
 80130bc:	2a00      	cmp	r2, #0
 80130be:	d1f5      	bne.n	80130ac <strncmp+0x8>
 80130c0:	1ad0      	subs	r0, r2, r3
 80130c2:	bd10      	pop	{r4, pc}
 80130c4:	4610      	mov	r0, r2
 80130c6:	e7fc      	b.n	80130c2 <strncmp+0x1e>

080130c8 <_fstat_r>:
 80130c8:	b538      	push	{r3, r4, r5, lr}
 80130ca:	4d07      	ldr	r5, [pc, #28]	; (80130e8 <_fstat_r+0x20>)
 80130cc:	2300      	movs	r3, #0
 80130ce:	4604      	mov	r4, r0
 80130d0:	4608      	mov	r0, r1
 80130d2:	4611      	mov	r1, r2
 80130d4:	602b      	str	r3, [r5, #0]
 80130d6:	f7f2 ffae 	bl	8006036 <_fstat>
 80130da:	1c43      	adds	r3, r0, #1
 80130dc:	d102      	bne.n	80130e4 <_fstat_r+0x1c>
 80130de:	682b      	ldr	r3, [r5, #0]
 80130e0:	b103      	cbz	r3, 80130e4 <_fstat_r+0x1c>
 80130e2:	6023      	str	r3, [r4, #0]
 80130e4:	bd38      	pop	{r3, r4, r5, pc}
 80130e6:	bf00      	nop
 80130e8:	20003f20 	.word	0x20003f20

080130ec <_isatty_r>:
 80130ec:	b538      	push	{r3, r4, r5, lr}
 80130ee:	4d06      	ldr	r5, [pc, #24]	; (8013108 <_isatty_r+0x1c>)
 80130f0:	2300      	movs	r3, #0
 80130f2:	4604      	mov	r4, r0
 80130f4:	4608      	mov	r0, r1
 80130f6:	602b      	str	r3, [r5, #0]
 80130f8:	f7f2 ffad 	bl	8006056 <_isatty>
 80130fc:	1c43      	adds	r3, r0, #1
 80130fe:	d102      	bne.n	8013106 <_isatty_r+0x1a>
 8013100:	682b      	ldr	r3, [r5, #0]
 8013102:	b103      	cbz	r3, 8013106 <_isatty_r+0x1a>
 8013104:	6023      	str	r3, [r4, #0]
 8013106:	bd38      	pop	{r3, r4, r5, pc}
 8013108:	20003f20 	.word	0x20003f20

0801310c <_sbrk_r>:
 801310c:	b538      	push	{r3, r4, r5, lr}
 801310e:	4d06      	ldr	r5, [pc, #24]	; (8013128 <_sbrk_r+0x1c>)
 8013110:	2300      	movs	r3, #0
 8013112:	4604      	mov	r4, r0
 8013114:	4608      	mov	r0, r1
 8013116:	602b      	str	r3, [r5, #0]
 8013118:	f7f2 ffb6 	bl	8006088 <_sbrk>
 801311c:	1c43      	adds	r3, r0, #1
 801311e:	d102      	bne.n	8013126 <_sbrk_r+0x1a>
 8013120:	682b      	ldr	r3, [r5, #0]
 8013122:	b103      	cbz	r3, 8013126 <_sbrk_r+0x1a>
 8013124:	6023      	str	r3, [r4, #0]
 8013126:	bd38      	pop	{r3, r4, r5, pc}
 8013128:	20003f20 	.word	0x20003f20

0801312c <nan>:
 801312c:	4901      	ldr	r1, [pc, #4]	; (8013134 <nan+0x8>)
 801312e:	2000      	movs	r0, #0
 8013130:	4770      	bx	lr
 8013132:	bf00      	nop
 8013134:	7ff80000 	.word	0x7ff80000

08013138 <abort>:
 8013138:	b508      	push	{r3, lr}
 801313a:	2006      	movs	r0, #6
 801313c:	f000 fbe6 	bl	801390c <raise>
 8013140:	2001      	movs	r0, #1
 8013142:	f7f2 ff45 	bl	8005fd0 <_exit>

08013146 <_calloc_r>:
 8013146:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013148:	fba1 2402 	umull	r2, r4, r1, r2
 801314c:	b94c      	cbnz	r4, 8013162 <_calloc_r+0x1c>
 801314e:	4611      	mov	r1, r2
 8013150:	9201      	str	r2, [sp, #4]
 8013152:	f7fe f88f 	bl	8011274 <_malloc_r>
 8013156:	9a01      	ldr	r2, [sp, #4]
 8013158:	4605      	mov	r5, r0
 801315a:	b930      	cbnz	r0, 801316a <_calloc_r+0x24>
 801315c:	4628      	mov	r0, r5
 801315e:	b003      	add	sp, #12
 8013160:	bd30      	pop	{r4, r5, pc}
 8013162:	220c      	movs	r2, #12
 8013164:	6002      	str	r2, [r0, #0]
 8013166:	2500      	movs	r5, #0
 8013168:	e7f8      	b.n	801315c <_calloc_r+0x16>
 801316a:	4621      	mov	r1, r4
 801316c:	f7fd f8e4 	bl	8010338 <memset>
 8013170:	e7f4      	b.n	801315c <_calloc_r+0x16>

08013172 <rshift>:
 8013172:	6903      	ldr	r3, [r0, #16]
 8013174:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8013178:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801317c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8013180:	f100 0414 	add.w	r4, r0, #20
 8013184:	dd45      	ble.n	8013212 <rshift+0xa0>
 8013186:	f011 011f 	ands.w	r1, r1, #31
 801318a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801318e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8013192:	d10c      	bne.n	80131ae <rshift+0x3c>
 8013194:	f100 0710 	add.w	r7, r0, #16
 8013198:	4629      	mov	r1, r5
 801319a:	42b1      	cmp	r1, r6
 801319c:	d334      	bcc.n	8013208 <rshift+0x96>
 801319e:	1a9b      	subs	r3, r3, r2
 80131a0:	009b      	lsls	r3, r3, #2
 80131a2:	1eea      	subs	r2, r5, #3
 80131a4:	4296      	cmp	r6, r2
 80131a6:	bf38      	it	cc
 80131a8:	2300      	movcc	r3, #0
 80131aa:	4423      	add	r3, r4
 80131ac:	e015      	b.n	80131da <rshift+0x68>
 80131ae:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80131b2:	f1c1 0820 	rsb	r8, r1, #32
 80131b6:	40cf      	lsrs	r7, r1
 80131b8:	f105 0e04 	add.w	lr, r5, #4
 80131bc:	46a1      	mov	r9, r4
 80131be:	4576      	cmp	r6, lr
 80131c0:	46f4      	mov	ip, lr
 80131c2:	d815      	bhi.n	80131f0 <rshift+0x7e>
 80131c4:	1a9a      	subs	r2, r3, r2
 80131c6:	0092      	lsls	r2, r2, #2
 80131c8:	3a04      	subs	r2, #4
 80131ca:	3501      	adds	r5, #1
 80131cc:	42ae      	cmp	r6, r5
 80131ce:	bf38      	it	cc
 80131d0:	2200      	movcc	r2, #0
 80131d2:	18a3      	adds	r3, r4, r2
 80131d4:	50a7      	str	r7, [r4, r2]
 80131d6:	b107      	cbz	r7, 80131da <rshift+0x68>
 80131d8:	3304      	adds	r3, #4
 80131da:	1b1a      	subs	r2, r3, r4
 80131dc:	42a3      	cmp	r3, r4
 80131de:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80131e2:	bf08      	it	eq
 80131e4:	2300      	moveq	r3, #0
 80131e6:	6102      	str	r2, [r0, #16]
 80131e8:	bf08      	it	eq
 80131ea:	6143      	streq	r3, [r0, #20]
 80131ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80131f0:	f8dc c000 	ldr.w	ip, [ip]
 80131f4:	fa0c fc08 	lsl.w	ip, ip, r8
 80131f8:	ea4c 0707 	orr.w	r7, ip, r7
 80131fc:	f849 7b04 	str.w	r7, [r9], #4
 8013200:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013204:	40cf      	lsrs	r7, r1
 8013206:	e7da      	b.n	80131be <rshift+0x4c>
 8013208:	f851 cb04 	ldr.w	ip, [r1], #4
 801320c:	f847 cf04 	str.w	ip, [r7, #4]!
 8013210:	e7c3      	b.n	801319a <rshift+0x28>
 8013212:	4623      	mov	r3, r4
 8013214:	e7e1      	b.n	80131da <rshift+0x68>

08013216 <__hexdig_fun>:
 8013216:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801321a:	2b09      	cmp	r3, #9
 801321c:	d802      	bhi.n	8013224 <__hexdig_fun+0xe>
 801321e:	3820      	subs	r0, #32
 8013220:	b2c0      	uxtb	r0, r0
 8013222:	4770      	bx	lr
 8013224:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8013228:	2b05      	cmp	r3, #5
 801322a:	d801      	bhi.n	8013230 <__hexdig_fun+0x1a>
 801322c:	3847      	subs	r0, #71	; 0x47
 801322e:	e7f7      	b.n	8013220 <__hexdig_fun+0xa>
 8013230:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8013234:	2b05      	cmp	r3, #5
 8013236:	d801      	bhi.n	801323c <__hexdig_fun+0x26>
 8013238:	3827      	subs	r0, #39	; 0x27
 801323a:	e7f1      	b.n	8013220 <__hexdig_fun+0xa>
 801323c:	2000      	movs	r0, #0
 801323e:	4770      	bx	lr

08013240 <__gethex>:
 8013240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013244:	4617      	mov	r7, r2
 8013246:	680a      	ldr	r2, [r1, #0]
 8013248:	b085      	sub	sp, #20
 801324a:	f102 0b02 	add.w	fp, r2, #2
 801324e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8013252:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8013256:	4681      	mov	r9, r0
 8013258:	468a      	mov	sl, r1
 801325a:	9302      	str	r3, [sp, #8]
 801325c:	32fe      	adds	r2, #254	; 0xfe
 801325e:	eb02 030b 	add.w	r3, r2, fp
 8013262:	46d8      	mov	r8, fp
 8013264:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8013268:	9301      	str	r3, [sp, #4]
 801326a:	2830      	cmp	r0, #48	; 0x30
 801326c:	d0f7      	beq.n	801325e <__gethex+0x1e>
 801326e:	f7ff ffd2 	bl	8013216 <__hexdig_fun>
 8013272:	4604      	mov	r4, r0
 8013274:	2800      	cmp	r0, #0
 8013276:	d138      	bne.n	80132ea <__gethex+0xaa>
 8013278:	49a7      	ldr	r1, [pc, #668]	; (8013518 <__gethex+0x2d8>)
 801327a:	2201      	movs	r2, #1
 801327c:	4640      	mov	r0, r8
 801327e:	f7ff ff11 	bl	80130a4 <strncmp>
 8013282:	4606      	mov	r6, r0
 8013284:	2800      	cmp	r0, #0
 8013286:	d169      	bne.n	801335c <__gethex+0x11c>
 8013288:	f898 0001 	ldrb.w	r0, [r8, #1]
 801328c:	465d      	mov	r5, fp
 801328e:	f7ff ffc2 	bl	8013216 <__hexdig_fun>
 8013292:	2800      	cmp	r0, #0
 8013294:	d064      	beq.n	8013360 <__gethex+0x120>
 8013296:	465a      	mov	r2, fp
 8013298:	7810      	ldrb	r0, [r2, #0]
 801329a:	2830      	cmp	r0, #48	; 0x30
 801329c:	4690      	mov	r8, r2
 801329e:	f102 0201 	add.w	r2, r2, #1
 80132a2:	d0f9      	beq.n	8013298 <__gethex+0x58>
 80132a4:	f7ff ffb7 	bl	8013216 <__hexdig_fun>
 80132a8:	2301      	movs	r3, #1
 80132aa:	fab0 f480 	clz	r4, r0
 80132ae:	0964      	lsrs	r4, r4, #5
 80132b0:	465e      	mov	r6, fp
 80132b2:	9301      	str	r3, [sp, #4]
 80132b4:	4642      	mov	r2, r8
 80132b6:	4615      	mov	r5, r2
 80132b8:	3201      	adds	r2, #1
 80132ba:	7828      	ldrb	r0, [r5, #0]
 80132bc:	f7ff ffab 	bl	8013216 <__hexdig_fun>
 80132c0:	2800      	cmp	r0, #0
 80132c2:	d1f8      	bne.n	80132b6 <__gethex+0x76>
 80132c4:	4994      	ldr	r1, [pc, #592]	; (8013518 <__gethex+0x2d8>)
 80132c6:	2201      	movs	r2, #1
 80132c8:	4628      	mov	r0, r5
 80132ca:	f7ff feeb 	bl	80130a4 <strncmp>
 80132ce:	b978      	cbnz	r0, 80132f0 <__gethex+0xb0>
 80132d0:	b946      	cbnz	r6, 80132e4 <__gethex+0xa4>
 80132d2:	1c6e      	adds	r6, r5, #1
 80132d4:	4632      	mov	r2, r6
 80132d6:	4615      	mov	r5, r2
 80132d8:	3201      	adds	r2, #1
 80132da:	7828      	ldrb	r0, [r5, #0]
 80132dc:	f7ff ff9b 	bl	8013216 <__hexdig_fun>
 80132e0:	2800      	cmp	r0, #0
 80132e2:	d1f8      	bne.n	80132d6 <__gethex+0x96>
 80132e4:	1b73      	subs	r3, r6, r5
 80132e6:	009e      	lsls	r6, r3, #2
 80132e8:	e004      	b.n	80132f4 <__gethex+0xb4>
 80132ea:	2400      	movs	r4, #0
 80132ec:	4626      	mov	r6, r4
 80132ee:	e7e1      	b.n	80132b4 <__gethex+0x74>
 80132f0:	2e00      	cmp	r6, #0
 80132f2:	d1f7      	bne.n	80132e4 <__gethex+0xa4>
 80132f4:	782b      	ldrb	r3, [r5, #0]
 80132f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80132fa:	2b50      	cmp	r3, #80	; 0x50
 80132fc:	d13d      	bne.n	801337a <__gethex+0x13a>
 80132fe:	786b      	ldrb	r3, [r5, #1]
 8013300:	2b2b      	cmp	r3, #43	; 0x2b
 8013302:	d02f      	beq.n	8013364 <__gethex+0x124>
 8013304:	2b2d      	cmp	r3, #45	; 0x2d
 8013306:	d031      	beq.n	801336c <__gethex+0x12c>
 8013308:	1c69      	adds	r1, r5, #1
 801330a:	f04f 0b00 	mov.w	fp, #0
 801330e:	7808      	ldrb	r0, [r1, #0]
 8013310:	f7ff ff81 	bl	8013216 <__hexdig_fun>
 8013314:	1e42      	subs	r2, r0, #1
 8013316:	b2d2      	uxtb	r2, r2
 8013318:	2a18      	cmp	r2, #24
 801331a:	d82e      	bhi.n	801337a <__gethex+0x13a>
 801331c:	f1a0 0210 	sub.w	r2, r0, #16
 8013320:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013324:	f7ff ff77 	bl	8013216 <__hexdig_fun>
 8013328:	f100 3cff 	add.w	ip, r0, #4294967295
 801332c:	fa5f fc8c 	uxtb.w	ip, ip
 8013330:	f1bc 0f18 	cmp.w	ip, #24
 8013334:	d91d      	bls.n	8013372 <__gethex+0x132>
 8013336:	f1bb 0f00 	cmp.w	fp, #0
 801333a:	d000      	beq.n	801333e <__gethex+0xfe>
 801333c:	4252      	negs	r2, r2
 801333e:	4416      	add	r6, r2
 8013340:	f8ca 1000 	str.w	r1, [sl]
 8013344:	b1dc      	cbz	r4, 801337e <__gethex+0x13e>
 8013346:	9b01      	ldr	r3, [sp, #4]
 8013348:	2b00      	cmp	r3, #0
 801334a:	bf14      	ite	ne
 801334c:	f04f 0800 	movne.w	r8, #0
 8013350:	f04f 0806 	moveq.w	r8, #6
 8013354:	4640      	mov	r0, r8
 8013356:	b005      	add	sp, #20
 8013358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801335c:	4645      	mov	r5, r8
 801335e:	4626      	mov	r6, r4
 8013360:	2401      	movs	r4, #1
 8013362:	e7c7      	b.n	80132f4 <__gethex+0xb4>
 8013364:	f04f 0b00 	mov.w	fp, #0
 8013368:	1ca9      	adds	r1, r5, #2
 801336a:	e7d0      	b.n	801330e <__gethex+0xce>
 801336c:	f04f 0b01 	mov.w	fp, #1
 8013370:	e7fa      	b.n	8013368 <__gethex+0x128>
 8013372:	230a      	movs	r3, #10
 8013374:	fb03 0002 	mla	r0, r3, r2, r0
 8013378:	e7d0      	b.n	801331c <__gethex+0xdc>
 801337a:	4629      	mov	r1, r5
 801337c:	e7e0      	b.n	8013340 <__gethex+0x100>
 801337e:	eba5 0308 	sub.w	r3, r5, r8
 8013382:	3b01      	subs	r3, #1
 8013384:	4621      	mov	r1, r4
 8013386:	2b07      	cmp	r3, #7
 8013388:	dc0a      	bgt.n	80133a0 <__gethex+0x160>
 801338a:	4648      	mov	r0, r9
 801338c:	f7fd fffe 	bl	801138c <_Balloc>
 8013390:	4604      	mov	r4, r0
 8013392:	b940      	cbnz	r0, 80133a6 <__gethex+0x166>
 8013394:	4b61      	ldr	r3, [pc, #388]	; (801351c <__gethex+0x2dc>)
 8013396:	4602      	mov	r2, r0
 8013398:	21e4      	movs	r1, #228	; 0xe4
 801339a:	4861      	ldr	r0, [pc, #388]	; (8013520 <__gethex+0x2e0>)
 801339c:	f7fd f85c 	bl	8010458 <__assert_func>
 80133a0:	3101      	adds	r1, #1
 80133a2:	105b      	asrs	r3, r3, #1
 80133a4:	e7ef      	b.n	8013386 <__gethex+0x146>
 80133a6:	f100 0a14 	add.w	sl, r0, #20
 80133aa:	2300      	movs	r3, #0
 80133ac:	495a      	ldr	r1, [pc, #360]	; (8013518 <__gethex+0x2d8>)
 80133ae:	f8cd a004 	str.w	sl, [sp, #4]
 80133b2:	469b      	mov	fp, r3
 80133b4:	45a8      	cmp	r8, r5
 80133b6:	d342      	bcc.n	801343e <__gethex+0x1fe>
 80133b8:	9801      	ldr	r0, [sp, #4]
 80133ba:	f840 bb04 	str.w	fp, [r0], #4
 80133be:	eba0 000a 	sub.w	r0, r0, sl
 80133c2:	1080      	asrs	r0, r0, #2
 80133c4:	6120      	str	r0, [r4, #16]
 80133c6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80133ca:	4658      	mov	r0, fp
 80133cc:	f7fe f8d0 	bl	8011570 <__hi0bits>
 80133d0:	683d      	ldr	r5, [r7, #0]
 80133d2:	eba8 0000 	sub.w	r0, r8, r0
 80133d6:	42a8      	cmp	r0, r5
 80133d8:	dd59      	ble.n	801348e <__gethex+0x24e>
 80133da:	eba0 0805 	sub.w	r8, r0, r5
 80133de:	4641      	mov	r1, r8
 80133e0:	4620      	mov	r0, r4
 80133e2:	f7fe fc54 	bl	8011c8e <__any_on>
 80133e6:	4683      	mov	fp, r0
 80133e8:	b1b8      	cbz	r0, 801341a <__gethex+0x1da>
 80133ea:	f108 33ff 	add.w	r3, r8, #4294967295
 80133ee:	1159      	asrs	r1, r3, #5
 80133f0:	f003 021f 	and.w	r2, r3, #31
 80133f4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80133f8:	f04f 0b01 	mov.w	fp, #1
 80133fc:	fa0b f202 	lsl.w	r2, fp, r2
 8013400:	420a      	tst	r2, r1
 8013402:	d00a      	beq.n	801341a <__gethex+0x1da>
 8013404:	455b      	cmp	r3, fp
 8013406:	dd06      	ble.n	8013416 <__gethex+0x1d6>
 8013408:	f1a8 0102 	sub.w	r1, r8, #2
 801340c:	4620      	mov	r0, r4
 801340e:	f7fe fc3e 	bl	8011c8e <__any_on>
 8013412:	2800      	cmp	r0, #0
 8013414:	d138      	bne.n	8013488 <__gethex+0x248>
 8013416:	f04f 0b02 	mov.w	fp, #2
 801341a:	4641      	mov	r1, r8
 801341c:	4620      	mov	r0, r4
 801341e:	f7ff fea8 	bl	8013172 <rshift>
 8013422:	4446      	add	r6, r8
 8013424:	68bb      	ldr	r3, [r7, #8]
 8013426:	42b3      	cmp	r3, r6
 8013428:	da41      	bge.n	80134ae <__gethex+0x26e>
 801342a:	4621      	mov	r1, r4
 801342c:	4648      	mov	r0, r9
 801342e:	f7fd ffed 	bl	801140c <_Bfree>
 8013432:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013434:	2300      	movs	r3, #0
 8013436:	6013      	str	r3, [r2, #0]
 8013438:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801343c:	e78a      	b.n	8013354 <__gethex+0x114>
 801343e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8013442:	2a2e      	cmp	r2, #46	; 0x2e
 8013444:	d014      	beq.n	8013470 <__gethex+0x230>
 8013446:	2b20      	cmp	r3, #32
 8013448:	d106      	bne.n	8013458 <__gethex+0x218>
 801344a:	9b01      	ldr	r3, [sp, #4]
 801344c:	f843 bb04 	str.w	fp, [r3], #4
 8013450:	f04f 0b00 	mov.w	fp, #0
 8013454:	9301      	str	r3, [sp, #4]
 8013456:	465b      	mov	r3, fp
 8013458:	7828      	ldrb	r0, [r5, #0]
 801345a:	9303      	str	r3, [sp, #12]
 801345c:	f7ff fedb 	bl	8013216 <__hexdig_fun>
 8013460:	9b03      	ldr	r3, [sp, #12]
 8013462:	f000 000f 	and.w	r0, r0, #15
 8013466:	4098      	lsls	r0, r3
 8013468:	ea4b 0b00 	orr.w	fp, fp, r0
 801346c:	3304      	adds	r3, #4
 801346e:	e7a1      	b.n	80133b4 <__gethex+0x174>
 8013470:	45a8      	cmp	r8, r5
 8013472:	d8e8      	bhi.n	8013446 <__gethex+0x206>
 8013474:	2201      	movs	r2, #1
 8013476:	4628      	mov	r0, r5
 8013478:	9303      	str	r3, [sp, #12]
 801347a:	f7ff fe13 	bl	80130a4 <strncmp>
 801347e:	4926      	ldr	r1, [pc, #152]	; (8013518 <__gethex+0x2d8>)
 8013480:	9b03      	ldr	r3, [sp, #12]
 8013482:	2800      	cmp	r0, #0
 8013484:	d1df      	bne.n	8013446 <__gethex+0x206>
 8013486:	e795      	b.n	80133b4 <__gethex+0x174>
 8013488:	f04f 0b03 	mov.w	fp, #3
 801348c:	e7c5      	b.n	801341a <__gethex+0x1da>
 801348e:	da0b      	bge.n	80134a8 <__gethex+0x268>
 8013490:	eba5 0800 	sub.w	r8, r5, r0
 8013494:	4621      	mov	r1, r4
 8013496:	4642      	mov	r2, r8
 8013498:	4648      	mov	r0, r9
 801349a:	f7fe f9d1 	bl	8011840 <__lshift>
 801349e:	eba6 0608 	sub.w	r6, r6, r8
 80134a2:	4604      	mov	r4, r0
 80134a4:	f100 0a14 	add.w	sl, r0, #20
 80134a8:	f04f 0b00 	mov.w	fp, #0
 80134ac:	e7ba      	b.n	8013424 <__gethex+0x1e4>
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	42b3      	cmp	r3, r6
 80134b2:	dd73      	ble.n	801359c <__gethex+0x35c>
 80134b4:	1b9e      	subs	r6, r3, r6
 80134b6:	42b5      	cmp	r5, r6
 80134b8:	dc34      	bgt.n	8013524 <__gethex+0x2e4>
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	2b02      	cmp	r3, #2
 80134be:	d023      	beq.n	8013508 <__gethex+0x2c8>
 80134c0:	2b03      	cmp	r3, #3
 80134c2:	d025      	beq.n	8013510 <__gethex+0x2d0>
 80134c4:	2b01      	cmp	r3, #1
 80134c6:	d115      	bne.n	80134f4 <__gethex+0x2b4>
 80134c8:	42b5      	cmp	r5, r6
 80134ca:	d113      	bne.n	80134f4 <__gethex+0x2b4>
 80134cc:	2d01      	cmp	r5, #1
 80134ce:	d10b      	bne.n	80134e8 <__gethex+0x2a8>
 80134d0:	9a02      	ldr	r2, [sp, #8]
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	6013      	str	r3, [r2, #0]
 80134d6:	2301      	movs	r3, #1
 80134d8:	6123      	str	r3, [r4, #16]
 80134da:	f8ca 3000 	str.w	r3, [sl]
 80134de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80134e0:	f04f 0862 	mov.w	r8, #98	; 0x62
 80134e4:	601c      	str	r4, [r3, #0]
 80134e6:	e735      	b.n	8013354 <__gethex+0x114>
 80134e8:	1e69      	subs	r1, r5, #1
 80134ea:	4620      	mov	r0, r4
 80134ec:	f7fe fbcf 	bl	8011c8e <__any_on>
 80134f0:	2800      	cmp	r0, #0
 80134f2:	d1ed      	bne.n	80134d0 <__gethex+0x290>
 80134f4:	4621      	mov	r1, r4
 80134f6:	4648      	mov	r0, r9
 80134f8:	f7fd ff88 	bl	801140c <_Bfree>
 80134fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80134fe:	2300      	movs	r3, #0
 8013500:	6013      	str	r3, [r2, #0]
 8013502:	f04f 0850 	mov.w	r8, #80	; 0x50
 8013506:	e725      	b.n	8013354 <__gethex+0x114>
 8013508:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801350a:	2b00      	cmp	r3, #0
 801350c:	d1f2      	bne.n	80134f4 <__gethex+0x2b4>
 801350e:	e7df      	b.n	80134d0 <__gethex+0x290>
 8013510:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013512:	2b00      	cmp	r3, #0
 8013514:	d1dc      	bne.n	80134d0 <__gethex+0x290>
 8013516:	e7ed      	b.n	80134f4 <__gethex+0x2b4>
 8013518:	08014bd4 	.word	0x08014bd4
 801351c:	08014a6a 	.word	0x08014a6a
 8013520:	08014c41 	.word	0x08014c41
 8013524:	f106 38ff 	add.w	r8, r6, #4294967295
 8013528:	f1bb 0f00 	cmp.w	fp, #0
 801352c:	d133      	bne.n	8013596 <__gethex+0x356>
 801352e:	f1b8 0f00 	cmp.w	r8, #0
 8013532:	d004      	beq.n	801353e <__gethex+0x2fe>
 8013534:	4641      	mov	r1, r8
 8013536:	4620      	mov	r0, r4
 8013538:	f7fe fba9 	bl	8011c8e <__any_on>
 801353c:	4683      	mov	fp, r0
 801353e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8013542:	2301      	movs	r3, #1
 8013544:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8013548:	f008 081f 	and.w	r8, r8, #31
 801354c:	fa03 f308 	lsl.w	r3, r3, r8
 8013550:	4213      	tst	r3, r2
 8013552:	4631      	mov	r1, r6
 8013554:	4620      	mov	r0, r4
 8013556:	bf18      	it	ne
 8013558:	f04b 0b02 	orrne.w	fp, fp, #2
 801355c:	1bad      	subs	r5, r5, r6
 801355e:	f7ff fe08 	bl	8013172 <rshift>
 8013562:	687e      	ldr	r6, [r7, #4]
 8013564:	f04f 0802 	mov.w	r8, #2
 8013568:	f1bb 0f00 	cmp.w	fp, #0
 801356c:	d04a      	beq.n	8013604 <__gethex+0x3c4>
 801356e:	68fb      	ldr	r3, [r7, #12]
 8013570:	2b02      	cmp	r3, #2
 8013572:	d016      	beq.n	80135a2 <__gethex+0x362>
 8013574:	2b03      	cmp	r3, #3
 8013576:	d018      	beq.n	80135aa <__gethex+0x36a>
 8013578:	2b01      	cmp	r3, #1
 801357a:	d109      	bne.n	8013590 <__gethex+0x350>
 801357c:	f01b 0f02 	tst.w	fp, #2
 8013580:	d006      	beq.n	8013590 <__gethex+0x350>
 8013582:	f8da 3000 	ldr.w	r3, [sl]
 8013586:	ea4b 0b03 	orr.w	fp, fp, r3
 801358a:	f01b 0f01 	tst.w	fp, #1
 801358e:	d10f      	bne.n	80135b0 <__gethex+0x370>
 8013590:	f048 0810 	orr.w	r8, r8, #16
 8013594:	e036      	b.n	8013604 <__gethex+0x3c4>
 8013596:	f04f 0b01 	mov.w	fp, #1
 801359a:	e7d0      	b.n	801353e <__gethex+0x2fe>
 801359c:	f04f 0801 	mov.w	r8, #1
 80135a0:	e7e2      	b.n	8013568 <__gethex+0x328>
 80135a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80135a4:	f1c3 0301 	rsb	r3, r3, #1
 80135a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80135aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d0ef      	beq.n	8013590 <__gethex+0x350>
 80135b0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80135b4:	f104 0214 	add.w	r2, r4, #20
 80135b8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80135bc:	9301      	str	r3, [sp, #4]
 80135be:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80135c2:	2300      	movs	r3, #0
 80135c4:	4694      	mov	ip, r2
 80135c6:	f852 1b04 	ldr.w	r1, [r2], #4
 80135ca:	f1b1 3fff 	cmp.w	r1, #4294967295
 80135ce:	d01e      	beq.n	801360e <__gethex+0x3ce>
 80135d0:	3101      	adds	r1, #1
 80135d2:	f8cc 1000 	str.w	r1, [ip]
 80135d6:	f1b8 0f02 	cmp.w	r8, #2
 80135da:	f104 0214 	add.w	r2, r4, #20
 80135de:	d13d      	bne.n	801365c <__gethex+0x41c>
 80135e0:	683b      	ldr	r3, [r7, #0]
 80135e2:	3b01      	subs	r3, #1
 80135e4:	42ab      	cmp	r3, r5
 80135e6:	d10b      	bne.n	8013600 <__gethex+0x3c0>
 80135e8:	1169      	asrs	r1, r5, #5
 80135ea:	2301      	movs	r3, #1
 80135ec:	f005 051f 	and.w	r5, r5, #31
 80135f0:	fa03 f505 	lsl.w	r5, r3, r5
 80135f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80135f8:	421d      	tst	r5, r3
 80135fa:	bf18      	it	ne
 80135fc:	f04f 0801 	movne.w	r8, #1
 8013600:	f048 0820 	orr.w	r8, r8, #32
 8013604:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013606:	601c      	str	r4, [r3, #0]
 8013608:	9b02      	ldr	r3, [sp, #8]
 801360a:	601e      	str	r6, [r3, #0]
 801360c:	e6a2      	b.n	8013354 <__gethex+0x114>
 801360e:	4290      	cmp	r0, r2
 8013610:	f842 3c04 	str.w	r3, [r2, #-4]
 8013614:	d8d6      	bhi.n	80135c4 <__gethex+0x384>
 8013616:	68a2      	ldr	r2, [r4, #8]
 8013618:	4593      	cmp	fp, r2
 801361a:	db17      	blt.n	801364c <__gethex+0x40c>
 801361c:	6861      	ldr	r1, [r4, #4]
 801361e:	4648      	mov	r0, r9
 8013620:	3101      	adds	r1, #1
 8013622:	f7fd feb3 	bl	801138c <_Balloc>
 8013626:	4682      	mov	sl, r0
 8013628:	b918      	cbnz	r0, 8013632 <__gethex+0x3f2>
 801362a:	4b1b      	ldr	r3, [pc, #108]	; (8013698 <__gethex+0x458>)
 801362c:	4602      	mov	r2, r0
 801362e:	2184      	movs	r1, #132	; 0x84
 8013630:	e6b3      	b.n	801339a <__gethex+0x15a>
 8013632:	6922      	ldr	r2, [r4, #16]
 8013634:	3202      	adds	r2, #2
 8013636:	f104 010c 	add.w	r1, r4, #12
 801363a:	0092      	lsls	r2, r2, #2
 801363c:	300c      	adds	r0, #12
 801363e:	f7fc fef9 	bl	8010434 <memcpy>
 8013642:	4621      	mov	r1, r4
 8013644:	4648      	mov	r0, r9
 8013646:	f7fd fee1 	bl	801140c <_Bfree>
 801364a:	4654      	mov	r4, sl
 801364c:	6922      	ldr	r2, [r4, #16]
 801364e:	1c51      	adds	r1, r2, #1
 8013650:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8013654:	6121      	str	r1, [r4, #16]
 8013656:	2101      	movs	r1, #1
 8013658:	6151      	str	r1, [r2, #20]
 801365a:	e7bc      	b.n	80135d6 <__gethex+0x396>
 801365c:	6921      	ldr	r1, [r4, #16]
 801365e:	4559      	cmp	r1, fp
 8013660:	dd0b      	ble.n	801367a <__gethex+0x43a>
 8013662:	2101      	movs	r1, #1
 8013664:	4620      	mov	r0, r4
 8013666:	f7ff fd84 	bl	8013172 <rshift>
 801366a:	68bb      	ldr	r3, [r7, #8]
 801366c:	3601      	adds	r6, #1
 801366e:	42b3      	cmp	r3, r6
 8013670:	f6ff aedb 	blt.w	801342a <__gethex+0x1ea>
 8013674:	f04f 0801 	mov.w	r8, #1
 8013678:	e7c2      	b.n	8013600 <__gethex+0x3c0>
 801367a:	f015 051f 	ands.w	r5, r5, #31
 801367e:	d0f9      	beq.n	8013674 <__gethex+0x434>
 8013680:	9b01      	ldr	r3, [sp, #4]
 8013682:	441a      	add	r2, r3
 8013684:	f1c5 0520 	rsb	r5, r5, #32
 8013688:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801368c:	f7fd ff70 	bl	8011570 <__hi0bits>
 8013690:	42a8      	cmp	r0, r5
 8013692:	dbe6      	blt.n	8013662 <__gethex+0x422>
 8013694:	e7ee      	b.n	8013674 <__gethex+0x434>
 8013696:	bf00      	nop
 8013698:	08014a6a 	.word	0x08014a6a

0801369c <L_shift>:
 801369c:	f1c2 0208 	rsb	r2, r2, #8
 80136a0:	0092      	lsls	r2, r2, #2
 80136a2:	b570      	push	{r4, r5, r6, lr}
 80136a4:	f1c2 0620 	rsb	r6, r2, #32
 80136a8:	6843      	ldr	r3, [r0, #4]
 80136aa:	6804      	ldr	r4, [r0, #0]
 80136ac:	fa03 f506 	lsl.w	r5, r3, r6
 80136b0:	432c      	orrs	r4, r5
 80136b2:	40d3      	lsrs	r3, r2
 80136b4:	6004      	str	r4, [r0, #0]
 80136b6:	f840 3f04 	str.w	r3, [r0, #4]!
 80136ba:	4288      	cmp	r0, r1
 80136bc:	d3f4      	bcc.n	80136a8 <L_shift+0xc>
 80136be:	bd70      	pop	{r4, r5, r6, pc}

080136c0 <__match>:
 80136c0:	b530      	push	{r4, r5, lr}
 80136c2:	6803      	ldr	r3, [r0, #0]
 80136c4:	3301      	adds	r3, #1
 80136c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80136ca:	b914      	cbnz	r4, 80136d2 <__match+0x12>
 80136cc:	6003      	str	r3, [r0, #0]
 80136ce:	2001      	movs	r0, #1
 80136d0:	bd30      	pop	{r4, r5, pc}
 80136d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80136d6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80136da:	2d19      	cmp	r5, #25
 80136dc:	bf98      	it	ls
 80136de:	3220      	addls	r2, #32
 80136e0:	42a2      	cmp	r2, r4
 80136e2:	d0f0      	beq.n	80136c6 <__match+0x6>
 80136e4:	2000      	movs	r0, #0
 80136e6:	e7f3      	b.n	80136d0 <__match+0x10>

080136e8 <__hexnan>:
 80136e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136ec:	680b      	ldr	r3, [r1, #0]
 80136ee:	6801      	ldr	r1, [r0, #0]
 80136f0:	115e      	asrs	r6, r3, #5
 80136f2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80136f6:	f013 031f 	ands.w	r3, r3, #31
 80136fa:	b087      	sub	sp, #28
 80136fc:	bf18      	it	ne
 80136fe:	3604      	addne	r6, #4
 8013700:	2500      	movs	r5, #0
 8013702:	1f37      	subs	r7, r6, #4
 8013704:	4682      	mov	sl, r0
 8013706:	4690      	mov	r8, r2
 8013708:	9301      	str	r3, [sp, #4]
 801370a:	f846 5c04 	str.w	r5, [r6, #-4]
 801370e:	46b9      	mov	r9, r7
 8013710:	463c      	mov	r4, r7
 8013712:	9502      	str	r5, [sp, #8]
 8013714:	46ab      	mov	fp, r5
 8013716:	784a      	ldrb	r2, [r1, #1]
 8013718:	1c4b      	adds	r3, r1, #1
 801371a:	9303      	str	r3, [sp, #12]
 801371c:	b342      	cbz	r2, 8013770 <__hexnan+0x88>
 801371e:	4610      	mov	r0, r2
 8013720:	9105      	str	r1, [sp, #20]
 8013722:	9204      	str	r2, [sp, #16]
 8013724:	f7ff fd77 	bl	8013216 <__hexdig_fun>
 8013728:	2800      	cmp	r0, #0
 801372a:	d14f      	bne.n	80137cc <__hexnan+0xe4>
 801372c:	9a04      	ldr	r2, [sp, #16]
 801372e:	9905      	ldr	r1, [sp, #20]
 8013730:	2a20      	cmp	r2, #32
 8013732:	d818      	bhi.n	8013766 <__hexnan+0x7e>
 8013734:	9b02      	ldr	r3, [sp, #8]
 8013736:	459b      	cmp	fp, r3
 8013738:	dd13      	ble.n	8013762 <__hexnan+0x7a>
 801373a:	454c      	cmp	r4, r9
 801373c:	d206      	bcs.n	801374c <__hexnan+0x64>
 801373e:	2d07      	cmp	r5, #7
 8013740:	dc04      	bgt.n	801374c <__hexnan+0x64>
 8013742:	462a      	mov	r2, r5
 8013744:	4649      	mov	r1, r9
 8013746:	4620      	mov	r0, r4
 8013748:	f7ff ffa8 	bl	801369c <L_shift>
 801374c:	4544      	cmp	r4, r8
 801374e:	d950      	bls.n	80137f2 <__hexnan+0x10a>
 8013750:	2300      	movs	r3, #0
 8013752:	f1a4 0904 	sub.w	r9, r4, #4
 8013756:	f844 3c04 	str.w	r3, [r4, #-4]
 801375a:	f8cd b008 	str.w	fp, [sp, #8]
 801375e:	464c      	mov	r4, r9
 8013760:	461d      	mov	r5, r3
 8013762:	9903      	ldr	r1, [sp, #12]
 8013764:	e7d7      	b.n	8013716 <__hexnan+0x2e>
 8013766:	2a29      	cmp	r2, #41	; 0x29
 8013768:	d155      	bne.n	8013816 <__hexnan+0x12e>
 801376a:	3102      	adds	r1, #2
 801376c:	f8ca 1000 	str.w	r1, [sl]
 8013770:	f1bb 0f00 	cmp.w	fp, #0
 8013774:	d04f      	beq.n	8013816 <__hexnan+0x12e>
 8013776:	454c      	cmp	r4, r9
 8013778:	d206      	bcs.n	8013788 <__hexnan+0xa0>
 801377a:	2d07      	cmp	r5, #7
 801377c:	dc04      	bgt.n	8013788 <__hexnan+0xa0>
 801377e:	462a      	mov	r2, r5
 8013780:	4649      	mov	r1, r9
 8013782:	4620      	mov	r0, r4
 8013784:	f7ff ff8a 	bl	801369c <L_shift>
 8013788:	4544      	cmp	r4, r8
 801378a:	d934      	bls.n	80137f6 <__hexnan+0x10e>
 801378c:	f1a8 0204 	sub.w	r2, r8, #4
 8013790:	4623      	mov	r3, r4
 8013792:	f853 1b04 	ldr.w	r1, [r3], #4
 8013796:	f842 1f04 	str.w	r1, [r2, #4]!
 801379a:	429f      	cmp	r7, r3
 801379c:	d2f9      	bcs.n	8013792 <__hexnan+0xaa>
 801379e:	1b3b      	subs	r3, r7, r4
 80137a0:	f023 0303 	bic.w	r3, r3, #3
 80137a4:	3304      	adds	r3, #4
 80137a6:	3e03      	subs	r6, #3
 80137a8:	3401      	adds	r4, #1
 80137aa:	42a6      	cmp	r6, r4
 80137ac:	bf38      	it	cc
 80137ae:	2304      	movcc	r3, #4
 80137b0:	4443      	add	r3, r8
 80137b2:	2200      	movs	r2, #0
 80137b4:	f843 2b04 	str.w	r2, [r3], #4
 80137b8:	429f      	cmp	r7, r3
 80137ba:	d2fb      	bcs.n	80137b4 <__hexnan+0xcc>
 80137bc:	683b      	ldr	r3, [r7, #0]
 80137be:	b91b      	cbnz	r3, 80137c8 <__hexnan+0xe0>
 80137c0:	4547      	cmp	r7, r8
 80137c2:	d126      	bne.n	8013812 <__hexnan+0x12a>
 80137c4:	2301      	movs	r3, #1
 80137c6:	603b      	str	r3, [r7, #0]
 80137c8:	2005      	movs	r0, #5
 80137ca:	e025      	b.n	8013818 <__hexnan+0x130>
 80137cc:	3501      	adds	r5, #1
 80137ce:	2d08      	cmp	r5, #8
 80137d0:	f10b 0b01 	add.w	fp, fp, #1
 80137d4:	dd06      	ble.n	80137e4 <__hexnan+0xfc>
 80137d6:	4544      	cmp	r4, r8
 80137d8:	d9c3      	bls.n	8013762 <__hexnan+0x7a>
 80137da:	2300      	movs	r3, #0
 80137dc:	f844 3c04 	str.w	r3, [r4, #-4]
 80137e0:	2501      	movs	r5, #1
 80137e2:	3c04      	subs	r4, #4
 80137e4:	6822      	ldr	r2, [r4, #0]
 80137e6:	f000 000f 	and.w	r0, r0, #15
 80137ea:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80137ee:	6020      	str	r0, [r4, #0]
 80137f0:	e7b7      	b.n	8013762 <__hexnan+0x7a>
 80137f2:	2508      	movs	r5, #8
 80137f4:	e7b5      	b.n	8013762 <__hexnan+0x7a>
 80137f6:	9b01      	ldr	r3, [sp, #4]
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d0df      	beq.n	80137bc <__hexnan+0xd4>
 80137fc:	f1c3 0320 	rsb	r3, r3, #32
 8013800:	f04f 32ff 	mov.w	r2, #4294967295
 8013804:	40da      	lsrs	r2, r3
 8013806:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801380a:	4013      	ands	r3, r2
 801380c:	f846 3c04 	str.w	r3, [r6, #-4]
 8013810:	e7d4      	b.n	80137bc <__hexnan+0xd4>
 8013812:	3f04      	subs	r7, #4
 8013814:	e7d2      	b.n	80137bc <__hexnan+0xd4>
 8013816:	2004      	movs	r0, #4
 8013818:	b007      	add	sp, #28
 801381a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801381e <__ascii_mbtowc>:
 801381e:	b082      	sub	sp, #8
 8013820:	b901      	cbnz	r1, 8013824 <__ascii_mbtowc+0x6>
 8013822:	a901      	add	r1, sp, #4
 8013824:	b142      	cbz	r2, 8013838 <__ascii_mbtowc+0x1a>
 8013826:	b14b      	cbz	r3, 801383c <__ascii_mbtowc+0x1e>
 8013828:	7813      	ldrb	r3, [r2, #0]
 801382a:	600b      	str	r3, [r1, #0]
 801382c:	7812      	ldrb	r2, [r2, #0]
 801382e:	1e10      	subs	r0, r2, #0
 8013830:	bf18      	it	ne
 8013832:	2001      	movne	r0, #1
 8013834:	b002      	add	sp, #8
 8013836:	4770      	bx	lr
 8013838:	4610      	mov	r0, r2
 801383a:	e7fb      	b.n	8013834 <__ascii_mbtowc+0x16>
 801383c:	f06f 0001 	mvn.w	r0, #1
 8013840:	e7f8      	b.n	8013834 <__ascii_mbtowc+0x16>

08013842 <_realloc_r>:
 8013842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013846:	4680      	mov	r8, r0
 8013848:	4614      	mov	r4, r2
 801384a:	460e      	mov	r6, r1
 801384c:	b921      	cbnz	r1, 8013858 <_realloc_r+0x16>
 801384e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013852:	4611      	mov	r1, r2
 8013854:	f7fd bd0e 	b.w	8011274 <_malloc_r>
 8013858:	b92a      	cbnz	r2, 8013866 <_realloc_r+0x24>
 801385a:	f7fd fc97 	bl	801118c <_free_r>
 801385e:	4625      	mov	r5, r4
 8013860:	4628      	mov	r0, r5
 8013862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013866:	f000 f86d 	bl	8013944 <_malloc_usable_size_r>
 801386a:	4284      	cmp	r4, r0
 801386c:	4607      	mov	r7, r0
 801386e:	d802      	bhi.n	8013876 <_realloc_r+0x34>
 8013870:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013874:	d812      	bhi.n	801389c <_realloc_r+0x5a>
 8013876:	4621      	mov	r1, r4
 8013878:	4640      	mov	r0, r8
 801387a:	f7fd fcfb 	bl	8011274 <_malloc_r>
 801387e:	4605      	mov	r5, r0
 8013880:	2800      	cmp	r0, #0
 8013882:	d0ed      	beq.n	8013860 <_realloc_r+0x1e>
 8013884:	42bc      	cmp	r4, r7
 8013886:	4622      	mov	r2, r4
 8013888:	4631      	mov	r1, r6
 801388a:	bf28      	it	cs
 801388c:	463a      	movcs	r2, r7
 801388e:	f7fc fdd1 	bl	8010434 <memcpy>
 8013892:	4631      	mov	r1, r6
 8013894:	4640      	mov	r0, r8
 8013896:	f7fd fc79 	bl	801118c <_free_r>
 801389a:	e7e1      	b.n	8013860 <_realloc_r+0x1e>
 801389c:	4635      	mov	r5, r6
 801389e:	e7df      	b.n	8013860 <_realloc_r+0x1e>

080138a0 <__ascii_wctomb>:
 80138a0:	b149      	cbz	r1, 80138b6 <__ascii_wctomb+0x16>
 80138a2:	2aff      	cmp	r2, #255	; 0xff
 80138a4:	bf85      	ittet	hi
 80138a6:	238a      	movhi	r3, #138	; 0x8a
 80138a8:	6003      	strhi	r3, [r0, #0]
 80138aa:	700a      	strbls	r2, [r1, #0]
 80138ac:	f04f 30ff 	movhi.w	r0, #4294967295
 80138b0:	bf98      	it	ls
 80138b2:	2001      	movls	r0, #1
 80138b4:	4770      	bx	lr
 80138b6:	4608      	mov	r0, r1
 80138b8:	4770      	bx	lr

080138ba <_raise_r>:
 80138ba:	291f      	cmp	r1, #31
 80138bc:	b538      	push	{r3, r4, r5, lr}
 80138be:	4604      	mov	r4, r0
 80138c0:	460d      	mov	r5, r1
 80138c2:	d904      	bls.n	80138ce <_raise_r+0x14>
 80138c4:	2316      	movs	r3, #22
 80138c6:	6003      	str	r3, [r0, #0]
 80138c8:	f04f 30ff 	mov.w	r0, #4294967295
 80138cc:	bd38      	pop	{r3, r4, r5, pc}
 80138ce:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80138d0:	b112      	cbz	r2, 80138d8 <_raise_r+0x1e>
 80138d2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80138d6:	b94b      	cbnz	r3, 80138ec <_raise_r+0x32>
 80138d8:	4620      	mov	r0, r4
 80138da:	f000 f831 	bl	8013940 <_getpid_r>
 80138de:	462a      	mov	r2, r5
 80138e0:	4601      	mov	r1, r0
 80138e2:	4620      	mov	r0, r4
 80138e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80138e8:	f000 b818 	b.w	801391c <_kill_r>
 80138ec:	2b01      	cmp	r3, #1
 80138ee:	d00a      	beq.n	8013906 <_raise_r+0x4c>
 80138f0:	1c59      	adds	r1, r3, #1
 80138f2:	d103      	bne.n	80138fc <_raise_r+0x42>
 80138f4:	2316      	movs	r3, #22
 80138f6:	6003      	str	r3, [r0, #0]
 80138f8:	2001      	movs	r0, #1
 80138fa:	e7e7      	b.n	80138cc <_raise_r+0x12>
 80138fc:	2400      	movs	r4, #0
 80138fe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013902:	4628      	mov	r0, r5
 8013904:	4798      	blx	r3
 8013906:	2000      	movs	r0, #0
 8013908:	e7e0      	b.n	80138cc <_raise_r+0x12>
	...

0801390c <raise>:
 801390c:	4b02      	ldr	r3, [pc, #8]	; (8013918 <raise+0xc>)
 801390e:	4601      	mov	r1, r0
 8013910:	6818      	ldr	r0, [r3, #0]
 8013912:	f7ff bfd2 	b.w	80138ba <_raise_r>
 8013916:	bf00      	nop
 8013918:	200000d0 	.word	0x200000d0

0801391c <_kill_r>:
 801391c:	b538      	push	{r3, r4, r5, lr}
 801391e:	4d07      	ldr	r5, [pc, #28]	; (801393c <_kill_r+0x20>)
 8013920:	2300      	movs	r3, #0
 8013922:	4604      	mov	r4, r0
 8013924:	4608      	mov	r0, r1
 8013926:	4611      	mov	r1, r2
 8013928:	602b      	str	r3, [r5, #0]
 801392a:	f7f2 fb41 	bl	8005fb0 <_kill>
 801392e:	1c43      	adds	r3, r0, #1
 8013930:	d102      	bne.n	8013938 <_kill_r+0x1c>
 8013932:	682b      	ldr	r3, [r5, #0]
 8013934:	b103      	cbz	r3, 8013938 <_kill_r+0x1c>
 8013936:	6023      	str	r3, [r4, #0]
 8013938:	bd38      	pop	{r3, r4, r5, pc}
 801393a:	bf00      	nop
 801393c:	20003f20 	.word	0x20003f20

08013940 <_getpid_r>:
 8013940:	f7f2 bb2e 	b.w	8005fa0 <_getpid>

08013944 <_malloc_usable_size_r>:
 8013944:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013948:	1f18      	subs	r0, r3, #4
 801394a:	2b00      	cmp	r3, #0
 801394c:	bfbc      	itt	lt
 801394e:	580b      	ldrlt	r3, [r1, r0]
 8013950:	18c0      	addlt	r0, r0, r3
 8013952:	4770      	bx	lr

08013954 <_init>:
 8013954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013956:	bf00      	nop
 8013958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801395a:	bc08      	pop	{r3}
 801395c:	469e      	mov	lr, r3
 801395e:	4770      	bx	lr

08013960 <_fini>:
 8013960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013962:	bf00      	nop
 8013964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013966:	bc08      	pop	{r3}
 8013968:	469e      	mov	lr, r3
 801396a:	4770      	bx	lr
